#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\AccessoryFeeList.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "702d03f8692a59d737245bddfc58202f6295e6de"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\Pages\AccessoryFeeList.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\Pages\AccessoryFeeList.razor"
using HassyaAllrightCloud.Domain.Dto.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\Pages\AccessoryFeeList.razor"
using HassyaAllrightCloud.IService.CommonComponents;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/accessoryfeelist")]
    public partial class AccessoryFeeList : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 480 "E:\Project\HassyaAllrightCloud\Pages\AccessoryFeeList.razor"
       

    private AccessoryFeeListData accessoryFeeListFormData = new AccessoryFeeListData();
    private EditContext formContext;

    private List<PaperSize> PaperSizeOptions = new List<PaperSize>();
    private List<SelectedOption<CSV_Group>> CsvGroupSymbolOptions = new List<SelectedOption<CSV_Group>>();
    private List<SelectedOption<CSV_Header>> CsvHeaderOptions = new List<SelectedOption<CSV_Header>>();
    private List<SelectedOption<CSV_Delimiter>> CsvDelimiterOptions = new List<SelectedOption<CSV_Delimiter>>();
    private List<SelectedOption<BreakReportPage>> BreakPageOptions = new List<SelectedOption<BreakReportPage>>();
    private List<SelectedOption<InvoiceTypeOption>> InvoiceTypes = new List<SelectedOption<InvoiceTypeOption>>();
    private List<SelectedOption<ReportType>> ReportTypes = new List<SelectedOption<ReportType>>();

    private List<ReservationClassComponentData> BookingTypes = new List<ReservationClassComponentData>();
    private List<LoadCustomerList> Customers = new List<LoadCustomerList>();
    private List<CompanyData> Companies = new List<CompanyData>();
    private List<LoadSaleBranch> Branches = new List<LoadSaleBranch>();
    private List<LoadFutai> Futais = new List<LoadFutai>();
    private List<LoadFutaiType> FutaiFeeTypes = new List<LoadFutaiType>();
    private IEnumerable<LoadFutaiType> FutaiFeeTypeSelecteds = new List<LoadFutaiType>();
    private string DisplayFutaiFeeTypeCmb = string.Empty;

    private bool IsFutaiFeeTypeSelectedAll = true;
    private bool notifyNotFound = false;
    private bool isLoading = true;
    private bool isShowPreviewReport = false;
    private bool isExportable = true;
    private bool isShowCheckBoxForFuttaiType = true;
    private string filterConditionFormName = "KJ1700";
    private bool isFilterApply;
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    private string PreviewReportUrl = string.Empty;

    string baseUrl;

    #region Localization string

    string NotFound;
    string FuttaiTypeEmpty;

    private List<CustomerComponentGyosyaData> listGyosya { get; set; }
    private List<CustomerComponentTokiskData> listTokisk { get; set; }
    private List<CustomerComponentTokiStData> listTokist { get; set; }

    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        NotFound = Lang["BI_T0010"];
        FuttaiTypeEmpty = Lang["BI_T003"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }
    #endregion

    #region Component Lifecycle

    /// <summary>
    /// <inheritdoc/>
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        baseUrl = AppSettingsService.GetBaseUrl();
        formContext = new EditContext(accessoryFeeListFormData);
        formContext.OnValidationStateChanged += OnValidationStateChanged;
        LocalizationInit();

        var taskReservation = _service.GetListReservationClass();
        var taskGyosya = _customerService.GetListGyosya();
        var taskTokisk = _customerService.GetListTokisk();
        var taskTokist = _customerService.GetListTokiSt();

        await Task.WhenAll(taskReservation, taskGyosya, taskTokisk, taskTokist);

        accessoryFeeListFormData.BookingTypes = taskReservation.Result;
        BookingTypes = taskReservation.Result;
        listGyosya = taskGyosya.Result;
        listTokisk = taskTokisk.Result;
        listTokist = taskTokist.Result;

        LoadStaticData();
        await LoadCompany();
        await LoadBranch();
        await LoadFutai();
        await LoadFutaiType();

        await ApplyFilter();

        isLoading = false;
    }


    #endregion

    #region Load init accessoryFeeListFormData
    private void LoadStaticData()
    {

        PaperSizeOptions = new List<PaperSize>
        {
            PaperSize.A3,
            PaperSize.A4,
            PaperSize.B4,
        };

        CsvHeaderOptions = new List<SelectedOption<CSV_Header>>
        {
            new SelectedOption<CSV_Header>{Option = CSV_Header.IncludeHeader, DisplayName= Lang["CsvHadHeader"] },
            new SelectedOption<CSV_Header>{Option = CSV_Header.WithoutHeader, DisplayName= Lang["CsvWithoutHeader"] },
        };

        CsvGroupSymbolOptions = new List<SelectedOption<CSV_Group>>
        {
            new SelectedOption<CSV_Group>{Option = CSV_Group.QuotationMarks, DisplayName= Lang["CsvGrQuotesMarks"]},
            new SelectedOption<CSV_Group>{Option = CSV_Group.WithoutQuotes, DisplayName= Lang["CsvGrWithoutQuotes"]},
        };

        CsvDelimiterOptions = new List<SelectedOption<CSV_Delimiter>>
        {
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Comma, DisplayName= Lang["CsvSpaceComma"]},
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Semicolon, DisplayName= Lang["CsvSpaceSemicolon"]},
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Space, DisplayName= Lang["CsvSpacing"]},
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.FixedLength, DisplayName= Lang["CsvSpaceFixedLength"]},
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Other, DisplayName= Lang["CsvSpaceOther"]},
        };

        BreakPageOptions = new List<SelectedOption<BreakReportPage>>
        {
            new SelectedOption<BreakReportPage>{Option = BreakReportPage.None, DisplayName = Lang["BreakNormal"]},
            new SelectedOption<BreakReportPage>{Option = BreakReportPage.Customer, DisplayName = Lang["BreakCustomer"]},
        };

        InvoiceTypes = new List<SelectedOption<InvoiceTypeOption>>
        {
            new SelectedOption<InvoiceTypeOption>{Option = InvoiceTypeOption.All, DisplayName = Constants.SelectedAll},
            //null,
            new SelectedOption<InvoiceTypeOption>{Option = InvoiceTypeOption.Liquidate, DisplayName = Lang["Liquidate"]},
            new SelectedOption<InvoiceTypeOption>{Option = InvoiceTypeOption.NotSolve, DisplayName = Lang["NotSolve"]},

        };

        ReportTypes = new List<SelectedOption<ReportType>>
        {
            new SelectedOption<ReportType>{ Option = ReportType.Detail, DisplayName = Lang["Detail"]},
            new SelectedOption<ReportType>{ Option = ReportType.Summary, DisplayName = Lang["Summary"]},
        };

        accessoryFeeListFormData.PaperSize = PaperSizeOptions.FirstOrDefault();
        accessoryFeeListFormData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.FirstOrDefault();
        accessoryFeeListFormData.CsvConfigOption.Header = CsvHeaderOptions.FirstOrDefault();
        accessoryFeeListFormData.CsvConfigOption.Delimiter = CsvDelimiterOptions.FirstOrDefault();
        accessoryFeeListFormData.BreakPage = BreakPageOptions.FirstOrDefault();
        accessoryFeeListFormData.InvoiceType = InvoiceTypes.FirstOrDefault();

        accessoryFeeListFormData.ReportType = ReportTypes.FirstOrDefault();

        accessoryFeeListFormData.DateTypeText = Lang["date_of_dispatch"];
    }

    private async Task LoadCompany()
    {
        Companies = await CompanyDataService.GetCompanyByTenantIdAsync(new ClaimModel().TenantID);
        InsertSelectAll(Companies);
        //InsertSelectAll(Companies, _ => _., new CompanyData { IsSelectedAll = true, CompanyCdSeq = 0 });

        accessoryFeeListFormData.Company = Companies.FirstOrDefault();
    }

    private async Task LoadBranch()
    {
        if (accessoryFeeListFormData.Company is null)
        {
            Branches = await BranchDataService.GetBranchDataByTenantId(new ClaimModel().TenantID);
        }
        else
        {
            Branches = await BranchDataService.GetBranchDataByCompany(accessoryFeeListFormData.Company.CompanyCdSeq, new ClaimModel().TenantID);
        }

        InsertSelectAll(Branches);
        //InsertSelectAll(Branches, _ => _.IsSelectedAll, new LoadSaleBranch { IsSelectedAll = true, EigyoCdSeq = 0 });

        if (!isFilterApply)
        {
            accessoryFeeListFormData.BranchStart = Branches.FirstOrDefault();
            accessoryFeeListFormData.BranchEnd = Branches.FirstOrDefault();
        }
    }

    private async Task LoadFutai()
    {
        Futais = await HttpClient.GetJsonAsync<List<LoadFutai>>(baseUrl + "/api/BookingIncidental/LoadFutai?tenantId=" + new ClaimModel().TenantID);
        InsertSelectAll(Futais);
        //InsertSelectAll(Futais, _ => _.IsSelectedAll, new LoadFutai { IsSelectedAll = true, FutaiCdSeq = 0 });

        accessoryFeeListFormData.FutaiStart = Futais.FirstOrDefault();
        accessoryFeeListFormData.FutaiEnd = Futais.FirstOrDefault();
    }

    private async Task LoadFutaiType()
    {
        FutaiFeeTypes = await AccessoryFeeListReportService.GetFutaiTypeByTenantIdAsync(new ClaimModel().TenantID);

        if (FutaiFeeTypes.Any())
        {
            InsertSelectAll(FutaiFeeTypes, _ => _.IsSelectedAll, new LoadFutaiType { IsSelectedAll = true, FutaiCdSeq = 0 });
            accessoryFeeListFormData.FutaiFeeTypes = FutaiFeeTypes;

            FutaiFeeTypeSelecteds = FutaiFeeTypes;
            DisplayFutaiFeeTypeCmb = $"{Constants.SelectedAll}";
        }
        else
        {
            isShowCheckBoxForFuttaiType = false;

            DisplayFutaiFeeTypeCmb = FuttaiTypeEmpty;
        }
    }

    private void InsertSelectAll<T>(List<T> source, Func<T, bool> predicate, T emptyObj = null) where T : class
    {
        if (source.Any() && !source.Where(predicate).Any())
            source.Insert(0, emptyObj != null ? emptyObj : (T)Activator.CreateInstance(typeof(T))); // Insert a item to mark choose all in first line
    }
    private void InsertSelectAll<T>(List<T> source) where T : class
    {
        if (source.Any(item => item is null))
            return;

        source.Insert(0, null);
    }
    #endregion

    #region value changed method

    private void OnDateTypeClicked(MouseEventArgs e, DateType dateType)
    {
        accessoryFeeListFormData.DateType = dateType;

        switch (dateType)
        {
            case DateType.Dispatch:
                accessoryFeeListFormData.DateTypeText = @Lang["date_of_dispatch"];
                break;
            case DateType.Arrival:
                accessoryFeeListFormData.DateTypeText = @Lang["date_of_arrival"];
                break;
            case DateType.Occurrence:
                accessoryFeeListFormData.DateTypeText = @Lang["date_of_occurrence"];
                break;
            default:
                break;
        }

        StateHasChanged();
    }

    private void OnStartDateChanged(DateTime newDate)
    {
        accessoryFeeListFormData.StartDate = newDate;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnEndDateChanged(DateTime newDate)
    {
        accessoryFeeListFormData.EndDate = newDate;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnInvoiceTypeChanged(SelectedOption<InvoiceTypeOption> type)
    {
        accessoryFeeListFormData.InvoiceType = type;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnFutaiFeeTypesChanged(IEnumerable<LoadFutaiType> futaiFeeTypes)
    {
        int newCount = futaiFeeTypes.Count();
        int maxCount = FutaiFeeTypes.Count();

        FutaiFeeTypeSelecteds = futaiFeeTypes;

        bool isContainSelectAll = FutaiFeeTypeSelecteds.Where(_ => _.IsSelectedAll).Any();
        if (!isFilterApply)
        {
            if (IsFutaiFeeTypeSelectedAll == true)
            {
                if (!isContainSelectAll)
                {
                    FutaiFeeTypeSelecteds = FutaiFeeTypeSelecteds.Take(0);
                    IsFutaiFeeTypeSelectedAll = false;
                }
                else if (isContainSelectAll && newCount < maxCount)
                {
                    FutaiFeeTypeSelecteds = FutaiFeeTypeSelecteds.Where(_ => !_.IsSelectedAll);
                    IsFutaiFeeTypeSelectedAll = false;
                }
            }
            else
            {
                if (isContainSelectAll)
                {
                    FutaiFeeTypeSelecteds = FutaiFeeTypes;
                    IsFutaiFeeTypeSelectedAll = true;
                }
                else if (!isContainSelectAll && newCount == maxCount - 1)
                {
                    FutaiFeeTypeSelecteds = FutaiFeeTypes;
                    IsFutaiFeeTypeSelectedAll = true;
                }
            }
        }
        accessoryFeeListFormData.FutaiFeeTypes = FutaiFeeTypeSelecteds.ToList();

        if (newCount == 1 && (!FutaiFeeTypeSelecteds.FirstOrDefault()?.IsSelectedAll ?? false))
        {
            DisplayFutaiFeeTypeCmb = FutaiFeeTypeSelecteds.FirstOrDefault()?.CodeKbnNm ?? string.Empty;
        }
        else if (newCount == maxCount)
        {
            DisplayFutaiFeeTypeCmb = Constants.SelectedAll;
        }
        else
        {
            DisplayFutaiFeeTypeCmb = $"{Lang["Choices"]}: {newCount}";
        }

        if (!isFilterApply)
            StateHasChanged();

    }

    private void OnBookingTypeChanged(ReservationClassComponentData newType, bool isFrom = true)
    {
        bool isSelectAll = newType is null;//.BranchText.Equals(Constants.SelectedAll);
        if (isFrom)
        {
            accessoryFeeListFormData.BookingTypeStart = newType;
        }
        else
        {
            accessoryFeeListFormData.BookingTypeEnd = newType;
        }

        if (!isFilterApply) StateHasChanged();
    }

    private async Task OnCompanySelectedChanged(CompanyData newCompany)
    {
        accessoryFeeListFormData.Company = newCompany;

        await LoadBranch();

        formContext.Validate();

        if (!isFilterApply) StateHasChanged();
    }

    private void OnSaleBranchChanged(LoadSaleBranch newBranch, bool isFrom = true)
    {
        bool isSelectAll = newBranch is null;//.BranchText.Equals(Constants.SelectedAll);
        if (isFrom)
        {
            accessoryFeeListFormData.BranchStart = newBranch;
            if (!isFilterApply && isSelectAll)
            {
                accessoryFeeListFormData.BranchEnd = Branches.FirstOrDefault();
            }
        }
        else
        {
            accessoryFeeListFormData.BranchEnd = newBranch;
            if (!isFilterApply && isSelectAll)
            {
                accessoryFeeListFormData.BranchStart = Branches.FirstOrDefault();
            }
        }

        if (!isFilterApply) StateHasChanged();
    }

    private void OnUkeCdChanged(string newUkeCd, bool isFrom = true)
    {
        if (isFrom)
        {
            accessoryFeeListFormData.UkeCdFrom = newUkeCd;
        }
        else
        {
            accessoryFeeListFormData.UkeCdTo = newUkeCd;
        }

        if (!isFilterApply) StateHasChanged();
    }

    private void OnFutaiChanged(LoadFutai newFutai, bool isFrom = true)
    {
        bool isSelectAll = newFutai is null;//.IsSelectedAll;
        if (isFrom)
        {
            accessoryFeeListFormData.FutaiStart = newFutai;
            if (!isFilterApply && isSelectAll)
            {
                accessoryFeeListFormData.FutaiEnd = Futais.FirstOrDefault();
            }
        }
        else
        {
            accessoryFeeListFormData.FutaiEnd = newFutai;
            if (!isFilterApply && isSelectAll)
            {
                accessoryFeeListFormData.FutaiStart = Futais.FirstOrDefault();
            }
        }

        if (!isFilterApply) StateHasChanged();
    }

    private async Task ResetSearchOption()
    {
        isLoading = true;
        isExportable = true;

        accessoryFeeListFormData = new AccessoryFeeListData();
        accessoryFeeListFormData.BookingTypes = BookingTypes;

        await FilterServices.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName);

        await OnInitializedAsync();

        await InvokeAsync(StateHasChanged);
    }

    private void OnChangeGyosya(CustomerComponentGyosyaData value, bool isFrom = true)
    {
        if (isFrom)
            accessoryFeeListFormData.SelectedGyosyaStart = value;
        else
            accessoryFeeListFormData.SelectedGyosyaEnd = value;
        StateHasChanged();
    }

    private void OnChangeTokisk(CustomerComponentTokiskData value, bool isFrom = true)
    {
        if (isFrom)
            accessoryFeeListFormData.SelectedTokiskStart = value;
        else
            accessoryFeeListFormData.SelectedTokiskEnd = value;
        StateHasChanged();
    }

    private void OnChangeTokist(CustomerComponentTokiStData value, bool isFrom = true)
    {
        if (isFrom)
            accessoryFeeListFormData.SelectedTokistStart = value;
        else
            accessoryFeeListFormData.SelectedTokistEnd = value;
        StateHasChanged();
    }

    #region Print options
    private void OnReportTypeChanged(SelectedOption<ReportType> type)
    {
        accessoryFeeListFormData.ReportType = type;

        if (!isFilterApply) StateHasChanged();
    }

    private void OnPaperSizeChanged(PaperSize newSize)
    {
        accessoryFeeListFormData.PaperSize = newSize;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnPageBreakChanged(SelectedOption<BreakReportPage> breakOption)
    {
        accessoryFeeListFormData.BreakPage = breakOption;
        if (!isFilterApply) StateHasChanged();
    }

    #endregion

    #region CSV options
    private void OnCsvHeaderChanged(SelectedOption<CSV_Header> header)
    {
        accessoryFeeListFormData.CsvConfigOption.Header = header;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnGroupSymbolChanged(SelectedOption<CSV_Group> group)
    {
        accessoryFeeListFormData.CsvConfigOption.GroupSymbol = group;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnSeparatorChanged(SelectedOption<CSV_Delimiter> selectedItems)
    {
        if (accessoryFeeListFormData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.Other && selectedItems.Option != CSV_Delimiter.Other)
        {
            accessoryFeeListFormData.CsvConfigOption.DelimiterSymbol = string.Empty;
        }

        if (selectedItems.Option == CSV_Delimiter.FixedLength)
        {
            accessoryFeeListFormData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.Where(_ => _.Option == CSV_Group.WithoutQuotes).FirstOrDefault();
            accessoryFeeListFormData.CsvConfigOption.Header = CsvHeaderOptions.Where(_ => _.Option == CSV_Header.WithoutHeader).FirstOrDefault();
        }
        accessoryFeeListFormData.CsvConfigOption.Delimiter = selectedItems;

        if (!isFilterApply) StateHasChanged();
    }

    private void OnDelimiterTextChanged(string newValue)
    {
        accessoryFeeListFormData.CsvConfigOption.DelimiterSymbol = newValue;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnExportTypeClicked(MouseEventArgs e, OutputReportType exportType)
    {
        if (accessoryFeeListFormData.ExportType == OutputReportType.CSV && exportType != OutputReportType.CSV)
        {
            //Reset fields in CSV config form
            accessoryFeeListFormData.CsvConfigOption.DelimiterSymbol = string.Empty;
            accessoryFeeListFormData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.First();
            accessoryFeeListFormData.CsvConfigOption.Header = CsvHeaderOptions.First();
            accessoryFeeListFormData.CsvConfigOption.Delimiter = CsvDelimiterOptions.First();

            formContext.NotifyFieldChanged(FieldIdentifier.Create(() => accessoryFeeListFormData.CsvConfigOption.Delimiter.Option));
        }

        accessoryFeeListFormData.ExportType = exportType;
        if (!isFilterApply) StateHasChanged();
    }
    #endregion

    #endregion

    #region Export Action
    private async Task OnButtonReportClicked(MouseEventArgs args)
    {
        if (formContext.Validate())
        {
            switch (accessoryFeeListFormData.ExportType)
            {
                case OutputReportType.Preview:
                    await PreviewReport();
                    break;
                case OutputReportType.Print: //disable this feature
                    notifyNotFound = true;
                    break;
                case OutputReportType.ExportPdf:
                    await PDFReport();
                    break;
                case OutputReportType.CSV:
                    await CSVReport();
                    break;
                default:
                    break;
            }

            StateHasChanged();
        }
    }

    private async Task PreviewReport()
    {
        AccessoryFeeListReportSearchParams param = new AccessoryFeeListReportSearchParams
        {
            TenantId = new ClaimModel().TenantID,
            UserLoginId = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
            SearchCondition = accessoryFeeListFormData,
        };
        param.SearchCondition.FutaiFeeTypes = FutaiFeeTypeSelecteds.ToList();
        param.SearchCondition.BookingTypes = BookingTypes.Where(_ => _ != null).ToList();

        var rpData = await AccessoryFeeListReportService.GetAccessoryFeeListReportAsync(param);
        if (rpData.Any())
        {
            await SaveCurrentFilter();
            //PreviewReportUrl = EncryptHelper.EncryptToUrl(param);
            //isShowPreviewReport = true;
            param.SearchCondition.BookingTypes = null;
            var searchString = EncryptHelper.EncryptToUrl(param);
            await IJSRuntime.InvokeVoidAsync("open", "AccessoryFeeListReportPreview?searchString=" + searchString, "_blank");
            StateHasChanged();
        }
        else
        {
            notifyNotFound = true;
            StateHasChanged();
        }
    }

    private async Task PDFReport()
    {
        AccessoryFeeListReportSearchParams param = new AccessoryFeeListReportSearchParams
        {
            TenantId = new ClaimModel().TenantID,
            UserLoginId = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
            SearchCondition = accessoryFeeListFormData,
        };

        param.SearchCondition.BookingTypes = BookingTypes.Where(_ => _ != null).ToList();
        var data = await AccessoryFeeListReportService.GetAccessoryFeeListReportPagedAsync(param);

        if (data.Any() && data.FirstOrDefault().ReportDatas.Count > 1 && !data.FirstOrDefault().ReportDatas[0].IsSumRow)
        {
            await SaveCurrentFilter();
            DevExpress.XtraReports.UI.XtraReport report = new DevExpress.XtraReports.UI.XtraReport();

            switch (accessoryFeeListFormData.PaperSize)
            {
                case PaperSize.A3:
                    report = new Reports.ReportTemplate.AccessoryFeeList.AccessoryFeeListA3();
                    break;
                case PaperSize.A4:
                    report = new Reports.ReportTemplate.AccessoryFeeList.AccessoryFeeListA4();
                    break;
                case PaperSize.B4:
                    report = new Reports.ReportTemplate.AccessoryFeeList.AccessoryFeeListB4();
                    break;
                default:
                    break;
            }

            report.DataSource = data;
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                report.CreateDocument();
                using (MemoryStream ms = new MemoryStream())
                {
                    report.ExportToPdf(ms);

                    byte[] exportedFileBytes = ms.ToArray();
                    string myExportString = Convert.ToBase64String(exportedFileBytes);
                    IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", "AccessoryFeeListReport");
                }
            });
        }
        else
        {
            notifyNotFound = true;
        }
    }

    private async Task CSVReport()
    {
        // when export to csv File alway using detail mode
        AccessoryFeeListData accessoryFeeListData = new AccessoryFeeListData();
        accessoryFeeListData.SimpleCloneProperties(accessoryFeeListFormData);
        accessoryFeeListData.ReportType = ReportTypes.Where(_ => _.Option == ReportType.Detail).FirstOrDefault();

        //this temp path to check valid
        string path = string.Format("{0}/csv/{1}.csv", HostingEnvironment.WebRootPath, Guid.NewGuid());

        AccessoryFeeListReportSearchParams param = new AccessoryFeeListReportSearchParams
        {
            TenantId = new ClaimModel().TenantID,
            UserLoginId = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
            SearchCondition = accessoryFeeListData,
        };

        param.SearchCondition.BookingTypes = BookingTypes.Where(_ => _ != null).ToList();
        var reportData = await AccessoryFeeListReportService.GetAccessoryFeeListReportCsvAsync(param);

        if (reportData.Any())
        {
            await SaveCurrentFilter();
            var csvData = reportData.Cast<AccessoryFeeListExportData>().ToList();

            var result = CsvHelper.ExportCollectionToCsv(
                csvData,
                new CsvConfigOption
                {
                    FilePath = path.Substring(0, path.LastIndexOf("/")),
                    Delimiter = accessoryFeeListFormData.CsvConfigOption.Delimiter,
                    DelimiterSymbol = accessoryFeeListFormData.CsvConfigOption.DelimiterSymbol,
                    GroupSymbol = accessoryFeeListFormData.CsvConfigOption.GroupSymbol,
                    Header = accessoryFeeListFormData.CsvConfigOption.Header,
                },
                SetupHeaderCsvReport());

            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                string myExportString = Convert.ToBase64String(result);
                IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "csv", "AccessoryFeeListReport");
            });
        }
        else
        {
            notifyNotFound = true;
        }
    }

    #endregion


    #region Helper
    private void OnValidationStateChanged(object sender, ValidationStateChangedEventArgs args)
    {
        bool ctxIsInvalid = ((EditContext)sender).GetValidationMessages().Any();

        isExportable = !ctxIsInvalid;
    }

    private List<string> SetupHeaderCsvReport()
    {
        return new List<string>
{
            "№",
            "得意先業者コード", "得意先コード", "得意先支店コード",
            "得意先業者コード名", "得意先名", "得意先略名", "得意先支店名", "得意先支店略名",
            "配車年月日", "到着年月日", "受付営業所略名", "発生年月日", "団体名",
            "受付番号", "請求区分名", "精算名", "精算区分名",
            "入料金所名", "出料金所名", "数量", "単価", "手数料", "消費税", "売上額", "備考"
        };
    }
    #endregion

    #region History Condition

    private async Task SaveCurrentFilter()
    {
        try
        {
            await FilterServices.SaveCustomFilterAndConditions(AccessoryFeeListReportService.GetFieldValues(accessoryFeeListFormData), filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
        }
        catch (Exception) { }
    }

    private async Task ApplyFilter()
    {
        var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq))
                                    .ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues()
                                    .ConvertMultipleToSingleValues();
        if (filterValues.Count > 0)
        {
            try
            {
                isFilterApply = true;
                AccessoryFeeListReportService.ApplyFilter(ref accessoryFeeListFormData, filterValues, accessoryFeeListFormData.BookingTypes, listGyosya, listTokisk, listTokist);

                OnDateTypeClicked(null, accessoryFeeListFormData.DateType);
                OnStartDateChanged(accessoryFeeListFormData.StartDate);
                OnEndDateChanged(accessoryFeeListFormData.EndDate);
                OnInvoiceTypeChanged(InvoiceTypes.FirstOrDefault(_ => _.Option == accessoryFeeListFormData.InvoiceType.Option));
                OnFutaiFeeTypesChanged(FutaiFeeTypes.Where(f => accessoryFeeListFormData.FutaiFeeTypes.Select(_ => _.CodeKbnSeq).Contains(f.CodeKbnSeq)));
                await OnCompanySelectedChanged(accessoryFeeListFormData.Company == null ? null : Companies.FirstOrDefault(_ => _ != null && _.CompanyCdSeq == accessoryFeeListFormData.Company.CompanyCdSeq));
                OnSaleBranchChanged(accessoryFeeListFormData.BranchStart == null ? null : Branches.FirstOrDefault(_ => _ != null && _.EigyoCdSeq == accessoryFeeListFormData.BranchStart.EigyoCdSeq));
                OnSaleBranchChanged(accessoryFeeListFormData.BranchEnd == null ? null : Branches.FirstOrDefault(_ => _ != null && _.EigyoCdSeq == accessoryFeeListFormData.BranchEnd.EigyoCdSeq), false);
                OnUkeCdChanged(accessoryFeeListFormData.UkeCdFrom, true);
                OnUkeCdChanged(accessoryFeeListFormData.UkeCdTo, false);
                OnFutaiChanged(accessoryFeeListFormData.FutaiStart == null ? null : Futais.FirstOrDefault(_ => _ != null && _.FutaiCdSeq == accessoryFeeListFormData.FutaiStart.FutaiCdSeq));
                OnFutaiChanged(accessoryFeeListFormData.FutaiEnd == null ? null : Futais.FirstOrDefault(_ => _ != null && _.FutaiCdSeq == accessoryFeeListFormData.FutaiEnd.FutaiCdSeq), false);

                OnReportTypeChanged(ReportTypes.FirstOrDefault(_ => _.Option == accessoryFeeListFormData.ReportType.Option));
                OnPageBreakChanged(BreakPageOptions.FirstOrDefault(_ => _.Option == accessoryFeeListFormData.BreakPage.Option));
                OnPaperSizeChanged(accessoryFeeListFormData.PaperSize);
                OnCsvHeaderChanged(CsvHeaderOptions.SingleOrDefault(c => c.Option == accessoryFeeListFormData.CsvConfigOption.Header.Option));
                OnGroupSymbolChanged(CsvGroupSymbolOptions.SingleOrDefault(c => c.Option == accessoryFeeListFormData.CsvConfigOption.GroupSymbol.Option));
                OnSeparatorChanged(CsvDelimiterOptions.SingleOrDefault(c => c.Option == accessoryFeeListFormData.CsvConfigOption.Delimiter.Option));
                OnDelimiterTextChanged(accessoryFeeListFormData.CsvConfigOption.DelimiterSymbol);
                OnExportTypeClicked(null, accessoryFeeListFormData.ExportType);

                IsFutaiFeeTypeSelectedAll = accessoryFeeListFormData.FutaiFeeTypes.Any(_ => _.IsSelectedAll);
                DisplayFutaiFeeTypeCmb = IsFutaiFeeTypeSelectedAll ? Constants.SelectedAll : $"{Lang["Choices"]}: {accessoryFeeListFormData.FutaiFeeTypes.Count()}";

                isFilterApply = false;
                StateHasChanged();
            }
            catch(Exception)
            {

            }
        }
    }

    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IReservationClassComponentService _service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerComponentService _customerService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFilterCondition FilterServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostingEnvironment { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient HttpClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAccessoryFeeListReportService AccessoryFeeListReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerListService CustomerService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService BranchDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CompnyDataListService CompanyDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<AccessoryFeeList> Lang { get; set; }
    }
}
#pragma warning restore 1591
