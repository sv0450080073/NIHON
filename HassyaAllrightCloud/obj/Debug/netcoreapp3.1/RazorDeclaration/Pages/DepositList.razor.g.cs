#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d2ee3da42729778ab549cc42a2739a8b39369837"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using HassyaAllrightCloud.Domain.Dto.BillPrint;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using DevExpress.XtraPrinting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using DevExpress.XtraReports.UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
using HassyaAllrightCloud.Domain.Dto.CommonComponents;

#line default
#line hidden
#nullable disable
    public partial class DepositList : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 524 "E:\Project\HassyaAllrightCloud\Pages\DepositList.razor"
       
    public Dictionary<string, string> LangDic = new Dictionary<string, string>();
    Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
    protected int gridSizeClass { get; set; } = (int)ViewMode.Medium;
    protected HeaderTemplate Header { get; set; }
    protected BodyTemplate Body { get; set; }
    protected List<DepositDataGrid> DataItems { get; set; } = new List<DepositDataGrid>();
    protected Pagination pagination { get; set; }
    protected bool dataNotFound { get; set; }
    protected int totalPage { get; set; }
    public int TotalCount { get; set; }
    public int ActiveV { get; set; }
    public int PrintV { get; set; }
    bool isLoading { get; set; } = true;
    int activeTabIndex = 0;
    string dateFormat = "yyyy/MM/dd";
    protected bool btnReportActive = true;
    public bool EnablePreSaleBranch = false;
    public bool EnableNextSaleBranch = true;
    public bool EnablePreBillingPayment = false;
    public bool EnableNextBillingPayment = true;
    public List<string> Errors = new List<string>();
    public EditContext searchForm { get; set; }
    int ActiveTabIndex
    {
        get => activeTabIndex;
        set
        {
            activeTabIndex = value;
            AdjustHeightWhenTabChanged();
        }
    }
    public bool isOpenCharterInquiryPopUp { get; set; }
    public Components.CommonComponents.CustomerComponent startCustomerComponent { get; set; }
       = new Components.CommonComponents.CustomerComponent();
    public Components.CommonComponents.CustomerComponent endCustomerComponent { get; set; }
    = new Components.CommonComponents.CustomerComponent();
    public OutDataTable outDataTable { get; set; }
    public DepositListSummary Summary = new DepositListSummary();
    public List<int> billingTypes { get; set; } = new List<int>();
    public List<int> PaymentMethodTypes { get; set; } = new List<int>();
    public DepositListSearchModel DepositSearchModel = new DepositListSearchModel();
    public List<CompanyData> CompanyDatas = new List<CompanyData>();
    public List<LoadSaleBranchList> SaleBranchs = new List<LoadSaleBranchList>();
    public List<SelectedSaleBranchModel> SelectedSaleBranchPayments = new List<SelectedSaleBranchModel>();
    public List<SaleOfficeModel> SaleBranchTypes = new List<SaleOfficeModel>();
    public DateTime StartPaymentDate { get; set; }
    public DateTime EndPaymentDate { get; set; }
    public List<BillingAddressModel> BillingAddressList = new List<BillingAddressModel>();
    public List<SelectedPaymentAddressModel> SelectedBillingAddressPaymentList = new List<SelectedPaymentAddressModel>();
    public List<ReservationCategoryModel> ReservationTypes = new List<ReservationCategoryModel>();
    public List<CheckBoxFilter> checkBoxBillingTypes = new List<CheckBoxFilter>();
    public List<CheckBoxFilter> checkBoxPaymentMethodTypes = new List<CheckBoxFilter>();
    public List<string> BillingTypeNames = new List<string>();
    public List<string> PaymentMethodNames = new List<string>();
    public byte ItemPerPage = 25;
    public List<TransferBankModel> TransferBanks = new List<TransferBankModel>();
    public List<DepositOutputClass> DepositOutputs = new List<DepositOutputClass>();
    public CharterSettingModel CharterSetting = new CharterSettingModel();
    public List<ComboboxFixField> DelimiterTypeData = new List<ComboboxFixField>();
    public List<DepositDataGrid> DepositListData = new List<DepositDataGrid>();
    public string FormName = FormFilterName.DepositList;
    public List<ComboboxFixField> BillTypePagePrintData = new List<ComboboxFixField>();
    public List<ReservationClassComponentData> ListReservationClass { get; set; } = new List<ReservationClassComponentData>();
    protected List<CustomerComponentGyosyaData> ListGyosya { get; set; } = new List<CustomerComponentGyosyaData>();
    protected List<CustomerComponentTokiskData> ListTokisk { get; set; } = new List<CustomerComponentTokiskData>();
    protected List<CustomerComponentTokiStData> ListTokiSt { get; set; } = new List<CustomerComponentTokiStData>();
    public int TotalRow;
    public int LastXClicked { get; set; }
    public int LastYClicked { get; set; }
    public DepositDataGrid SelectedItem { get; set; }
    public string errorMessage { get; set; } = string.Empty;
    [Inject]
    public IWebHostEnvironment hostingEnvironment { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("inputNumber", ".number", true);
        JSRuntime.InvokeVoidAsync("setEventforCodeNumberField", 10);
        JSRuntime.InvokeVoidAsync("loadPageScript", "billCheckListPage", "tabindexFix", ".form-focus", true);
        JSRuntime.InvokeVoidAsync("loadPageScript", "billCheckListPage", "tabindexFix", ".form-focus-1", true);
        await base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            CharterSetting = DepositListService.GetCharterSetting(new ClaimModel().CompanyID).Result;
            InitBody();
            InitHeader();
            var dataLang = Lang.GetAllStrings();
            LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
            BillTypePagePrintData.Add(new ComboboxFixField()
            {
                IdValue = 0,
                StringValue = Lang["PageType_0"]
            });
            BillTypePagePrintData.Add(new ComboboxFixField()
            {
                IdValue = 1,
                StringValue = Lang["PageType_1"]
            });
            BillTypePagePrintData.Add(new ComboboxFixField()
            {
                IdValue = 2,
                StringValue = Lang["PageType_2"]
            });
            DepositSearchModel.PageSizeReport = BillTypePagePrintData[0];

            // Add data for output type
            ShowHeaderOptions.ShowHeaderOptionData[0].StringValue = Lang["OutType_0"];
            ShowHeaderOptions.ShowHeaderOptionData[1].StringValue = Lang["OutType_1"];
            DepositSearchModel.ActiveHeaderOption = ShowHeaderOptions.ShowHeaderOptionData[0];

            // Add data for group type print
            GroupTypes.GroupTypeData[0].StringValue = Lang["GroupType_0"];
            GroupTypes.GroupTypeData[1].StringValue = Lang["GroupType_1"];
            DepositSearchModel.GroupType = GroupTypes.GroupTypeData[0];
            DepositSearchModel.PageSize = 25;
            // Add data for delimiter type print
            DelimiterTypes.DelimiterTypeData[0].StringValue = Lang["DelimiterType_0"];
            DelimiterTypes.DelimiterTypeData[1].StringValue = Lang["DelimiterType_1"];
            DelimiterTypes.DelimiterTypeData[2].StringValue = Lang["DelimiterType_2"];
            DelimiterTypeData.Add(DelimiterTypes.DelimiterTypeData[0]);
            DelimiterTypeData.Add(DelimiterTypes.DelimiterTypeData[1]);
            DelimiterTypeData.Add(DelimiterTypes.DelimiterTypeData[2]);
            DepositSearchModel.DelimiterType = DelimiterTypes.DelimiterTypeData[2];

            GenerateDepositOutputTemplate();
            ActiveV = (int)ViewMode.Medium;
            PrintV = (int)PrintMode.Preview;
            GenerateAllCheckBoxName();
            GenerateCheckBoxBillingType(7, BillingTypeNames);
            GenerateCheckBoxPaymentMethodType(8, PaymentMethodNames);
            CompanyDatas = DepositListService.GetCompanyData(new ClaimModel().TenantID).Result;
            DepositSearchModel.CompanyData = CompanyDatas.Where(x => x.CompanyCdSeq == new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID).FirstOrDefault();
            SaleBranchs = DepositListService.GetSaleBranchData(new ClaimModel().TenantID).Result;
            SaleBranchs.Insert(0, null);
            SaleBranchTypes = DepositListService.GetSaleOfficeModel();
            DepositSearchModel.SaleOfficeType = SaleBranchTypes.FirstOrDefault();
            TransferBanks = DepositListService.GetTransferBanks().Result;
            TransferBanks.Insert(0, null);
            DepositSearchModel.DepositOutputTemplate = DepositOutputs[0];
            DepositSearchModel.DepositOutputTemplate = DepositOutputs[0];
            DepositSearchModel.PageSizeReport = BillTypePagePrintData[0];
            searchForm = new EditContext(DepositSearchModel);
            ListReservationClass = await DepositListService.GetListReservationClass();
            ListGyosya = await DepositListService.GetListGyosya();
            ListTokisk = await DepositListService.GetListTokisk();
            ListTokiSt = DepositListService.GetListTokiSt().Result;
            //await startCustomerComponent.RenderDefault();
            //await endCustomerComponent.RenderDefault();
            List<TkdInpCon> filterValues = FilterConditionService.GetFilterCondition(FormName, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
            if (filterValues.Count > 0)
            {

                DepositSearchModel = GenerateFilterModel(filterValues);
            }
            DepositSearchModel.PageSize = 25;

            searchForm = new EditContext(DepositSearchModel);

            GenerateSelectedSaleBranch();
            GenerateSelectedBillingAddressPayment();
            GenerateData();
            if (SelectedBillingAddressPaymentList.Count == 1 || SelectedBillingAddressPaymentList.Count == 0)
            {
                EnableNextBillingPayment = false;
                EnablePreBillingPayment = false;
            }
            if (SelectedSaleBranchPayments.Count == 1 || SelectedSaleBranchPayments.Count == 0)
            {
                EnableNextSaleBranch = false;
                EnablePreSaleBranch = false;
            }
            //await startCustomerComponent.RenderDefault();
            //await endCustomerComponent.RenderDefault();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private DepositListSearchModel GenerateFilterModel(List<TkdInpCon> filterValues)
    {
        DepositListSearchModel result = new DepositListSearchModel();
        foreach (var item in filterValues)
        {
            switch (item.ItemNm)
            {
                case nameof(DepositListSearchModel.CompanyData):
                    result.CompanyData = string.IsNullOrWhiteSpace(item.JoInput) ? CompanyDatas.Where(x => x.CompanyCdSeq == new ClaimModel().CompanyID).FirstOrDefault() : CompanyDatas.Where(x => x != null && x.CompanyCdSeq == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.StartSaleBranchList):
                    result.StartSaleBranchList = string.IsNullOrWhiteSpace(item.JoInput) ? null : SaleBranchs.Where(x => x != null && x.EigyoCdSeq == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.EndSaleBranchList):
                    result.EndSaleBranchList = string.IsNullOrWhiteSpace(item.JoInput) ? null : SaleBranchs.Where(x => x != null && x.EigyoCdSeq == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.SaleOfficeType):
                    result.SaleOfficeType = string.IsNullOrWhiteSpace(item.JoInput) ? null : SaleBranchTypes.Where(x => x != null && x.SaleOfficeKbn == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.StartPaymentDate):
                    if (string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        result.StartPaymentDate = null;
                    }
                    else
                    {
                        result.StartPaymentDate = DateTime.ParseExact(item.JoInput, "yyyyMMdd", null);
                    }
                    break;
                case nameof(DepositListSearchModel.EndPaymentDate):
                    if (string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        result.EndPaymentDate = null;
                    }
                    else
                    {
                        result.EndPaymentDate = DateTime.ParseExact(item.JoInput, "yyyyMMdd", null);
                    }
                    break;

                case nameof(DepositListSearchModel.startCustomerComponentGyosyaData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var gyosya = ListGyosya.Where(x => x.GyosyaCdSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.startCustomerComponentGyosyaData = gyosya;
                        startCustomerComponent.DefaultGyosya = gyosya.GyosyaCdSeq;
                    }
                    break;
                case nameof(DepositListSearchModel.endCustomerComponentGyosyaData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var gyosya = ListGyosya.Where(x => x.GyosyaCdSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.endCustomerComponentGyosyaData = gyosya;
                        endCustomerComponent.DefaultGyosya = gyosya.GyosyaCdSeq;
                    }
                    break;

                case nameof(DepositListSearchModel.startCustomerComponentTokiskData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var tokisk = ListTokisk.Where(x => x.TokuiSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.startCustomerComponentTokiskData = tokisk;
                        startCustomerComponent.DefaultTokisk = tokisk.TokuiSeq;
                    }
                    break;
                case nameof(DepositListSearchModel.endCustomerComponentTokiskData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var tokisk = ListTokisk.Where(x => x.TokuiSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.endCustomerComponentTokiskData = tokisk;
                        endCustomerComponent.DefaultTokisk = tokisk.TokuiSeq;
                    }
                    break;

                case nameof(DepositListSearchModel.startCustomerComponentTokiStData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var tokist = ListTokiSt.Where(x => x.TokuiSeq.ToString() + x.SitenCdSeq.ToString() == item.JoInput).FirstOrDefault();
                        result.startCustomerComponentTokiStData = tokist;
                        startCustomerComponent.DefaultTokiSt = tokist.SitenCdSeq;
                    }
                    break;
                case nameof(DepositListSearchModel.endCustomerComponentTokiStData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var tokist = ListTokiSt.Where(x => x.TokuiSeq.ToString() + x.SitenCdSeq.ToString() == item.JoInput).FirstOrDefault();
                        result.endCustomerComponentTokiStData = tokist;
                        endCustomerComponent.DefaultTokiSt = tokist.SitenCdSeq;
                    }
                    break;

                case nameof(DepositListSearchModel.StartReceiptNumber):
                    result.StartReceiptNumber = string.IsNullOrWhiteSpace(item.JoInput) ? null : item.JoInput;
                    break;
                case nameof(DepositListSearchModel.EndReceiptNumber):
                    result.EndReceiptNumber = string.IsNullOrWhiteSpace(item.JoInput) ? null : item.JoInput;
                    break;
                case nameof(DepositListSearchModel.StartReservationClassification):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var reservationClassification = ListReservationClass.Where(x => x.YoyaKbnSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.StartReservationClassification = reservationClassification;
                    }
                    break;
                case nameof(DepositListSearchModel.EndReservationClassification):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var reservationClassification = ListReservationClass.Where(x => x.YoyaKbnSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.EndReservationClassification = reservationClassification;
                    }
                    break;
                case nameof(DepositListSearchModel.BillingType):
                    result.BillingType = string.IsNullOrWhiteSpace(item.JoInput) ? null : item.JoInput;
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var types = item.JoInput.Split(',');
                        foreach (var word in types)
                        {
                            foreach (var type in checkBoxBillingTypes)
                            {
                                if (type.Id == word)
                                {
                                    type.IsChecked = true;
                                    if (!billingTypes.Contains(Int32.Parse(type.Id)))
                                    {
                                        billingTypes.Add(Int32.Parse(type.Id));
                                    }
                                }
                            }
                        }
                    }
                    break;
                case nameof(DepositListSearchModel.StartTransferBank):
                    result.StartTransferBank = string.IsNullOrWhiteSpace(item.JoInput) ? null : TransferBanks.Where(x => x != null && x.Code == item.JoInput).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.EndTransferBank):
                    result.EndTransferBank = string.IsNullOrWhiteSpace(item.JoInput) ? null : TransferBanks.Where(x => x != null && x.Code == item.JoInput).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.PaymentMethod):
                    result.PaymentMethod = string.IsNullOrWhiteSpace(item.JoInput) ? null : item.JoInput;
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var types = item.JoInput.Split(',');
                        foreach (var word in types)
                        {
                            foreach (var type in checkBoxPaymentMethodTypes)
                            {
                                if (type.Id.Contains(word))
                                {
                                    type.IsChecked = true;
                                    if (type.IsChecked)
                                    {
                                        if (type.Id != "91,92")
                                        {
                                            if (!PaymentMethodTypes.Contains(Int32.Parse(type.Id)))
                                            {
                                                PaymentMethodTypes.Add(Int32.Parse(type.Id));
                                            }
                                        }
                                        else
                                        {
                                            if (!PaymentMethodTypes.Contains(91) && !PaymentMethodTypes.Contains(92))
                                            {
                                                PaymentMethodTypes.Add(91);
                                                PaymentMethodTypes.Add(92);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
                case nameof(DepositListSearchModel.PageSizeReport):
                    ComboboxFixField pageSizeReport = string.IsNullOrEmpty(item.JoInput) ? BillTypePagePrintData[0] : BillTypePagePrintData.Where(x => x.StringValue == item.JoInput).FirstOrDefault();
                    result.PageSizeReport = pageSizeReport;
                    break;
                case nameof(DepositListSearchModel.ActiveHeaderOption):
                    ComboboxFixField activeHeaderOption = string.IsNullOrEmpty(item.JoInput) ? ShowHeaderOptions.ShowHeaderOptionData[0] : ShowHeaderOptions.ShowHeaderOptionData.Where(x => x.StringValue == item.JoInput).FirstOrDefault();
                    result.ActiveHeaderOption = activeHeaderOption;
                    break;
                case nameof(DepositListSearchModel.GroupType):
                    ComboboxFixField groupType = string.IsNullOrEmpty(item.JoInput) ? GroupTypes.GroupTypeData[0] : GroupTypes.GroupTypeData.Where(x => x.StringValue == item.JoInput).FirstOrDefault();
                    result.GroupType = groupType;
                    break;
                case nameof(DepositListSearchModel.DelimiterType):
                    ComboboxFixField delimiterType = string.IsNullOrEmpty(item.JoInput) ? DelimiterTypes.DelimiterTypeData[2] : DelimiterTypes.DelimiterTypeData.Where(x => x.StringValue == item.JoInput).FirstOrDefault();
                    result.DelimiterType = delimiterType;
                    break;
                case nameof(DepositListSearchModel.OutputType):
                    OutputReportType outputType = string.IsNullOrEmpty(item.JoInput) ? (OutputReportType)1 : (OutputReportType)int.Parse(item.JoInput);
                    result.OutputType = outputType;
                    break;
                case nameof(DepositListSearchModel.DepositOutputTemplate):
                    var data = string.IsNullOrEmpty(item.JoInput) ? DepositOutputs[0] : DepositOutputs.Where(x => x.Id == int.Parse(item.JoInput)).FirstOrDefault();
                    result.DepositOutputTemplate = data;
                    break;
            }
        }
        return result;
    }

    private void InitBody()
    {
        try
        {
            Body = new BodyTemplate()
            {
                Rows = new List<RowBodyTemplate>()
{
                    new RowBodyTemplate()
                    {
                        Columns = new List<ColumnBodyTemplate>()
{
                            new ColumnBodyTemplate() { Control = new MultiLineControl<DepositDataGrid> { MutilineText = GetNo }, RowSpan= 2, AlignCol = AlignColEnum.Center  },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PaymentDate), CustomTextFormatDelegate = KoboGridHelper.FormatYYYYMMDDDelegate, RowSpan = 2, AlignCol = AlignColEnum.Center },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.UkeNo)},
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CustomerName), RowSpan = 2 },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.OperatingSerialNumber), RowSpan = 2, AlignCol = AlignColEnum.Center },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.GroupName)},
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.DeliveryDate),CustomTextFormatDelegate = KoboGridHelper.FormatYYYYMMDDDelegate, AlignCol = AlignColEnum.Center },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.BillingType), RowSpan = 2 },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.LoadingGoodName), RowSpan = 2 , AlignCol = AlignColEnum.Left},
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PaymenMethod), RowSpan = 2 },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Amount), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.TransferFee), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CumulativePayment), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CouponFaceValue), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CouponNo), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PreviousReceiveAmount), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Transferbank), RowSpan = 2, AlignCol = AlignColEnum.Left },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CardApprovalNumber), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CardSlipNumber), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PaperDueDate), RowSpan = 2, AlignCol = AlignColEnum.Right,CustomTextFormatDelegate = KoboGridHelper.FormatYYYYMMDDDelegate },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PaperNumber), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Other11), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Other12), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Other21), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Other22), RowSpan = 2, AlignCol = AlignColEnum.Right }
                        }
                    },
                     new RowBodyTemplate()
                    {
                        Columns = new List<ColumnBodyTemplate>()
{
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.ReceptionOffice) },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.DestinationName) },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.ArrivalDate),CustomTextFormatDelegate = KoboGridHelper.FormatYYYYMMDDDelegate, AlignCol = AlignColEnum.Center },
                        }
                    }
        }
            };
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void InitHeader()
    {
        try
        {
            Header = new HeaderTemplate()
            {
                StickyCount = 3,
                Rows = new List<RowHeaderTemplate>()
{
                    new RowHeaderTemplate()
                    {
                        Columns = new List<ColumnHeaderTemplate>()
{
                            new ColumnHeaderTemplate() { ColName = Lang["no_col"], RowSpan = 2,Width = 50 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaymentDateGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["UkeNoGrid"],Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CustomerNameGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["OperatingSerialNumberGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["GroupNameGrid"]+"/"+Lang["DestinationNameGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["DeliveryDateGrid"], RowSpan = 1,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["BillingTypeGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["LoadingGoodNameGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaymenMethodGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["AmountGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["TransferFeeGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CumulativePaymentGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CouponFaceValueGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CouponNoGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PreviousReceiveAmountGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["TransferbankGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CardGrid"], RowSpan = 1, ColSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaperGrid"], RowSpan = 1, ColSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSEtcNm1, RowSpan = 1, ColSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSEtcNm2, RowSpan = 1, ColSpan = 2,Width = 150 }

                        }
                    },
                    new RowHeaderTemplate()
                    {
                        Columns = new List<ColumnHeaderTemplate>()
{
                            new ColumnHeaderTemplate() { ColName = Lang["ReceptionOfficeGrid"],Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["ArrivalDateGrid"], RowSpan = 1,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CardApprovalNumberGrid"], Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CardSlipNumberGrid"], Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaperDueDateGrid"], Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaperNumberGrid"], Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSyoNm11, Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSyoNm12, Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSyoNm21, Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSyoNm22, Width = 150 }
                        }
                    }
                }
            };
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    private IEnumerable<string> GetNo(DepositDataGrid item)
    {
        if (item.YouKbn == 2)
        {
            yield return item.No.ToString();
            yield return Lang["rent"];
        }
        else
        {
            yield return item.No.ToString();
            yield return string.Empty;
        }
    }

    protected async void ItemClick(ItemClickEventArgs e)
    {
        try
        {
            outDataTable = new OutDataTable()
            {
                FutTumRen = SelectedItem.FutTumRen,
                FutuUnkRen = SelectedItem.FutuUnkRen,
                SeiFutSyu = SelectedItem.SeiFutSyu,
                UkeNo = SelectedItem.UkeNoFullString
            };
            isOpenCharterInquiryPopUp = await depositCouponService.CheckOpenChaterInquiryPopUpAsync(outDataTable);
            errorMessage = isOpenCharterInquiryPopUp ? string.Empty : @Lang["BI_T008"];

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task RowClick(RowClickEventArgs<DepositDataGrid> args)
    {
        try
        {
            SelectedItem = args.SelectedItem;
            LastXClicked = Convert.ToInt32(args.Event.ClientX);
            LastYClicked = Convert.ToInt32(args.Event.ClientY);
            if (!args.Event.ShiftKey && !args.Event.CtrlKey && SelectedItem.YouKbn == 2)
            {
                await blazorContextMenuService.ShowMenu("gridRowClickMenu", LastXClicked, LastYClicked);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task PageChanged(int pageNum)
    {
        try
        {
            DepositSearchModel.PageNum = pageNum == -1 ? 0 : pageNum;
            GenerateData();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    protected OutputReportType ActiveButtonReport
    {
        get => DepositSearchModel.OutputType;
        set
        {
            DepositSearchModel.OutputType = value;
            StateHasChanged();
        }
    }
    private void clickV(MouseEventArgs e, int number)
    {
        try
        {
            gridSizeClass = number;
            ActiveV = number;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    protected void ExportBtnClicked()
    {
        try
        {
            if (searchForm.GetValidationMessages().Count() == 0)
            {
                if (DepositSearchModel.OutputType == OutputReportType.Preview)
                {
                    var searchString = EncryptHelper.EncryptToUrl(DepositSearchModel);
                    JSRuntime.InvokeVoidAsync("open", "depositlistreportpreview?searchString=" + searchString, "_blank");
                }
                else
                {
                    if (DepositSearchModel.OutputType == OutputReportType.CSV)
                    {
                        PrintCsv();
                    }
                    else
                    {
                        Print();
                    }
                }
                keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForDepositList(DepositSearchModel, checkBoxPaymentMethodTypes, checkBoxBillingTypes).Result;
                FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.DepositList, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SelectPreviousSaleOffice()
    {
        try
        {
            if (DepositSearchModel.SelectedSaleBranchPayment.Id > 1)
            {
                EnableNextSaleBranch = true;
                DepositSearchModel.SelectedSaleBranchPayment = SelectedSaleBranchPayments[DepositSearchModel.SelectedSaleBranchPayment.Id - 2];
                if (DepositSearchModel.SelectedSaleBranchPayment.Id == 1)
                {
                    EnablePreSaleBranch = false;
                }
                StateHasChanged();
                GenerateSelectedBillingAddressPayment();
                if (DepositSearchModel.SelectedBillingAddressPayment != null)
                {
                    DepositSearchModel.PageNum = pagination.currentPage = 0;
                }
                GenerateData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SelectNextSaleOffice()
    {
        try
        {
            if (DepositSearchModel.SelectedSaleBranchPayment.Id < SelectedSaleBranchPayments.Count && SelectedSaleBranchPayments.Count > 1)
            {
                EnablePreSaleBranch = true;
                DepositSearchModel.SelectedSaleBranchPayment = SelectedSaleBranchPayments[DepositSearchModel.SelectedSaleBranchPayment.Id];
                if (DepositSearchModel.SelectedSaleBranchPayment.Id == SelectedSaleBranchPayments.Count)
                {
                    EnableNextSaleBranch = false;
                }
                StateHasChanged();
                GenerateSelectedBillingAddressPayment();
                if (DepositSearchModel.SelectedBillingAddressPayment != null)
                {
                    DepositSearchModel.PageNum = pagination.currentPage = 0;
                }

                GenerateData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SelectPreviousBillingPaymentAddress()
    {
        try
        {
            if (DepositSearchModel.SelectedBillingAddressPayment.Id > 1)
            {
                DepositSearchModel.PageNum = pagination.currentPage = 0;
                EnableNextBillingPayment = true;
                DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList[DepositSearchModel.SelectedBillingAddressPayment.Id - 2];
                if (DepositSearchModel.SelectedBillingAddressPayment.Id == 1)
                {
                    EnablePreBillingPayment = false;
                }
                StateHasChanged();
                GenerateData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SelectNextBillingPaymentAddress()
    {
        try
        {
            if (DepositSearchModel.SelectedBillingAddressPayment.Id < SelectedBillingAddressPaymentList.Count && SelectedBillingAddressPaymentList.Count > 1)
            {
                DepositSearchModel.PageNum = pagination.currentPage = 0;
                EnablePreBillingPayment = true;
                DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList[DepositSearchModel.SelectedBillingAddressPayment.Id];
                if (DepositSearchModel.SelectedBillingAddressPayment.Id == SelectedBillingAddressPaymentList.Count)
                {
                    EnableNextBillingPayment = false;
                }
                StateHasChanged();
                GenerateData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateSelectedSaleBranch()
    {
        try
        {
            DepositSearchModel.SelectedSaleBranchPayment = null;
            SelectedSaleBranchPayments = DepositListService.GetSelectedSaleBranches(DepositSearchModel, new ClaimModel().TenantID).Result;
            if (SelectedSaleBranchPayments.Count > 0)
            {
                DepositSearchModel.SelectedSaleBranchPayment = SelectedSaleBranchPayments.FirstOrDefault();
                if (SelectedSaleBranchPayments.Count == 1)
                {
                    EnableNextSaleBranch = false;
                    EnablePreSaleBranch = false;
                }
                else
                {
                    EnableNextSaleBranch = true;
                    EnablePreSaleBranch = false;
                }
            }
            else
            {
                Errors.Add("BI_T007");
                EnableNextBillingPayment = false;
                EnablePreBillingPayment = false;
                SelectedSaleBranchPayments = new List<SelectedSaleBranchModel>();
                DepositSearchModel.SelectedSaleBranchPayment = SelectedSaleBranchPayments.FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateSelectedBillingAddressPayment()
    {
        try
        {
            DepositSearchModel.SelectedBillingAddressPayment = null;
            if (DepositSearchModel.SelectedSaleBranchPayment != null)
            {
                SelectedBillingAddressPaymentList = DepositListService.GetSelectedPaymentAddresses(DepositSearchModel, new ClaimModel().TenantID).Result;
                if (SelectedBillingAddressPaymentList.Count > 0)
                {
                    DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList.FirstOrDefault();
                    if (SelectedBillingAddressPaymentList.Count > 0)
                    {
                        DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList.FirstOrDefault();
                        if (SelectedBillingAddressPaymentList.Count == 1)
                        {
                            EnableNextBillingPayment = false;
                            EnablePreBillingPayment = false;
                        }
                        else
                        {
                            EnableNextBillingPayment = true;
                            EnablePreBillingPayment = false;
                        }
                    }
                }
                else
                {
                    EnableNextBillingPayment = false;
                    EnablePreBillingPayment = false;
                }
            }
            else
            {
                Errors.Add("BI_T007");
                SelectedBillingAddressPaymentList = new List<SelectedPaymentAddressModel>();
                DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList.FirstOrDefault();
                EnableNextBillingPayment = false;
                EnablePreBillingPayment = false;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    private async Task GenerateData()
    {
        try
        {
            await Task.Run(() =>
            {
                isLoading = true;
                InvokeAsync(StateHasChanged).Wait();
            });
            if (searchForm.GetValidationMessages().Count() == 0)
            {
                if (DepositSearchModel.SelectedSaleBranchPayment != null && DepositSearchModel.SelectedBillingAddressPayment != null)
                {
                    (DepositListData, Summary, TotalRow) = DepositListService.GetDepositList(DepositSearchModel, false, new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID).Result;
                    dataNotFound = DepositListData == null || DepositListData.Count == 0;
                    DataItems = DepositListData;
                    if (DepositListData == null || DepositListData.Count == 0)
                    {
                        Errors.Add("BI_T007");
                    }
                    else
                    {
                        Errors.RemoveAll(x => x.Equals("BI_T007"));
                        btnReportActive = true;
                        keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForDepositList(DepositSearchModel, checkBoxPaymentMethodTypes, checkBoxBillingTypes).Result;
                        FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.DepositList, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
                    }
                }
                else
                {
                    Errors.Add("BI_T007");
                    DepositListData = new List<DepositDataGrid>();
                    TotalRow = 0;
                    DataItems = DepositListData;
                    Summary.PageAmount = 0;
                    Summary.PageCumulativePayment = 0;
                    Summary.PagePreviousReceiveAmount = 0;
                    Summary.PageTransferFee = 0;
                    Summary.TotalAmount = 0;
                    Summary.TotalCumulativePayment = 0;
                    Summary.TotalPreviousReceiveAmount = 0;
                    Summary.TotalTransferFee = 0;
                    btnReportActive = false;
                }

            }
            await Task.Run(() =>
            {
                isLoading = false;
                InvokeAsync(StateHasChanged).Wait();
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    private void ResetDepositListForm()
    {
        try
        {
            ActiveV = (int)ViewMode.Medium;
            DepositSearchModel = new DepositListSearchModel();
            DepositSearchModel.CompanyData = CompanyDatas.Where(x => x.CompanyCdSeq == new ClaimModel().CompanyID).FirstOrDefault();
            DepositSearchModel.SaleOfficeType = SaleBranchTypes.FirstOrDefault();
            DepositSearchModel.PageSize = 25;
            DepositSearchModel.DepositOutputTemplate = DepositOutputs[0];
            DepositSearchModel.PageSizeReport = BillTypePagePrintData[0];
            checkBoxBillingTypes = new List<CheckBoxFilter>();
            checkBoxPaymentMethodTypes = new List<CheckBoxFilter>();
            searchForm = new EditContext(DepositSearchModel);
            pagination.currentPage = 0;
            GenerateCheckBoxBillingType(7, BillingTypeNames);
            GenerateCheckBoxPaymentMethodType(8, PaymentMethodNames);
            GenerateSelectedSaleBranch();
            GenerateSelectedBillingAddressPayment();
            GenerateData();
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async void AdjustHeightWhenTabChanged()
    {
        try
        {
            await Task.Run(() =>
            {
                InvokeAsync(StateHasChanged).Wait();
                JSRuntime.InvokeVoidAsync("AdjustHeight");
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async Task ChangeValueForm(string ValueName, dynamic value)
    {
        try
        {
            Errors.RemoveAll(x => x.Equals("BI_T007"));
            if (value is string && string.IsNullOrEmpty(value))
            {
                value = null;
            }

            if (ValueName == nameof(DepositSearchModel.StartReceiptNumber) || ValueName == nameof(DepositSearchModel.EndReceiptNumber))
            {
                value = value == null ? null : value.ToString().PadLeft(10, '0');
            }
            var propertyInfo = DepositSearchModel.GetType().GetProperty(ValueName);
            propertyInfo.SetValue(DepositSearchModel, value, null);
            if (ValueName == nameof(DepositSearchModel.SelectedSaleBranchPayment))
            {
                if (DepositSearchModel.SelectedSaleBranchPayment.Id == SelectedSaleBranchPayments.Count)
                {
                    EnableNextSaleBranch = false;
                    EnablePreSaleBranch = true;
                }
                else if (DepositSearchModel.SelectedSaleBranchPayment.Id == 1)
                {
                    EnablePreSaleBranch = false;
                    EnableNextSaleBranch = true;
                }
                else if (DepositSearchModel.SelectedSaleBranchPayment.Id < SelectedSaleBranchPayments.Count && DepositSearchModel.SelectedSaleBranchPayment.Id > 1)
                {
                    EnableNextSaleBranch = true;
                    EnablePreSaleBranch = true;
                }
                GenerateSelectedBillingAddressPayment();
                if (SelectedBillingAddressPaymentList.Count > 0)
                {
                    DepositSearchModel.PageNum = pagination.currentPage = 0;
                    GenerateData();
                    StateHasChanged();
                }
            }
            else if (ValueName == nameof(DepositSearchModel.SelectedBillingAddressPayment))
            {
                DepositSearchModel.PageNum = pagination.currentPage = 0;
                if (DepositSearchModel.SelectedBillingAddressPayment.Id == SelectedBillingAddressPaymentList.Count)
                {
                    EnableNextBillingPayment = false;
                    EnablePreBillingPayment = true;
                }
                else if (DepositSearchModel.SelectedBillingAddressPayment.Id == 1)
                {
                    EnablePreBillingPayment = false;
                    EnableNextBillingPayment = true;
                }
                else if (DepositSearchModel.SelectedBillingAddressPayment.Id < SelectedBillingAddressPaymentList.Count && DepositSearchModel.SelectedBillingAddressPayment.Id > 1)
                {
                    EnableNextBillingPayment = true;
                    EnablePreBillingPayment = true;
                }
                GenerateData();
                StateHasChanged();
            }
            else
            {
                if(ValueName != nameof(DepositSearchModel.startCustomerComponentGyosyaData) && ValueName != nameof(DepositSearchModel.startCustomerComponentTokiskData) && ValueName != nameof(DepositSearchModel.endCustomerComponentTokiskData) && ValueName != nameof(DepositSearchModel.endCustomerComponentTokiskData))
                {
                    ChangeState();
                }
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    protected void OnChangeItemPerPage(byte _itemPerPage)
    {
        try
        {
            ItemPerPage = _itemPerPage;
            DepositSearchModel.PageSize = ItemPerPage;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async Task ChangeState()
    {
        try
        {
            await Task.Run(() =>
            {
                isLoading = true;
                InvokeAsync(StateHasChanged).Wait();
            });
            if (searchForm.GetValidationMessages().Count() == 0)
            {
                GenerateSelectedSaleBranch();
                GenerateSelectedBillingAddressPayment();
                GenerateData();
            }
            else
            {
                DepositListData = new List<DepositDataGrid>();
                TotalRow = 0;
                DataItems = DepositListData;
                Summary.PageAmount = 0;
                Summary.PageCumulativePayment = 0;
                Summary.PagePreviousReceiveAmount = 0;
                Summary.PageTransferFee = 0;
                Summary.TotalAmount = 0;
                Summary.TotalCumulativePayment = 0;
                Summary.TotalPreviousReceiveAmount = 0;
                Summary.TotalTransferFee = 0;
                btnReportActive = false;
            }
            await Task.Run(() =>
            {
                isLoading = false;
                InvokeAsync(StateHasChanged).Wait();
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async Task FilterChanged(CheckBoxFilter checkBoxFilter)
    {
        try
        {
            checkBoxFilter.IsChecked = !checkBoxFilter.IsChecked;
            switch (checkBoxFilter.Number)
            {
                case 1:
                    DepositSearchModel.FareBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 2:
                    DepositSearchModel.FutaiBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 3:
                    DepositSearchModel.TollFeeBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 4:
                    DepositSearchModel.ArrangementFeeBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 5:
                    DepositSearchModel.GuideFeeBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 6:
                    DepositSearchModel.LoadedItemBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 7:
                    DepositSearchModel.CancelFeeBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
            }
            if (checkBoxFilter.IsBillingType == true)
            {
                if (billingTypes.Any(x => x == checkBoxFilter.Number))
                {
                    billingTypes.Remove(checkBoxFilter.Number);
                }
                else
                {
                    billingTypes.Add(checkBoxFilter.Number);
                }
                DepositSearchModel.BillingType = string.Join(",", billingTypes);
            }
            if (checkBoxFilter.IsBillingType == false)
            {
                if (PaymentMethodTypes.Any(x => x == checkBoxFilter.Number))
                {
                    if (checkBoxFilter.Number == 8)
                    {
                        PaymentMethodTypes.Remove(91);
                        PaymentMethodTypes.Remove(92);
                        PaymentMethodTypes.Remove(checkBoxFilter.Number);
                    }
                    else { PaymentMethodTypes.Remove(checkBoxFilter.Number); }
                }
                else
                {
                    if (checkBoxFilter.Number == 8 && !PaymentMethodTypes.Contains(91) && !PaymentMethodTypes.Contains(92))
                    {
                        PaymentMethodTypes.Add(91);
                        PaymentMethodTypes.Add(92);
                        PaymentMethodTypes.Add(8);
                    }
                    else { PaymentMethodTypes.Add(checkBoxFilter.Number); }
                }
                DepositSearchModel.PaymentMethod = string.Join(",", PaymentMethodTypes);
            }

            ChangeState();
            InvokeAsync(StateHasChanged);

        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    protected async Task UpdateFormModel(string ValueName, dynamic value)
    {
        try
        {
            if (value is string && string.IsNullOrEmpty(value))
            {
                value = null;
            }
            var propertyInfo = DepositSearchModel.GetType().GetProperty(ValueName);
            propertyInfo.SetValue(DepositSearchModel, value, null);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateCheckBoxBillingType(int numberOfBillingType, List<string> BillingTypeNames)
    {
        try
        {
            for (int i = 1; i <= numberOfBillingType; i++)
            {
                checkBoxBillingTypes.Add(new CheckBoxFilter()
                {
                    Id = i.ToString(),
                    IsChecked = false,
                    Name = BillingTypeNames[i - 1],
                    Number = i,
                    IsBillingType = true
                });
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateCheckBoxPaymentMethodType(int numberOfPaymentMethodType, List<string> PaymentMethodTypeNames)
    {
        try
        {
            for (int i = 1; i <= numberOfPaymentMethodType; i++)
            {
                var id = $"0{i}";
                if (PaymentMethodTypeNames[i - 1].Equals(Lang["AnotherCheck"]))
                {
                    id = "91,92";
                }
                checkBoxPaymentMethodTypes.Add(new CheckBoxFilter()
                {
                    Id = id,
                    IsChecked = false,
                    Name = PaymentMethodTypeNames[i - 1],
                    Number = i
                });
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateAllCheckBoxName()
    {
        try
        {
            BillingTypeNames.Add(Lang["TicketPriceCheck"]);
            BillingTypeNames.Add(Lang["RandomCheck"]);
            BillingTypeNames.Add(Lang["TollsCheck"]);
            BillingTypeNames.Add(Lang["LoadingPriceCheck"]);
            BillingTypeNames.Add(Lang["GuidePriceCheck"]);
            BillingTypeNames.Add(Lang["LoadingStockPriceCheck"]);
            BillingTypeNames.Add(Lang["CancelPriceCheck"]);
            PaymentMethodNames.Add(Lang["CashCheck"]);
            PaymentMethodNames.Add(Lang["TransferCheck"]);
            PaymentMethodNames.Add(Lang["CouponCheck"]);
            PaymentMethodNames.Add(Lang["CardCheck"]);
            PaymentMethodNames.Add(Lang["ReceiptCheck"]);
            PaymentMethodNames.Add(Lang["CompensateCheck"]);
            PaymentMethodNames.Add(Lang["AdjustCheck"]);
            PaymentMethodNames.Add(Lang["AnotherCheck"]);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateDepositOutputTemplate()
    {
        try
        {
            DepositOutputs.Add(new DepositOutputClass()
            {
                Id = 1,
                Name = Lang["DepositList"]
            });
            DepositOutputs.Add(new DepositOutputClass()
            {
                Id = 2,
                Name = Lang["DepositOfficeType"]
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async void Print()
    {
        try
        {
            DepositSearchModel.IsGetAll = true;
            var data = await DepositListService.GetDepositsListReportDatas(DepositSearchModel, new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            if (data.Count > 0)
            {
                XtraReport report = new XtraReport();

                if (DepositSearchModel.DepositOutputTemplate.Id == 1)
                {
                    report = new Reports.DepositListReportA4();
                    if (DepositSearchModel.PageSizeReport.IdValue == BillTypePagePrintList.BillTypePagePrintData[1].IdValue)
                    {
                        report = new Reports.DepositListReportA3();
                    }
                    else
                    {
                        if (DepositSearchModel.PageSizeReport.IdValue == BillTypePagePrintList.BillTypePagePrintData[2].IdValue)
                        {
                            report = new Reports.DepositListReportB4();
                        }
                    }
                }
                if (DepositSearchModel.DepositOutputTemplate.Id == 2)
                {
                    report = new Reports.DepositOfficeListReportA4();
                    if (DepositSearchModel.PageSizeReport.IdValue == BillTypePagePrintList.BillTypePagePrintData[1].IdValue)
                    {
                        report = new Reports.DepositOfficeListReportA3();
                    }
                    else
                    {
                        if (DepositSearchModel.PageSizeReport.IdValue == BillTypePagePrintList.BillTypePagePrintData[2].IdValue)
                        {
                            report = new Reports.DepositOfficeListReportB4();
                        }
                    }
                }
                report.DataSource = data;
                await new System.Threading.Tasks.TaskFactory().StartNew(() =>
                {
                    report.CreateDocument();
                    using (MemoryStream ms = new MemoryStream())
                    {
                        if (DepositSearchModel.OutputType == OutputReportType.Print)
                        {
                            PrintToolBase tool = new PrintToolBase(report.PrintingSystem);
                            tool.Print();
                            return;
                        }
                        report.ExportToPdf(ms);

                        byte[] exportedFileBytes = ms.ToArray();
                        string myExportString = Convert.ToBase64String(exportedFileBytes);
                        string name = DepositSearchModel.DepositOutputTemplate.Id == 1 ? "DepositList" : "DepositOfficeList";
                        JSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", name);
                    }
                });
            }
            DepositSearchModel.IsGetAll = false;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async void PrintCsv()
    {
        try
        {
            var listData = await DepositListService.GetDepositListCSVDatas(DepositSearchModel, new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            var dt = listData.ToDataTable<DepositListCSVDataModel>();
            while (dt.Columns.Count > 67)
            {
                dt.Columns.RemoveAt(67);
            }
            SetTableHeader(dt);
            string path = string.Format("{0}/csv/{1}.csv", hostingEnvironment.WebRootPath, Guid.NewGuid());

            bool isWithHeader = DepositSearchModel.ActiveHeaderOption.IdValue == 0 ? true : false;
            bool isEnclose = DepositSearchModel.GroupType.IdValue == 0 ? true : false;
            string space = DepositSearchModel.DelimiterType.IdValue == 0 ? "\t" : DepositSearchModel.DelimiterType.IdValue == 1 ? ";" : ",";

            var result = CsvHelper.ExportDatatableToCsv(dt, path, true, isWithHeader, isEnclose, space);
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                string myExportString = Convert.ToBase64String(result);
                JSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "csv", "DepositList");
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SetTableHeader(DataTable table)
    {
        try
        {
            List<string> listHeader = new List<string>() { "営業所コード", "営業所名", "営業所略名",
                "請求先業者コード", "請求先コード", "請求先支店コード", "請求先業者コード名", "請求先名",
                "請求先支店名", "請求先略名", "請求先支店略名", "入金年月日", "受付番号", "受付営業所コード",
                "受付営業所名", "受付営業所略名", "得意先業者コード", "得意先コード", "得意先支店コード", "得意先業者コード名", "得意先名",
                "得意先支店名", "得意先略名", "得意先支店略名", "運行日連番", "団体名", "行き先名", "配車年月日", "到着年月日",
                "請求付帯種別", "請求付帯種別名", "付帯積込品名", "入金手段", "入金手段名", "金額", "振込手数料", "入金累計",
                "クーポン額面金額", "クーポンNo.", "前受金",
                "銀行コード", "銀行支店コード", "銀行名", "銀行支店名", "銀行略名", "銀行支店略名", "カード承認番号", "カード伝票番号",
                "手形期日", "手形番号", "入金手段その他名１", "その他詳細項目１１",
                "その他詳細項目１２", "入金手段その他名２", "その他詳細項目２１", "その他詳細項目２２", "得意先コード使用開始年月日",
                "得意先コード使用終了年月日", "得意先支店コード使用開始年月日", "得意先支店コード使用終了年月日", "現金", "その他"
                , "調整金", "手形", "相殺", "振込額" };
            for (int i = 0; i < table.Columns.Count; i++)
            {
                table.Columns[i].ColumnName = listHeader[i];
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDepositCouponService depositCouponService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFilterCondition FilterConditionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IGenerateFilterValueDictionary GenerateFilterValueDictionaryService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService errorModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorContextMenuService blazorContextMenuService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDepositListService DepositListService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<DepositList> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
