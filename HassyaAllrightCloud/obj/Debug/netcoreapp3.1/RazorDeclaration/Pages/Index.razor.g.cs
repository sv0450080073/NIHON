#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "af77e2014d4bb3036f2eacae6f24f907d7bba8df"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System.Collections.Generic;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using DevExtreme.AspNet.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using DevExtreme.AspNet.Data.ResponseModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.ComponentModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using static HassyaAllrightCloud.Commons.Extensions.EditContextExtensionHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using HassyaAllrightCloud.Domain.Dto.BillPrint;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using HassyaAllrightCloud.Domain.Dto.CommonComponents;

#line default
#line hidden
#nullable disable
    public partial class Index : OwningComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 795 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
       
    [CascadingParameter(Name = "ClaimModel")]
    protected ClaimModel ClaimModel { get; set; }
    string tempstr;
    bool isUpdateSuccess = false;
    bool PopupSaveDataSucess { get; set; } = false;
    bool PopupSaveDataError { get; set; } = false;
    bool PopupHaiTaCheckFail { get; set; } = false;
    bool PopupUpdateDataSucess { get; set; } = false;
    string RegisteredResult = "";
    string RegisteredResultContent = "";
    string newUkeCd = string.Empty;

    string Rowid = "1";
    short UriKbn;
    [Parameter] public string action { get; set; }
    [Parameter] public string UkeCd { get; set; }
    [Parameter] public string motoTenantCdSeq { get; set; }
    [Parameter] public string motoUkeNo { get; set; }
    [Parameter] public string motoUnkRen { get; set; }
    [Parameter] public string motoYouTblSeq { get; set; }
    short Unkren;
    string PageTitle = "";
    string SubmitText = "";
    public BookingFormData bookingdata = new BookingFormData();
    public MinMaxSettingFormData tmpMinMaxFormData = null;
    private VehicleGridData tempVehicleGridData = new VehicleGridData();
    EditContext formContext;
    bool PopupVisible { get; set; } = false;
    bool PopupDeletedata { get; set; } = false;
    bool PopupBooking { get; set; } = false;
    bool SubmitBtnEnabledState { get; set; } = false;
    bool ClearAllBtnDisabledState { get; set; } = true;
    bool shouldRender = true;
    bool isPopupEditWhenConfirmed = false;
    bool isCreate = true;
    bool isCopyMode = false;
    List<TPM_CodeKbCodeSyuData> BookingStatusList { get; set; } // To do
    List<string> BillingCategoryList { get; set; } // To do
    List<BookingTypeData> BookingTypeList;
    List<LoadSaleBranch> SaleBranchList;
    List<LoadSaleBranch> SaleBranchsAutoAssign;
    List<LoadStaff> StaffList;
    List<LoadCustomerList> CustomerList;
    IEnumerable<BusTypeData> BusTypeList;
    List<InvoiceType> InvoiceTypeList;
    List<PassengerType> passengerTypeList;
    List<string> emptyItemMessage = new List<string>();
    List<BookingData> bookingdatalst = new List<BookingData>();
    List<LoadCustomerList> loadCustomerLists = new List<LoadCustomerList>();
    YoushaNoticeData youshaNotice = new YoushaNoticeData();
    bool isEmptyItem { get; set; } = false;
    bool isAutoAssignPopup { get; set; } = false;
    bool isPriorityAAPopup { get; set; } = false;
    bool isDisableDetailBtn { get; set; } = true;
    bool isFocusSet { get; set; } = false;
    bool isOpenSelectRemoveBus { get; set; } = false;
    bool isAutoAssignSelected { get; set; } = false;
    private HassyaAllrightCloud.Pages.Components.BookingInputTab BookingInputTabChild;
    bool checkBooking = false;
    string dateFormat = "yyyy/MM/dd";
    string baseUrl;
    string DeleteId;
    int maxRow = 200;
    int maxRowIndex = 0;
    bool disableAll = true;
    bool isLoading = true;
    MinMaxSettingState minMaxState = MinMaxSettingState.None;

    private HassyaAllrightCloud.Pages.Components.EditBookingComponent.RemoveBusPopUp removeBusPopUp;

    //Validate Tooltip
    bool CurrentBookingTypeError = false;
    bool SelectedSaleBranchError = false;
    bool SelectedStaffError = false;
    bool SelectedCustomerError = false;
    bool BusEndDateTimeGreaterThanBusStartDateTimeError = false;
    bool PassengerTypeDataError = false;
    bool BusTypeDataError = false;
    //string messsage
    string MessageCurrentBookingTypeError;
    string MessageSelectedSaleBranchError;
    string MessageSelectedStaffError;
    string MessageSelectedCustomerError;
    string MessageBusEndDateTimeGreaterThanBusStartDateTimeError;
    string MessagePassengerTypeDataError;
    string MessageBusTypeDataError;
    CultureInfo ci;
    private IBusTypeListService BusTypeService { get; set; }
    public IBookingTypeListService TpmYoyKbnService { get; set; }
    public ITPM_CodeKbListService TpmCodeKbListService { get; set; }
    public IRoundSettingsService RoundSettingsService { get; set; }
    public List<FileInfoData> fileUploadlst = new List<FileInfoData>();
    public bool TenantHasCustomData { get; set; }
    PaymentRequestTenantInfo TenantInfo = new PaymentRequestTenantInfo();
    public HassyaAllrightCloud.Pages.Components.CommonComponents.CustomerComponent CustomerComponent { get; set; }
    = new HassyaAllrightCloud.Pages.Components.CommonComponents.CustomerComponent();
    public int supervisorCount { get; set; }

    #region Localization string
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    string StatusBooking;
    string StatusChecking;
    string StatusConfirmed;
    string PopupTitleUpdateWhenConfirmed;
    string PopupContentUpdateWhenConfimed;
    string AskForUpdate;
    string Confirmation;
    string PopupTitleInfo;
    string PopupTitleError;
    string PopupTitleWarning;
    string PageTitleCreate;
    string PageTitleEdit;
    string PageTitleCopy;
    string PageTitleYouSha;
    string UpperLowerSettingsDeleteConfirmMessage;
    string DeleteConfirmMessage;
    string Yes;
    string No;
    string OK;
    string EraseAll;
    string BookingStatus;
    string BookingTypeLabel;
    string SaleBranchLabel;
    string StaffListLabel;
    string OrganizationLabel;
    string CustomerListLabel;
    string ServiceScheduleLabel;
    string DispatchDateTimeLabel;
    string ArrivalDateTimeLabel;
    string CultureInfoStr;
    string PreDaySettingLabel;
    string AftDaySettingLabel;
    string BusTypeCol;
    string BusNumCol;
    string DriverNumCol;
    string UnitBusPriceCol;
    string UnitBusFeeCol;
    string UnitPriceCol;
    string BusPriceCol;
    string GuiderNumCol;
    string UnitGuiderFeeCol;
    string GuiderFeeCol;
    string MinMaxCol;
    string AddRowButton;
    string MinMaxButton;
    string TotalLabel;
    string InvoiceDateLabel;
    string TaxRateLabel;
    string BillingCategory;
    string InvoiceMonthLabel;
    string BusFeeRateLabel;
    string MonthFormat;
    string CreateButton;
    string UpdateButton;
    string CopyButton;
    string CreateResultSuccessMessage;
    string CreateResultScuccessMessageContent;
    string CreateResultErrorMessage;
    string UpdateResultSuccessMessage;
    string UpdateResultErrorMessage;
    string EmptyStaffMessage;
    string EmptySaleBranchMessage;
    string EmptyBookingTypeMessage;
    string EmptyCustomerMessage;
    string EmptyBusTypeMessage;
    string CancelAndReturnButton;
    string UpdateReservationButton;
    string AutoCancelButton;
    string CancelAndReturnText;
    string UpdateReservationText;
    string AutoCancelText;
    string CreateResultUkenoIsFullErrorMessageContent;
    string PriorityBranchAutoAssign;

    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        StatusBooking = Lang["StatusBooking"];
        StatusChecking = Lang["StatusChecking"];
        StatusConfirmed = Lang["StatusConfirmed"];
        PopupTitleUpdateWhenConfirmed = Lang["PopupTitleUpdateWhenConfirmed"];
        PopupContentUpdateWhenConfimed = Lang["PopupContentUpdateWhenConfimed"];
        AskForUpdate = Lang["AskForUpdate"];
        Confirmation = Lang["Confirmation"];
        PopupTitleError = Lang["PopupTitleError"];
        PopupTitleInfo = Lang["PopupTitleInfo"];
        PopupTitleWarning = Lang["PopupTitleWarning"];
        PageTitleCreate = Lang["PageTitle"];
        PageTitleEdit = Lang["PageTitleEdit"];
        PageTitleCopy = Lang["PageTitleCopy"];
        PageTitleYouSha = Lang["PageTitleYouSha"];
        UpperLowerSettingsDeleteConfirmMessage = Lang["UpperLowerSettingsDeleteConfirmMessage"];
        DeleteConfirmMessage = Lang["DeleteConfirmMessage"];
        Yes = Lang["Yes"];
        No = Lang["No"];
        OK = Lang["OK"];
        EraseAll = Lang["EraseAll"];
        BookingStatus = Lang["BookingStatus"];
        BookingTypeLabel = Lang["BookingTypeLabel"];
        SaleBranchLabel = Lang["SaleBranchLabel"];
        StaffListLabel = Lang["StaffListLabel"];
        OrganizationLabel = Lang["OrganizationLabel"];
        CustomerListLabel = Lang["CustomerListLabel"];
        ServiceScheduleLabel = Lang["ServiceScheduleLabel"];
        DispatchDateTimeLabel = Lang["DispatchDateTimeLabel"];
        ArrivalDateTimeLabel = Lang["ArrivalDateTimeLabel"];
        CultureInfoStr = Lang["CultureInfo"];
        PreDaySettingLabel = Lang["PreDaySettingLabel"];
        AftDaySettingLabel = Lang["AftDaySettingLabel"];
        BusTypeCol = Lang["BusTypeCol"];
        BusNumCol = Lang["BusNumCol"];
        DriverNumCol = Lang["DriverNumCol"];
        UnitBusPriceCol = Lang["UnitBusPriceCol"];
        UnitBusFeeCol = Lang["UnitBusFeeCol"];
        UnitPriceCol = Lang["UnitPriceCol"];
        BusPriceCol = Lang["BusPriceCol"];
        GuiderNumCol = Lang["GuiderNumCol"];
        UnitGuiderFeeCol = Lang["UnitGuiderFeeCol"];
        GuiderFeeCol = Lang["GuiderFeeCol"];
        MinMaxCol = Lang["MinMaxCol"];
        AddRowButton = Lang["AddRowButton"];
        MinMaxButton = Lang["MinMaxButton"];
        TotalLabel = Lang["TotalLabel"];
        InvoiceDateLabel = Lang["InvoiceDateLabel"];
        TaxRateLabel = Lang["TaxRateLabel"];
        BillingCategory = Lang["BillingCategory"];
        InvoiceMonthLabel = Lang["InvoiceMonthLabel"];
        BusFeeRateLabel = Lang["BusFeeRateLabel"];
        MonthFormat = Lang["MonthFormat"];
        CreateButton = Lang["CreateButton"];
        UpdateButton = Lang["UpdateButton"];
        CopyButton = Lang["CopyButton"];
        CreateResultSuccessMessage = Lang["CreateResultSuccessMessage"];
        CreateResultScuccessMessageContent = Lang["CreateResultScuccessMessageContent"];
        CreateResultErrorMessage = Lang["CreateResultErrorMessage"];
        UpdateResultSuccessMessage = Lang["UpdateResultSuccessMessage"];
        UpdateResultErrorMessage = Lang["UpdateResultErrorMessage"];
        EmptyStaffMessage = Lang["EmptyStaffMessage"];
        EmptySaleBranchMessage = Lang["EmptySaleBranchMessage"];
        EmptyBookingTypeMessage = Lang["EmptyBookingTypeMessage"];
        EmptyCustomerMessage = Lang["EmptyCustomerMessage"];
        EmptyBusTypeMessage = Lang["EmptyBusTypeMessage"];
        CancelAndReturnButton = Lang["CancelAndReturnButton"];
        UpdateReservationButton = Lang["UpdateReservationButton"];
        AutoCancelButton = Lang["AutoCancelButton"];
        CancelAndReturnText = Lang["CancelAndReturnText"];
        UpdateReservationText = Lang["UpdateReservationText"];
        AutoCancelText = Lang["AutoCancelText"];
        CreateResultUkenoIsFullErrorMessageContent = Lang["BI_T020"];
        PriorityBranchAutoAssign = Lang["PriorityBranchAutoAssign"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }
    #endregion

    #region Component Lifecycle
    public override Task SetParametersAsync(ParameterView parameters)
    {
        try
        {
            // doesn't have ukecd to copy
            if (parameters.TryGetValue("UkeCd", out string _) == false && parameters.TryGetValue("action", out string _))
            {
                NavManager.NavigateTo("/");
                return null;
            }
            return base.SetParametersAsync(parameters);
        }
        catch (Exception ex)
        {
            NavManager.NavigateTo("/");
            return null;
            //await base.SetParametersAsync(parameters);
        }
    }

    /// <summary>
    /// Load javascript of page
    /// </summary>
    protected override void OnParametersSet()
    {
        if (ClaimModel != null)
        {
            var tenantId = ClaimModel.TenantID;
        }
        JSRuntime.InvokeVoidAsync("loadPageScript", "bookingInputPage");
        base.OnParametersSet();
    }

    /// <summary>
    /// Invoked once, after OnInit is finished.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isCopyMode = action == "copy";
            LocalizationInit();
            ci = new CultureInfo(CultureInfoStr);
            formContext = new EditContext(bookingdata);
            baseUrl = AppSettingsService.GetBaseUrl();
            BusTypeService = ScopedServices.GetRequiredService<IBusTypeListService>();
            TpmYoyKbnService = ScopedServices.GetRequiredService<IBookingTypeListService>();
            TpmCodeKbListService = ScopedServices.GetRequiredService<ITPM_CodeKbListService>();
            RoundSettingsService = ScopedServices.GetRequiredService<IRoundSettingsService>();
            var codeKbListService = ScopedServices.GetRequiredService<ITPM_CodeKbListService>();
            BookingStatusList = (await codeKbListService.GetDataByCodeSyu("YOYASYU", new ClaimModel().TenantID)).Where(c => c.CodeKbn == Constants.BookingStatus || c.CodeKbn == Constants.EstimateStatus).ToList();
            bookingdata.HasuSet = await RoundSettingsService.GetHasuSettings(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            BusTypeList = await BusTypeService.Get(new ClaimModel().TenantID);
            BookingTypeList = (await LoadBookingTypeListAsync()).ToList();
            CustomerList = (await LoadCustomerListAsync()).ToList();
            SaleBranchsAutoAssign = (await LoadBranchsAutoAssignAsync()).ToList();
            InvoiceTypeList = (await LoadBillingCategoryListAsync()).ToList();
            passengerTypeList = await Http.GetJsonAsync<List<PassengerType>>(baseUrl + "/api/BookingInput/PassengerType");
            TenantInfo = await billPrintService.GetTenantInfoAsync();
            isCreate = true;
            var customItems = await CustomItemService.GetCustomFieldConfigs(new ClaimModel().TenantID);
            TenantHasCustomData = !(customItems is null || customItems.Count == 0);
            if (UkeCd == null || UkeCd == "0")
            {
                checkBooking = true;
                PageTitle = PageTitleCreate;
                SubmitText = CreateButton;
                int tenantID = new ClaimModel().TenantID;
                await Load(tenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            }
            else
            {
                BookingFormData putData = new BookingFormData();
                try
                {
                    putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd));
                }
                catch (Exception)
                {
                    Console.WriteLine();
                }
                if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
                {
                    bookingdata.SetBookingFromData(putData);
                    checkBooking = true;
                    if (isCopyMode)
                    {
                        PageTitle = string.Format(PageTitleCopy, UkeCd);
                        SubmitText = CopyButton;
                    }
                    else
                    {
                        PageTitle = string.Format(PageTitleEdit, UkeCd);
                        SubmitText = UpdateButton;
                    }
                    await Load(new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
                    isCreate = false;
                }
                else
                {
                    NavManager.NavigateTo("/");
                }

            }
            await base.OnInitializedAsync().ContinueWith((t) => { isLoading = false; });
        }
        catch (Exception ex)
        {
            isLoading = false;
            ErrorService.ShowErrorPopup("Error", ex.Message);
        }
        if (motoTenantCdSeq != "" && motoTenantCdSeq != null)
        {
            try
            {
                PageTitle = PageTitleYouSha;
                checkBooking = true;
                youshaNotice = await CarCooperationService.GetItemYoushaNotice(int.Parse(motoTenantCdSeq), motoUkeNo, short.Parse(motoUnkRen), int.Parse(motoYouTblSeq));
                if (youshaNotice != null)
                {
                    bookingdata.SetBookingFromYoushaNotice(youshaNotice);
                    var SelectedCustomer = loadCustomerLists.Where(t => t.TokuiSeq == youshaNotice.MotoTokuiSeq && t.SitenCdSeq == youshaNotice.MotoSitenCdSeq).FirstOrDefault();
                    bookingdata.customerComponentGyosyaData = new CustomerComponentGyosyaData() {
                        GyosyaCd = (short)SelectedCustomer.GyoSyaCd,
                        GyosyaCdSeq = SelectedCustomer.GyoSysSeq,
                        GyosyaKbn = SelectedCustomer.GyosyaKbn,
                        GyosyaNm = SelectedCustomer.GyoSyaNm
                    };
                    bookingdata.customerComponentTokiskData = new CustomerComponentTokiskData() {
                        GyosyaCdSeq = SelectedCustomer.GyoSysSeq,
                        RyakuNm = SelectedCustomer.RyakuNm,
                        TokuiCd = (short)SelectedCustomer.TokuiCd,
                        TokuiSeq = SelectedCustomer.TokuiSeq
                    };
                    bookingdata.customerComponentTokiStData = new CustomerComponentTokiStData() {
                        RyakuNm = SelectedCustomer.RyakuNm,
                        SitenCd = (short)SelectedCustomer.SitenCd,
                        SitenCdSeq = SelectedCustomer.SitenCdSeq,
                        TokuiSeq = SelectedCustomer.TokuiSeq,
                        SimeD = (byte)SelectedCustomer.SimeD,
                        TesKbn = SelectedCustomer.TesKbn,
                        TesuRitu = SelectedCustomer.TesuRitu,
                        TesuRituGui = SelectedCustomer.TesuRituGui
                    };
                    bookingdata.VehicleGridDataList.Clear();
                    if (youshaNotice.BigtypeNum != 0)
                    {
                        VehicleGridData vehicleGridData = new VehicleGridData();
                        vehicleGridData.BusNum = youshaNotice.BigtypeNum.ToString();
                        vehicleGridData.busTypeData = BusTypeList.Where(t => t.Katakbn == "1" && t.SyaSyuCdSeq == 0).FirstOrDefault();
                        bookingdata.VehicleGridDataList.Add(vehicleGridData);
                    }
                    if (youshaNotice.MediumtypeNum != 0)
                    {
                        VehicleGridData vehicleGridData = new VehicleGridData();
                        vehicleGridData.BusNum = youshaNotice.MediumtypeNum.ToString();
                        vehicleGridData.busTypeData = BusTypeList.Where(t => t.Katakbn == "2" && t.SyaSyuCdSeq == 0).FirstOrDefault();
                        bookingdata.VehicleGridDataList.Add(vehicleGridData);
                    }
                    if (youshaNotice.SmalltypeNum != 0)
                    {
                        VehicleGridData vehicleGridData = new VehicleGridData();
                        vehicleGridData.BusNum = youshaNotice.SmalltypeNum.ToString();
                        vehicleGridData.busTypeData = BusTypeList.Where(t => t.Katakbn == "3" && t.SyaSyuCdSeq == 0).FirstOrDefault();
                        bookingdata.VehicleGridDataList.Add(vehicleGridData);
                    }
                    if (bookingdata.VehicleGridDataList.Count != 0)
                    {
                        int i = 1;
                        foreach (var item in bookingdata.VehicleGridDataList)
                        {
                            item.RowID = i.ToString();
                            i++;
                        }
                    }
                    bookingdata.IsYoushaNote = true;
                }
                else
                {
                    NavManager.NavigateTo("/");
                }
            }
            catch (Exception)
            {
                Console.WriteLine();
            }
        }

        await base.OnInitializedAsync().ContinueWith((t) => { isLoading = false; });
    }

    /// <summary>
    /// Check if schedule time correct
    /// </summary>
    /// <returns></returns>
    bool IsDisableDetailBtn()
    {
        if (bookingdata.IsDisableEdit)
        {
            minMaxState = MinMaxSettingState.ViewOnly;
            return false;
        }
        if (BookingInputTabChild != null && BookingInputTabChild.ActiveTabIndex >= 4)
        {
            minMaxState = MinMaxSettingState.ViewOnly;
            return false;
        }
        if (disableAll) return true;
        return (formContext.GetValidationMessages(() => bookingdata.BusEndDate).Count() > 0
            || formContext.GetValidationMessages(() => bookingdata.BusEndTime.Str).Count() > 0
            || formContext.GetValidationMessages(() => bookingdata.ReservationTabData.SyuKoTime.Str).Count() > 0
            || formContext.GetValidationMessages(() => bookingdata.ReservationTabData.KikTime.Str).Count() > 0);
    }

    /// <summary>
    /// Invoked after each render of the component.
    /// Called for the first time when the component is initialized - firstRender = true
    /// and then after every re-render - firstRender = false.
    /// </summary>
    /// <returns></returns>
    protected override void OnAfterRender(bool firstRender)
    {
        //JSRuntime.InvokeVoidAsync("tabindexFix");
        //JSRuntime.InvokeVoidAsync("loadPageScript", "bookingInputPage", "EnterTab");
        JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        JSRuntime.InvokeAsync<string>("addtabindex", "notabindex");

        if (UkeCd == null || UkeCd == "0")
        {
            JSRuntime.InvokeAsync<string>("dispplayButton", "btnclear");
        }
        else
        {
            JSRuntime.InvokeAsync<string>("hiddenButton", "btnclear");
        }
        JSRuntime.InvokeVoidAsync("loadPageScript", "bookingInputPage", "setTooltipBookingInput");
        JSRuntime.InvokeAsync<string>("loadPageScript", "bookingInputPage", "bookingInputPageTabKey");

        BookingFormData bookingdatatmp = new BookingFormData();
        if (firstRender)
        {
            // Setting maxlength attribute
            JSRuntime.InvokeAsync<string>("focusEditor", "focus");
            bookingdatatmp = bookingdata;
            if (isCopyMode) SubmitBtnEnabledState = true;
            else SubmitBtnEnabledState = false;
        }
        else
        {
            if (formContext.IsModified() && !SubmitBtnEnabledState)
            {
                SubmitBtnEnabledState = true;
                StateHasChanged();
            }
        }
        if (!isLoading && !isFocusSet)
        {
            isFocusSet = true;
            JSRuntime.InvokeAsync<string>("focusEditor", "focus");
        }
        if (PopupSaveDataSucess)
        {
            JSRuntime.InvokeAsync<string>("focusSubmitButton", "popupsavedata");
        }
        //youshanoted
        try
        {
            if (Convert.ToInt32(bookingdata.customerComponentTokiStData?.SitenCdSeq) != 0 && !string.IsNullOrWhiteSpace(motoTenantCdSeq))
                BookingInputTabChild.SetSelectedSupplier(Convert.ToInt32(bookingdata.customerComponentTokiStData?.TokuiSeq),
                    Convert.ToInt32(bookingdata.customerComponentTokiStData?.SitenCdSeq));
        }
        catch (Exception)
        {

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("zoomTabBooking");
    }

    /// <summary>
    /// Invoked right before a component re-render is executed.
    /// Prevent render when keydown event is fired by formContext.
    /// </summary>
    /// <returns></returns>
    protected override bool ShouldRender()
    {
        if (shouldRender)
        {
            return true;
        }
        else
        {
            shouldRender = true;
            return false;
        }
    }
    #endregion

    #region Booking Form value changed methods

    /// <summary>
    /// Select Booking Status
    /// </summary>
    /// <param name="e"></param>
    void OnSelectedBookingStatusChanged(TPM_CodeKbCodeSyuData e)
    {
        if (bookingdata.IsDailyReportRegisted == false)
        {
            bookingdata.BookingStatus = e;
            formContext.Validate();
            AffectClearAllBtn();
        }
    }

    /// <summary>
    /// Event call for enable delete button
    /// </summary>
    /// <param name="e"></param>
    void OnSelectedBookingTypeChanged(ReservationClassComponentData e)
    {
        bookingdata.CurrentBookingType = e ?? new ReservationClassComponentData();
        formContext.Validate();
        AffectClearAllBtn();
    }

    void OnSelectedSaleBranchChanged(LoadSaleBranch e)
    {
        bookingdata.SelectedSaleBranch = e ?? new LoadSaleBranch();
        formContext.Validate();
        AffectClearAllBtn();
    }

    void OnSelectedStaffChanged(LoadStaff e)
    {
        bookingdata.SelectedStaff = e ?? new LoadStaff();
        formContext.Validate();
        AffectClearAllBtn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnTextOrganizationNameChanged(string newValue)
    {
        bookingdata.TextOrganizationName = newValue;
        AffectClearAllBtn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnCustomerListLabelChanged(string propertyName, dynamic value)
    {
        var propertyInfo = bookingdata.GetType().GetProperty(propertyName);
        propertyInfo.SetValue(bookingdata, value, null);
        if (bookingdata.IsDailyReportRegisted == false)
        {
            if (bookingdata.customerComponentGyosyaData != null
                && bookingdata.customerComponentTokiskData != null
                && propertyName == nameof(bookingdata.customerComponentTokiStData) && value != null)
            {
                if(supervisorCount == 3)
                {
                    bookingdata.SupervisorTabData.customerComponentGyosyaData = bookingdata.customerComponentGyosyaData;
                    bookingdata.SupervisorTabData.customerComponentTokiskData = bookingdata.customerComponentTokiskData;
                    bookingdata.SupervisorTabData.customerComponentTokiStData = bookingdata.customerComponentTokiStData;
                    BookingInputTabChild.CustomerComponent.DefaultTokisk = Convert.ToInt32(bookingdata.SupervisorTabData.customerComponentTokiskData?.TokuiSeq);
                    BookingInputTabChild.CustomerComponent.DefaultTokiSt = Convert.ToInt32(bookingdata.SupervisorTabData.customerComponentTokiStData?.SitenCdSeq);
                    BookingInputTabChild.CustomerComponent.DefaultGyosya = null;
                    BookingInputTabChild.CustomerComponent.RenderByTokiskTokist();
                }
                if (supervisorCount > 3)
                {
                    BookingInputTabChild.CustomerComponent.DefaultTokisk = Convert.ToInt32(bookingdata.SupervisorTabData.customerComponentTokiskData?.TokuiSeq);
                    BookingInputTabChild.CustomerComponent.DefaultTokiSt = Convert.ToInt32(bookingdata.SupervisorTabData.customerComponentTokiStData?.SitenCdSeq);
                    BookingInputTabChild.CustomerComponent.DefaultGyosya = null;
                    BookingInputTabChild.CustomerComponent.RenderByTokiskTokist();
                    supervisorCount = 3;
                }
            }
            else if (supervisorCount < 3)
                supervisorCount++;
            ChangeInvoiceDate();
            ClearAllBtnDisabledState = false;
            if(propertyName != nameof(bookingdata.customerComponentGyosyaData))
                formContext.Validate();
            //StateHasChanged();
        }
    }

    protected void SelectedPassengerTypeChanged(PassengerType newValue)
    {
        if (newValue != null)
        {
            bookingdata.PassengerTypeData = newValue;
        }
        ClearAllBtnDisabledState = false;
        formContext.Validate();
        StateHasChanged();
    }

    void ChangeInvoiceDate()
    {
        var expectDate = bookingdata.InvoiceDate;
        var dateNum = Convert.ToInt32(bookingdata.customerComponentTokiStData?.SimeD) == 0 ? bookingdata.InvoiceDate.Day : Convert.ToInt32(bookingdata.customerComponentTokiStData?.SimeD);
        if (expectDate.Day > dateNum)
        {
            expectDate = expectDate.AddMonths(1);
        }
        bookingdata.InvoiceMonth = expectDate.ToString(MonthFormat);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnDateStartChanged(DateTime? newValue)
    {
        if(newValue == null)
            return;
        if (bookingdata.IsDailyReportRegisted == false)
        {
            bookingdata.BusStartDate = (DateTime)newValue;
            //bookingdata.BusEndDate = newValue;
            bookingdata.InvoiceDate = (DateTime)newValue; // 配車日時
            bookingdata.InvoiceMonth = ((DateTime)newValue).ToString(MonthFormat);

            bookingdata.ReservationTabData.GarageLeaveDate = (DateTime)newValue;
            bookingdata.ReservationTabData.GoDate = (DateTime)newValue;
            if (bookingdata.PreDaySetting)
                bookingdata.ReservationTabData.GarageLeaveDate = bookingdata.ReservationTabData.GarageLeaveDate.AddDays(-1);

            OnDateEndChanged((DateTime)newValue);
            ClearAllBtnDisabledState = false;

            InvokeAsync(StateHasChanged);
        }
    }

    void OnBusStartTimeChanged(object newTime)
    {
        try
        {
            if (bookingdata.IsDailyReportRegisted == false)
            {
                bookingdata.ReservationTabData.SyuKoTime.Str = newTime.ToString();
                bookingdata.ReservationTabData.SyuPatime.Str = newTime.ToString();
            }
        }
        catch (Exception)
        {

        }
        AffectClearAllBtn();
    }

    void OnBusEndTimeChanged(object newTime)
    {
        try
        {
            if (bookingdata.IsDailyReportRegisted == false)
            {
                bookingdata.ReservationTabData.KikTime.Str = newTime.ToString();
            }
        }
        catch (Exception)
        {

        }
        AffectClearAllBtn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnDateEndChanged(DateTime? newValue)
    {
        if(newValue == null)
            return;
        if (bookingdata.IsDailyReportRegisted == false)
        {
            bookingdata.BusEndDate = (DateTime)newValue;
            ClearAllBtnDisabledState = false;
            if (UriKbn == 2)
            {
                bookingdata.InvoiceDate = (DateTime)newValue; // 終日予定
                bookingdata.InvoiceMonth = ((DateTime)newValue).ToString(MonthFormat);
            }
            ChangeInvoiceDate();
            bookingdata.ReservationTabData.GarageReturnDate = (DateTime)newValue;
            if (bookingdata.AftDaySetting)
                bookingdata.ReservationTabData.GarageReturnDate = bookingdata.ReservationTabData.GarageReturnDate.AddDays(1);
            formContext.Validate();
            InvokeAsync(StateHasChanged);
        }
    }

    void OnPreDayCheckBoxChanged(bool value)
    {
        if (bookingdata.IsDailyReportRegisted == false)
        {
            bookingdata.PreDaySetting = value;
            BookingInputTabChild.OnPreDayChecked(value);
            AffectClearAllBtn();
        }
    }

    void OnAftDayCheckBoxChanged(bool value)
    {
        if (bookingdata.IsDailyReportRegisted == false)
        {
            bookingdata.AftDaySetting = value;
            BookingInputTabChild.OnAfterDayChecked(value);
            AffectClearAllBtn();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnDateChanged(DateTime? newValue)
    {
        if(newValue == null)
            return;
        if (bookingdata.IsDailyReportRegisted == false)
        {
            bookingdata.InvoiceDate = (DateTime)newValue;
            bookingdata.InvoiceMonth = ((DateTime)newValue).ToString(MonthFormat);
            ChangeInvoiceDate();
            ClearAllBtnDisabledState = false;
            InvokeAsync(StateHasChanged);
        }
    }

    #region InputRate Action

    /// <summary>
    /// Occurs when InputRate value of <see cref="BookingFormData.TaxRate"/> changed.
    /// <para>Default value to 10 - ticked 1729</para>
    /// </summary>
    /// <param name="value">New value of rate</param>
    void OnBusTaxRateChanged(string value)
    {
        bookingdata.TaxRate = value;

        ClearAllBtnDisabledState = false;

        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///  Occurs when InputRate value of <see cref="BookingFormData.FeeBusRate"/> changed.
    /// </summary>
    /// <param name="value">New value of rate</param>
    void OnBusFeeTaxRateChanged(string value)
    {
        bookingdata.FeeBusRate = value;

        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Occurs when InputRate value of <see cref="BookingFormData.FeeGuiderRate"/> changed.
    /// </summary>
    /// <param name="value">New value of rate</param>
    void OnGuiderFeeTaxRateChanged(string value)
    {
        bookingdata.FeeGuiderRate = value;

        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }
    #endregion

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void SelectedTaxTypeForBusChanged(TaxTypeList e)
    {
        if (e != null)
        {
            bookingdata.TaxTypeforBus = e;
        }
        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void SelectedTaxTypeForGuiderChanged(TaxTypeList e)
    {
        if (e != null)
        {
            bookingdata.TaxTypeforGuider = e;
        }
        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Booking Grid value changed methods

    /// <summary>
    ///
    /// </summary>
    void AddNewRow()
    {
        if (bookingdata.IsDailyReportRegisted == false)
        {
            //int max = this.bookingdata.VehicleGridDataList.Max(t => int.Parse(t.RowID));
            int count = this.bookingdata.VehicleGridDataList.Count();
            if (count < maxRow)
            {
                maxRowIndex++;
                bookingdata.VehicleGridDataList.Add(new VehicleGridData { RowID = $"{maxRowIndex}", BusNum = "1", DriverNum = "1", UnitBusPrice = "0", UnitBusFee = "0", UnitPrice = "0", BusPrice = "0", GuiderNum = "0", UnitGuiderFee = "0", GuiderFee = "0", busTypeData = new BusTypeData(), UnitPriceIndex = "0" });
            }
            formContext.Validate();
            ClearAllBtnDisabledState = false;
            StateHasChanged();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="rowID"></param>
    void OnSelectedBusTypeChanged(BusTypeData e, string rowID)
    {
        if (bookingdata.IsDailyReportRegisted == false)
        {
            var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
            gridRow.busTypeData = e ?? new BusTypeData();
            formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.busTypeData));
            AffectClearAllBtn();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnNumBusChanged(string value, string rowID)
    {
        if (bookingdata.IsDailyReportRegisted == false)
        {
            var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
            if (string.IsNullOrWhiteSpace(value) == false)
            {
                int newValue;
                if (int.TryParse(value, out newValue) && newValue > 0)
                {
                    gridRow.BusNum = newValue.ToString();
                    formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.BusNum));
                    ClearAllBtnDisabledState = false;
                }
            }
            StateHasChanged();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnNumDriverChanged(string value, string rowID)
    {
        if (bookingdata.IsDailyReportRegisted == false)
        {
            var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
            if (string.IsNullOrWhiteSpace(value) == false)
            {
                int newValue;
                if (int.TryParse(value, out newValue) && newValue > 0)
                {
                    gridRow.DriverNum = newValue.ToString();
                    formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.DriverNum));
                    ClearAllBtnDisabledState = false;
                }
            }
            StateHasChanged();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnUnitBusPriceChanged(String value, string rowID)
    {
        int tmp;
        if (CommonUtil.NumberTryParse(value, out tmp))
        {
            if (tmp >= 0)
            {
                var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
                gridRow.UnitBusPrice = value;
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.UnitBusPrice));
            }
        }
        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnUnitBusFareChanged(String value, string rowID)
    {
        int tmp;
        if (CommonUtil.NumberTryParse(value, out tmp))
        {
            if (tmp >= 0)
            {
                var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
                gridRow.UnitBusFee = value;
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.UnitBusFee));
            }
        }

        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnNumGuiderChanged(string value, string rowID)
    {
        var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
        if (string.IsNullOrWhiteSpace(value) == false)
        {
            int newValue;
            if (int.TryParse(value, out newValue) && newValue >= 0)
            {
                gridRow.GuiderNum = newValue.ToString();
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.GuiderNum));
                ClearAllBtnDisabledState = false;
            }
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnUnitGuiderChanged(String value, string rowID)
    {
        int tmp;
        if (CommonUtil.NumberTryParse(value, out tmp))
        {
            if (tmp >= 0)
            {
                var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
                gridRow.UnitGuiderFee = value;
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.UnitGuiderFee));
            }
        }

        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    private void OnBranchPriorityAAChanged(LoadSaleBranch newBranch)
    {
        tempVehicleGridData.PriorityAutoAssignBranch = newBranch;

        StateHasChanged();
    }
    private void OnChangeBranchPriorityAAClicked()
    {
        var oldBranch = bookingdata.VehicleGridDataList
            .FirstOrDefault(_ => _.RowID == tempVehicleGridData.RowID)
            .PriorityAutoAssignBranch;

        if (oldBranch != tempVehicleGridData.PriorityAutoAssignBranch)
        {
            bookingdata.VehicleGridDataList
            .FirstOrDefault(_ => _.RowID == tempVehicleGridData.RowID)
            .PriorityAutoAssignBranch = tempVehicleGridData.PriorityAutoAssignBranch;
            SubmitBtnEnabledState = true;
        }

        isPriorityAAPopup = false;

        StateHasChanged();
    }

    private void OnBranchPriorityAAClicked(bool isShow, string rowId)
    {
        isPriorityAAPopup = isShow;
        VehicleGridData vehicleGridData = bookingdata.VehicleGridDataList.FirstOrDefault(t => t.RowID == rowId);

        if (isShow)
        {
            if (vehicleGridData.PriorityAutoAssignBranch != null && string.IsNullOrEmpty(vehicleGridData.PriorityAutoAssignBranch.BranchInfo))
            {
                vehicleGridData.PriorityAutoAssignBranch = SaleBranchsAutoAssign.Skip(1).FirstOrDefault(_ => _.EigyoCdSeq == vehicleGridData.PriorityAutoAssignBranch.EigyoCdSeq);
            }

            tempVehicleGridData.SimpleCloneProperties(vehicleGridData);
        }

        StateHasChanged();
    }

    /// <summary>
    ///     ///
    /// </summary>
    /// <param name="status"></param>
    /// <param name="rowId"></param>
    void OnMinMaxPopupVisibleChanged(Boolean status, string rowId)
    {
        Rowid = rowId;
        PopupBooking = status;
        VehicleGridData vehicleGridData = bookingdata.VehicleGridDataList.FirstOrDefault(t => t.RowID == rowId);
        if (status == false)
        { // when click close popup
          // bookingdata.VehicleGridDataList[int.Parse(Rowid) - 1].minMaxForm = tmpMinMaxFormData;
            vehicleGridData.minMaxForm = tmpMinMaxFormData;
            tmpMinMaxFormData = null;
            JSRuntime.InvokeAsync<string>("focusSubmitButton", "hyper" + rowId);
        }
        else // when show popup
        {
            // tmpMinMaxFormData = new MinMaxSettingFormData(bookingdata.VehicleGridDataList[int.Parse(Rowid) - 1].minMaxForm);
            tmpMinMaxFormData = new MinMaxSettingFormData(vehicleGridData.minMaxForm);
            if (!disableAll)
            {
                minMaxState = MinMaxSettingState.None;
            }
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="id"></param>
    protected void ConfirmDelete(string id)
    {
        if (bookingdata.IsDailyReportRegisted == false)
        {
            var verhicalData = bookingdata.VehicleGridDataList.SingleOrDefault(v => v.RowID == id);
            if (verhicalData == null) return;
            var isMinMaxNull = verhicalData.minMaxForm.typeBus == -1;
            DeleteId = id;
            if (isMinMaxNull == true)
            {
                DeleteHOGrid(DeleteId);
            }
            else
            {
                PopupDeletedata = true;
                StateHasChanged();
            }
        }
    }

    /// <summary>
    /// Delete booking when not set Min-Max Data
    /// </summary>
    /// <param name="rowID"></param>
    void DeleteHOGrid(string rowID)
    {
        var itemToRemove = bookingdata.VehicleGridDataList.Single(r => r.RowID == rowID);
        this.bookingdata.VehicleGridDataList.Remove(itemToRemove);
        formContext.NotifyFieldChanged(FieldIdentifier.Create(() => bookingdata.VehicleGridDataList));
        StateHasChanged();
    }

    /// <summary>
    /// Delete booking when set Min-Max Data
    /// </summary>
    /// <param name="args"></param>
    void DeleteHOGridnotnull(MouseEventArgs args)
    {
        if (DeleteId != "")
        {
            var itemToRemove = bookingdata.VehicleGridDataList.Single(r => r.RowID == DeleteId);
            this.bookingdata.VehicleGridDataList.Remove(itemToRemove);
        }
        PopupDeletedata = false;
        formContext.NotifyFieldChanged(FieldIdentifier.Create(() => bookingdata.VehicleGridDataList));
        StateHasChanged();
    }

    #endregion

    void UnitPriceCallBack(string Rowid)
    {
        if (bookingdata.VehicleGridDataList.Count > 0)
        {
            PopupBooking = false;
            var itemToUpdate = bookingdata.VehicleGridDataList.Single(r => r.RowID == Rowid);
            formContext.NotifyFieldChanged(() => itemToUpdate.UnitBusPrice, () => itemToUpdate.UnitBusFee);
        }
        JSRuntime.InvokeAsync<string>("focusSubmitButton", "hyper" + Rowid);
        formContext.Validate();
        StateHasChanged();
    }

    async Task HandleChangeState(CallBackTabBookingState newState)
    {
        switch (newState)
        {
            case CallBackTabBookingState.FixedConfirm:
                await RefreshConfirmTab();
                formContext.MarkAsUnmodified();
                formContext.Validate();
                BookingInputTabChild.isEnableSubmitConfirm = false;
                SubmitBtnEnabledState = false;
                ClearAllBtnDisabledState = false;
                break;
            case CallBackTabBookingState.UpdateBooking:
                await ConfirmUpdate(true);
                break;
            case CallBackTabBookingState.DisableIndex:
                disableAll = true;
                break;
            case CallBackTabBookingState.EnableIndex:
                disableAll = false;
                minMaxState = MinMaxSettingState.None;
                break;
            case CallBackTabBookingState.UpdateConfirmTab:
                await HandleUpdateConfirmTab();
                break;
            case CallBackTabBookingState.UpdateCancelTab:
                await HandleUpdateCancelTab();
                break;
            case CallBackTabBookingState.HaitaError:
                await HandleHaitaError();
                break;
            case CallBackTabBookingState.True:
            case CallBackTabBookingState.False:
            default:
                ClearAllBtnDisabledState = newState == CallBackTabBookingState.True;
                break;
        }
        await InvokeAsync(StateHasChanged);
    }

    async Task Load(int tenantId, int compnyId)
    {
        TkmKasSet tkmKasSet = await Http.GetJsonAsync<TkmKasSet>(baseUrl + "/api/TkmKasSet/" + compnyId);
        UriKbn = tkmKasSet.UriKbn;
        SaleBranchList = (await LoadSaleBranchListAsync()).ToList();
        StaffList = (await LoadStaffListAsync()).ToList();
        if (UkeCd == null || UkeCd == "0" || bookingdata == null || bookingdata.CurrentBookingType.YoyaKbnSeq == -1) // Add new booking input
        {
            bookingdata.BookingStatus = BookingStatusList.FirstOrDefault(t => t.CodeKbn == Constants.BookingStatus);
            bookingdata.VehicleGridDataList.Add(new VehicleGridData { RowID = "1", BusNum = "1", DriverNum = "1", UnitBusPrice = "0", UnitBusFee = "0", UnitPrice = "0", BusPrice = "0", GuiderNum = "0", UnitGuiderFee = "0", GuiderFee = "0", minMaxForm = new MinMaxSettingFormData() });
            bookingdata.TaxTypeforBus = TaxTypeListData.taxTypeList.First();
            bookingdata.TaxTypeforGuider = TaxTypeListData.taxTypeList.First();
            if (StaffList.Count != 0)
            {
                bookingdata.SelectedStaff = StaffList.ToList().Where(t => t.SyainCdSeq == new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).FirstOrDefault() ?? StaffList.First();
                bookingdata.SelectedSaleBranch = SaleBranchList.Where(t => t.EigyoCdSeq == bookingdata.SelectedStaff.EigyoCdSeq).First();
            }
            if (BookingTypeList.Count != 0)
            {
                var bookingType = BookingTypeList.ToList().Where(t => t.TenantCdSeq == new ClaimModel().TenantID).FirstOrDefault();
                if(bookingType != null)
                {
                    bookingdata.CurrentBookingType = new ReservationClassComponentData()
                    {
                        YoyaKbn = bookingType.YoyaKbn,
                        YoyaKbnNm = bookingType.YoyaKbnNm,
                        YoyaKbnSeq = bookingType.YoyaKbnSeq
                    };
                }
                if (bookingdata.CurrentBookingType == null)
                {
                    bookingdata.CurrentBookingType = new ReservationClassComponentData();
                }
            }
        }
        else // Edit exist booking input
        {
            emptyItemMessage.Clear();
            if (bookingdata.BookingStatus.CodeKbn == Constants.BookingStatus || bookingdata.BookingStatus.CodeKbn == Constants.CancelBookingStatus)
            {
                bookingdata.BookingStatus = BookingStatusList.FirstOrDefault(t => t.CodeKbn == Constants.BookingStatus);
            }
            if (bookingdata.BookingStatus.CodeKbn == Constants.EstimateStatus || bookingdata.BookingStatus.CodeKbn == Constants.CancelEstimateStatus)
            {
                bookingdata.BookingStatus = BookingStatusList.FirstOrDefault(t => t.CodeKbn == Constants.EstimateStatus);
            }
            if (StaffList.Count != 0)
            {
                var selectedStaff = StaffList.ToList().Where(t => t.SyainCdSeq == bookingdata.SelectedStaff.SyainCdSeq).FirstOrDefault();

                bookingdata.SelectedStaff = AssignSelectedItem(selectedStaff, new LoadStaff(), EmptyStaffMessage);

                var selectedSaleBranch = SaleBranchList.Where(t => t.EigyoCdSeq == bookingdata.SelectedSaleBranch.EigyoCdSeq).FirstOrDefault();
                bookingdata.SelectedSaleBranch = AssignSelectedItem(selectedSaleBranch, new LoadSaleBranch(), EmptySaleBranchMessage);
            }
            if (BookingTypeList.Count != 0)
            {
                var bookingType = BookingTypeList.ToList().Where(t => t.YoyaKbnSeq == bookingdata.CurrentBookingType.YoyaKbnSeq).FirstOrDefault();
                var currentBookingType = new ReservationClassComponentData()
                {
                    YoyaKbn = bookingType.YoyaKbn,
                    YoyaKbnNm = bookingType.YoyaKbnNm,
                    YoyaKbnSeq = bookingType.YoyaKbnSeq
                };
                bookingdata.CurrentBookingType = AssignSelectedItem(currentBookingType, new ReservationClassComponentData(), EmptyBookingTypeMessage);
            }

            CustomerComponent.DefaultTokisk = Convert.ToInt32(bookingdata.customerComponentTokiskData?.TokuiSeq);
            CustomerComponent.DefaultTokiSt = Convert.ToInt32(bookingdata.customerComponentTokiStData?.SitenCdSeq);
            CustomerComponent.DefaultGyosya = null;
            CustomerComponent.RenderByTokiskTokist();

            for (int i = 0; i < bookingdata.VehicleGridDataList.Count; i++)
            {
                var busTypeData = BusTypeList.Where(x => x.Katakbn == bookingdata.VehicleGridDataList[i].busTypeData.Katakbn &&
                                x.SyaSyuCdSeq == bookingdata.VehicleGridDataList[i].busTypeData.SyaSyuCdSeq).FirstOrDefault();
                bookingdata.VehicleGridDataList[i].busTypeData = AssignSelectedItem(busTypeData, new BusTypeData(), EmptyBusTypeMessage);
            }
            isEmptyItem = emptyItemMessage.Count > 0;

            if (InvoiceTypeList != null)
            {
                bookingdata.SelectedInvoiceType = InvoiceTypeList.SingleOrDefault(e => e.CodeKbnSeq == bookingdata.SelectedInvoiceType.CodeKbnSeq);
            }
            if (bookingdata.PassengerTypeData != null && passengerTypeList != null)
            {
                int jyoKyakuCdSeq = bookingdata.PassengerTypeData.JyoKyakuCdSeq;
                bookingdata.PassengerTypeData = passengerTypeList.FirstOrDefault(p => p.JyoKyakuCdSeq == jyoKyakuCdSeq);
            }
        }
        maxRowIndex = Math.Max(this.bookingdata.VehicleGridDataList.Max(t => int.Parse(t.RowID)), bookingdata.CurrentMaxSyaSyuRen);
        disableAll = false;
    }

    /// <summary>
    ///
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="selected"></param>
    /// <param name="selectedItem"></param>
    /// <param name="newItem"></param>
    /// <param name="message"></param>
    T AssignSelectedItem<T>(T selectedItem, T newItem, string message)
    {
        if (selectedItem == null)
        {
            if (!emptyItemMessage.Contains(message))
            {
                emptyItemMessage.Add(message);
            }
            return newItem;
        }
        else
        {
            return selectedItem;
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    void ClearAll(MouseEventArgs args)
    {
        int count = bookingdata.VehicleGridDataList.Count();
        bookingdata = new BookingFormData();
        PopupVisible = false;

        for (int i = 1; i < count; i++)
        {
            bookingdata.VehicleGridDataList.Add(new VehicleGridData { RowID = "" + (i + 1), BusNum = "1", DriverNum = "1", UnitBusPrice = "0", UnitBusFee = "0", UnitPrice = "0", BusPrice = "0", GuiderNum = "0", UnitGuiderFee = "0", GuiderFee = "0" });
        }
        BackToInitializeState();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handle keydown to add new row in datagrid with hotkey : Alt && '+'
    /// </summary>
    /// <param name="e"></param>
    void HandleKeyAddNewRow(KeyboardEventArgs e)
    {
        if (e.AltKey && e.Key == "+")
        {
            AddNewRow();
        }
        else
        {
            //Prevent re-render when other key is pressed
            shouldRender = false;
        }
    }

    /// <summary>
    /// Handle action create a new booking. Include handle success and error response.
    /// </summary>
    /// <param name="client">HttpClient assign to send</param>
    /// <param name="booking">Reservation information will be registered.</param>
    /// <returns></returns>
    private async Task HandleCreateNewBooking(HttpClient client, BookingFormData booking)
    {
        //client.Timeout = TimeSpan.FromMinutes(10);
        HttpResponseMessage response = await client.PostAsync($"{baseUrl}/api/BookingInput/", Http.getStringContentFromObject(booking));

        if (response.IsSuccessStatusCode)
        {
            string newUkeNo = await response.Content.ReadAsStringAsync();
            newUkeCd = newUkeNo.Substring(5);
            RegisteredResult = CreateResultSuccessMessage;
            RegisteredResultContent = string.Format(CreateResultScuccessMessageContent, newUkeCd);
            BackToInitializeState();
            PopupSaveDataSucess = true;
            BookingFormData putData = new BookingFormData();
            try
            {
                putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + newUkeNo);
            }
            catch (Exception)
            {
                Console.WriteLine();
            }
            putData.UkeNo = newUkeNo;
            var result = await Task.WhenAll(fileUploadlst.Select(f => ProcessFiles(f, newUkeNo)));
            if (result.Any(e => e))
            {
                TKD_UnkobiDataListService.InsertUnkobiFile(putData, fileUploadlst);
            }
            if (booking.IsYoushaNote == true)
            {
                try
                {
                    CarCooperationService.UpdateYoushaNotice(int.Parse(motoTenantCdSeq), motoUkeNo, short.Parse(motoUnkRen), int.Parse(motoYouTblSeq));
                }
                catch (Exception)
                {
                    Console.WriteLine();
                }
            }

        }
        else
        {
            string errorCode = await response.Content.ReadAsStringAsync();

            if (errorCode == Constants.ErrorMessage.UkenoCdIsFull)
            {
                RegisteredResult = CreateResultErrorMessage;
                RegisteredResultContent = CreateResultUkenoIsFullErrorMessageContent;
            }
            else
            {
                RegisteredResult = CreateResultErrorMessage;
                RegisteredResultContent = string.Empty;
            }

            PopupSaveDataError = true;
        }
    }

    /// <summary>
    ///
    /// </summary>
    private async void HandleValidSubmit()
    {
        bool isValid = formContext.Validate();
        if (isValid)
        {
            disableAll = true;
            var client = await Http.GetHttpClient();

            if (UkeCd == null || UkeCd == "0")
            {
                bookingdata.IsCopyMode = false;

                await HandleCreateNewBooking(client, bookingdata);

            }
            else
            {
                supervisorCount = 6;
                if (isCopyMode)
                {
                    bookingdata.IsCopyMode = true;
                    bookingdata.UkeNo = string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd);
                    bookingdata.ConfirmationTabDataList = new List<ConfirmationTabData>();
                    bookingdata.CancelTickedData = new CancelTickedData();

                    await HandleCreateNewBooking(client, bookingdata);

                    BookingFormData putData = new BookingFormData();
                    try
                    {
                        putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd));
                    }
                    catch (Exception)
                    {
                    }
                    if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
                    {
                        bookingdata.SetBookingFromData(putData);
                        // SINSINHO_WEBSYSTEM-7526 【単体複写画面＿仕様変更
                        //PageTitle = string.Format(PageTitleCopy, newUkeCd);
                        SubmitText = CopyButton;
                        await Load(new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
                    }
                    else
                    {
                        NavManager.NavigateTo("/");
                    }

                }
                else if (string.IsNullOrEmpty(bookingdata.KaktYmd) == false)
                {
                    isPopupEditWhenConfirmed = true;
                }
                else
                {
                    bookingdata.IsCopyMode = false;
                    await ProcessUpdateBooking();
                }
            }
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            SubmitBtnEnabledState = false;
        }
    }

    private async void UpdateBookingInput(bool isUpdateWithAutoAssign)
    {
        bool isHaita = await HaitaCheck(false);
        if (!isHaita)
        {
            PopupHaiTaCheckFail = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        var client = await Http.GetHttpClient();
        bookingdata.IsUpdateWithAutoAssign = isUpdateWithAutoAssign;
        HttpResponseMessage response = await client.PutAsync($"{baseUrl}/api/BookingInput/{string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd)}", Http.getStringContentFromObject(bookingdata));
        if (response.IsSuccessStatusCode)
        {
            bookingdatalst = new List<BookingData>();
            bookingdatalst = await _busBookingDataService.GetBookingData(string.Format("{0:D5}{1}", new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID, UkeCd), bookingdata.UnkRen);
            if (bookingdatalst.Count() > 0)
            {
                foreach (var itembooking in bookingdatalst)
                {
                    List<ItemStaff> lstStaffsLines = new List<ItemStaff>();
                    List<StaffsLines> lstStafflines = new List<StaffsLines>();
                    lstStaffsLines.Clear();
                    lstStafflines = await _StaffsChartService.GetStaffdatahaiiinbooking(itembooking.UkeNo, itembooking.UnkRen, itembooking.TeiDanNo, itembooking.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                    foreach (var item in lstStafflines)
                    {
                        ItemStaff staffItem = new ItemStaff();
                        staffItem.BookingId = item.Haisha_UkeNo;
                        staffItem.HaUnkRen = item.Haisha_UnkRen;
                        staffItem.TeiDanNo = item.Haisha_TeiDanNo;
                        staffItem.BunkRen = item.Haisha_BunkRen;
                        staffItem.HenKai = 1;
                        staffItem.Id = item.Yykasho_UkeCd.ToString();
                        staffItem.UkeCd = item.Yykasho_UkeCd;
                        staffItem.BusLine = item.Haiin_SyainCdSeq.ToString();
                        staffItem.StartDate = item.Haisha_HaiSYmd;
                        staffItem.TimeStart = int.Parse(item.Haisha_HaiSTime);
                        staffItem.EndDate = item.Haisha_TouYmd;
                        staffItem.TimeEnd = int.Parse(item.Haisha_TouChTime);
                        staffItem.StartDateDefault = item.Haisha_SyuKoYmd;
                        staffItem.EndDateDefault = item.Haisha_KikYmd;
                        staffItem.TimeStartDefault = int.Parse(item.Haisha_SyuKoTime);
                        staffItem.TimeEndDefault = int.Parse(item.Haisha_KikTime);
                        staffItem.JyoSyaJin = item.Haisha_JyoSyaJin;
                        staffItem.AllowEdit = true;
                        staffItem.Status = 1;
                        staffItem.CCSStyle = "";
                        staffItem.Top = 0.3125;
                        staffItem.Height = 2;
                        staffItem.Name = "";
                        staffItem.DanTaNm = item.Haisha_DanTaNm2;
                        staffItem.IkNm = item.Haisha_IkNm;
                        staffItem.TokuiNm = "";
                        staffItem.NumberDriver = item.Haisha_DrvJin;
                        staffItem.NumberGuider = item.Haisha_GuiSu;
                        staffItem.MinDate = item.Unkobi_HaiSYmd;
                        staffItem.MinTime = int.Parse(item.Unkobi_HaiSTime);
                        staffItem.Maxdate = item.Unkobi_TouYmd;
                        staffItem.MaxTime = int.Parse(item.Unkobi_TouChTime);
                        staffItem.HasYmd = item.Haisha_HaiSYmd;
                        staffItem.Zeiritsu = 1;
                        staffItem.BookingType = 1;
                        staffItem.CodeKb_CodeKbn = "";
                        staffItem.KSKbn = item.Haisha_KSKbn;
                        staffItem.YouTblSeq = 0;
                        staffItem.SyaSyu_SyaSyuNm = item.Syasyu_SyaSyuNm;
                        staffItem.SyaSyu_SyaSyuNm_Haisha = "";
                        staffItem.BusLineType = item.Haisha_UkeNo;
                        staffItem.Tokisk_YouSRyakuNm = null;
                        staffItem.Tokisk_SitenCdSeq = 0;
                        staffItem.TokiSk_RyakuNm = item.Tokisk_RyakuNm;
                        staffItem.TokiSt_RyakuNm = item.Tokist_RyakuNm;
                        staffItem.Shuri_ShuriTblSeq = 0;
                        staffItem.SyaSyuRen = item.Haisha_SyaSyuRen;
                        staffItem.BranchId = 0;
                        staffItem.CompanyId = 0;
                        staffItem.BunKSyuJyn = 1;
                        staffItem.UnkoJKbn = item.Unkobi_UnkoJKbn;
                        staffItem.unSyuKoYmd = item.Unkobi_SyukoYmd;
                        staffItem.unKikYmd = item.Unkobi_KikYmd;
                        staffItem.unHaiSYmd = item.Unkobi_HaiSYmd;
                        staffItem.unTouYmd = item.Unkobi_TouYmd;
                        staffItem.CanBeDeleted = false;
                        staffItem.CanSimpledispatch = true;
                        staffItem.BusVehicle = 0;
                        if (item.Syokum_SyokumuKbn == 1 || item.Syokum_SyokumuKbn == 2)
                        { staffItem.BusVehicle = 1; }
                        if (item.Syokum_SyokumuKbn == 3 || item.Syokum_SyokumuKbn == 4)
                        { staffItem.BusVehicle = 2; }
                        staffItem.haiInRen = item.Haiin_HaiInRen;
                        lstStaffsLines.Add(staffItem);
                    }
                    foreach (var itemhaiin in lstStaffsLines)
                    {
                        _KobanDataService.DeleteKobanbyUkeno(itemhaiin.BookingId, itemhaiin.HaUnkRen, itemhaiin.TeiDanNo, itemhaiin.BunkRen, int.Parse(itemhaiin.BusLine));
                        _KobanDataService.UpdateTimeKoban(itemhaiin.StartDateDefault, itemhaiin.TimeStartDefault.ToString("D4"), itemhaiin.EndDateDefault, itemhaiin.TimeEndDefault.ToString("D4"), int.Parse(itemhaiin.BusLine), _busBookingDataService.Getcompany(itemhaiin.unHaiSYmd, int.Parse(itemhaiin.BusLine)), itemhaiin, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, "KJ1000P");
                    }
                }
            }
            isUpdateSuccess = true;
            RegisteredResult = PopupTitleInfo;
            RegisteredResultContent = UpdateResultSuccessMessage;
        }
        else
        {
            isUpdateSuccess = false;
            RegisteredResult = PopupTitleError;
            RegisteredResultContent = UpdateResultErrorMessage;
        }
        isAutoAssignPopup = false;
        PopupUpdateDataSucess = true;
        try
        {
            BookingFormData putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd));
            if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
            {
                bookingdata.SetBookingFromData(putData);
            }
        }
        catch (Exception)
        {
        }
        await Load(new ClaimModel().TenantID, new ClaimModel().CompanyID);
        ClearAllBtnDisabledState = true;
        bookingdata.CalculateCancelFee();
        bookingdata.CalculateCancelTaxFee();
        await BookingInputTabChild.SetupJourneyTabAsync();
        //await BookingInputTabChild.SetupCancelTabAsync(bookingdata);//TODO
        //BookingInputTabChild.SetupCOnfirmationTab(bookingdata);//TODO
        await BookingInputTabChild.Load(bookingdata);
        formContext.MarkAsUnmodified();
        StateHasChanged();

        //formContext = new EditContext(bookingdata);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void FocusOnOrganizationNameAgainAndDisabledSubmitButton(EventArgs e)
    {
        if (isCopyMode == false) SubmitBtnEnabledState = false;
        JSRuntime.InvokeAsync<string>("focusEditor", "focus");
    }

    /// <summary>
    ///
    /// </summary>
    void BackToInitializeState()
    {
        bookingdata = new BookingFormData();
        bookingdata.VehicleGridDataList.Add(new VehicleGridData { RowID = "1", BusNum = "1", DriverNum = "1", UnitBusPrice = "0", UnitBusFee = "0", UnitPrice = "0", BusPrice = "0", GuiderNum = "0", UnitGuiderFee = "0", GuiderFee = "0", minMaxForm = new MinMaxSettingFormData() });
        bookingdata.TaxTypeforBus = TaxTypeListData.taxTypeList.First();
        bookingdata.TaxTypeforGuider = TaxTypeListData.taxTypeList.First();
        bookingdata.SelectedStaff = StaffList.ToList().Where(t => t.SyainCdSeq == new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).First();
        bookingdata.SelectedSaleBranch = SaleBranchList.Where(t => t.EigyoCdSeq == bookingdata.SelectedStaff.EigyoCdSeq).First();
        var bookingType = BookingTypeList.Where(t => t.TenantCdSeq == new ClaimModel().TenantID).FirstOrDefault();
        bookingdata.CurrentBookingType = new ReservationClassComponentData()
        {
            YoyaKbn = bookingType.YoyaKbn,
            YoyaKbnNm = bookingType.YoyaKbnNm,
            YoyaKbnSeq = bookingType.YoyaKbnSeq
        };
        bookingdata.BookingStatus = BookingStatusList.FirstOrDefault(t => t.CodeKbn == Constants.BookingStatus);

        ClearAllBtnDisabledState = true;
        SubmitBtnEnabledState = false;
        BookingInputTabChild.SetDefaultValueReservationTab(bookingdata);
        formContext = new EditContext(bookingdata);
    }

    void AffectClearAllBtn()
    {
        ClearAllBtnDisabledState = false;
        StateHasChanged();
    }

    /// <summary>
    /// Check if booking need to auto re-assign vehicle
    /// </summary>
    /// <returns>
    /// true - auto re-assign vehicle => open popup for user to choose
    /// false - no need to re-assign => no popup for user to choose
    /// </returns>
    public async Task<bool> CheckModifiedBookingData()
    {
        BookingFormData previous = new BookingFormData();
        try
        {
            previous = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd));
        }
        catch (Exception)
        {
        }
        if (bookingdata != null && previous?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            return this.bookingdata.VerifyHaishaModified(previous);
        }
        else
        {
            return false;
        }
    }

    /// <summary>
    /// Check if booking need to select vehicle to be removed
    /// </summary>
    /// <returns>
    /// true - select vehicle => open popup for user to choose
    /// false - no need to select => no popup for user to choose
    /// </returns>
    public async Task<bool> CheckRemovedBuses()
    {
        BookingFormData previous = new BookingFormData();
        try
        {
            previous = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd));
        }
        catch (Exception)
        {
        }
        if (bookingdata != null && previous?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            return this.bookingdata.VerifyHaishaRemoved(previous);
        }
        else
        {
            return false;
        }
    }

    void HandleNavigateToEditPage()
    {
        PopupSaveDataSucess = false;
        disableAll = false;
        NavManager.NavigateTo($"bookinginput?UkeCd={newUkeCd}", true);
    }

    async Task<IEnumerable<TPM_CodeKbCodeSyuData>> LoadBookingStatusListAsync(CancellationToken ct = default)
    {
        return await Task.FromResult(BookingStatusList);
    }

    async Task<IEnumerable<InvoiceType>> LoadBillingCategoryListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<InvoiceType>>(baseUrl + "/api/BookingInput/InvoiceType/");
    }

    async Task<IEnumerable<LoadSaleBranch>> LoadSaleBranchListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<LoadSaleBranch>>(baseUrl + "/api/ReceiveBookingSaleBranch/" + new ClaimModel().TenantID);
    }

    /// <summary>
    /// Load list branch display for set priority auto assign bus
    /// </summary>
    /// <param name="ct"></param>
    /// <returns>List branch and fist value is null</returns>
    async Task<IEnumerable<LoadSaleBranch>> LoadBranchsAutoAssignAsync(CancellationToken ct = default)
    {
        var branchs = await Http.GetJsonAsync<List<LoadSaleBranch>>(baseUrl + "/api/ReceiveBookingSaleBranch/" + new ClaimModel().TenantID);

        branchs.Insert(0, null);
        return branchs;
    }

    async Task<IEnumerable<LoadStaff>> LoadStaffListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<LoadStaff>>(baseUrl + "/api/Staff/" + new ClaimModel().TenantID);
    }

    async Task<IEnumerable<BookingTypeData>> LoadBookingTypeListAsync(CancellationToken ct = default)
    {
        return await TpmYoyKbnService.GetBookingTypeData();
    }

    async Task<IEnumerable<LoadCustomerList>> LoadCustomerListAsync(CancellationToken ct = default)
    {
        loadCustomerLists = await Http.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
        return loadCustomerLists;
    }

    async Task ConfirmUpdate(bool isUpdate)
    {
        isPopupEditWhenConfirmed = false;
        if (isUpdate)
        {
            await ProcessUpdateBooking();
        }
        else
        {
            disableAll = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    void HandleSelectedBillingChanged(InvoiceType newValue)
    {
        if (newValue != null)
            bookingdata.SelectedInvoiceType = newValue;
        ClearAllBtnDisabledState = false;
        formContext.Validate();
        AffectClearAllBtn();
    }

    /// <summary>
    /// When close popup update => if(update success) => change to tab user want
    /// </summary>
    void HandleClosePopupUpdate()
    {
        PopupUpdateDataSucess = false;
        if (isUpdateSuccess)
        {
            disableAll = false;
            formContext.MarkAsUnmodified();
            BookingInputTabChild.SetActiveTabIndexToWaitting();
            BookingInputTabChild.isEnableSubmitCancel = false;
            BookingInputTabChild.isEnableSubmitConfirm = false;
        }
        else
        {

        }
    }

    /// <summary>
    /// Update only confirm tab
    /// </summary>
    /// <returns></returns>
    async Task HandleUpdateConfirmTab()
    {
        bool isHaita = await HaitaCheck(true, true);
        if (!isHaita)
        {
            PopupHaiTaCheckFail = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        string ukeNo = string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd);
        var client = await Http.GetHttpClient();
        StringContent content = Http.getStringContentFromObject(bookingdata.ConfirmationTabDataList);
        HttpResponseMessage response =
            await client.PutAsync($"{baseUrl}/api/BookingInput/updateConfirmList/{ukeNo}", content);
        if (response.IsSuccessStatusCode)
        {
            isUpdateSuccess = true;
            RegisteredResult = PopupTitleInfo;
            RegisteredResultContent = UpdateResultSuccessMessage;
        }
        else
        {
            isUpdateSuccess = false;
            RegisteredResult = PopupTitleError;
            RegisteredResultContent = UpdateResultErrorMessage;
        }
        BookingFormData putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd));
        if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            bookingdata.ConfirmationTabDataList = putData.ConfirmationTabDataList;
            bookingdata.KakninUpdYmdTime = putData.KakninUpdYmdTime;
        }
        //BookingInputTabChild.SetupCOnfirmationTab(bookingdata); //TODO
        PopupUpdateDataSucess = true;
    }

    async Task RefreshConfirmTab()
    {
        bool isHaita = await HaitaCheck();
        if (!isHaita)
        {
            PopupHaiTaCheckFail = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        BookingFormData putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd));
        if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            bookingdata.ConfirmationTabDataList = putData.ConfirmationTabDataList;
            bookingdata.YykshoUpdYmdTime = putData.YykshoUpdYmdTime;
        }
        //BookingInputTabChild.SetupCOnfirmationTab(bookingdata);//TODO
    }

    /// <summary>
    /// Update only cancel tab
    /// </summary>
    /// <returns></returns>
    async Task HandleUpdateCancelTab()
    {
        bool isHaita = await HaitaCheck();
        if (!isHaita)
        {
            PopupHaiTaCheckFail = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        string ukeNo = string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd);
        var client = await Http.GetHttpClient();
        StringContent content = Http.getStringContentFromObject(bookingdata.CancelTickedData);
        HttpResponseMessage response =
            await client.PutAsync($"{baseUrl}/api/BookingInput/updateCancel/{ukeNo}", content);
        if (response.IsSuccessStatusCode)
        {
            isUpdateSuccess = true;
            RegisteredResult = PopupTitleInfo;
            RegisteredResultContent = UpdateResultSuccessMessage;
        }
        else
        {
            isUpdateSuccess = false;
            RegisteredResult = PopupTitleError;
            RegisteredResultContent = UpdateResultErrorMessage;
        }
        BookingFormData putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", new ClaimModel().TenantID, UkeCd));
        if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            bookingdata.CancelTickedData.SetData(putData.CancelTickedData);
            bookingdata.YykshoUpdYmdTime = putData.YykshoUpdYmdTime;
        }
        //await BookingInputTabChild.SetupCancelTabAsync(bookingdata);//TODO
        //BookingInputTabChild.LoadCancelComboboxValue(bookingdata);//TODO
        PopupUpdateDataSucess = true;
    }

    async Task HandleHaitaError()
    {
        PopupHaiTaCheckFail = true;
        await InvokeAsync(StateHasChanged);
        return;
    }

    private async Task Updatefile(List<FileInfoData> updateFileupload)
    {
        fileUploadlst = new List<FileInfoData>();
        fileUploadlst = updateFileupload;
    }

    private async Task<bool> HaitaCheck(bool IsCheckOnlyYYkSho = true, bool IsCheckKaknin = false)
    {
        List<HaitaModelCheck> HaitaModelsToCheck = new List<HaitaModelCheck>();
        if (!IsCheckKaknin)
        {
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_Yyksho",
                CurrentUpdYmdTime = bookingdata.YykshoUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] { new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) } })
            });
        }
        else
        {
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_Kaknin",
                CurrentUpdYmdTime = bookingdata.KakninUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] { new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) } })
            });
        }

        if (!IsCheckOnlyYYkSho)
        {
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_Unkobi",
                CurrentUpdYmdTime = bookingdata.UnkoUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] { new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) } })
            });
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_YykSyu",
                CurrentUpdYmdTime = bookingdata.YykSyuUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] { new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) } })
            });
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_Haisha",
                CurrentUpdYmdTime = bookingdata.HaishaUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] { new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) } })
            });
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_Mishum",
                CurrentUpdYmdTime = bookingdata.MishumUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] {
                new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) },
                new PrimaryKeyToCheck() { PrimaryKey = "SeiFutSyu IN", Value = "(1, 7)" }})
            });
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_BookingMaxMinFareFeeCalc",
                CurrentUpdYmdTime = bookingdata.BookingMaxMinFareFeeCalcUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] { new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) } })
            });
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_BookingMaxMinFareFeeCalcMeisai",
                CurrentUpdYmdTime = bookingdata.BookingMaxMinFareFeeCalcMeisaiUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] { new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) } })
            });
            HaitaModelsToCheck.Add(new HaitaModelCheck()
            {
                TableName = "TKD_UnkobiFile",
                CurrentUpdYmdTime = bookingdata.UnkobiFileUpdYmdTime,
                PrimaryKeys = new List<PrimaryKeyToCheck>(new PrimaryKeyToCheck[] { new PrimaryKeyToCheck() { PrimaryKey = "UkeNo =", Value = string.Format("'{0:D5}{1}'", new ClaimModel().TenantID, UkeCd) } })
            });
        }
        return await HaitaCheckService.GetHaitaCheck(HaitaModelsToCheck);
    }

    protected async Task<bool> ProcessFiles(FileInfoData myFile, string UkeNo)
    {
        try
        {
            SharedLibraries.Utility.Models.FileSendData fileToSend = new SharedLibraries.Utility.Models.FileSendData();
            fileToSend.File = myFile.File;
            fileToSend.FileName = myFile.FileNm;
            fileToSend.FilePath = string.Format("{0:D5}", new ClaimModel().TenantID) + "-" + TenantInfo.TenantCompanyName + "/" + Constants.SubStoredFolderForBookingInput +"/" + UkeNo.Substring(5);
            fileToSend.Password = null;
            fileToSend.FileSize = myFile.FileSize;
            fileToSend.TenantId = new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID;
            fileToSend.UpdSyainCd = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq;
            fileToSend.UpdPrgID = Common.UpdPrgId;
            var f = await s3Service.UploadFileAsync(fileToSend);
            FileInfoData file = fileUploadlst.Find(item => item.FileNm == f.Name);
            file.FolderId = f.EncryptedFolderId;
            file.FileId = f.EncryptedId;
            return true;
        }
        catch
        {
            return false;
        }
    }

    private async Task ProcessUpdateBooking()
    {
        isOpenSelectRemoveBus = await CheckRemovedBuses();
        if (!isOpenSelectRemoveBus)
        {
            isAutoAssignPopup = await CheckModifiedBookingData();
            if (!isAutoAssignPopup)
            {
                UpdateBookingInput(false);
            }
        }
    }

    private async void ProcessRemovePopup(bool isAutoAssign)
    {
        isAutoAssignPopup = false;
        isAutoAssignSelected = isAutoAssign;
        isOpenSelectRemoveBus = await CheckRemovedBuses();
        if (!isOpenSelectRemoveBus)
        {
            UpdateBookingInput(isAutoAssign);
        }
        StateHasChanged();
    }

    private async void HandleRemoveBusPopup(bool isProcess)
    {
        isOpenSelectRemoveBus = false;
        disableAll = false;
        if (isProcess)
        {
            isAutoAssignPopup = await CheckModifiedBookingData();
            if (!isAutoAssignPopup)
            {
                UpdateBookingInput(false);
            }
        }
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SharedLibraries.UI.Services.ISharedLibrariesApi s3Service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBillPrintService billPrintService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHaitaCheckService HaitaCheckService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomItemService CustomItemService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService ErrorService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICarCooperationListService CarCooperationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_UnkobiDataListService TKD_UnkobiDataListService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusLineCssColorServices BusLineCssColorService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomNavigation NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<Index> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStaffsChartService _StaffsChartService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_KobanDataService _KobanDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusBookingDataListService _busBookingDataService { get; set; }
    }
}
#pragma warning restore 1591
