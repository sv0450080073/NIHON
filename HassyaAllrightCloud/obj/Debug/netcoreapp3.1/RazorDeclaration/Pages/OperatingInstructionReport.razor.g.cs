#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "66db9b631d6d4950c5884760325e28136d305081"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
using HassyaAllrightCloud.IService.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
using HassyaAllrightCloud.Domain.Dto.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
using DevExpress.XtraPrinting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/operatinginstructionreport")]
    public partial class OperatingInstructionReport : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 229 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
       
    #region Parameter
    [Parameter] public string Option { get; set; }
    [Parameter] public string Date { get; set; }
    [Parameter] public string Mode { get; set; }
    [Parameter] public string BookingID { get; set; }
    [Parameter] public string TeiDanNo { get; set; }
    [Parameter] public string UnkRen { get; set; }
    [Parameter] public string BunkRen { get; set; }
    [Parameter] public string UkenoList { get; set; }
    [Parameter] public string FormOutput { get; set; }
    #endregion

    #region Variables
    public OperatingInstructionReportData reportData = new OperatingInstructionReportData();
    public List<ReservationClassComponentData> ListReservationClass { get; set; } = new List<ReservationClassComponentData>();
    EditContext formContext;
    bool Checkedforop { get; set; } = true;
    bool Checkedfordri { get; set; } = true;
    //int ReceiptNumberFrom { get; set; } = 1;
    //int ReceiptNumberTo { get; set; } = 2147483647;
    //string strReceiptNumberFrom { get; set; } = "";
    //string strReceiptNumberTo { get; set; } = "";
    public string searchString { get; set; } = "";
    string MessageUkenoEmpty { get; set; } = "";
    bool isUkenoEmpty = false;
    DateTime deliveryDate = DateTime.Today;
    // List<ReservationData> reservationlst;
    IEnumerable<ReservationData> SelectedReservations = new List<ReservationData>();
    List<DepartureOfficeData> departureofficelst;
    List<CompanyChartData> companychartlst;
    List<BranchChartData> branchchartlst;
    List<OutputOrderData> outputorderlst;
    List<ReportOutputData> reportoutlst;
    bool PopupVisible { get; set; } = false;
    bool PopupCheckData { get; set; } = false;
    bool OpenPopPreview = false;
    bool checkNullItem = false;
    bool isSelectAllReservation = true;
    bool isFilterApply;
    string filterConditionFormName = "KU4400";
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    #endregion

    #region LocalizationInit
    List<string> emptyItemMessage = new List<string>();
    string PageTitleReport;
    string ReceiptNumber;
    string ReservationCategory;
    string DateOfDelivery;
    string DepartureOffice;
    string ReportOutput;
    string OutputOrder;
    string Preview;
    string Export;
    string Message;
    string TitlePopupViewer;
    string TitlePopupConfirm;
    string TitlePopupWarning;
    string TitlePopupInfo;
    string MessageCheckDataExist = "";
    string Output;

    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        PageTitleReport = Lang["PageTitle"];
        ReceiptNumber = Lang["ReceiptNumber"];
        ReservationCategory = Lang["ReservationCategory"];
        DateOfDelivery = Lang["DateOfDelivery"];
        DepartureOffice = Lang["DepartureOffice"];
        ReportOutput = Lang["ReportOutput"];
        OutputOrder = Lang["OutputOrder"];
        Preview = Lang["PreviewButton"];
        Export = Lang["ExportButton"];
        MessageCheckDataExist = Lang["BI_T004"];
        TitlePopupViewer = Lang["TitlePopupViewer"];
        TitlePopupConfirm = Lang["TitlePopupConfirm"];
        TitlePopupWarning = Lang["TitlePopupWarning"];
        TitlePopupInfo = Lang["TitlePopupInfo"];
        MessageUkenoEmpty = Lang["BI_T007"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
        Output = Lang["Output"];
    }
    #endregion

    #region Component Lifecycle
    /// <summary>
    /// Invoked once, after OnInit is finished.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        formContext = new EditContext(reportData);
        /*Load Reservation*/
        //SelectedReservations = reservationlst;
        //reportData.ReservationList = SelectedReservations.ToList();
        ListReservationClass = await _yoyakuservice.GetListReservationClass();
        reportData.YoyakuFrom = null;
        reportData.YoyakuTo = null;
        reportData.DeliveryDate = DateTime.Today;
        reportData.ReceiptNumberFrom = "";
        reportData.ReceiptNumberTo = "";
        /*Load Departure Office*/
        departureofficelst = new List<DepartureOfficeData>();
        departureofficelst = await TPM_EigyosDataService.GetAllBranchData(new ClaimModel().TenantID);
        departureofficelst.Insert(0, new DepartureOfficeData());
        reportData.DepartureOffice = departureofficelst.First();
        /*Load Output Data*/
        outputorderlst = new List<OutputOrderData>();
        outputorderlst = OutputOrderListData.OutputOrderlst;
        reportData.OutputOrder = OutputOrderListData.OutputOrderlst.First();
        /* Load ReportOutPut */
        reportoutlst = new List<ReportOutputData>();
        reportoutlst = ReportOutputListData.ReportOutputlst;
        reportData.ReportOutput = reportoutlst.First();
        reportData.OutputSetting = OutputInstruction.Preview;
        await Load().ContinueWith(async t =>
        {
            if ((BookingID == null || BookingID == "") && (Date == null || Date == ""))
            {
                await ApplyFilter();
            }
        });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        JSRuntime.InvokeVoidAsync("setEventforCurrencyField", false);
        JSRuntime.InvokeVoidAsync("setEventforCodeNumberField");
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 10);
    }
    #endregion

    #region Value changed methods
    void OnOutputSetting(OutputInstruction number)
    {
        reportData.OutputSetting = number;
        StateHasChanged();
    }
    void OnReceiptNumberFromChange(string newValue)
    {
        if (newValue is string && string.IsNullOrEmpty(newValue))
        {
            reportData.ReceiptNumberFrom = null;
        }
        else
        {
            if (!long.TryParse(newValue, out long result))
            {
                reportData.ReceiptNumberFrom = "0";
            }
            if (result != 0 && result.ToString().Length > 10)
            {
                reportData.ReceiptNumberFrom = result.ToString().Substring(0, 10);
            }
            else
            {
                reportData.ReceiptNumberFrom = result.ToString();
            }
        }
        //int bookingfromParse;
        //if (CommonUtil.NumberTryParse(newValue, out bookingfromParse) && bookingfromParse >= 0)
        //{
        //    reportData.ReceiptNumberFrom = bookingfromParse.ToString().PadLeft(10, '0');
        //    //strReceiptNumberFrom = bookingfromParse.ToString().PadLeft(10, '0');
        //}
        //else
        //{
        //    //strReceiptNumberFrom = reportData.ReceiptNumberFrom.PadLeft(10, '0');
        //    reportData.ReceiptNumberFrom = reportData.ReceiptNumberFrom == "" ? reportData.ReceiptNumberFrom.PadLeft(10, '0') : reportData.ReceiptNumberFrom;
        //}
        //isUkenoEmpty = CheckUkenoItemEmpty();
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }
    void OnReceiptNumberToChange(string newValue)
    {
        if (newValue is string && string.IsNullOrEmpty(newValue))
        {
            reportData.ReceiptNumberTo = null;
        }
        else
        {
            if (!long.TryParse(newValue, out long result))
            {
                reportData.ReceiptNumberTo = "0";
            }
            if (result != 0 && result.ToString().Length > 10)
            {
                reportData.ReceiptNumberTo = result.ToString().Substring(0, 10);
            }
            else
            {
                reportData.ReceiptNumberTo = result.ToString();
            }
        }
        //isUkenoEmpty = CheckUkenoItemEmpty();
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    void OnDeliveryDateChanged(DateTime newDate)
    {
        deliveryDate = newDate;
        reportData.DeliveryDate = newDate;
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="departureOffice"></param>
    void OnDepartureOfficeChanged(DepartureOfficeData departureOffice)
    {
        reportData.DepartureOffice = departureOffice;
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="order"></param>
    void OnOutputOrderChanged(OutputOrderData order)
    {
        reportData.OutputOrder = order;
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    void OnReportOutputChanged(ReportOutputData value)
    {
        reportData.ReportOutput = value;
        if (value.IdValue == 0)
        {
            reportData.OperationInstructions = false;
            reportData.CrewRecordBook = false;
        }
        else if (value.IdValue == 1)
        {
            reportData.OperationInstructions = true;
            reportData.CrewRecordBook = false;
        }
        else
        {
            reportData.OperationInstructions = false;
            reportData.CrewRecordBook = true;
        }
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    void CheckedopChanged(bool value)
    {
        reportData.OperationInstructions = value;
        Checkedforop = value;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    void CheckedCrewChanged(bool value)
    {
        reportData.CrewRecordBook = value;
        Checkedfordri = value;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    void OnBookingFromSelectedChanged(ReservationClassComponentData value)
    {
        reportData.YoyakuFrom = value;
        if (!isFilterApply) StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    void OnBookingToSelectedChanged(ReservationClassComponentData value)
    {
        reportData.YoyakuTo = value;
        if (!isFilterApply) StateHasChanged();
    }

    void LoadReservationList()
    {
        //ReservationData bookingfrom = new ReservationData();
        //if (reportData.BookingFrom.YoyaKbnSeq > 0)
        //{
        //    bookingfrom = reportData.BookingFrom;
        //}
        //else
        //{
        //    bookingfrom = reservationlst.FirstOrDefault();
        //}

        //ReservationData bookingto = new ReservationData();
        //if (reportData.BookingTo.YoyaKbnSeq > 0)
        //{
        //    bookingto = reportData.BookingTo;
        //}
        //else
        //{
        //    bookingto = reservationlst.LastOrDefault();
        //}
        //reportData.ReservationList = YoyKbnHelper.GetListYoyKbnFromTo(bookingfrom, bookingto, reservationlst);
        //checkNullItem = false;
        //if (reportData.ReservationList.Count() == 0)
        //{
        //    checkNullItem = true;
        //}
    }
    #endregion

    #region Functions
    async Task Load()
    {
        if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(Date) && !string.IsNullOrEmpty(Mode) && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString())
            && string.IsNullOrEmpty(BookingID)
            )
        {
            DateTime dateTimeConvert;
            try
            {
                dateTimeConvert = DateTime.ParseExact(Date, "yyyyMMdd", new CultureInfo("ja-JP"));
                reportData.DeliveryDate = dateTimeConvert;
                deliveryDate = dateTimeConvert;
                reportData.ReportOutput = reportoutlst.FirstOrDefault(r => r.IdValue.ToString() == Mode);
                if (Mode == "1")
                {
                    reportData.OperationInstructions = true;
                    Checkedforop = true;
                    Checkedfordri = false;
                    reportData.CrewRecordBook = false;
                }
                else if (Mode == "2")
                {
                    reportData.OperationInstructions = false;
                    reportData.CrewRecordBook = true;
                    Checkedforop = false;
                    Checkedfordri = true;
                }
                else
                {
                    reportData.OperationInstructions = true;
                    reportData.CrewRecordBook = true;
                    Checkedforop = true;
                    Checkedfordri = true;
                }
                NavManager.NavigateTo("/OperatingInstructionReport", false);
                bool checkDataExist = false;
                checkDataExist = await checkDataExistInDb(reportData);
                if (checkDataExist)
                {
                    if (Option == OptionReport.Preview.ToString())//preview
                    {
                        string baseUrl = AppSettingsService.GetBaseUrl();
                        searchString = EncryptHelper.EncryptToUrl(reportData);
                        string url = baseUrl + "/OperatingInstructionReportPreviewNew";
                        url = url + string.Format("/?searchString={0}", searchString);
                        reportData.ReportOutput = reportoutlst.First(r => r.IdValue.ToString() == Mode);
                        //JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    }
                    else //download
                    {
                        reportData.OutputSetting = OutputInstruction.Pdf;
                        reportData.ReportOutput = reportoutlst.First(r => r.IdValue.ToString() == Mode);
                        if (Mode == "1")
                        {
                            await ExportReportAsPdf();
                        }
                        else if (Mode == "2")
                        {
                            await ExportReportdriAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokubo)}?" + reportData.Uri);
                        }
                        else
                        {
                            await ExportBaseReportAsPdf();
                        }
                    }
                }
                else
                {
                    //PopupCheckData = true;
                }
            }
            catch
            {
                PopupCheckData = true;
            }
        }
        else if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(BookingID) && !string.IsNullOrEmpty(TeiDanNo) && !string.IsNullOrEmpty(UnkRen) && !string.IsNullOrEmpty(BunkRen) && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()))
        {
            DateTime dateTimeConvert;
            try
            {
                if (!string.IsNullOrEmpty(Date))
                {
                    dateTimeConvert = DateTime.ParseExact(Date, "yyyyMMdd", new CultureInfo("ja-JP"));
                    reportData.DeliveryDate = dateTimeConvert;
                    deliveryDate = dateTimeConvert;
                }
                else
                {
                    reportData.DeliveryDate = new DateTime();
                }

                reportData.ReceiptNumberFrom = BookingID.Substring(5, 10);
                //ReceiptNumberFrom = int.Parse(BookingID.Substring(5, 10));
                reportData.ReceiptNumberTo = BookingID.Substring(5, 10);
                //ReceiptNumberTo = int.Parse(BookingID.Substring(5, 10));
                reportData.TeiDanNo = int.Parse(TeiDanNo);
                reportData.UnkRen = int.Parse(UnkRen);
                reportData.BunkRen = int.Parse(BunkRen);
                reportData.UkenoList = UkenoList;
                reportData.FormOutput = int.Parse(FormOutput);
                if (Mode == "1")
                {
                    reportData.OperationInstructions = true;
                    Checkedforop = true;
                    Checkedfordri = false;
                    reportData.CrewRecordBook = false;
                }
                else if (Mode == "2")
                {
                    reportData.OperationInstructions = false;
                    reportData.CrewRecordBook = true;
                    Checkedforop = false;
                    Checkedfordri = true;
                }
                else
                {
                    reportData.OperationInstructions = true;
                    reportData.CrewRecordBook = true;
                    Checkedforop = true;
                    Checkedfordri = true;
                }
                NavManager.NavigateTo("/OperatingInstructionReport", false);
                bool checkDataExist = false;
                checkDataExist = await checkDataExistInDb(reportData);
                if (checkDataExist)
                {
                    if (Option == OptionReport.Preview.ToString())//preview
                    {
                        string baseUrl = AppSettingsService.GetBaseUrl();
                        searchString = EncryptHelper.EncryptToUrl(reportData);
                        string url = baseUrl + "/OperatingInstructionReportPreviewNew";
                        url = url + string.Format("/?searchString={0}", searchString);
                        JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    }
                    else //download
                    {
                        reportData.OutputSetting = OutputInstruction.Pdf;
                        reportData.ReportOutput = reportoutlst.First(r => r.IdValue.ToString() == Mode);
                        if (Mode == "1")
                        {
                            await ExportReportAsPdf();
                        }
                        else if (Mode == "2")
                        {
                            await ExportReportdriAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokubo)}?" + reportData.Uri);
                        }
                        else
                        {
                            await ExportBaseReportAsPdf();
                        }

                    }
                }
                else
                {
                    PopupCheckData = true;
                }
            }
            catch
            {
                PopupCheckData = true;
            }
        }
        else if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(UkenoList) && !string.IsNullOrEmpty(FormOutput))
        {
            reportData.UkenoList = UkenoList;
            reportData.FormOutput = int.Parse(FormOutput);
            if (Mode == "1")
            {
                reportData.OperationInstructions = true;
                Checkedforop = true;
                Checkedfordri = false;
                reportData.CrewRecordBook = false;
            }
            else if (Mode == "2")
            {
                reportData.OperationInstructions = false;
                reportData.CrewRecordBook = true;
                Checkedforop = false;
                Checkedfordri = true;
            }
            else
            {
                reportData.OperationInstructions = true;
                reportData.CrewRecordBook = true;
                Checkedforop = true;
                Checkedfordri = true;
            }
            NavManager.NavigateTo("/OperatingInstructionReport", false);
            bool checkDataExist = false;
            checkDataExist = await checkDataExistInDb(reportData);
            if (checkDataExist)
            {
                if (Option == OptionReport.Preview.ToString())//preview
                {
                    string baseUrl = AppSettingsService.GetBaseUrl();
                    searchString = EncryptHelper.EncryptToUrl(reportData);
                    string url = baseUrl + "/OperatingInstructionReportPreviewNew";
                    url = url + string.Format("/?searchString={0}", searchString);
                    JSRuntime.InvokeVoidAsync("open", url, "_blank");
                }
                else //download
                {
                    reportData.OutputSetting = OutputInstruction.Pdf;
                    reportData.ReportOutput = reportoutlst.First(r => r.IdValue.ToString() == Mode);
                    if (Mode == "1")
                    {
                        await ExportReportAsPdf();
                    }
                    else if (Mode == "2")
                    {
                        await ExportReportdriAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokubo)}?" + reportData.Uri);
                    }
                    else
                    {
                        await ExportBaseReportAsPdf();
                    }

                }
            }
            else
            {
                PopupCheckData = true;
            }
        }
        else
        {
            reportData.OperationInstructions = true;
            reportData.CrewRecordBook = true;
            Checkedforop = true;
            Checkedfordri = true;
        }
    }
    /// <summary>
    ///
    /// </summary>
    private void HandleValidSubmit()
    {
        // To do
    }

    async Task ExportReportAsPdf()
    {

        var data = await UnkoushijishoReportService.GetPDFData(reportData);
        if (data.Count > 0)
        {
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                var report = new Reports.ReportTemplate.UnkoushijishoReport.UnkoushijishoReportNew();
                report.DataSource = data;
                string fileType = "";
                report.CreateDocument();
                using (MemoryStream ms = new MemoryStream())
                {

                    fileType = "pdf";
                    report.ExportToPdf(ms);
                    byte[] exportedFileBytes = ms.ToArray();
                    string myExportString = Convert.ToBase64String(exportedFileBytes);
                    JSRuntime.InvokeVoidAsync("loadPageScript", "OperatingInstructionReport", "downloadFileOperatingInstructionReport", myExportString, fileType);
                }

            });
        }
    }

    async Task ExportBaseReportAsPdf()
    {

        var data = await UnkoushijishoReportService.GetPDFData(reportData);
        if (data.Count > 0)
        {
            var report = new Reports.ReportTemplate.UnkoushijishoReport.UnkoushijishoBaseReportNew();
            report.DataSource = data;
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                string fileType = "";
                report.CreateDocument();
                using (MemoryStream ms = new MemoryStream())
                {

                    fileType = "pdf";
                    report.ExportToPdf(ms);
                    byte[] exportedFileBytes = ms.ToArray();
                    string myExportString = Convert.ToBase64String(exportedFileBytes);
                    JSRuntime.InvokeVoidAsync("loadPageScript", "OperatingInstructionReport", "downloadFileOperatingInstructionReport", myExportString, fileType);
                }

            });
        }
    }

    async Task ExportReportdriAsPdf(string uri)
    {

        var report = new HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokuboCreator("ReportJomukirokubo", "Report Jomukirokubo").GetReport().
            CreateByUrl(uri);
        await new System.Threading.Tasks.TaskFactory().StartNew(() =>
        {
            string fileType = "";
            report.CreateDocument();
            using (MemoryStream ms = new MemoryStream())
            {

                fileType = "pdf";
                report.ExportToPdf(ms);
                byte[] exportedFileBytes = ms.ToArray();
                string myExportString = Convert.ToBase64String(exportedFileBytes);
                JSRuntime.InvokeVoidAsync("loadPageScript", "JomukirokuboReport", "downloadFileOperatingInstructionReport", myExportString, fileType);
            }

        });
    }

    async void DownLoadReport()
    {
        await SaveCurrentFilter();
        bool checkDataExist = false;
        checkDataExist = await checkDataExistInDb(reportData);
        if (checkDataExist)
        {
            if (reportData.OperationInstructions == true && reportData.CrewRecordBook == false)
            {
                await ExportReportAsPdf();
            }
            else if (reportData.OperationInstructions == false && reportData.CrewRecordBook == true)
            {
                await ExportReportdriAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokubo)}?" + reportData.Uri);
            }
            else
            {
                await ExportBaseReportAsPdf();
            }
        }
        else
        {
            PopupCheckData = true;
        }
    }

    async Task<bool> checkDataExistInDb(OperatingInstructionReportData operatingInstructionReportData)
    {
        int count = await UnkoushijishoReportService.GetInfoMainReport(operatingInstructionReportData);
        if (count == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    async void OpenPopupPreview()
    {
        if (formContext.Validate())
        {
            //isUkenoEmpty = CheckUkenoItemEmpty();
            if (!isUkenoEmpty)
            {
                await SaveCurrentFilter();
                bool checkDataExist = false;
                checkDataExist = await checkDataExistInDb(reportData);
                if (checkDataExist)
                {
                    OpenPopPreview = true;
                }
                else
                {
                    PopupCheckData = true;
                }
            }
            //todo disable submit
        }
        StateHasChanged();
    }

    private bool CheckUkenoItemEmpty()
    {
        bool result = false;
        if (reportData.ReceiptNumberFrom == "" || reportData.ReceiptNumberTo == "")
        {
            result = true;
        }
        return result;
    }

    private async Task SaveCurrentFilter()
    {
        await FilterServices.SaveCustomFilterAndConditions(GetFieldValues(), filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
    }

    private async Task ApplyFilter()
    {
        var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq)).ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues();
        if (filterValues.Count > 0)
        {
            isFilterApply = true;
            UnkoushijishoReportService.ApplyFilter(ref reportData, ListReservationClass, departureofficelst, outputorderlst, filterValues);
            OnReceiptNumberFromChange(reportData.ReceiptNumberFrom);
            OnReceiptNumberToChange(reportData.ReceiptNumberTo);
            //OnSelectedReservationsChanged(reservationlst.Where(c => reportData.ReservationList.Select(_ => _.YoyaKbnSeq).Contains(c.YoyaKbnSeq)));
            //isSelectAllReservation = reportData.ReservationList.Count == reservationlst.Count;
            // OnBookingFromSelectedChanged(reportData.BookingFrom);
            // OnBookingToSelectedChanged(reportData.BookingTo);
            Checkedforop = reportData.OperationInstructions;
            Checkedfordri = reportData.CrewRecordBook;
            OnDeliveryDateChanged(reportData.DeliveryDate);
            OnReportOutputChanged(reportData.ReportOutput);
            OnOutputOrderChanged(reportData.OutputOrder);
            formContext = new EditContext(reportData);
            isFilterApply = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private Dictionary<string, string> GetFieldValues()
    {
        var result = new Dictionary<string, string>();
        result = UnkoushijishoReportService.GetFieldValues(reportData);
        return result;
    }

    //protected void OnSelectedReservationsChanged(IEnumerable<ReservationData> reservationDatas)
    //{
    //    SelectedReservations = reservationDatas;
    //    Func<ReservationData, bool> reserKeySelectorAll = r => r.YoyaKbnSeq == 0;

    //    if (!isFilterApply)
    //    {
    //        if (isSelectAllReservation == true && !SelectedReservations.Any(reserKeySelectorAll))
    //        {
    //            SelectedReservations = SelectedReservations.Take(0);
    //            isSelectAllReservation = false;
    //        }
    //        if (isSelectAllReservation == false && (SelectedReservations.Any(reserKeySelectorAll) || (!SelectedReservations.Any(reserKeySelectorAll)
    //            && SelectedReservations.Count() == reservationlst.Count() - 1)))
    //        {
    //            SelectedReservations = reservationlst;
    //            isSelectAllReservation = true;
    //        }
    //        if (isSelectAllReservation == true && SelectedReservations.Any(reserKeySelectorAll)
    //            && SelectedReservations.Count() < reservationlst.Count())
    //        {
    //            SelectedReservations = SelectedReservations.Where(r => r.YoyaKbnSeq != 0);
    //            isSelectAllReservation = false;
    //        }
    //    }

    //    reportData.ReservationList = SelectedReservations.ToList();
    //    checkNullItem = false;
    //    if (reportData.ReservationList.Count() == 0)
    //    {
    //        checkNullItem = true;
    //    }
    //    if (!isFilterApply) StateHasChanged();
    //}

    //protected string GetSelectedReservationText()
    //{
    //    string result = string.Empty;
    //    if (SelectedReservations.Count() == 1)
    //    {
    //        result = SelectedReservations.First().Text;
    //    }
    //    else if (SelectedReservations.Count() == reservationlst.Count())
    //    {
    //        result = "すべて";
    //    }
    //    else
    //    {
    //        result = "選択項目：" + SelectedReservations.Count();
    //    }
    //    return result;
    //}
    async void BtnSubmitClick()
    {
        //isUkenoEmpty = CheckUkenoItemEmpty();
        if (!isUkenoEmpty)
        {

            // LoadReservationList();
            await SaveCurrentFilter();
            bool checkDataExist = false;
            checkDataExist = await checkDataExistInDb(reportData);
            if (checkDataExist)
            {
                if (reportData.ReportOutput.IdValue == 1)
                {
                    reportData.OperationInstructions = true;
                    reportData.CrewRecordBook = false;
                }
                else if (reportData.ReportOutput.IdValue == 2)
                {
                    reportData.OperationInstructions = false;
                    reportData.CrewRecordBook = true;
                }
                else
                {
                    reportData.OperationInstructions = true;
                    reportData.CrewRecordBook = true;
                }
                if (reportData.OutputSetting == OutputInstruction.Preview)
                {
                    string baseUrl = AppSettingsService.GetBaseUrl();
                    searchString = EncryptHelper.EncryptToUrl(reportData);
                    string url = baseUrl + "/OperatingInstructionReportPreviewNew";
                    url = url + string.Format("/?searchString={0}", searchString);
                    JSRuntime.InvokeVoidAsync("open", url, "_blank");
                }
                else if (reportData.OutputSetting == OutputInstruction.Pdf)
                {
                    if (reportData.OperationInstructions == true && reportData.CrewRecordBook == false)
                    {
                        await ExportReportAsPdf();
                    }
                    else if (reportData.OperationInstructions == false && reportData.CrewRecordBook == true)
                    {
                        await ExportReportdriAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokubo)}?" + reportData.Uri);
                    }
                    else
                    {
                        await ExportBaseReportAsPdf();
                    }
                }
            }
            else
            {
                PopupCheckData = true;
            }
        }
        StateHasChanged();
    }
    async void ResetForm()
    {
        //reservationlst.Insert(0, new ReservationData());
        reportData.OutputSetting = OutputInstruction.Preview;
        //SelectedReservations = reservationlst;
        //reportData.ReservationList = SelectedReservations.ToList();
        reportData.YoyakuFrom = null;
        reportData.YoyakuTo = null;
        deliveryDate = DateTime.Today;
        reportData.DeliveryDate = DateTime.Today;
        //strReceiptNumberFrom = "";
        //strReceiptNumberTo = "";
        reportData.ReceiptNumberFrom = "";
        reportData.ReceiptNumberTo = "";
        /*Load Departure Office*/
        reportData.DepartureOffice = departureofficelst.First();
        /*Load Output Data*/
        outputorderlst = new List<OutputOrderData>();
        outputorderlst = OutputOrderListData.OutputOrderlst;
        reportData.OutputOrder = OutputOrderListData.OutputOrderlst.First();
        reportData.ReportOutput = reportoutlst.First();
        //await SaveCurrentFilter();
        formContext = new EditContext(reportData);
        StateHasChanged();
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService errorModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IReservationClassComponentService _yoyakuservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomNavigation NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFilterCondition FilterServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUnkoushijishoReportService UnkoushijishoReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<OperatingInstructionReport> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
