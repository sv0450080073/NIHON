#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\LeaveApplicationManagement.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "395eea546950a179ca0362ebafd5f9c6d20d67c2"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\Pages\LeaveApplicationManagement.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
    public partial class LeaveApplicationManagement : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 410 "E:\Project\HassyaAllrightCloud\Pages\LeaveApplicationManagement.razor"
       
    protected byte itemPerPage { get; set; } = Common.DefaultPageSize;
    protected HeaderTemplate Header;
    protected BodyTemplate Body;
    public CultureInfo culture = new System.Globalization.CultureInfo("ja-JP");
    public Dictionary<string, string> LangDic = new Dictionary<string, string>();
    Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
    string dateFormat = "yyyy/MM/dd";
    ScheduleManageForm scheduleMagafeForm { get; set; }
    ScheduleDetail scheduleDetail = new ScheduleDetail();
    List<Status> ApprovalStatus = new List<Status>();
    List<Status> ApprovalStatusForApprover = new List<Status>();
    IEnumerable<Branch> branches = new List<Branch>();
    IEnumerable<Staffs> staffs = new List<Staffs>();
    IEnumerable<CustomGroup> customGroups = new List<CustomGroup>();
    List<Branch> branchesDropdown = new List<Branch>();
    List<Staffs> staffsDropdown = new List<Staffs>();
    List<CustomGroup> customGroupsDropdown = new List<CustomGroup>();
    CustomGroupScheduleForm customGroupScheduleForm = new CustomGroupScheduleForm();
    IEnumerable<ScheduleManageGridData> DataSource = new List<ScheduleManageGridData>();
    bool isShowDetailSchedulePopup = false;
    bool PopupGroupScheduleAdd = false;
    List<StaffsData> StaffList;
    List<string> Errors = new List<string>();
    int? CurrentClick { get; set; } = null;
    int? CurrentScroll { get; set; }
    bool isLoading = false;
    bool IsValid = true;
    public int ActiveV { get; set; }
    int scheduleId = 0;
    bool required;
    int activeTabIndex = 0;
    int ActiveTabIndex
    {
        get => activeTabIndex;
        set
        {
            activeTabIndex = value;
            AdjustHeightWhenTabChanged();
        }
    }
    private void clickV(MouseEventArgs e, int number)
    {
        try
        {
            ActiveV = number;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    private async void AdjustHeightWhenTabChanged()
    {
        try
        {
            await Task.Run(() =>
            {
                InvokeAsync(StateHasChanged).Wait();
                JSRuntime.InvokeVoidAsync("AdjustHeight");
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    protected override void OnAfterRender(bool firstRender)
    {
        try
        {
            JSRuntime.InvokeAsync<string>("addMaxLength", "length", 50);
            JSRuntime.InvokeVoidAsync("inputNumber", ".number", true);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    public string FormName = FormFilterName.LeaveManagement;
    protected Pagination paging;
    public int Count { get; set; }
    protected override async void OnInitialized()
    {
        try
        {
            InitTable();
            scheduleMagafeForm = new ScheduleManageForm();
            var dataLang = Lang.GetAllStrings();
            LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
            ActiveV = (int)ViewMode.Medium;
            ApprovalStatus.Add(null);
            ApprovalStatus.Add(new Status()
            {
                status = StaffScheduleConstants.Pending
            });
            ApprovalStatus.Add(new Status()
            {
                status = StaffScheduleConstants.Accept
            });
            ApprovalStatus.Add(new Status()
            {
                status = StaffScheduleConstants.Refuse
            });
            ApprovalStatusForApprover.Add(new Status()
            {
                status = StaffScheduleConstants.Pending
            });
            ApprovalStatusForApprover.Add(new Status()
            {
                status = StaffScheduleConstants.Accept
            });
            ApprovalStatusForApprover.Add(new Status()
            {
                status = StaffScheduleConstants.Refuse
            });

            staffs = IScheduleManageService.GetScheduleStaff().Result;
            branches = IScheduleManageService.GetStaffOffice().Result;
            customGroups = IScheduleManageService.GetScheduleCustomGroup().Result;
            staffsDropdown = staffs.ToList();
            staffsDropdown.Insert(0, null);
            branchesDropdown = branches.ToList();
            branchesDropdown.Insert(0, null);
            customGroupsDropdown = customGroups.ToList();
            customGroupsDropdown.Insert(0, null);
            StaffList = await SyainService.Get(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
            List<TkdInpCon> filterValues = FilterConditionService.GetFilterCondition(FormName, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
            if (filterValues.Count > 0)
            {
                scheduleMagafeForm = GenerateFilterModel(filterValues);
            }
            scheduleMagafeForm.PageSize = 25;
            scheduleMagafeForm.PageNum = 0;

            (DataSource, Count) = IScheduleManageService.GetScheduleDataGrid(scheduleMagafeForm).Result;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    private void InitTable()
    {
        Header = new HeaderTemplate()
        {
            Rows = new List<RowHeaderTemplate>()
        {
                    new RowHeaderTemplate()
                    {
                        Columns = new List<ColumnHeaderTemplate>()
                    {
                            new ColumnHeaderTemplate(){ ColName = @Lang["No"], Width = 40 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["StaffId"], Width = 110 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["StaffName"], Width = 80 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["Office"], Width = 160 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["ScheduleType"], Width = 80},
                            new ColumnHeaderTemplate(){ ColName = @Lang["EventType"], Width = 80 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["Label"], Width = 80 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["Titlegrid"], Width = 220 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["StartDate"], Width = 170 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["EndDate"], Width = 170 },
                            new ColumnHeaderTemplate(){ ColName = @Lang["Status"], Width = 95  },
                            new ColumnHeaderTemplate(){ ColName = @Lang["UpdateStaffId"], Width = 110 },

                            new ColumnHeaderTemplate(){ ColName = @Lang["UpdateStaffName"], Width = 95 },

                            new ColumnHeaderTemplate(){ ColName = @Lang["UpdateTime"], Width = 150 },
                        }
                    }
            }
        };

        Body = new BodyTemplate()
        {
            Rows = new List<RowBodyTemplate>()
        {
                    new RowBodyTemplate()
                    {
                        Columns = new List<ColumnBodyTemplate>()
                    {
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Center, DisplayFieldName = nameof(ScheduleManageGridData.No)},
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.SyainCd)},
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.SyainNm)},
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.EigyoNm) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.YoteiTypeNm) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.KinkyuNm) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.TukiLabKbn) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.Title) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.StartDate) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.EndDate) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.YoteiShoKbn) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.ShoSyainCd) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.ShoSyainNm) },
                            new ColumnBodyTemplate(){ AlignCol = AlignColEnum.Left, DisplayFieldName = nameof(ScheduleManageGridData.UpdateTime) }
                        }
                    }
            }
        };
    }
    protected void OnChangePage(int page)
    {
        try
        {
            scheduleMagafeForm.PageNum = page;
            ReloadData();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    protected void OnChangeItemPerPage(byte _itemPerPage)
    {
        try
        {
            itemPerPage = _itemPerPage;
            scheduleMagafeForm.PageSize = _itemPerPage;
            ReloadData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    protected async Task RowClick(RowClickEventArgs<ScheduleManageGridData> e)
    {
        try
        {
            scheduleId = e.SelectedItem.ScheduleId;
            var LastXClicked = Convert.ToInt32(e.Event.ClientX);
            var LastYClicked = Convert.ToInt32(e.Event.ClientY);
            if (!e.Event.ShiftKey && !e.Event.CtrlKey)
            {
                blazorContextMenuService.ShowMenu("gridRowsClickMenu", LastXClicked, LastYClicked);
            }
            else
            {
                blazorContextMenuService.HideMenu("gridRowClickMenu");
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    private ScheduleManageForm GenerateFilterModel(List<TkdInpCon> filterValues)
    {
        ScheduleManageForm result = new ScheduleManageForm();

        foreach (var item in filterValues)
        {
            switch (item.ItemNm)
            {
                case nameof(ScheduleManageForm.StartDate):
                    if (string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        result.StartDate = null;
                    }
                    else
                    {
                        result.StartDate = DateTime.ParseExact(item.JoInput, "yyyyMMdd", null);
                    }
                    break;
                case nameof(ScheduleManageForm.EndDate):
                    if (string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        result.EndDate = null;
                    }
                    else
                    {
                        result.EndDate = DateTime.ParseExact(item.JoInput, "yyyyMMdd", null);
                    }
                    break;
                case nameof(ScheduleManageForm.ApprovalStatus):
                    result.ApprovalStatus = string.IsNullOrWhiteSpace(item.JoInput) ? ApprovalStatus[1] : ApprovalStatus.Where(x => x != null && x.status == item.JoInput).FirstOrDefault();
                    break;
                case nameof(ScheduleManageForm.Staff):
                    result.Staff = string.IsNullOrWhiteSpace(item.JoInput) ? null : staffs.Where(x => x != null && x.Seg == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(ScheduleManageForm.Branch):
                    result.Branch = string.IsNullOrWhiteSpace(item.JoInput) ? null : branches.Where(x => x != null && x.Seg == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(ScheduleManageForm.CustomGroup):
                    result.CustomGroup = string.IsNullOrWhiteSpace(item.JoInput) ? null : customGroups.Where(x => x != null && x.CusGrpSeq == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
            }
        }
        return result;
    }

    async Task ChangeValueScheduleDetail(string ValueName, dynamic value)
    {
        try
        {
            required = false;
            if (ValueName == StaffScheduleConstants.NoteName)
            {
                var propertyInfo = scheduleDetail.GetType().GetProperty(ValueName);
                propertyInfo.SetValue(scheduleDetail, value.Value, null);
            }
            else
            {
                if (value is string && string.IsNullOrEmpty(value))
                {
                    value = null;
                }
                var propertyInfo = scheduleDetail.GetType().GetProperty(ValueName);
                propertyInfo.SetValue(scheduleDetail, value, null);
            }

            if (scheduleDetail.ApprovalStatus.status == StaffScheduleConstants.Refuse && scheduleDetail.ShoRejBiko == string.Empty)
            {
                required = true;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }


    async Task ChangeValueForm(string ValueName, dynamic value)
    {
        try
        {
            if (value is string && string.IsNullOrEmpty(value))
            {
                value = null;
            }
            var propertyInfo = scheduleMagafeForm.GetType().GetProperty(ValueName);
            propertyInfo.SetValue(scheduleMagafeForm, value, null);
            isLoading = true;
            await Task.Run(() =>
            {
                InvokeAsync(StateHasChanged).Wait();
                isLoading = false;
                ReloadData().Wait();
            });
            if (DataSource.Any())
            {
                Errors.Remove("BI_T002");
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    void SaveScheduleDetail()
    {
        try
        {
            if (scheduleDetail.ApprovalStatus.status == StaffScheduleConstants.Refuse && scheduleDetail.ShoRejBiko == string.Empty)
            {
                required = true;
            }
            else
            {
                required = false;
                var result = IScheduleManageService.UpdateScheduleDetail(scheduleDetail).Result;
                isShowDetailSchedulePopup = false;
            }
            ReloadData().Wait();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    async Task ReloadData()
    {
        try
        {
            if (IsValid)
            {
                isLoading = true;
                InvokeAsync(StateHasChanged).Wait();
                (DataSource, Count) = IScheduleManageService.GetScheduleDataGrid(scheduleMagafeForm).Result;
                if (DataSource == null || !DataSource.Any())
                {
                    Count = 0;
                    if (!Errors.Contains("BI_T002"))
                    {
                        Errors.Add("BI_T002");
                    }
                }
                else
                {
                    Errors.Remove("BI_T002");
                }
                isLoading = false;
                InvokeAsync(StateHasChanged).Wait();
                keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForLeaveManagement(scheduleMagafeForm).Result;
                FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.LeaveManagement, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    void ShowScheduleDetail()
    {
        try
        {
            scheduleDetail = IScheduleManageService.GetScheduleDeTail(scheduleId).Result;
            var approver = IScheduleManageService.GetApprover(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
            scheduleDetail.ShoUpdYmd = DateTime.Now.ToString().Substring(0, 10);
            scheduleDetail.ShoUpdTime = DateTime.Now.TimeOfDay.ToString().Substring(0, 8);
            scheduleDetail.ShoSyainCd = approver.SyainCd;
            scheduleDetail.ShoSyainNm = approver.Name;
            scheduleDetail.SyainCdSeq = approver.Seg;
            var sDayOfWeek = culture.DateTimeFormat.GetDayName(DateTime.ParseExact(scheduleDetail.YoteiSYmd, "yyyyMMdd", null).DayOfWeek);
            var eDayOfWeek = culture.DateTimeFormat.GetDayName(DateTime.ParseExact(scheduleDetail.YoteiEYmd, "yyyyMMdd", null).DayOfWeek);
            scheduleDetail.StartTime = scheduleDetail.AllDayKbn == 1 ? (scheduleDetail.YoteiSYmd.Insert(4, "/").Insert(7, "/") + "(" + sDayOfWeek + ")" + StaffScheduleConstants.Day) : (scheduleDetail.YoteiSYmd.Insert(4, "/").Insert(7, "/") + "(" + sDayOfWeek + ")" + " " + scheduleDetail.YoteiSTime.Insert(2, ":").Insert(5, ":").Substring(0, 5));
            scheduleDetail.EndTime = scheduleDetail.AllDayKbn == 1 ? (scheduleDetail.YoteiEYmd.Insert(4, "/").Insert(7, "/") + "(" + eDayOfWeek + ")" + StaffScheduleConstants.Day) : (scheduleDetail.YoteiEYmd.Insert(4, "/").Insert(7, "/") + "(" + eDayOfWeek + ")" + " " + scheduleDetail.YoteiETime.Insert(2, ":").Insert(5, ":").Substring(0, 5));
            if (scheduleDetail.YoteiShoKbn == 1)
            {
                scheduleDetail.ApprovalStatus = new Status()
                {
                    status = StaffScheduleConstants.Pending
                };
            }
            else if (scheduleDetail.YoteiShoKbn == 2)
            {
                scheduleDetail.ApprovalStatus = new Status()
                {
                    status = StaffScheduleConstants.Accept
                };
            }
            else
            {
                scheduleDetail.ApprovalStatus = new Status()
                {
                    status = StaffScheduleConstants.Refuse
                };
            }
            isShowDetailSchedulePopup = true;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    void AcceptSchedule()
    {
        try
        {
            scheduleDetail = IScheduleManageService.GetScheduleDeTail(scheduleId).Result;
            var approver = IScheduleManageService.GetApprover(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
            scheduleDetail.ShoUpdYmd = DateTime.Now.ToString().Substring(0, 10);
            scheduleDetail.ShoUpdTime = DateTime.Now.TimeOfDay.ToString().Substring(0, 8);
            scheduleDetail.ShoSyainCd = approver.SyainCd;
            scheduleDetail.ShoSyainNm = approver.Name;
            scheduleDetail.SyainCdSeq = approver.Seg;
            scheduleDetail.ShoRejBiko = scheduleDetail.ShoRejBiko == null ? string.Empty : scheduleDetail.ShoRejBiko;
            scheduleDetail.ApprovalStatus = new Status()
            {
                status = StaffScheduleConstants.Accept
            };
            var result = IScheduleManageService.UpdateScheduleDetail(scheduleDetail).Result;
            ReloadData().Wait();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    void RefuseSchedule()
    {
        try
        {
            scheduleDetail = IScheduleManageService.GetScheduleDeTail(scheduleId).Result;
            var approver = IScheduleManageService.GetApprover(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
            scheduleDetail.ShoUpdYmd = DateTime.Now.ToString().Substring(0, 10);
            scheduleDetail.ShoUpdTime = DateTime.Now.TimeOfDay.ToString().Substring(0, 8);
            scheduleDetail.ShoSyainCd = approver.SyainCd;
            scheduleDetail.ShoSyainNm = approver.Name;
            scheduleDetail.SyainCdSeq = approver.Seg;
            scheduleDetail.ShoRejBiko = scheduleDetail.ShoRejBiko == null ? string.Empty : scheduleDetail.ShoRejBiko;
            scheduleDetail.ApprovalStatus = new Status()
            {
                status = StaffScheduleConstants.Refuse
            };
            var result = IScheduleManageService.UpdateScheduleDetail(scheduleDetail).Result;
            ReloadData().Wait();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    IEnumerable<string> Store(IEnumerable<string> errorMessage)
    {
        if (errorMessage.Count() > 0)
        {
            IsValid = false;
        }
        else
        {
            IsValid = true;
        }
        return errorMessage;
    }
    void ChangeGroupName(string NewName)
    {
        try
        {
            customGroupScheduleForm.GroupName = NewName.Trim();
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    void ChangeMemberList(IEnumerable<StaffsData> NewMemberList)
    {
        try
        {
            customGroupScheduleForm.StaffList = (NewMemberList == null ? new List<StaffsData>() : NewMemberList.ToList());
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    void AddCustomGroup()
    {
        try
        {
            PopupGroupScheduleAdd = true;
            customGroupScheduleForm = new CustomGroupScheduleForm();
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async void SaveGroupSchedule()
    {
        try
        {
            if (string.IsNullOrEmpty(customGroupScheduleForm.GroupName) || string.IsNullOrEmpty(customGroupScheduleForm.GroupName.Trim()) || customGroupScheduleForm.StaffList.Count() == 0)
            {
                return;
            }
            if(customGroupScheduleForm.GroupName.Length > 50)
            {
                customGroupScheduleForm.GroupName = customGroupScheduleForm.GroupName.Substring(0, 50);
            }
            isLoading = true;
            await Task.Run(() =>
            {
                InvokeAsync(StateHasChanged).Wait();
                bool IsUpdateSuccessfully = ScheduleCustomGroupService.Update(customGroupScheduleForm).Result;
                customGroups = IScheduleManageService.GetScheduleCustomGroup().Result;
                customGroupsDropdown = customGroups.ToList();
                isLoading = false;
                PopupGroupScheduleAdd = false;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void ResetForm()
    {
        try
        {
            scheduleMagafeForm = new ScheduleManageForm();
            ReloadData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFilterCondition FilterConditionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IGenerateFilterValueDictionary GenerateFilterValueDictionaryService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService errorModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStaffListService SyainService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IScheduleCustomGroupService ScheduleCustomGroupService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IScheduleManageService IScheduleManageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorContextMenuService blazorContextMenuService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<LeaveApplicationManagement> Lang { get; set; }
    }
}
#pragma warning restore 1591
