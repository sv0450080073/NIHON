#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Home.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1570489c4141e41a1d8d691f9611ff9a50d10d96"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\Pages\Home.razor"
using Blazor.DragDrop.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\Pages\Home.razor"
using HassyaAllrightCloud.Pages.Components.Home;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/home")]
    public partial class Home : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 319 "E:\Project\HassyaAllrightCloud\Pages\Home.razor"
       
    [CascadingParameter(Name = "ClaimModel")]
    protected ClaimModel ClaimModel { get; set; }
    #region Notify Variables
    IEnumerable<NoticeDisplayKbnDto> ListPeopleCanSee;
    NoticeDisplayKbnDto people;

    List<Tkd_NoticeListDto> notification = new List<Tkd_NoticeListDto>();
    bool NotifySettingPopup { get; set; } = false;
    bool DeleteNotifyPopup { get; set; } = false;
    public int Id { get; set; }
    public NotificationPopup CreateForm { get; set; }
    string PopupNoficationTitle;
    #endregion Notify Variables

    #region Menu Variables
    public MenuPopup CreateMenuForm { get; set; }
    public SitePopup CreateSiteForm { get; set; }
    string PopupMenuTitle;
    string PopupSiteTitle;
    bool IsShowEditDeleteIconOfMenu = false;
    bool IsShowEditDeleteIconOfSite = false;
    public int MenuId { get; set; }
    public int SiteId { get; set; }
    public bool isOpeningCreateMenuPopup { get; set; }
    public bool isOpeningCreateSitePopup { get; set; }
    bool DeleteMenuPopup { get; set; } = false;
    bool DeleteSitePopup { get; set; } = false;
    public List<TKD_FavoriteMenuData> FavoriteMenuDataList = new List<TKD_FavoriteMenuData>();
    public List<TKD_FavoriteSiteData> FavoriteSiteDataList = new List<TKD_FavoriteSiteData>();
    #endregion Menu Variables

    #region Note Variables
    public NotePopup CreateNoteForm { get; set; }
    bool isOpeningCreateNotePopup = false;
    TKD_PersonalNoteData PersonalNoteData = new TKD_PersonalNoteData();
    #endregion Note Variables

    #region Alert Variables
    public List<AlertSetting> alertSettings = new List<AlertSetting>();
    public int tenantCdSeq;
    public int companyCdSeq;
    public int syainCdSeq;
    public bool isOpeningShowAlertSettingPopUp { get; set; }
    #endregion Alert Variables


    protected override void OnParametersSet()
    {
        try
        {
            JSRuntime.InvokeVoidAsync("loadPageScript", "homePage");
            base.OnParametersSet();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            notification = NoticeService.GetNoticeList().Result.ToList();
            people = ListPeopleCanSee?.FirstOrDefault();
            if (ClaimModel != null)
            {
                tenantCdSeq = ClaimModel.TenantID;
                companyCdSeq = ClaimModel.CompanyID;
                syainCdSeq = ClaimModel.SyainCdSeq;
            }
            await GetAlertDataAsync();

            FavoriteSiteDataList = await TKD_FavoriteSiteService.GetFavoriteSiteList();
            FavoriteMenuDataList = await TKD_FavoriteMenuService.GetFavoriteMenuList();
            PersonalNoteData = await TKD_PersonalNoteDataService.Get();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                JSRuntime.InvokeVoidAsync("loadSortableJs", "favoriteMenuList", DotNetObjectReference.Create(this));
                JSRuntime.InvokeVoidAsync("loadSortableJs", "favoriteSiteList", DotNetObjectReference.Create(this));
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void Navigate()
    {
        try
        {
            NavManager.NavigateTo("/staffschedule", false);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    public async Task GetAlertDataAsync()
    {
        try
        {
            List<int> alertCds = (await AlertSettingService.GetShowAlertSettingAsync(tenantCdSeq, syainCdSeq)).Where(x => x.Checked).Select(x => x.AlertCd).ToList();
            alertSettings = await AlertSettingService.GetAlertSettingAsync(alertCds, tenantCdSeq, syainCdSeq, companyCdSeq);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    #region Notify
    protected void AddNotify()
    {
        try
        {
            Id = 0;
            NotifySettingPopup = true;
            ListPeopleCanSee = NoticeService.GetNoticeDisplayKbnList().Result;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void OpenEditNoticePopUp(int id)
    {
        try
        {
            Id = id;
            NotifySettingPopup = true;
            ListPeopleCanSee = NoticeService.GetNoticeDisplayKbnList().Result;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void OpenNoticeDeletePopup(int id)
    {
        try
        {
            Id = id;
            DeleteNotifyPopup = true;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async void DeleteNotice(int id)
    {
        try
        {
            Id = id;
            await NoticeService.DeleteNotice(id);
            DeleteNotifyPopup = false;
            ReloadNoticeData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void ReloadNoticeData()
    {
        try
        {
            notification = NoticeService.GetNoticeList().Result.ToList();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task SaveNotice()
    {
        try
        {
            var result = await CreateForm.Save();
            if (result)
            {
                NotifySettingPopup = false;
                ReloadNoticeData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    #endregion Notify

    #region Menu

    public void AddMenu()
    {
        try
        {
            MenuId = 0;
            isOpeningCreateMenuPopup = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    public void OpenEditMenuPopup(int menuId)
    {
        try
        {
            MenuId = menuId;
            isOpeningCreateMenuPopup = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void OpenMenuDeletePopup(int id)
    {
        try
        {
            MenuId = id;
            DeleteMenuPopup = true;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    public async void DeleteMenu(int menuId)
    {
        try
        {
            MenuId = menuId;
            await TKD_FavoriteMenuService.DeleteFavoriteMenu(menuId);
            DeleteMenuPopup = false;
            ReloadMenuData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task SaveMenu()
    {
        try
        {
            var result = await CreateMenuForm.Save();
            if (result == null)
            {
                isOpeningCreateMenuPopup = false;
                ReloadMenuData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void ReloadMenuData()
    {
        try
        {
            FavoriteMenuDataList = TKD_FavoriteMenuService.GetFavoriteMenuList().Result;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    private void ToggleShowEditDeleteIconOfMenu()
    {
        try
        {
            IsShowEditDeleteIconOfMenu = !IsShowEditDeleteIconOfMenu;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    [JSInvokable]
    public async Task OnFavouriteMenuOrderChange(ListOrderDto[] orderedList, string elementId, int oldIndex, int newIndex)
    {
        try
        {
            if (elementId == "favoriteMenuList")
            {
                await TKD_FavoriteMenuService.SaveFavoriteMenuOrder(orderedList);
            }
            else
            {
                await TKD_FavoriteSiteService.SaveFavoriteSiteOrder(orderedList);
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    #endregion Menu

    #region Site
    public void AddSite()
    {
        try
        {
            SiteId = 0;
            isOpeningCreateSitePopup = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    public void OpenEditSitePopup(int siteId)
    {
        try
        {
            SiteId = siteId;
            isOpeningCreateSitePopup = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void OpenSiteDeletePopup(int id)
    {
        try
        {
            SiteId = id;
            DeleteSitePopup = true;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    public async void DeleteSite(int siteId)
    {
        try
        {
            SiteId = siteId;
            await TKD_FavoriteSiteService.DeleteFavoriteSite(siteId);
            DeleteSitePopup = false;
            ReloadSiteData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task SaveSite()
    {
        try
        {
            var result = await CreateSiteForm.Save();
            if (result == null)
            {
                isOpeningCreateSitePopup = false;
                ReloadSiteData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void ReloadSiteData()
    {
        try
        {
            FavoriteSiteDataList = TKD_FavoriteSiteService.GetFavoriteSiteList().Result;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    private void ToggleShowEditDeleteIconOfSite()
    {
        try
        {
            IsShowEditDeleteIconOfSite = !IsShowEditDeleteIconOfSite;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    #endregion Site

    #region Note
    public void OpenEditNotePopup()
    {
        try
        {
            isOpeningCreateNotePopup = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task SaveNote()
    {
        try
        {
            var result = await CreateNoteForm.Save();
            if (result == null)
            {
                isOpeningCreateNotePopup = false;
                ReloadNoteData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void ReloadNoteData()
    {
        try
        {
            PersonalNoteData = TKD_PersonalNoteDataService.Get().Result;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    #endregion Note

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomNavigation NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService errorModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<Home> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAlertSettingService AlertSettingService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INoticeService NoticeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_PersonalNoteDataService TKD_PersonalNoteDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_FavoriteSiteService TKD_FavoriteSiteService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_FavoriteMenuService TKD_FavoriteMenuService { get; set; }
    }
}
#pragma warning restore 1591
