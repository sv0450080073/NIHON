#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\RepairList.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4770714b0b0ed3e1a9ac4350ba50db308066bcc1"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/repairlist")]
    public partial class RepairList : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 264 "E:\Project\HassyaAllrightCloud\Pages\RepairList.razor"
       
    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    EditContext formContext;
    RepairListData data = new RepairListData();
    private List<CompanyChartData> companychartlst = new List<CompanyChartData>();
    private List<DepartureOfficeData> vehicledispatchofficelst = new List<DepartureOfficeData>();
    private List<TPM_SyaRyoData> Vehicles = new List<TPM_SyaRyoData>();
    RepairListDataUri RepairListDataUri = new RepairListDataUri();
    private List<RepairDivision> RepairDivisionList = new List<RepairDivision>();
    private List<RepairOutputOrderData> OutputOrderOptions = new List<RepairOutputOrderData>();
    private List<PaperSize> PaperSizeOptions = new List<PaperSize>();
    IEnumerable<CompanyChartData> SelectedCompanyItems;

    DepartureOfficeData allBranch = new DepartureOfficeData();
    CompanyChartData allCompany = new CompanyChartData();
    RepairDivision allRepairDivision = new RepairDivision();
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    Dictionary<string, string> emptyItemMessage = new Dictionary<string, string>();
    VpmSyain SyainNmItem = new VpmSyain();
    private bool IsSelectedAll = true;
    bool checkCompanyAll { get; set; } = true;
    bool PopupCheckData { get; set; } = false;
    bool IsSelectEmptyCompany { get; set; } = false;
    bool IsDataNull { get; set; } = false;
    bool IsEmptyBranch { get; set; } = false;
    bool IsEmptyVehicle { get; set; } = false;
    bool IsEmptyRepairDivision { get; set; } = false;
    bool IsFilterApply { get; set; }
    bool isExporting;
    string EmptySelectCompanyMessage = "";
    string EmptyCompanyMessage = "";
    string EmptyBranchMessage = "";
    string EmptyVehicleMessage = "";
    string EmptyRepairDivisionMessage = "";
    string filterConditionFormName = "KU1500";
    string showSelectedCompany = "";
    private int SyainCdSeqLogin { get; set; } = (new ClaimModel()).SyainCdSeq;
    private int TenantCdSeqLogin { get; set; } = (new ClaimModel()).TenantID;

    #region Component Lifecycle
    private void LocalizationInit()
    {
        try
        {
            var dataLang = Lang.GetAllStrings();
            LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
            EmptyCompanyMessage = Lang["BI_T001"]; //todo company
            EmptyBranchMessage = Lang["BI_T006"];
            EmptyVehicleMessage = Lang["BI_T007"];
            EmptyRepairDivisionMessage = Lang["BI_T010"];
            EmptySelectCompanyMessage = Lang["CompanyEmpty"];
        }
        catch (Exception ex)
        {
            throw;
        }

    }
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            LocalizationInit();
            formContext = new EditContext(data);
            LoadOutputSetting();
            await LoadCompany();
            await LoadBranch();
            LoadVehicle();
            LoadRepairDivision();
            LoadOutputOrder();
            LoadPaperSize();
            SyainNmItem = await TPM_CompnyDataService.GetSyainNmBySyainCdSeq(SyainCdSeqLogin);
            data.SyainNmItem = SyainNmItem;
            data.TenantCdSeq = TenantCdSeqLogin;
            await ApplyFilter();
            formContext.Validate();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    protected override void OnAfterRender(bool firstRender)
    {
        try
        {
            JSRuntime.InvokeAsync<string>("loadPageScript", "repairlistPage", "tabKey");
            JSRuntime.InvokeAsync<string>("loadPageScript", "repairlistPage", "enterKey");
            JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    #endregion

    #region Load Data
    /// <summary>
    /// Company
    /// </summary>
    /// <returns></returns>
    private async Task LoadCompany()
    {
        try
        {
            companychartlst = await TPM_CompnyDataService.GetCompanyListBox(TenantCdSeqLogin);
            if (companychartlst == null || !companychartlst.Any())
            {
                IsDataNull = true;
                companychartlst = new List<CompanyChartData>();
                emptyItemMessage[nameof(EmptyCompanyMessage)] = EmptyCompanyMessage;
            }
            else
            {
                companychartlst.Insert(0, allCompany);
            }
            SelectedCompanyItems = companychartlst;
            data.CompanyChartData = SelectedCompanyItems.ToList();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    /// Branch
    /// </summary>
    /// <returns></returns>
    private async Task LoadBranch()
    {
        try
        {
            vehicledispatchofficelst = await TPM_EigyosDataService.GetAllBranchData(TenantCdSeqLogin);
            if (vehicledispatchofficelst == null || !vehicledispatchofficelst.Any())
            {
                IsDataNull = true;
                IsEmptyBranch = true;
                vehicledispatchofficelst = new List<DepartureOfficeData>();
                emptyItemMessage[nameof(EmptyBranchMessage)] = EmptyBranchMessage;
            }
            else
            {
                IsEmptyBranch = false;
                vehicledispatchofficelst.Insert(0, allBranch);
            }
            data.BranchFrom = vehicledispatchofficelst.FirstOrDefault();
            data.BranchTo = vehicledispatchofficelst.FirstOrDefault();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    /// <summary>
    /// Vehicle
    /// </summary>
    /// <returns></returns>
    private void LoadVehicle()
    {
        try
        {
            Vehicles = SyaRyoDataService.GetSyaRyoRepairList(TenantCdSeqLogin, data.StartDate.ToString("yyyyMMdd"), data.EndDate.ToString("yyyyMMdd"));
            if (Vehicles == null || !Vehicles.Any())
            {
                IsDataNull = true;
                IsEmptyVehicle = true;
                Vehicles = new List<TPM_SyaRyoData>();
                emptyItemMessage[nameof(EmptyVehicleMessage)] = EmptyVehicleMessage;
            }
            else
            {
                IsEmptyVehicle = false;
                InsertSelectAll(Vehicles, _ => _.IsSelectedAll, new TPM_SyaRyoData { IsSelectedAll = true });
            }
            data.VehicleFrom = Vehicles.FirstOrDefault();
            data.VehicleTo = Vehicles.FirstOrDefault();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    /// Booking Type
    /// </summary>
    /// <returns></returns>
    private void LoadRepairDivision()
    {
        try
        {
            RepairDivisionList = RepairDivisionService.GetRepairDivisionList(TenantCdSeqLogin);
            if (RepairDivisionList == null || !RepairDivisionList.Any())
            {
                IsDataNull = true;
                IsEmptyRepairDivision = true;
                RepairDivisionList = new List<RepairDivision>();
                emptyItemMessage[nameof(EmptyRepairDivisionMessage)] = EmptyRepairDivisionMessage;
            }
            else
            {
                IsEmptyRepairDivision = false;
                RepairDivisionList.Insert(0, allRepairDivision);
            }
            data.RepairFrom = RepairDivisionList.FirstOrDefault();
            data.RepairTo = RepairDivisionList.FirstOrDefault();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    /// <summary>
    /// Output Order
    /// </summary>
    private void LoadOutputOrder()
    {
        OutputOrderOptions = RepairOutputOrderListData.OutputOrderlst;
        data.OutputOrder = OutputOrderOptions.FirstOrDefault();
    }
    private void LoadOutputSetting()
    {
        data.OutputSetting = OutputInstruction.Preview;
    }
    /// <summary>
    /// Paper Size
    /// </summary>
    private void LoadPaperSize()
    {
        try
        {
            PaperSizeOptions = new List<PaperSize>
{
            PaperSize.A4,
            PaperSize.A3,
            PaperSize.B4,
        };
            data.PaperSize = PaperSizeOptions.FirstOrDefault();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    #endregion

    #region Value changed method
    /// <summary>
    /// Start Date
    /// </summary>
    /// <param name="newDate"></param>
    private void OnStartDateChanged(DateTime newDate)
    {
        try
        {
            data.StartDate = newDate;
            Vehicles = SyaRyoDataService.GetSyaRyoRepairList(TenantCdSeqLogin, data.StartDate.ToString("yyyyMMdd"), data.EndDate.ToString("yyyyMMdd"));
            InsertSelectAll(Vehicles, _ => _.IsSelectedAll, new TPM_SyaRyoData { IsSelectedAll = true });
            if (!IsFilterApply)
            {
                data.VehicleFrom = Vehicles.FirstOrDefault();
                data.VehicleTo = Vehicles.FirstOrDefault();
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    /// End Date
    /// </summary>
    /// <param name="newDate"></param>
    private void OnEndDateChanged(DateTime newDate)
    {
        try
        {
            data.EndDate = newDate;
            Vehicles = SyaRyoDataService.GetSyaRyoRepairList(TenantCdSeqLogin, data.StartDate.ToString("yyyyMMdd"), data.EndDate.ToString("yyyyMMdd"));
            InsertSelectAll(Vehicles, _ => _.IsSelectedAll, new TPM_SyaRyoData { IsSelectedAll = true });
            if (!IsFilterApply)
            {
                data.VehicleFrom = Vehicles.FirstOrDefault();
                data.VehicleTo = Vehicles.FirstOrDefault();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void OnSelectedCompanyItemsChanged(IEnumerable<CompanyChartData> selectedCompanyItems)
    {
        try
        {
            SelectedCompanyItems= Enumerable.Empty<CompanyChartData>();
            SelectedCompanyItems = selectedCompanyItems;
            if (SelectedCompanyItems.Count() == 0)
            {
                showSelectedCompany = "選択項目：0";
            }
            else if (SelectedCompanyItems.Count() == 1)
            {
                foreach (var item in SelectedCompanyItems)
                {
                    showSelectedCompany = item.Text;
                }
            }
            else  if (SelectedCompanyItems.Count() == companychartlst.Count())
            {
                showSelectedCompany = "すべて";
                SelectedCompanyItems = companychartlst;
            }
            else if (SelectedCompanyItems.Count() > 1 && SelectedCompanyItems.Count() < companychartlst.Count())
            {
                showSelectedCompany = "選択項目：" + SelectedCompanyItems.Count().ToString();

            }

            if (!IsFilterApply)
            {
                if (checkCompanyAll == true && !SelectedCompanyItems.Contains(allCompany))
                {
                    SelectedCompanyItems = SelectedCompanyItems.Take(0);
                    checkCompanyAll = false;
                }
                if (checkCompanyAll == false && (SelectedCompanyItems.Contains(allCompany) || (!SelectedCompanyItems.Contains(allCompany)
                    && SelectedCompanyItems.Count() == companychartlst.Count() - 1)))
                {
                    SelectedCompanyItems = companychartlst;
                    checkCompanyAll = true;
                }
                if (checkCompanyAll == true && SelectedCompanyItems.Contains(allCompany)
                    && SelectedCompanyItems.Count() < companychartlst.Count())
                {
                    SelectedCompanyItems = SelectedCompanyItems.Where(t => t.CompanyCdSeq != allCompany.CompanyCdSeq);
                    checkCompanyAll = false;
                }
            }
            if (SelectedCompanyItems.Count() == 0)
            {
                IsSelectEmptyCompany = true;
            }
            else
            {
                IsSelectEmptyCompany = false;
            }
            data.CompanyChartData = SelectedCompanyItems.ToList();
            vehicledispatchofficelst = TPM_EigyosDataService.GetBranchDataByIdCompany(data.CompanyChartData, TenantCdSeqLogin);
            vehicledispatchofficelst.Insert(0, allBranch);
            /* if (vehicledispatchofficelst.Any())
             {
                 vehicledispatchofficelst.Insert(0, allBranch);
             }*/
            if (!IsFilterApply)
            {
                data.BranchFrom = vehicledispatchofficelst.FirstOrDefault();
                data.BranchTo = vehicledispatchofficelst.FirstOrDefault();
            }
            //isFilterApply = false;
            formContext.Validate();
            if (!IsFilterApply) StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    /// Branch
    /// </summary>
    /// <param name="newBranch"></param>
    /// <param name="isFrom"></param>
    private void OnBranchSelectedItemChanged(DepartureOfficeData newBranch, bool isFrom = true)
    {
        try
        {
            if (isFrom)
            {

                data.BranchFrom = newBranch ?? new DepartureOfficeData();
            }
            else
            {

                data.BranchTo = newBranch ?? new DepartureOfficeData();

            }
            formContext.Validate();
            if (!IsFilterApply) StateHasChanged();
        }

        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    /// Booking
    /// </summary>
    /// <param name="newValue"></param>
    /// <param name="isFrom"></param>
    private void OnRepairDivisionSelectedItemChanged(RepairDivision newValue, bool isFrom = true)
    {
        try
        {
            if (isFrom)
            {
                data.RepairFrom = newValue ?? new RepairDivision();
            }
            else
            {

                data.RepairTo = newValue ?? new RepairDivision();
            }
            formContext.Validate();
            if (!IsFilterApply) StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    /// Vehicle
    /// </summary>
    /// <param name="newValue"></param>
    /// <param name="isFrom"></param>
    private void OnVehicleSelectedItemChanged(TPM_SyaRyoData newValue, bool isFrom = true)
    {
        try
        {
            if (isFrom)
            {

                data.VehicleFrom = newValue ?? new TPM_SyaRyoData();
            }
            else
            {

                data.VehicleTo = newValue ?? new TPM_SyaRyoData();

            }
            formContext.Validate();
            if (!IsFilterApply) StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    /// Output Order
    /// </summary>
    /// <param name="order"></param>
    private void OnOutputOrderChanged(RepairOutputOrderData order)
    {
        try
        {
            data.OutputOrder = order;
            formContext.Validate();
            if (!IsFilterApply) StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    /// Paper Size
    /// </summary>
    /// <param name="newValue"></param>
    private void OnPaperSizeChanged(PaperSize newSize)
    {
        try
        {
            data.PaperSize = newSize;
            formContext.Validate();
            if (!IsFilterApply) StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }
    #endregion

    #region Action
    /// <summary>
    /// Handle Valid Submit
    /// </summary>
    private void HandleValidSubmit()
    {
        // to do
    }

    /// <summary>
    /// Preview Report
    /// </summary>
    async void BtnSubmitClick()
    {
        try
        {
            if (formContext.Validate() && !IsSelectEmptyCompany && !IsDataNull)
            {
                isExporting = true;
                await SaveCurrentFilter();
                bool isDataExist = false;
                isDataExist = await IsDataExistInDb(data);
                if (isDataExist)
                {
                    if (data.OutputSetting == OutputInstruction.Preview)
                    {

                        RepairListDataUri = SetValueUri(data);
                        string baseUrl = AppSettingsService.GetBaseUrl();
                        var searchString = EncryptHelper.EncryptToUrl(RepairListDataUri);
                        string url = baseUrl + "/repairListPreview";
                        url = url + string.Format("/?SearchString={0}", searchString);
                        JSRuntime.InvokeVoidAsync("open", url, "_blank");
                        isExporting = false;
                    }
                    else if (data.OutputSetting == OutputInstruction.Pdf)
                    {
                        /*await Task.Run(() =>
                        {
                            ExportReportAsPdf(1, "").Wait();
                            isExporting = false;

                        });  */
                        await ExportReportAsPdf(1, "").ContinueWith(t => isExporting = false);
                    }
                }
                else
                {
                    isExporting = false;
                    PopupCheckData = true;
                }
            }
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
        StateHasChanged();
    }
    async Task ExportReportAsPdf(int printMode, string uri)
    {
        try
        {
            var result = await RepairListReportService.GetPDFData(data);
            DevExpress.XtraReports.UI.XtraReport report = new DevExpress.XtraReports.UI.XtraReport();
            if (result != null && result.Count > 0)
            {
                switch (data.PaperSize)
                {
                    case PaperSize.A3:
                        report = new Reports.ReportTemplate.RepairList.RepairListA3();
                        break;
                    case PaperSize.A4:
                        report = new Reports.ReportTemplate.RepairList.RepairListA4();
                        break;
                    case PaperSize.B4:
                        report = new Reports.ReportTemplate.RepairList.RepairListB4();
                        break;
                    default:
                        break;
                }
                report.DataSource = result;
                await new System.Threading.Tasks.TaskFactory().StartNew(() =>
                {
                    string fileType = "";
                    report.CreateDocument();
                    using (MemoryStream ms = new MemoryStream())
                    {
                        /*if (type == 1)
                        {
                            PrintToolBase tool = new PrintToolBase(report.PrintingSystem);
                            tool.Print();
                            return;
                        }*/
                        report.ExportToPdf(ms);
                        byte[] exportedFileBytes = ms.ToArray();
                        string myExportString = Convert.ToBase64String(exportedFileBytes);
                        fileType = "pdf";
                        JSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, fileType, "RepairList");
                    }
                });
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
    async Task<bool> IsDataExistInDb(RepairListData searchParam)
    {
        try
        {
            List<CurrentRepairList> data = new List<CurrentRepairList>();
            data = await RepairListReportService.GetListBusPairForSearch(searchParam);
            if (data.Any())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
            return false;
        }
    }
    /// <summary>
    /// Downlowd File Report
    /// </summary>
    private RepairListDataUri SetValueUri(RepairListData data)
    {
        var result = new RepairListDataUri();
        try
        {
            if (data != null)
            {
                result.StartDate = data.StartDate;
                result.EndDate = data.EndDate;
                result.CompanyChartDataID = string.Join('-', data.CompanyChartData.Select(_ => _.CompanyCdSeq));
                result.BranchFrom = data.BranchFrom;
                result.BranchTo = data.BranchTo;
                result.VehicleFrom = data.VehicleFrom;
                result.VehicleTo = data.VehicleTo;
                result.RepairFrom = data.RepairFrom;
                result.RepairTo = data.RepairTo;
                result.OutputOrder = data.OutputOrder;
                result.PaperSize = data.PaperSize;
                result.OutputSetting = data.OutputSetting;
                result.TenantCdSeq = data.TenantCdSeq;
                result.SyainNmItem = data.SyainNmItem;
            }
        }
        catch (Exception ex)
        {

            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
        return result;
    }
    protected string GetSelectedCompanyText()
    {
        string result = "";
        try
        {
            if (SelectedCompanyItems.Count() == 1 && SelectedCompanyItems.FirstOrDefault().CompanyCdSeq != 0)
            {
                result = SelectedCompanyItems.First().Text;
            }
            else if (SelectedCompanyItems.Count() == companychartlst.Count())
            {
                result = "すべて";
            }
            else
            {
                result = "選択項目：" + SelectedCompanyItems.Count();
            }
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
        return result;
    }
    #endregion

    #region Filter
    private async Task ApplyFilter()
    {
        try
        {
            var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, SyainCdSeqLogin)).ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues();
            if (filterValues.Count > 0)
            {
                IsFilterApply = true;
                RepairListReportService.ApplyFilter(ref data, companychartlst, vehicledispatchofficelst, Vehicles, RepairDivisionList, filterValues);

                OnPaperSizeChanged(data.PaperSize);
                OnStartDateChanged(data.StartDate);
                OnEndDateChanged(data.EndDate);
                Vehicles = SyaRyoDataService.GetSyaRyoRepairList(TenantCdSeqLogin, data.StartDate.ToString("yyyyMMdd"), data.EndDate.ToString("yyyyMMdd"));
                InsertSelectAll(Vehicles, _ => _.IsSelectedAll, new TPM_SyaRyoData { IsSelectedAll = true });
                var comIdList = data.CompanyChartData.Select(c => c.CompanyCdSeq).ToList();
                SelectedCompanyItems = companychartlst.Where(c => comIdList.Contains(c.CompanyCdSeq));
                data.CompanyChartData = SelectedCompanyItems.ToList();
                vehicledispatchofficelst = TPM_EigyosDataService.GetBranchDataByIdCompany(data.CompanyChartData, TenantCdSeqLogin);
                vehicledispatchofficelst.Insert(0, allBranch);
                checkCompanyAll = data.CompanyChartData.Count == companychartlst.Count;
                OnBranchSelectedItemChanged(vehicledispatchofficelst.Where(x => x.EigyoCdSeq == data.BranchFrom.EigyoCdSeq).FirstOrDefault());
                OnBranchSelectedItemChanged(vehicledispatchofficelst.Where(x => x.EigyoCdSeq == data.BranchTo.EigyoCdSeq).FirstOrDefault(), false);
                OnVehicleSelectedItemChanged(Vehicles.Where(x => x.SyaRyoCdSeq == data.VehicleFrom.SyaRyoCdSeq).FirstOrDefault());
                OnVehicleSelectedItemChanged(Vehicles.Where(x => x.SyaRyoCdSeq == data.VehicleTo.SyaRyoCdSeq).FirstOrDefault(), false);
                OnRepairDivisionSelectedItemChanged(data.RepairFrom);
                OnRepairDivisionSelectedItemChanged(data.RepairTo, false);
                OnOutputOrderChanged(data.OutputOrder);
                // StateHasChanged() will execute OnSelectedCompanyItemsChanged() => set IsFilterApply = false in that
                IsFilterApply = false;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private async Task SaveCurrentFilter()
    {
        try
        {
            await FilterServices.SaveCustomFilterAndConditions(GetFieldValues(), filterConditionFormName, SyainCdSeqLogin);
        }
        catch (Exception ex)
        {
            throw;
        }

    }
    private Dictionary<string, string> GetFieldValues()
    {
        var result = new Dictionary<string, string>();
        try
        {
            result = RepairListReportService.GetFieldValues(data);
        }
        catch (Exception ex)
        {
            ErrorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
        return result;
    }
    async void ResetForm()
    {
        try
        {
            data.OutputSetting = OutputInstruction.Preview;
            data.StartDate = DateTime.Today;
            data.EndDate = DateTime.Today;
            SelectedCompanyItems = companychartlst;
            data.CompanyChartData = SelectedCompanyItems.ToList();
            data.BranchFrom = vehicledispatchofficelst.FirstOrDefault();
            data.BranchTo = vehicledispatchofficelst.FirstOrDefault();
            data.VehicleFrom = Vehicles.FirstOrDefault();
            data.VehicleTo = Vehicles.FirstOrDefault();
            data.RepairFrom = RepairDivisionList.FirstOrDefault();
            data.RepairTo = RepairDivisionList.FirstOrDefault();
            data.OutputOrder = OutputOrderOptions.FirstOrDefault();
            data.PaperSize = PaperSizeOptions.FirstOrDefault();
            data.TenantCdSeq = TenantCdSeqLogin;
            checkCompanyAll = true;
            IsSelectEmptyCompany = false;
            await FilterServices.DeleteCustomFilerCondition(SyainCdSeqLogin, 1, filterConditionFormName);
            formContext = new EditContext(data);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw;
        }
    }
    #endregion
    #region Helper
    /// <summary>
    /// Insert SelectAll
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="source"></param>
    /// <param name="predicate"></param>
    /// <param name="emptyObj"></param>
    private void InsertSelectAll<T>(List<T> source, Func<T, bool> predicate, T emptyObj = null) where T : class
    {
        try
        {
            if (source.Any() && !source.Where(predicate).Any())
                source.Insert(0, emptyObj != null ? emptyObj : (T)Activator.CreateInstance(typeof(T))); // Insert a item to mark choose all in first line
        }
        catch (Exception ex)
        {
            throw;
        }
    }



    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService ErrorModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFilterCondition FilterServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRepairListReportService RepairListReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRepairDivisionService RepairDivisionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVPM_SyaRyoListService SyaRyoDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService EigyosDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<RepairList> Lang { get; set; }
    }
}
#pragma warning restore 1591
