#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\BusAllocation.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "636c81d4914e1ed159cf68b7a665ab79e5a443cc"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\Pages\BusAllocation.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\Pages\BusAllocation.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\Pages\BusAllocation.razor"
using HassyaAllrightCloud.Domain.Dto.CommonComponents;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/busallocation")]
    public partial class BusAllocation : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1484 "E:\Project\HassyaAllrightCloud\Pages\BusAllocation.razor"
      
    [Parameter] public string date { get; set; }
    [Parameter] public string bookingid { get; set; }
    [Parameter] public string HaiSKbn { get; set; }
    List<ReservationData> reservationlst = new List<ReservationData>();
    List<BranchChartData> branchchartlst = new List<BranchChartData>();
    List<CompanyChartData> companychartlst = new List<CompanyChartData>();
    BusAllocationData.BusAllocationSearch busAllocationSearchItem = new BusAllocationData.BusAllocationSearch();
    List<BusAllocationDataGrid> busAllocationDataGrid = new List<BusAllocationDataGrid>();
    BusAllocationData.OutputOrderData UnprovisionedVehicle2 = new BusAllocationData.OutputOrderData();
    BusAllocationDataUpdate BusAllocationDataUpdate { get; set; } = new BusAllocationDataUpdate();
    List<BusInfoData> BusInfoDataList { get; set; } = new List<BusInfoData>();
    List<TPM_CodeKbDataKenCD> TPM_CodeKbDataKenCDList { get; set; } = new List<TPM_CodeKbDataKenCD>();
    List<TPM_CodeKbDataBunruiCD> TPM_CodeKbDataBunruiCDList { get; set; } = new List<TPM_CodeKbDataBunruiCD>();
    List<KeyValueFilter> KeyValueFormList { get; set; } = new List<KeyValueFilter>();
    List<TPM_CodeKbDataDepot> TPM_CodeKbDataDepotStartList { get; set; } = new List<TPM_CodeKbDataDepot>();
    List<TPM_CodeKbDataDepot> TPM_CodeKbDataDepotEndList { get; set; } = new List<TPM_CodeKbDataDepot>();
    List<TPM_CodeKbDataOTHJINKBN> TPM_CodeKbDataOTHJINKBNList { get; set; } = new List<TPM_CodeKbDataOTHJINKBN>();
    //List<AssignedEmployee> AssignedEmployeeList { get; set; } = new List<AssignedEmployee>();
    List<CarTypePopup> CarTypePopupList { get; set; } = new List<CarTypePopup>();
    List<int> SelectedKeyTempList = new List<int>();
    List<int> SelectedKeyTempEditAllList = new List<int>();
    BusAllocationDataGrid busAllocationDataGridItemCopy = new BusAllocationDataGrid();
    List<BusAllocationDataGrid> busAllocationDataGridListTemp = new List<BusAllocationDataGrid>();
    List<BusAllocationDataGrid> busAllDataNewGridListTemp = new List<BusAllocationDataGrid>();
    BusAllocationDataCopyPaste busAllocationDataCopyPaste = new BusAllocationDataCopyPaste();
    BusAllocationDataUpdateAll busAllocationDataUpdateAll = new BusAllocationDataUpdateAll();
    List<BusAllocationDataGrid> busAllocationDataGridEditAllListTemp = new List<BusAllocationDataGrid>();
    List<TkdInpCon> tkdInpConList = new List<TkdInpCon>();
    private List<CustomFilerModel> ItemList { get; set; }
    public List<CustomFieldConfigs> CustomFieldList { get; set; } = new List<CustomFieldConfigs>();
    public CustomFieldValidation CustomFieldValidation { get; set; } = new CustomFieldValidation();
    BusAllocationDataEditSimultaneously busAllocationDataEditSimultaneously = new BusAllocationDataEditSimultaneously();
    DxDataGrid<BusAllocationDataGrid> grid;
    List<BusAllocationDataGrid> selectedKeyscheck = new List<BusAllocationDataGrid>();
    private List<string> EmptyErrorMessages { get; set; } = new List<string>();
    Dictionary<string, string> emptyItemMessage = new Dictionary<string, string>();

    List<TPM_SyokumData> DriverCharts = new List<TPM_SyokumData>();
    EditContext formContext;
    EditContext formContextItemHaiSha;
    EditContext formContextAllHaiSha;
    DateTime departuredate;
    DateTime returndate;
    DateTime deliverydate;
    DateTime arrivaldate;
    DateTime pickupDate = DateTime.Today;
    DateTime defaultDate = DateTime.Today;
    bool checkDeleteDriver = false;
    public ConfigBusAllocation Param = new ConfigBusAllocation();
    BusAllocationGridComponent childReservation;
    public BusAllocationHaitaCheck busAllocationHaitaCheck { get; set; }
    public BusAllocationHaitaCheck busAllocationHaitaCheckAll { get; set; }
    bool departure_date_time_checked { get; set; } = true;
    bool delivery_time_checked { get; set; } = true;
    bool departure_time_checked { get; set; } = true;
    bool arrival_date_checked { get; set; } = true;
    bool return_time_checked { get; set; } = true;
    bool depot_connection_checked { get; set; } = true;
    bool arrival_connection_checked { get; set; } = true;
    bool popupEditAll = false;
    bool popupdisable = false;
    bool Popupwhenclick = false;
    bool EnableBtnSearch = false;
    bool popupConfirmEditAll = false;
    bool popupsaveSuccess;
    bool isEdit = false;
    bool collapseAdvanced = false;
    bool disableAll = false;
    bool checkLockLink = false;
    bool enableCopy = false;
    bool enableTemp = false;
    bool enablePaste = false;
    bool popupConfirmPaste = false;
    bool isUpdateCopyPaste = false;
    bool IsDataGridRefresh = false;
    bool popupCheckData = false;
    bool checkBtnSearchClick = true;
    bool checkHasParam = false;
    public bool FormCustomError { get; set; } = true;
    public bool InitBtnDiableState { get; set; } = true;
    public bool InitFormCustomError { get; set; } = false;
    public bool IsDefaultState { get; set; } = false;
    private int SelectedFilterId { get; set; } = 0;
    bool syukoHSFormError = false;
    bool haiSFormError = false;
    bool touHSFormError = false;
    bool kikHSFormError = false;
    bool companyLoaded { get; set; } = true;
    bool branchLoaded { get; set; } = true;
    bool reservationLoaded { get; set; } = true;
    bool haitaCheck { get; set; } = true;
    bool haitaCheckAll { get; set; } = true;
    public bool TenantHasCustomData { get; set; } = true;
    string showCssClass => collapseAdvanced ? null : "d-none";
    string DateSpecified = "配車日";
    string validatestring = "";
    string rowTextBefore = "";
    string rowTextAffter = "";
    string rowTextCurrent = "";
    string tempstr = "";
    string defaultStr = "";
    string baseUrl;
    string CompanyEmpty;
    string BranchEmpty;
    string ReservationEmpty;
    string PageTitle;
    string TitltePopupEditAll;
    private string MessageNotEditItem = "※傭車・日報済・締め済のデータは編集不可となります。";
    private string FormName = "KU0600";
    private string FilterName = "KU0600" + " default";
    private string SelectedFilterText { get; set; } = string.Empty;
    string messageSyuKoHSFormError { get; set; }
    string messageHaiSHSFormError { get; set; }
    string messageTouHSFormError { get; set; }
    string messageKikHSFormError { get; set; }
    int rowNumberCurrentDataGrid = 0;
    int maxRowNumberDataGrid = 0;
    int selectedKeyCopyItem = 0;
    int SyainCdSeq = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq;
    int maxFilterId = 0;
    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    int SelectedCount { get; set; }
    TimeSpan SyuKoTime;
    TimeSpan HaiSTime;
    TimeSpan HaiSSetTime;
    TimeSpan KikTime;
    TimeSpan TouSetTime;
    TimeSpan SyuPaTime;
    TimeSpan TouChTime;
    protected HeaderTemplate Header { get; set; }
    protected BodyTemplate Body { get; set; }
    protected List<BusAllocationDataGrid> CheckedItems { get; set; } = new List<BusAllocationDataGrid>();
    protected Pagination pagination { get; set; }
    protected int totalPage { get; set; }

    public bool isClickRow { get; set; } = false;
    public int LastXClicked { get; set; }
    public int LastYClicked { get; set; }
    public int? CurrentClick { get; set; } = null;
    public int? CurrentScroll { get; set; }
    private int CurrentPage = 1;
    private byte RecordsPerPage = 25;
    private int TotalItems;

    string DisplayText1 = string.Empty;
    byte BackGround1 = 0;
    string DisplayText2 = string.Empty;
    byte BackGround2 = 0;
    bool isAutoAdd { get; set; } = false;
    bool isNotChanged { get; set; } = true;
    bool isBIT021 = false;
    bool isEnableDriverCombobox = false;

    ReservationClassComponentBase ReservationComponent { get; set; } = new ReservationClassComponentBase();

    #region Localization string
    Dictionary<string, string> LangDic = new Dictionary<string, string>();

    private void LocalizationInit()
    {
        CompanyEmpty = Lang["BI_T001"];
        BranchEmpty = Lang["BI_T002"];
        ReservationEmpty = Lang["BI_T003"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }


    #endregion

    #region Component Lifecycle

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LocalizationInit();
            ItemList = await FilterCondition.GetCustomFilters(SyainCdSeq, FormName);
            busAllocationSearchItem = new BusAllocationData.BusAllocationSearch();
            formContextItemHaiSha = new EditContext(BusAllocationDataUpdate);
            formContextAllHaiSha = new EditContext(busAllocationDataUpdateAll);
            formContext = new EditContext(busAllocationSearchItem);
            Param.DateType = (int)DateType.Dispatch;
            busAllocationSearchItem.pickupDate = pickupDate;
            busAllocationSearchItem.bookingParam = "";
            Param.ReservationType = 0;
            Param.SortOrder = (int)BusAllocationSortOrder.DeliveryVehicle;
            busAllocationSearchItem.outputSortOrder = Param.SortOrder;
            Param.Size = (int)ViewMode.Large;
            busAllocationSearchItem.size = Param.Size.ToString();
            companyLoaded = await LoadCompany();
            branchLoaded = await LoadBranchSearch();
            reservationLoaded = await LoadReservation();
            var customItems = await CustomItemService.GetCustomFieldConfigs(new ClaimModel().TenantID);
            TenantHasCustomData = !(customItems is null || customItems.Count == 0);
            if (companyLoaded && branchLoaded && reservationLoaded)
            {
                EnableBtnSearch = true;
                busAllocationSearchItem.CompanyChart = companychartlst.First();
                busAllocationSearchItem.BranchChart = branchchartlst.First();
                busAllocationSearchItem.ReservationClassification.YoyaKbnSeq = Param.ReservationType;
            }
            busAllocationSearchItem.UnprovisionedVehicle1 = "有";
            TPM_CodeKbDataOTHJINKBNList = await TPM_CodeKbnService.GetdataOTHJINKBN(new ClaimModel().TenantID);

            baseUrl = AppSettingsService.GetBaseUrl();
            if (!String.IsNullOrEmpty(date) && !String.IsNullOrWhiteSpace(date) && String.IsNullOrEmpty(bookingid) && String.IsNullOrWhiteSpace(bookingid))
            {
                checkHasParam = true;
                DateTime dateParam = DateTime.ParseExact(date, "yyyyMMdd", new CultureInfo("ja-JP"));
                busAllocationSearchItem.pickupDate = dateParam;
                pickupDate = dateParam;
                NavManager.NavigateTo("/busallocation", false);
            }
            if (!String.IsNullOrEmpty(date) && !String.IsNullOrWhiteSpace(date) && !String.IsNullOrEmpty(bookingid) && !String.IsNullOrWhiteSpace(bookingid))
            {
                checkHasParam = true;
                DateTime dateParam = DateTime.ParseExact(date, "yyyyMMdd", new CultureInfo("ja-JP"));
                busAllocationSearchItem.pickupDate = dateParam;
                busAllocationSearchItem.bookingParam = bookingid.PadLeft(10, '0');
                pickupDate = dateParam;
                NavManager.NavigateTo("/busallocation", false);
            }
            if (ItemList.Count > 0 && !checkHasParam && companyLoaded && branchLoaded && reservationLoaded)
            {
                await LoadCustomFilter();
            }
            if (!String.IsNullOrWhiteSpace(HaiSKbn))
            {
                PageTitle = Lang["PageTitleKari"];
                TitltePopupEditAll = Lang["title_popupKariEditAll"];
                BusAllocationDataUpdate.screenKbn = 2;
                busAllocationDataUpdateAll.screenKbn = 2;
                busAllocationDataGridItemCopy.screenKbn = 2;
            }
            else
            {

                PageTitle = Lang["Page Title"];
                TitltePopupEditAll = Lang["title_popupEditAll"];
            }
            checkBtnSearchClick = false;
            await Task.Run(() =>
            {
                GetBusAllocationDataGrid().Wait();
            });
            maxFilterId = await FilterCondition.GetMaxCustomFilerId(FormName, SyainCdSeq);
            if (maxFilterId == 0)
            {
                await CreateFilterItem();
            }
            else
            {
                await UpdateFilterItem();
            }
            GenrateGrid();

            StateHasChanged();
            /*GetCusTom Field*/
            CustomFieldList = await CustomItemService.GetCustomFieldConfigs(new ClaimModel().TenantID);
            formContextItemHaiSha = new EditContext(BusAllocationDataUpdate);
            formContextAllHaiSha = new EditContext(busAllocationDataUpdateAll);
        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }

        await base.OnInitializedAsync().ContinueWith((t) =>
        {
            formContext.Validate();
            InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 2);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 4);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 6);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 10);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 20);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 30);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 50);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 100);
        await JSRuntime.InvokeVoidAsync("setEventforTimeInput");
        await JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        await JSRuntime.InvokeVoidAsync("setEventforIsNumberField");
        if (IsDataGridRefresh && grid != null && busAllocationDataGrid.Count > 0)
        {
            foreach (var e in busAllocationDataGrid)
            {
                grid.SetDataRowSelected(e, false);
            }
            IsDataGridRefresh = false;
        }
    }

    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("setColorTextFromDb", BusLineCssColorServices.GetAllCssColor());
        base.OnParametersSet();
    }

    #endregion

    #region Load data init
    private async Task<bool> LoadCompany()
    {
        try
        {
            companychartlst = await TPM_CompnyDataService.GetCompany(new ClaimModel().TenantID);
            if (!companychartlst.Any())
            {
                emptyItemMessage[nameof(CompanyEmpty)] = CompanyEmpty;
                return false;
            }
            else
            {
                companychartlst.Insert(0, new CompanyChartData());
                return true;
            }
        }
        catch
        {
            emptyItemMessage[nameof(CompanyEmpty)] = CompanyEmpty;
            return false;
        }
    }

    private async Task<bool> LoadBranchSearch()
    {
        try
        {
            branchchartlst = TPM_EigyosDataService.GetBranchbyTenantCdSeq(new ClaimModel().TenantID);
            if (!branchchartlst.Any())
            {
                emptyItemMessage[nameof(BranchEmpty)] = BranchEmpty;
                return await Task.FromResult(false);
            }
            else
            {
                branchchartlst.Insert(0, new BranchChartData());
                return await Task.FromResult(true);
            }
        }
        catch
        {
            emptyItemMessage[nameof(BranchEmpty)] = BranchEmpty;
            return await Task.FromResult(false);
        }
    }

    private async Task<bool> LoadReservation()
    {
        try
        {
            reservationlst = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
            reservationlst.Insert(0, new ReservationData());
            if (!reservationlst.Any())
            {
                emptyItemMessage[nameof(ReservationEmpty)] = ReservationEmpty;
                return false;
            }
            else
            {
                return true;
            }
        }
        catch
        {
            emptyItemMessage[nameof(ReservationEmpty)] = ReservationEmpty;
            return false;
        }
    }

    private async Task GetAllDataComboboxUpdateHaiShaAll()
    {
        branchchartlst = TPM_EigyosDataService.GetBranchbyTenantCdSeq(new ClaimModel().TenantID);
        var kenCd = BusAllocationService.GetTPM_CodeKbDataKenCD(new ClaimModel().TenantID);;
        var bunruiCd = BusAllocationService.GetTPM_CodeKbDataBunruiCD(new ClaimModel().TenantID);;
        var depotStart = BusAllocationService.GetTPM_CodeKbDataDepot(new ClaimModel().TenantID, DateTime.Today.ToString("yyyyMMdd"));
        var depotEnd = BusAllocationService.GetTPM_CodeKbDataDepot(new ClaimModel().TenantID, DateTime.Today.ToString("yyyyMMdd"));

        await Task.WhenAll(kenCd, bunruiCd, depotStart, depotEnd);

        TPM_CodeKbDataKenCDList = await kenCd;
        TPM_CodeKbDataBunruiCDList = await bunruiCd;
        TPM_CodeKbDataDepotStartList = await depotStart;
        TPM_CodeKbDataDepotEndList = await depotEnd;
    }

    #endregion

    #region Value Method Changed

    #region InputTime changed event
    private bool CheckTimeChangeValid(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        if (timeValue != "")
        {
            return true;
        }
        return false;
    }
    private void OnHaisha_SyuKoTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        if (CheckTimeChangeValid(newTime))
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            SyuKoTime = BusScheduleHelper.ConvertTime(timeValue);
            BusAllocationDataUpdate.SyuKoTime = SyuKoTime.ToString("hhmm");
        }
        else
        {
            SyuKoTime = BusScheduleHelper.ConvertTime(BusAllocationDataUpdate.SyuKoTime);
            BusAllocationDataUpdate.SyuKoTime = SyuKoTime.ToString("hhmm");
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_HaiSTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        if (CheckTimeChangeValid(newTime))
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            HaiSTime = BusScheduleHelper.ConvertTime(timeValue);
            BusAllocationDataUpdate.HaiSTime = HaiSTime.ToString("hhmm");
        }
        else
        {
            HaiSTime = BusScheduleHelper.ConvertTime(BusAllocationDataUpdate.HaiSTime);
            BusAllocationDataUpdate.HaiSTime = HaiSTime.ToString("hhmm");
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_SyuPaTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        if (CheckTimeChangeValid(newTime))
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            SyuPaTime = BusScheduleHelper.ConvertTime(timeValue);
            BusAllocationDataUpdate.SyuPaTime = SyuPaTime.ToString("hhmm");
        }
        else
        {
            SyuPaTime = BusScheduleHelper.ConvertTime(BusAllocationDataUpdate.SyuPaTime);
            BusAllocationDataUpdate.SyuPaTime = SyuPaTime.ToString("hhmm");
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_TouChTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        if (CheckTimeChangeValid(newTime))
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            TouChTime = BusScheduleHelper.ConvertTime(timeValue);
            BusAllocationDataUpdate.TouChTime = TouChTime.ToString("hhmm");
        }
        else
        {
            TouChTime = BusScheduleHelper.ConvertTime(BusAllocationDataUpdate.TouChTime);
            BusAllocationDataUpdate.TouChTime = TouChTime.ToString("hhmm");
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_KikTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        if (CheckTimeChangeValid(newTime))
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            KikTime = BusScheduleHelper.ConvertTime(timeValue);
            BusAllocationDataUpdate.KikTime = KikTime.ToString("hhmm");
        }
        else
        {
            KikTime = BusScheduleHelper.ConvertTime(BusAllocationDataUpdate.KikTime);
            BusAllocationDataUpdate.KikTime = KikTime.ToString("hhmm");
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_HaiSSetTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        if (CheckTimeChangeValid(newTime))
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            HaiSSetTime = BusScheduleHelper.ConvertTime(timeValue);
            BusAllocationDataUpdate.HaiSSetTime = HaiSSetTime.ToString("hhmm");
        }
        else
        {
            HaiSSetTime = BusScheduleHelper.ConvertTime(BusAllocationDataUpdate.HaiSSetTime);
            BusAllocationDataUpdate.HaiSSetTime = HaiSSetTime.ToString("hhmm");
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_TouSetTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        if (CheckTimeChangeValid(newTime))
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            TouSetTime = BusScheduleHelper.ConvertTime(timeValue);
            BusAllocationDataUpdate.TouSetTime = TouSetTime.ToString("hhmm");
        }
        else
        {
            TouSetTime = BusScheduleHelper.ConvertTime(BusAllocationDataUpdate.TouSetTime);
            BusAllocationDataUpdate.TouSetTime = TouSetTime.ToString("hhmm");
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    #endregion

    private async Task OnBookingTypeSelectedChanged(ReservationClassComponentData value, bool isFrom = true)
    {
        if(isFrom)
            busAllocationSearchItem.BookingFrom = value;
        else
            busAllocationSearchItem.BookingTo = value;

        SetupReservationListByFromTo();
        checkBtnSearchClick = true;
        await OnButtonSearchClicked();

        StateHasChanged();
    }
    private async Task OnCompanySelectedItemChanged(CompanyChartData companyChart)
    {
        if (companyChart != null)
        {
            busAllocationSearchItem.CompanyChart = companyChart;
            branchchartlst = TPM_EigyosDataService.GetBranchbyTenantCdSeq(new ClaimModel().TenantID);
            if (companyChart.CompanyCdSeq != 0)
            {
                branchchartlst = branchchartlst.Where(x => x.CompanyCdSeq == companyChart.CompanyCdSeq).ToList();
            }
            //branchchartlst.Insert(0, new BranchChartData());
            busAllocationSearchItem.BranchChart = branchchartlst.FirstOrDefault();
            checkBtnSearchClick = true;
        }
        await OnButtonSearchClicked();
        StateHasChanged();
    }
    private async Task OnBranchSelectedItemChanged(BranchChartData branchChart)
    {
        busAllocationSearchItem.BranchChart = branchChart;
        checkBtnSearchClick = true;
        await OnButtonSearchClicked();
        StateHasChanged();
    }
    private async Task OnBookingParamChanged(string newValue)
    {
        int valueParse = 0;
        bool checkParse = int.TryParse(newValue, out valueParse);
        if (checkParse && newValue.Length <= 10)
        {
            busAllocationSearchItem.bookingParam = newValue.PadLeft(10, '0');
        }
        else
        {
            busAllocationSearchItem.bookingParam = "";
        }
        checkBtnSearchClick = true;
        await OnButtonSearchClicked();
        StateHasChanged();
    }
    private async Task OnPickupDateChanged(DateTime newDate)
    {
        pickupDate = newDate;
        busAllocationSearchItem.pickupDate = newDate;
        checkBtnSearchClick = true;
        await OnButtonSearchClicked();
        StateHasChanged();
    }
    private async Task UnprovisionedVehicleChanged(string newValue)
    {
        if (!string.IsNullOrEmpty(newValue))
        {
            busAllocationSearchItem.UnprovisionedVehicle1 = newValue;

            checkBtnSearchClick = true;
            await OnButtonSearchClicked();
        }

        StateHasChanged();
    }
    private void codeKbDataKenCDChanged(TPM_CodeKbDataKenCD data)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.TPM_CodeKbDataKenCD = data;
        BusAllocationDataUpdate.IkNm = data.BasyoBasyoNm;
        formContextItemHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void CodeKbDataDepotChanged(TPM_CodeKbDataDepot data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.TPM_CodeKbDataDepotStart = data;
            BusAllocationDataUpdate.HaisBinNm = data.BinBinNm ?? "";
            BusAllocationDataUpdate.HaiSSetTime = data.BINTouChTime;
            HaiSSetTime = ParseStringToTimeSpan(data.BINTouChTime);
        }
        formContextItemHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void CodeKbDataDepottouChanged(TPM_CodeKbDataDepot data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.TPM_CodeKbDataDepotEnd = data;
            BusAllocationDataUpdate.TouBinNm = data.BinBinNm ?? "";
            BusAllocationDataUpdate.TouSetTime = data.BINSyuPaTime;
            TouSetTime = ParseStringToTimeSpan(data.BINSyuPaTime);
        }
        formContextItemHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void depotNameChanged(TPM_CodeKbDataBunruiCD data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.TPM_CodeKbDataBunruiCDStart = data;
            BusAllocationDataUpdate.HaiSNm = data.HaiChiHaiSNm;
            BusAllocationDataUpdate.HaiSJyus1 = data.HaiChiJyus1;
            BusAllocationDataUpdate.HaiSJyus2 = data.HaiChiJyus2;
            BusAllocationDataUpdate.HaiSKigou = data.HaiChiHaiSKigou;
        }
        formContextItemHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void depottouNameChanged(TPM_CodeKbDataBunruiCD data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.TPM_CodeKbDataBunruiCDEnd = data;
            BusAllocationDataUpdate.TouNm = data.HaiChiHaiSNm;
            BusAllocationDataUpdate.TouJyusyo1 = data.HaiChiJyus1;
            BusAllocationDataUpdate.TouJyusyo2 = data.HaiChiJyus2;
            BusAllocationDataUpdate.TouKigou = data.HaiChiHaiSKigou;
        }
        formContextItemHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaisha_GoSyaChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.HAISHA_GoSya = string.Format("{0:D2}", newValue).Trim();
        formContextItemHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaisha_DanTaNm2Changed(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.DanTaNm2 = newValue;
        formContextItemHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaisha_IkNmChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.IkNm = newValue;
        formContextItemHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaisha_HaiSNmChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.HaiSNm = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_HaiSJyus1Changed(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.HaiSJyus1 = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_HaiSJyus2Changed(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.HaiSJyus2 = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_HaiSKigouChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.HaiSKigou = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_TouNmChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.TouNm = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private async Task OnSelectedbusnameChanged(BusInfoData data, bool isInitBus = false)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.DriverAssigneds.Clear();
        checkDeleteDriver = true;
        isEnableDriverCombobox = data != null && data.SyaRyoCdSeq != 0;
        if (data != null && data.SYARYO_SyainCdSeq != 0)
        {
            BusAllocationDataUpdate.BusInfoData = data;
            BusAllocationDataUpdate.BranchChartDataKik = branchchartlst.Where(x => x.EigyoCdSeq == data.EigyoCdSeq).FirstOrDefault();
            BusAllocationDataUpdate.BranchChartData = branchchartlst.Where(x => x.EigyoCdSeq == data.EigyoCdSeq).FirstOrDefault();
            BusAllocationDataUpdate.SYARYO_SyainCdSeq = await BusAllocationService.SyainIsAvailable(data.SYARYO_SyainCdSeq,
                new ClaimModel().TenantID, BusAllocationDataUpdate.SyuKoYmd.ToString("yyyyMMdd")) ? BusAllocationDataUpdate.BusInfoData.SYARYO_SyainCdSeq : 0;
            BusAllocationDataUpdate.SyokumuKbn = DriverCharts.FirstOrDefault(_ => _ != null && _.KyoSHe_SyainCdSeq == BusAllocationDataUpdate.SYARYO_SyainCdSeq)?.SyokumuKbn ?? 0;
            if(isAutoAdd || isNotChanged) {
                if(BusAllocationDataUpdate.DriverAssigneds.Count > 0)
                {
                    DriverCharts.Skip(1).FirstOrDefault(t => t.KyoSHe_SyainCdSeq == BusAllocationDataUpdate.DriverAssigneds[0].SyainCdSeq).isView = true;
                    BusAllocationDataUpdate.DriverAssigneds.RemoveAt(0);
                }
            }
            isAutoAdd = false;
        }
        else
        {
            BusAllocationDataUpdate.BusInfoData = data;
            BusAllocationDataUpdate.SYARYO_SyainCdSeq = 0;
        }

        if (!isInitBus)
        {
            formContextItemHaiSha.Validate();
            StateHasChanged();
        }
    }
    private void OnHaisha_TouJyusyo1Changed(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.TouJyusyo1 = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_TouJyusyo2Changed(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.TouJyusyo2 = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_TouKigouChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.TouKigou = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_JyoSyaJinChanged(string newValue)
    {
        short valueParse = 0;
        bool checkParse = short.TryParse(newValue, out valueParse);
        if (checkParse && newValue.Length <= 4)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.JyoSyaJin = valueParse;
        }
        else
        {
            BusAllocationDataUpdate.JyoSyaJin = BusAllocationDataUpdate.JyoSyaJin;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_PlusJinChanged(string newValue)
    {
        short valueParse = 0;
        bool checkParse = short.TryParse(newValue, out valueParse);
        if (checkParse && newValue.Length <= 4)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.PlusJin = valueParse;
        }
        else
        {
            BusAllocationDataUpdate.PlusJin = BusAllocationDataUpdate.PlusJin;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_DrvJinChanged(string newValue)
    {

        short valueParse = 0;
        bool checkParse = short.TryParse(newValue, out valueParse);
        if (checkParse && newValue.Length <= 4)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.DrvJin = valueParse;
        }
        else
        {
            BusAllocationDataUpdate.DrvJin = BusAllocationDataUpdate.DrvJin;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_GuiSuChanged(string newValue)
    {
        short valueParse = 0;
        bool checkParse = short.TryParse(newValue, out valueParse);
        if (checkParse && newValue.Length <= 4)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.GuiSu = valueParse;
        }
        else
        {
            BusAllocationDataUpdate.GuiSu = BusAllocationDataUpdate.GuiSu;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_PlatNoChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.PlatNo = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void branchchartlstbycurrentcpnChanged(BranchChartData data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.BranchChartData = data;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void branchchartlstbycurrentcpntouChanged(BranchChartData data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.BranchChartDataKik = data;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void TPM_CodeKbDataOTHJINKBNChanged(TPM_CodeKbDataOTHJINKBN data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.TPM_CodeKbDataOTHJINKBN01 = data;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void TPM_CodeKbDataOTHJINKBNtouChanged(TPM_CodeKbDataOTHJINKBN data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.TPM_CodeKbDataOTHJINKBN02 = data;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_OthJin1Changed(string newValue)
    {
        short valueParse = 0;
        bool checkParse = short.TryParse(newValue, out valueParse);
        if (checkParse && newValue.Length <= 4)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.OthJin1 = valueParse;
        }
        else
        {
            BusAllocationDataUpdate.OthJin1 = BusAllocationDataUpdate.OthJin1;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_OthJin2Changed(string newValue)
    {
        short valueParse = 0;
        bool checkParse = short.TryParse(newValue, out valueParse);
        if (checkParse && newValue.Length <= 4)
        {
            OnChangeValueInitState();
            BusAllocationDataUpdate.OthJin2 = valueParse;
        }
        else
        {
            BusAllocationDataUpdate.OthJin2 = BusAllocationDataUpdate.OthJin2;
        }
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaExp_TouSBinNmChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.TouBinNm = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaExp_HaisBinNmChanged(string newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.HaisBinNm = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_SyuKoYmdChanged(DateTime newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.SyuKoYmd = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_HaiSYmdChanged(DateTime newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.HaiSYmd = newValue;
        TPM_CodeKbDataDepotStartList = TPM_CodeKbDataDepotStartList.Where(x =>
        String.Compare(x.BINSiyoStaYmd, newValue.ToString("yyyyMMdd")) <= 0 && String.Compare(x.BINSiyoEndYmd, newValue.ToString("yyyyMMdd")) >= 0).ToList();
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_TouYmdChanged(DateTime newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.TouYmd = newValue;
        TPM_CodeKbDataDepotEndList = TPM_CodeKbDataDepotEndList.Where(x =>
        String.Compare(x.BINSiyoStaYmd, newValue.ToString("yyyyMMdd")) <= 0 && String.Compare(x.BINSiyoEndYmd, newValue.ToString("yyyyMMdd")) >= 0).ToList();
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaisha_KikYmdChanged(DateTime newValue)
    {
        OnChangeValueInitState();
        BusAllocationDataUpdate.KikYmd = newValue;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }

    private async Task SelectedSortOrder(MouseEventArgs e, int number)
    {
        Param.SortOrder = number;
        busAllocationSearchItem.outputSortOrder = Param.SortOrder;
        checkBtnSearchClick = true;
        await OnButtonSearchClicked();
        StateHasChanged();
    }
    private async Task SelectedSize(MouseEventArgs e, int number)
    {
        Param.Size = number;
        busAllocationSearchItem.size = Param.Size.ToString();
        checkBtnSearchClick = true;
        await OnButtonSearchClicked();
        StateHasChanged();
    }
    private async Task SelectedDateType(MouseEventArgs e, int number)
    {
        Param.DateType = number;
        if (Param.DateType == 0)
        {
            DateSpecified = "配車日";
        }
        else
        {
            DateSpecified = "到着日";
        }
        busAllocationSearchItem.DateSpecified = DateSpecified;
        checkBtnSearchClick = true;
        await OnButtonSearchClicked();
        StateHasChanged();
    }
    private void ToggleAdvancedSetting()
    {
        collapseAdvanced = !collapseAdvanced;
    }
    #endregion


    private async Task OnButtonSearchClicked()
    {
        checkBtnSearchClick = false;

        await GetBusAllocationDataGrid();

        maxFilterId = await FilterCondition.GetMaxCustomFilerId(FormName, SyainCdSeq);
        if (maxFilterId == 0)
        {
            await CreateFilterItem();
            // await CreateFilterItem();
        }
        else
        {
            await UpdateFilterItem();
        }
        StateHasChanged();
    }

    protected async Task GetBusAllocationDataGrid()
    {
        if (formContext.Validate())
        {
            CheckedItems.Clear();
            busAllocationDataGrid = await BusAllocationService.GetBusGetBusAllocationDataGrid(new ClaimModel().TenantID, busAllocationSearchItem);
            if (busAllocationDataGrid.Count > 0)
            {
                if (busAllocationSearchItem.outputSortOrder == 0)
                {
                    busAllocationDataGrid = busAllocationDataGrid.OrderBy(x => x.HAISHA_SyuEigCdSeq).ThenBy(x => x.HAISHA_HaiSSryCdSeq).ToList();
                }
                else if (busAllocationSearchItem.outputSortOrder == 1)
                {
                    busAllocationDataGrid = busAllocationDataGrid.OrderBy(x => x.HAISHA_SyuEigCdSeq).ThenBy(x => x.HAISHA_TeiDanNo).ToList();
                }
                else if (busAllocationSearchItem.outputSortOrder == 2)
                {
                    busAllocationDataGrid = busAllocationDataGrid.OrderBy(x => x.HAISHA_HaiSSryCdSeq).ToList();
                }
                else if (busAllocationSearchItem.outputSortOrder == 3)
                {
                    busAllocationDataGrid = busAllocationDataGrid.OrderBy(x => x.HENSYA_TenkoNo).ToList();
                }
                int index = 1;
                foreach (var e in busAllocationDataGrid)
                {
                    var checkLockRow = await BusLineCssColorServices.GetCssColor(e.YYKSHO_UkeNo, e.HAISHA_UnkRen, e.HAISHA_TeiDanNo, e.HAISHA_BunkRen);
                    e.ColorClass = checkLockRow.cssColor;
                    e.RowID = index++;
                    IsDataGridRefresh = true;

                }
                maxRowNumberDataGrid = busAllocationDataGrid.Count;
                var paged = PagedList<BusAllocationDataGrid>.ToPagedList(busAllocationDataGrid.AsQueryable(), CurrentPage, (int)RecordsPerPage);
                TotalItems = paged.TotalCount;
                busAllocationDataGrid = paged;
            }
            else
            {
                popupCheckData = true;
            }

            ResetValueFormSearch();
        }
    }

    protected async Task LoadHaiShaDataListWithIndex()
    {
        busAllocationDataGrid = await BusAllocationService.GetBusGetBusAllocationDataGrid(new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID, busAllocationSearchItem).ContinueWith(t =>
        {
            if (t.Status == TaskStatus.RanToCompletion)
            {
                int index = 1;
                foreach (var item in t.Result)
                {
                    item.RowID = index++;
                }
                return t.Result;
            }
            else
            {
                return new List<BusAllocationDataGrid>();
            }
        });
    }

    public BusAllocationDataGrid busAllocationDataBefore { get; set; }
    public BusAllocationDataGrid busAllocationDataAffter { get; set; }

    private void SetTxtValueLink(int rowNumberCurrent)
    {
        rowNumberCurrent = (rowNumberCurrent - ((CurrentPage - 1) * RecordsPerPage));
        busAllocationDataBefore = null;
        busAllocationDataAffter = null;
        rowNumberCurrentDataGrid = rowNumberCurrent;
        int index = rowNumberCurrent - 1;
        if (rowNumberCurrentDataGrid == maxRowNumberDataGrid && maxRowNumberDataGrid == 1)
        {

        }
        else if (rowNumberCurrentDataGrid == maxRowNumberDataGrid && maxRowNumberDataGrid > 1)
        {
            busAllocationDataBefore = busAllocationDataGrid[index - 1];
        }
        else if (rowNumberCurrentDataGrid == 1)
        {
            busAllocationDataAffter = busAllocationDataGrid[index + 1];
        }
        else
        {
            busAllocationDataBefore = busAllocationDataGrid[index - 1];
            busAllocationDataAffter = busAllocationDataGrid[index + 1];
        }
        if (busAllocationDataBefore != null)
        {
            rowTextBefore = "No" + (busAllocationDataBefore.RowID) + "  " + busAllocationDataBefore.YYKSHO_UkeCd.ToString("D10") + "  "
                + (busAllocationDataBefore.RowID).ToString("D2") + "中" + maxRowNumberDataGrid;
        }
        if (busAllocationDataAffter != null)
        {
            rowTextAffter = "No" + (busAllocationDataAffter.RowID) + "  " + busAllocationDataAffter.YYKSHO_UkeCd.ToString("D10") + "  "
                + (busAllocationDataAffter.RowID).ToString("D2") + "中" + maxRowNumberDataGrid;
        }
        rowTextCurrent = " (" + rowNumberCurrentDataGrid + "/" + maxRowNumberDataGrid + ")";
    }

    async Task GetDataByRowId(int rowId)
    {
        if (rowId > 0)
        {
            checkDeleteDriver = false;

            formContextItemHaiSha = new EditContext(BusAllocationDataUpdate);
            var itemUpdate = busAllocationDataGrid.FirstOrDefault(x => x.RowID == rowId);

            if (itemUpdate is null) return;
            await GetAndSetupDriverAssigned(itemUpdate.YYKSHO_UkeNo, itemUpdate.HAISHA_UnkRen, itemUpdate.HAISHA_TeiDanNo, itemUpdate.HAISHA_BunkRen, itemUpdate);

            BusAllocationDataUpdate.YYKSHO_UkeNo = itemUpdate.YYKSHO_UkeNo;
            BusAllocationDataUpdate.HAISHA_UnkRen = itemUpdate.HAISHA_UnkRen;
            BusAllocationDataUpdate.HAISHA_SyaSyuRen = itemUpdate.HAISHA_SyaSyuRen;
            BusAllocationDataUpdate.HAISHA_TeiDanNo = itemUpdate.HAISHA_TeiDanNo;
            BusAllocationDataUpdate.HAISHA_BunkRen = itemUpdate.HAISHA_BunkRen;
            BusAllocationDataUpdate.UkenoCd = itemUpdate.YYKSHO_UkeCd.ToString("D10");
            BusAllocationDataUpdate.UnkobiStart = DateTime.ParseExact(itemUpdate.HAISHA_HaiSYmd + itemUpdate.HAISHA_HaiSTime, "yyyyMMddHHmm",
                new CultureInfo("ja-JP")).ToString("yyyy/MM/dd (ddd) HH:mm");
            BusAllocationDataUpdate.UnkobiEnd = DateTime.ParseExact(itemUpdate.HAISHA_TouYmd + itemUpdate.HAISHA_TouChTime, "yyyyMMddHHmm",
                new CultureInfo("ja-JP")).ToString("yyyy/MM/dd (ddd) HH:mm");
            BusAllocationDataUpdate.CustomerName = string.Format("{0:D5} : {1}", itemUpdate.TOKISK_TokuiNm, itemUpdate.TOKIST_SitenNm);

            CarTypePopupList = await BusAllocationService.GetYykSyuData(itemUpdate.YYKSHO_UkeNo, new ClaimModel().TenantID);
            //AssignedEmployeeList = await BusAllocationService.GetAssignedEmployee(itemUpdate.YYKSHO_UkeNo, itemUpdate.HAISHA_UnkRen, itemUpdate.HAISHA_BunkRen, itemUpdate.HAISHA_TeiDanNo);
            //while (AssignedEmployeeList.Count() < 5)
            //{
            //    AssignedEmployeeList.Add(new AssignedEmployee());
            //}
            SetValueCheckValidDate(itemUpdate, BusAllocationDataUpdate);

            BusInfoDataList = await BusAllocationService.GetBusInfoData(new ClaimModel().TenantID, itemUpdate.UNKOBI_HaiSYmd);
            BusAllocationDataUpdate.SYARYO_SyainCdSeq = BusInfoDataList.FirstOrDefault(x => x.SyaRyoCdSeq == itemUpdate.HAISHA_HaiSSryCdSeq)?.SYARYO_SyainCdSeq ?? BusInfoDataList.FirstOrDefault()?.SYARYO_SyainCdSeq ?? 0;

            branchchartlst = TPM_EigyosDataService.GetBranchbyTenantCdSeq(new ClaimModel().TenantID);
            //branchchartlst.Insert(0, new BranchChartData());
            TPM_CodeKbDataKenCDList = await BusAllocationService.GetTPM_CodeKbDataKenCD(new ClaimModel().TenantID);
            TPM_CodeKbDataKenCDList.Insert(0, new TPM_CodeKbDataKenCD());
            TPM_CodeKbDataBunruiCDList = await BusAllocationService.GetTPM_CodeKbDataBunruiCD(new ClaimModel().TenantID);
            TPM_CodeKbDataBunruiCDList.Insert(0, new TPM_CodeKbDataBunruiCD());
            TPM_CodeKbDataDepotStartList = await BusAllocationService.GetTPM_CodeKbDataDepot(new ClaimModel().TenantID, itemUpdate.UNKOBI_HaiSYmd);
            TPM_CodeKbDataDepotStartList.Insert(0, new TPM_CodeKbDataDepot());
            TPM_CodeKbDataDepotEndList = await BusAllocationService.GetTPM_CodeKbDataDepot(new ClaimModel().TenantID, itemUpdate.HAISHA_KikYmd);
            TPM_CodeKbDataDepotEndList.Insert(0, new TPM_CodeKbDataDepot());
            /*GetCusTom Field*/
            var customFiedList = await BusAllocationService.GetCustomHaiShaFieldQuery(new ClaimModel().TenantID, itemUpdate);
            BusAllocationDataUpdate.HAISHA_GoSya = string.Format("{0:D2}", itemUpdate.HAISHA_GoSya).Trim();

            BusAllocationDataUpdate.BusInfoData = BusInfoDataList.Where(x => x.SyaRyoCdSeq == itemUpdate.HAISHA_HaiSSryCdSeq).FirstOrDefault();
            isEnableDriverCombobox = BusAllocationDataUpdate.BusInfoData != null;
            if (BusAllocationDataUpdate.BusInfoData != null)
            {
                BusAllocationDataUpdate.SYARYO_SyainCdSeq = await BusAllocationService.SyainIsAvailable(BusAllocationDataUpdate.BusInfoData.SYARYO_SyainCdSeq,
                new ClaimModel().TenantID, itemUpdate.UNKOBI_HaiSYmd) ? BusAllocationDataUpdate.BusInfoData.SYARYO_SyainCdSeq : 0;
            }
            BusAllocationDataUpdate.SyokumuKbn = DriverCharts.FirstOrDefault(_ => _ != null && _.KyoSHe_SyainCdSeq == BusAllocationDataUpdate.SYARYO_SyainCdSeq)?.SyokumuKbn ?? 0;
            BusAllocationDataUpdate.BranchChartData = branchchartlst.Where(x => x.EigyoCdSeq == itemUpdate.HAISHA_SyuEigCdSeq).FirstOrDefault();
            if (BusAllocationDataUpdate.BranchChartData == null)
            {
                BusAllocationDataUpdate.BranchChartData = branchchartlst.Where(x => x.EigyoCdSeq == BusInfoDataList.FirstOrDefault().EigyoCdSeq).FirstOrDefault();
            }

            BusAllocationDataUpdate.BranchChartData = branchchartlst.Where(x => x.EigyoCdSeq == BusInfoDataList.FirstOrDefault().EigyoCdSeq).FirstOrDefault();
            BusAllocationDataUpdate.DanTaNm2 = itemUpdate.HAISHA_DanTaNm2;
            BusAllocationDataUpdate.TPM_CodeKbDataKenCD = TPM_CodeKbDataKenCDList.Where(x => x.BasyoBasyoMapCdSeq == itemUpdate.HAISHA_IkMapCdSeq).FirstOrDefault();
            BusAllocationDataUpdate.IkNm = itemUpdate.HAISHA_IkNm;
            BusAllocationDataUpdate.SyuKoYmd = ParseStringToDate(itemUpdate.HAISHA_SyuKoYmd);
            BusAllocationDataUpdate.SyuKoTime = itemUpdate.HAISHA_SyuKoTime;
            SyuKoTime = ParseStringToTimeSpan(itemUpdate.HAISHA_SyuKoTime);
            BusAllocationDataUpdate.HaiSYmd = ParseStringToDate(itemUpdate.HAISHA_HaiSYmd);
            BusAllocationDataUpdate.HaiSTime = itemUpdate.HAISHA_HaiSTime;
            HaiSTime = ParseStringToTimeSpan(itemUpdate.HAISHA_HaiSTime);
            BusAllocationDataUpdate.SyuPaTime = itemUpdate.HAISHA_SyuPaTime;
            SyuPaTime = ParseStringToTimeSpan(itemUpdate.HAISHA_SyuPaTime);
            BusAllocationDataUpdate.TPM_CodeKbDataBunruiCDStart = TPM_CodeKbDataBunruiCDList.Where(x => x.HaiChiHaiSCdSeq == itemUpdate.HAISHA_HaiSCdSeq).FirstOrDefault();
            BusAllocationDataUpdate.HaiSNm = itemUpdate.HAISHA_HaiSNm;
            BusAllocationDataUpdate.HaiSJyus1 = itemUpdate.HAISHA_HaiSJyus1;
            BusAllocationDataUpdate.HaiSJyus2 = itemUpdate.HAISHA_HaiSJyus2;
            BusAllocationDataUpdate.HaiSKigou = itemUpdate.HAISHA_HaiSKigou;
            BusAllocationDataUpdate.TPM_CodeKbDataDepotStart = TPM_CodeKbDataDepotStartList.Where(x => x.KoutuKoukCdSeq == itemUpdate.HAISHA_HaiSKouKCdSeq).FirstOrDefault();
            if (BusAllocationDataUpdate.TPM_CodeKbDataDepotStart != null)
            {

            }
            BusAllocationDataUpdate.HaiSSetTime = itemUpdate.HAISHA_HaiSSetTime;
            HaiSSetTime = ParseStringToTimeSpan(itemUpdate.HAISHA_HaiSSetTime);
            BusAllocationDataUpdate.HaisBinNm = itemUpdate.HAISHA_HaiSBinNm ?? "";
            BusAllocationDataUpdate.TouYmd = ParseStringToDate(itemUpdate.HAISHA_TouYmd);
            BusAllocationDataUpdate.TouChTime = itemUpdate.HAISHA_TouChTime;
            TouChTime = ParseStringToTimeSpan(itemUpdate.HAISHA_TouChTime);
            BusAllocationDataUpdate.KikYmd = ParseStringToDate(itemUpdate.HAISHA_KikYmd);
            BusAllocationDataUpdate.KikTime = itemUpdate.HAISHA_KikTime;
            KikTime = ParseStringToTimeSpan(itemUpdate.HAISHA_KikTime);
            BusAllocationDataUpdate.TPM_CodeKbDataBunruiCDEnd = TPM_CodeKbDataBunruiCDList.Where(x => x.HaiChiHaiSCdSeq == itemUpdate.HAISHA_TouCdSeq).FirstOrDefault();

            BusAllocationDataUpdate.TouNm = itemUpdate.HAISHA_TouNm;
            BusAllocationDataUpdate.TouJyusyo1 = itemUpdate.HAISHA_TouJyusyo1;
            BusAllocationDataUpdate.TouJyusyo2 = itemUpdate.HAISHA_TouJyusyo2;
            BusAllocationDataUpdate.TouKigou = itemUpdate.HAISHA_TouKigou;
            BusAllocationDataUpdate.TPM_CodeKbDataDepotEnd = TPM_CodeKbDataDepotEndList.Where(x => x.KoutuKoukCdSeq == itemUpdate.HAISHA_TouKouKCdSeq).FirstOrDefault();
            if (BusAllocationDataUpdate.TPM_CodeKbDataDepotEnd != null)
            {

            }
            BusAllocationDataUpdate.TouSetTime = itemUpdate.HAISHA_TouSetTime;
            TouSetTime = ParseStringToTimeSpan(itemUpdate.HAISHA_TouSetTime);
            BusAllocationDataUpdate.TouBinNm = itemUpdate.HAISHA_TouBinNm ?? "";
            BusAllocationDataUpdate.BranchChartData = branchchartlst.Where(x => x.EigyoCdSeq == itemUpdate.HAISHA_SyuEigCdSeq).FirstOrDefault();
            if (BusAllocationDataUpdate.BranchChartData == null)
            {
                BusAllocationDataUpdate.BranchChartData = branchchartlst.Where(x => x.EigyoCdSeq == BusInfoDataList.FirstOrDefault().EigyoCdSeq).FirstOrDefault();
            }
            BusAllocationDataUpdate.BranchChartDataKik = branchchartlst.Where(x => x.EigyoCdSeq == itemUpdate.HAISHA_KikEigSeq).FirstOrDefault();
            if (BusAllocationDataUpdate.BranchChartDataKik == null)
            {
                BusAllocationDataUpdate.BranchChartDataKik = branchchartlst.Where(x => x.EigyoCdSeq == BusInfoDataList.FirstOrDefault().EigyoCdSeq).FirstOrDefault();
            }
            BusAllocationDataUpdate.TPM_CodeKbDataOTHJINKBN01 = TPM_CodeKbDataOTHJINKBNList.Where(x => Int16.Parse(x.CodeKb_CodeKbn) == itemUpdate.HAISHA_OthJinKbn1).FirstOrDefault();
            BusAllocationDataUpdate.OthJin1 = itemUpdate.HAISHA_OthJin1;
            BusAllocationDataUpdate.TPM_CodeKbDataOTHJINKBN02 = TPM_CodeKbDataOTHJINKBNList.Where(x => Int16.Parse(x.CodeKb_CodeKbn) == itemUpdate.HAISHA_OthJinKbn2).FirstOrDefault();
            BusAllocationDataUpdate.OthJin2 = itemUpdate.HAISHA_OthJin2;
            BusAllocationDataUpdate.JyoSyaJin = itemUpdate.HAISHA_JyoSyaJin;
            BusAllocationDataUpdate.PlusJin = itemUpdate.HAISHA_PlusJin;
            BusAllocationDataUpdate.DrvJin = itemUpdate.HAISHA_DrvJin;
            BusAllocationDataUpdate.GuiSu = itemUpdate.HAISHA_GuiSu;
            BusAllocationDataUpdate.PlatNo = itemUpdate.HAISHA_PlatNo.Trim();
            BusAllocationDataUpdate.HAISHA_HaiSSryCdSeq = itemUpdate.HAISHA_HaiSSryCdSeq;
            BusAllocationDataUpdate.HAISHA_YouTblSeq = itemUpdate.HAISHA_YouTblSeq;
            BusAllocationDataUpdate.HAISHA_HaiSKbn = itemUpdate.HAISHA_HaiSKbn;
            BusAllocationDataUpdate.HAISHA_HaiIKbn = itemUpdate.HAISHA_HaiIKbn;
            BusAllocationDataUpdate.YYKSHO_YoyaKbnSeq=itemUpdate.YYKSHO_YoyaKbnSeq;
            if(BusAllocationDataUpdate.HAISHA_HaiSSryCdSeq == 0 && BusAllocationDataUpdate.HAISHA_YouTblSeq == 0)
            {
                DisplayText1 = Lang["UnTemp"];
                BackGround1 = 1;
            }
            else if (BusAllocationDataUpdate.HAISHA_HaiSKbn == 2)
            {
                DisplayText1 = Lang["Already"];
                BackGround1 = 2;
            }
            else
            {
                DisplayText1 = Lang["Temp"];
                BackGround1 = 3;
            }

            if(BusAllocationDataUpdate.HAISHA_HaiIKbn == 1)
            {
                DisplayText2 = Lang["UnAssign"];
                BackGround2 = 1;
            }
            else if(BusAllocationDataUpdate.HAISHA_HaiIKbn == 2)
            {
                DisplayText2 = Lang["Allocated"];
                BackGround2 = 4;
            }
            else if (BusAllocationDataUpdate.HAISHA_HaiIKbn == 3)
            {
                DisplayText2 = Lang["Partial"];
                BackGround2 = 5;
            }


            //get data for haita check
            haitaCheck = true;
            busAllocationHaitaCheck = await BusAllocationService.GetBusAllocationHaitaCheck(itemUpdate.YYKSHO_UkeNo);

            /*Custom Item*/
            InitFormCustomError = false;
            if (customFiedList != null && customFiedList.Any())
            {
                BusAllocationDataUpdate.CustomData = customFiedList;
                if (CustomFieldList == null)
                {
                    CustomFieldList = new List<CustomFieldConfigs>();
                }
                foreach (var field in CustomFieldList)
                {
                    CustomFieldValidation = ValidationHelper.ValidationCustomItem(field, BusAllocationDataUpdate.CustomData[field.id.ToString()]);
                    if (!InitFormCustomError)
                    {
                        if (CustomFieldValidation.IsError)
                        {
                            InitFormCustomError = true;
                        }
                    }
                    if (field.CustomFieldType == FieldType.Date)
                    {
                        DateTime date;
                        DateTime initDate;
                        var isDate = DateTime.TryParseExact(BusAllocationDataUpdate.CustomData[field.id.ToString()], "yyyyMMdd", null, DateTimeStyles.None, out date);
                        var isInital = DateTime.TryParseExact(field.DateInitial, "yyyyMMdd", null, DateTimeStyles.None, out initDate);
                        var result = isDate ? date : isInital ? initDate : DateTime.Now;
                        BusAllocationDataUpdate.CustomData[field.id.ToString()] = result.ToString("yyyyMMdd");
                    }
                    if (field.CustomFieldType == FieldType.Time)
                    {
                        var tpm = BusAllocationDataUpdate.CustomData[field.id.ToString()];
                        BusAllocationDataUpdate.CustomData[field.id.ToString()] = tpm == "" ? "0000" : tpm;
                    }
                }

            }

            if (BusInfoDataList.Any())
                BusInfoDataList.Insert(0, new BusInfoData());
            await Task.Run(() =>
            {
                CheckEnableData(rowId).Wait();

            });
        }
    }

    private void SetValueCheckValidDate(BusAllocationDataGrid dataUpdate, BusAllocationDataUpdate itemUpdate)
    {
        itemUpdate.CheckHaiSUnkobi = ParseStringToDateTime(dataUpdate.UNKOBI_HaiSYmd, dataUpdate.UNKOBI_HaiSTime);
        itemUpdate.CheckSyuKoUnkobi = ParseStringToDateTime(dataUpdate.UNKOBI_SyukoYmd, dataUpdate.UNKOBI_SyuKoTime);
        itemUpdate.CheckTouUnkobi = ParseStringToDateTime(dataUpdate.UNKOBI_TouYmd, dataUpdate.UNKOBI_TouChTime);
        itemUpdate.CheckKikUnkobi = ParseStringToDateTime(dataUpdate.UNKOBI_KikYmd, dataUpdate.UNKOBI_KikTime);
    }


    private async Task CheckEnableData(int rowNumberCurrent)
    {
        isBIT021 = false;
        var dataCurrent = busAllocationDataGrid.Where(x => x.RowID == rowNumberCurrent).FirstOrDefault();
        var checkLockRow = await BusLineCssColorServices.GetCssColor(dataCurrent.YYKSHO_UkeNo, dataCurrent.HAISHA_UnkRen, dataCurrent.HAISHA_TeiDanNo, dataCurrent.HAISHA_BunkRen);
        if (checkLockRow.isLock || (checkLockRow.cssColor == "Youshazumi-color"))
        {
            disableAll = true;
        }
        else
        {
            disableAll = false;
        }
        if (!disableAll && HaiSKbn == "1" && dataCurrent.HAISHA_HaiSKbn == 2)
        {
            disableAll = true;
            isBIT021 = true;
        }
    }

    //private async Task SetColorOnRow(List<BusAllocationDataGrid> busAllocationDataGrid)
    //{
    //    int index = 1;
    //    foreach (var e in busAllocationDataGrid)
    //    {
    //        var checkLockRow = await BusLineCssColorServices.GetCssColor(e.YYKSHO_UkeNo, e.HAISHA_UnkRen, e.HAISHA_TeiDanNo, e.HAISHA_BunkRen);
    //        e.ColorClass = checkLockRow.cssColor;
    //        e.RowID = index++;
    //    }
    //}
    //void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<BusAllocationDataGrid> eventArgs)
    //{
    //    var item = eventArgs.DataItem;
    //    if (item != null)
    //    {
    //        eventArgs.CssClass = item.ColorClass;
    //    }
    //}

    //protected async Task OnSelectionChanged(DataGridSelection<BusAllocationDataGrid> selection)
    //{
    //    var selectedKeys = await selection.SelectedKeys;
    //    SelectedCount = selectedKeys.Count();
    //    var data = selectedKeys.ToList();
    //    if (selectedKeys.Count() == 1)
    //    {
    //        isEdit = false;
    //        enableCopy = true;
    //        if (selectedKeyCopyItem > 0 && !String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo))
    //        {
    //            SelectedKeyTempList.Clear();
    //            enableTemp = true;
    //            foreach (var item in selectedKeys)
    //            {
    //                SelectedKeyTempList.Add(int.Parse(item.ToString()));
    //            }
    //        }
    //        else
    //        {
    //            enableTemp = false;
    //            foreach (var item in selectedKeys)
    //            {
    //                selectedKeyCopyItem = int.Parse(item.ToString());
    //            }
    //        }
    //    }
    //    else if (selectedKeys.Count() > 1)
    //    {
    //        SelectedKeyTempEditAllList.Clear();
    //        foreach (var item in selectedKeys)
    //        {
    //            SelectedKeyTempEditAllList.Add(int.Parse(item.ToString()));
    //        }
    //        isEdit = CheckEnableBtnEditAllClick();
    //        enableCopy = false;
    //        if (selectedKeyCopyItem > 0 && !String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo))
    //        {
    //            enableTemp = true;
    //            SelectedKeyTempList.Clear();
    //            foreach (var item in selectedKeys)
    //            {
    //                SelectedKeyTempList.Add(int.Parse(item.ToString()));
    //            }
    //        }
    //        else
    //        {
    //            enableTemp = false;
    //        }
    //    }
    //    else
    //    {
    //        enableCopy = false;
    //        enableTemp = false;
    //        isEdit = false;
    //        SelectedKeyTempEditAllList.Clear();
    //    }
    //    await InvokeAsync(StateHasChanged);
    //}



    private void ModifyEmptyErrorMessage(string message, bool isAdd = true)
    {
        if (isAdd)
        {
            if (!EmptyErrorMessages.Contains(message))
                EmptyErrorMessages.Add(message);
        }
        else
        {
            if (EmptyErrorMessages.Contains(message))
                EmptyErrorMessages.Remove(message);
        }
    }

    private void CancelPopupEditAll(MouseEventArgs e)
    {
        ResetValueFormHaiShaAll();
        selectedKeyscheck.Clear();
        CheckedItems.Clear();
        busAllocationDataUpdateAll = new BusAllocationDataUpdateAll();
        isEdit = false;
        popupEditAll = false;
        collapseAdvanced = false;
        FormCustomError = true;
        StateHasChanged();
    }

    private void CancelCheckData(MouseEventArgs e)
    {
        popupCheckData = false;
        StateHasChanged();
    }

    private void SetFormCustomState(bool value)
    {
        FormCustomError = value;
        InitBtnDiableState = value;
        StateHasChanged();
    }
    private void OnChangeValueInitState()
    {
        InitBtnDiableState = false;
        IsDefaultState = false;
    }




    #region Grid
    private async void HandleChangedRowBefore(int rowNumberCurrent)
    {
        try
        {
            if (rowNumberCurrent >= 1)
            {
                checkLockLink = true;
                IsDefaultState = true;
                InitBtnDiableState = true;
                int rownumberBefore = rowNumberCurrent - 1;

                SetTxtValueLink(rownumberBefore);
                await Task.Run(() =>
                {
                    GetDataByRowId(rownumberBefore).Wait();
                    checkLockLink = false;
                });
            }
        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }

        StateHasChanged();
    }
    private async void HandleChangedRowAffter(int rowNumberCurrent)
    {
        try
        {
            if (rowNumberCurrent >= 1)
            {
                checkLockLink = true;
                IsDefaultState = true;
                InitBtnDiableState = true;
                int rownumberBefore = rowNumberCurrent + 1;
                SetTxtValueLink(rownumberBefore);
                await Task.Run(() =>
                {
                    GetDataByRowId(rownumberBefore).Wait();
                    checkLockLink = false;
                });
            }
        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }

        StateHasChanged();
    }

    protected void HandleItemPerPageChange(byte newItemPerPage)
    {
        RecordsPerPage = newItemPerPage;
        StateHasChanged();
    }

    private async void OnPaginationChanged(int page)
    {
        //Because in Paination component page start at 0

        CurrentPage = page + 1;
        await LoadHaiShaDataListWithIndex();
        foreach (var e in busAllocationDataGrid)
        {
            var checkLockRow = await BusLineCssColorServices.GetCssColor(e.YYKSHO_UkeNo, e.HAISHA_UnkRen, e.HAISHA_TeiDanNo, e.HAISHA_BunkRen);
            e.ColorClass = checkLockRow.cssColor;
            IsDataGridRefresh = true;
        }
        busAllocationDataGrid = PagedList<BusAllocationDataGrid>.ToPagedList(busAllocationDataGrid.AsQueryable(), CurrentPage, (int)RecordsPerPage);
        StateHasChanged();
    }

    private async void OnRowClickShowPopup(BusAllocationDataGrid item)
    {
        try
        {
            SetTxtValueLink(item.RowID);
            FormCustomError = true;
            await InitDataForPopupHaisha();
            await GetDataByRowId(item.RowID);
            IsDefaultState = true;
            InitBtnDiableState = true;
            Popupwhenclick = true;

            formContextItemHaiSha = new EditContext(BusAllocationDataUpdate);
        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }

        StateHasChanged();
    }

    private void OnSelectionChangedShowPopup(List<BusAllocationDataGrid> selectedKeys)
    {
        isEdit = CheckEnableBtnEditAllClick(selectedKeys);
        selectedKeyscheck = selectedKeys;
        StateHasChanged();
    }

    public static Func<object, string> CustomRowCss = (item) =>
    {
        var cssClass = "";
        var model = item as BusAllocationDataGrid;

        if (model != null)
        {
            cssClass = model.ColorClass;
        }

        return cssClass;
    };

    protected ShowCheckboxArgs<BusAllocationDataGrid> ShowCheckboxOptions { get; set; } = new ShowCheckboxArgs<BusAllocationDataGrid>()
    {
        RowIdentifier = (checkedItem, item) => checkedItem.RowID == item.RowID
    };

    protected void RowClick(RowClickEventArgs<BusAllocationDataGrid> args)
    {
        try
        {
            BusAllocationDataGrid SelectedItem = args.SelectedItem;
            LastXClicked = Convert.ToInt32(args.Event.ClientX);
            LastYClicked = Convert.ToInt32(args.Event.ClientY);
            CurrentScroll = null;
            enableCopy = false;
            enableTemp = false;
            if (!args.Event.ShiftKey && !args.Event.CtrlKey)
            {
                CheckedItems = new List<BusAllocationDataGrid>() { SelectedItem };
            }
            else
            {
                isClickRow = true;
                if (args.Event.CtrlKey)
                {
                    if (!CheckedItems.Any(item => item.RowID == SelectedItem.RowID))
                    {
                        CheckedItems.Add(busAllocationDataGrid.FirstOrDefault(item => item.RowID == SelectedItem.RowID));
                    }
                    else
                    {
                        CheckedItems.RemoveAll(item => item.RowID == SelectedItem.RowID);
                        if (CheckedItems.Count == 0)
                        {
                            CurrentClick = null;
                        }
                        else
                        {
                            CurrentClick = CheckedItems.Max(item => item.RowID);
                        }
                    }
                }
                else
                {
                    int BeginIndex = Math.Min(SelectedItem.RowID, (int)CurrentClick);
                    int EndIndex = Math.Max(SelectedItem.RowID, (int)CurrentClick);
                    for (int IndexToBeAdd = BeginIndex; IndexToBeAdd <= EndIndex; IndexToBeAdd++)
                    {
                        if (!CheckedItems.Any(item => item.RowID == IndexToBeAdd))
                        {
                            CheckedItems.Add(busAllocationDataGrid.FirstOrDefault(item => item.RowID == IndexToBeAdd));
                        }
                    }
                }
            }
            if (CheckedItems.Count == 1)
            {
                if (!String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo) && IsEnableBtnTemp())
                {
                    enableTemp = true;
                }
                enableCopy = true;
            }
            CurrentClick = SelectedItem.RowID;
        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }

        StateHasChanged();
    }

    protected void RowDbClick(BusAllocationDataGrid item)
    {
        // OnShowPopup.InvokeAsync(item);
        OnRowClickShowPopup(item);
        enableCopy = false;
        StateHasChanged();
    }

    protected void CheckedChange(CheckedChangeEventArgs<BusAllocationDataGrid> args)
    {
        enableCopy = false;
        enableTemp = false;
        if (args.CheckedItems != null && args.CheckedItems.Any())
        {
            OnSelectionChangedShowPopup(args.CheckedItems);
            if (args.CheckedItems.Count == 1)
            {
                enableCopy = true;
            }
            if (!String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo))
            {
                if(IsEnableBtnTemp())
                {
                    enableTemp = true;
                }
            }
        }
        else if (args.IsCheckAll && !args.CheckedItems.Any())
        {
            isEdit = false;
            enableTemp = false;
        }

        StateHasChanged();
    }

    public async void SaveGridLayout()
    {
        await _loadingService.ShowAsync();
        await Task.Run(() =>
        {
            var headerColumns = Header.Rows.Count > 0 ? Header.Rows[0].Columns : new List<ColumnHeaderTemplate>();
            List<TkdGridLy> gridLayouts = new List<TkdGridLy>();
            if (headerColumns.Count > 0)
            {
                for (int i = 0; i < headerColumns.Count; i++)
                {
                    string itemName = headerColumns[i].CodeName;
                    gridLayouts.Add(new TkdGridLy()
                    {
                        DspNo = i,
                        FormNm = FormName,
                        FrozenCol = 0,
                        GridNm = BusAllocationGridGridHeaderNameConstants.GridName,
                        ItemNm = itemName,
                        SyainCdSeq = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                        UpdPrgId = Common.UpdPrgId,
                        UpdSyainCd = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                        UpdYmd = DateTime.Now.ToString().Substring(0, 10).Replace("/", string.Empty),
                        UpdTime = DateTime.Now.ToString().Substring(11).Replace(":", string.Empty),
                        Width = headerColumns[i].Width
                    });
                }
            }

            var isSaved = GridLayoutService.SaveGridLayout(gridLayouts).Result;
            InvokeAsync(StateHasChanged).Wait();
        });
        await _loadingService.HideAsync();
    }
    public async void InitGridLayout()
    {

        await _loadingService.ShowAsync();
        await Task.Run(() =>
        {
            List<TkdGridLy> tkdGridLies = new List<TkdGridLy>();
            RenderGridBySavedLayout(tkdGridLies);
            DeleteSavedGridLayout();
            InvokeAsync(StateHasChanged).Wait();
        });
        await _loadingService.HideAsync();
    }
    private void DeleteSavedGridLayout()
    {
        var isDeleted = GridLayoutService.DeleteSavedGridLayout(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, FormName, BusAllocationGridGridHeaderNameConstants.GridName).Result;
    }

    private void GenrateGrid()
    {

        List<TkdGridLy> tkdGridLies = GridLayoutService.GetGridLayout(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, FormName, BusAllocationGridGridHeaderNameConstants.GridName).Result;
        RenderGridBySavedLayout(tkdGridLies);
    }
    private void RenderGridBySavedLayout(List<TkdGridLy> gridlayouts)
    {
        HeaderTemplate headerTemplate = new HeaderTemplate();
        headerTemplate.Rows = new List<RowHeaderTemplate>();
        headerTemplate.StickyCount = 1;
        BodyTemplate bodyTemplate = new BodyTemplate();
        bodyTemplate.Rows = new List<RowBodyTemplate>();
        bodyTemplate.CustomCssDelegate = CustomRowCss;
        for (int i = 0; i < 3; i++)
        {
            headerTemplate.Rows.Add(new RowHeaderTemplate());
            bodyTemplate.Rows.Add(new RowBodyTemplate());
        }
        for (int i = 0; i < 3; i++)
        {
            headerTemplate.Rows[i].Columns = new List<ColumnHeaderTemplate>();
            bodyTemplate.Rows[i].Columns = new List<ColumnBodyTemplate>();
        }
        int CurrentIndex = 0;
        while (true)
        {
            // No
            if ((gridlayouts.Count == 0 && CurrentIndex == 0) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.no_colItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["no_col"], CodeName = BusAllocationGridGridHeaderNameConstants.no_colItemNm, Width = gridlayouts.Count == 0 ? 50 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.RowID), RowSpan = 2, AlignCol = AlignColEnum.Center });
            }
            //受付番号
            if ((gridlayouts.Count == 0 && CurrentIndex == 1) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.receipt_numberItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["receipt_number"], CodeName = BusAllocationGridGridHeaderNameConstants.receipt_numberItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.YYKSHO_UkeCd), CustomTextFormatDelegate = KoboGridHelper.ToFormatString, RowSpan = 2, AlignCol = AlignColEnum.Center });
            }
            //号車
            if ((gridlayouts.Count == 0 && CurrentIndex == 2) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.carItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["car"], CodeName = BusAllocationGridGridHeaderNameConstants.carItemNm, Width = gridlayouts.Count == 0 ? 50 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_GoSya), RowSpan = 2, AlignCol = AlignColEnum.Center });
            }
            //営業所
            if ((gridlayouts.Count == 0 && CurrentIndex == 3) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.sales_officeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["sales_office"], CodeName = BusAllocationGridGridHeaderNameConstants.sales_officeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.EIGYOS_RyakuNm), RowSpan = 2 });
            }
            //車号／車種
            if ((gridlayouts.Count == 0 && CurrentIndex == 4) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.car_number_modelItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["car_number_model"], CodeName = BusAllocationGridGridHeaderNameConstants.car_number_modelItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.SYARYO_SyaRyoNm) });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.SYASYU_SyaSyuNm) });
            }
            //団体名／団体名2
            if ((gridlayouts.Count == 0 && CurrentIndex == 5) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.group_name_2ItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["group_name_2"], CodeName = BusAllocationGridGridHeaderNameConstants.group_name_2ItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.UNKOBI_DanTaNm) });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_DanTaNm2) });
            }
            //出庫日時／帰庫日時
            if ((gridlayouts.Count == 0 && CurrentIndex == 6) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.departure_return_datetimeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["departure_return_datetime"], CodeName = BusAllocationGridGridHeaderNameConstants.departure_return_datetimeItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.CheckSyuKoHaiSha), CustomTextFormatDelegate = KoboGridHelper.ToFormatDateTime });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.CheckKikHaiSha), CustomTextFormatDelegate = KoboGridHelper.ToFormatDateTime });
            }
            //配車日時／到着日時
            if ((gridlayouts.Count == 0 && CurrentIndex == 7) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.delivery_arrival_timeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["delivery_arrival_time"], CodeName = BusAllocationGridGridHeaderNameConstants.delivery_arrival_timeItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.CheckHaiSHaiSha), CustomTextFormatDelegate = KoboGridHelper.ToFormatDateTime });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.CheckTouHaiSha), CustomTextFormatDelegate = KoboGridHelper.ToFormatDateTime });
            }
            //配車地／到着地
            if ((gridlayouts.Count == 0 && CurrentIndex == 8) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.depot_arrivalItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["depot/arrival"], CodeName = BusAllocationGridGridHeaderNameConstants.depot_arrivalItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_HaiSNm) });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_TouNm) });
            }
            //接続　配車／到着
            if ((gridlayouts.Count == 0 && CurrentIndex == 9) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.connection_dispatch_arrivalItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["connection_dispatch/arrival"], CodeName = BusAllocationGridGridHeaderNameConstants.connection_dispatch_arrivalItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_HaiSBinNm) });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_TouBinNm) });
            }
            //税込運賃
            if ((gridlayouts.Count == 0 && CurrentIndex == 10) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.tax_included_fareItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["tax-included_fare"], CodeName = BusAllocationGridGridHeaderNameConstants.tax_included_fareItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_SyaRyoUncSyo), CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber, RowSpan = 2, AlignCol = AlignColEnum.Right });
            }
            //運賃
            if ((gridlayouts.Count == 0 && CurrentIndex == 11) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.fareItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["fare"], CodeName = BusAllocationGridGridHeaderNameConstants.fareItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_SyaRyoUnc), CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber, RowSpan = 2, AlignCol = AlignColEnum.Right });
            }
            //消費税
            if ((gridlayouts.Count == 0 && CurrentIndex == 12) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.sale_taxItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["sale_tax"], CodeName = BusAllocationGridGridHeaderNameConstants.sale_taxItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_SyaRyoSyo), CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber, RowSpan = 2, AlignCol = AlignColEnum.Right });
            }
            //手数料
            if ((gridlayouts.Count == 0 && CurrentIndex == 13) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.feeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["fee"], CodeName = BusAllocationGridGridHeaderNameConstants.feeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_SyaRyoTes), CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber, RowSpan = 2, AlignCol = AlignColEnum.Right });
            }
            //配車地住所／到着地住所
            if ((gridlayouts.Count == 0 && CurrentIndex == 14) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.depot_arrival_addressItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["depot_arrival_address"], CodeName = BusAllocationGridGridHeaderNameConstants.depot_arrival_addressItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_HaiSJyus1) });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_TouJyusyo1) });
            }
            //乗車人員/プラス人員
            if ((gridlayouts.Count == 0 && CurrentIndex == 15) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.riding_plus_personnelItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["riding_plus_personnel"], CodeName = BusAllocationGridGridHeaderNameConstants.riding_plus_personnelItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_JyoSyaJin), CustomTextFormatDelegate = KoboGridHelper.ToFormatPerson });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_PlusJin), CustomTextFormatDelegate = KoboGridHelper.ToFormatPerson });
            }
            //その他人員
            if ((gridlayouts.Count == 0 && CurrentIndex == 16) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.other_personnelItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["other_personnel"], CodeName = BusAllocationGridGridHeaderNameConstants.other_personnelItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.StringEmpty), RowSpan = 2 });
            }
            //乗務員1
            if ((gridlayouts.Count == 0 && CurrentIndex == 17) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.crew1ItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["crew1"], CodeName = BusAllocationGridGridHeaderNameConstants.crew1ItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.StringEmpty), RowSpan = 2 });
            }
            //乗務員2
            if ((gridlayouts.Count == 0 && CurrentIndex == 18) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.crew2ItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["crew2"], CodeName = BusAllocationGridGridHeaderNameConstants.crew2ItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.StringEmpty), RowSpan = 2 });
            }
            //乗務員2
            if ((gridlayouts.Count == 0 && CurrentIndex == 19) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.crew3ItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["crew3"], CodeName = BusAllocationGridGridHeaderNameConstants.crew3ItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.StringEmpty), RowSpan = 2 });
            }
            //行き先名
            if ((gridlayouts.Count == 0 && CurrentIndex == 20) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.destination_nameItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["destination_name"], CodeName = BusAllocationGridGridHeaderNameConstants.destination_nameItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_IkNm), RowSpan = 2 });
            }
            //プレートNo
            if ((gridlayouts.Count == 0 && CurrentIndex == 21) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == BusAllocationGridGridHeaderNameConstants.plate_noItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["plate_no"], CodeName = BusAllocationGridGridHeaderNameConstants.plate_noItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(BusAllocationDataGrid.HAISHA_PlatNo), RowSpan = 2 });
                if (gridlayouts.Count == 0)
                {
                    break;
                }
            }
            CurrentIndex++;
            if (gridlayouts.Count != 0 && CurrentIndex >= gridlayouts.Count)
            {
                break;
            }
        }
        Header = headerTemplate;
        Body = bodyTemplate;
    }

    #endregion

    #region Popup Haisha

    private async Task GetAndSetupDriverAssigned(string ukeNo, short unkRen, short teiDanNo, short bunkRen, BusAllocationDataGrid grid)
    {
        var drivers = await BusBookingDataService.Getbusdriver(ukeNo, unkRen, teiDanNo, bunkRen);

        foreach (var item in drivers)
        {
            var olditem = await TPM_SyokumDataService.GetDriverbyid(item.SyainCdSeq, new ClaimModel().TenantID);
            DriverCharts.Skip(1).FirstOrDefault(t => t.KyoSHe_SyainCdSeq == olditem.KyoSHe_SyainCdSeq).isView = false;
            item.DriverName = DriverCharts.Skip(1).FirstOrDefault(t => t.KyoSHe_SyainCdSeq == olditem.KyoSHe_SyainCdSeq)?.Syain_SyainNm ?? string.Empty;

            if (string.IsNullOrWhiteSpace(item.StartTimestr))
            {
                item.StartTime = grid.HAISHA_SyuKoTime;
            }
            if (string.IsNullOrWhiteSpace(item.EndTimestr))
            {
                item.EndTime = grid.HAISHA_KikTime;
            }
        }

        BusAllocationDataUpdate.DriverAssigneds = drivers;
    }



    private TPM_SyokumData GetDisplaySyokumOrder(int indexOrder)
    {
        if (BusAllocationDataUpdate.BusInfoData != null)
        {
            if (indexOrder == 0)
            {
                var driver = DriverCharts.FirstOrDefault(dr => dr != null
                                && dr.KyoSHe_SyainCdSeq == (BusAllocationDataUpdate.DriverAssigneds?.ElementAtOrDefault(indexOrder)?.SyainCdSeq ?? -1));
                if(driver == null && BusAllocationDataUpdate.DriverAssigneds.Count == 0)
                {
                    driver = DriverCharts.FirstOrDefault(dr => dr != null && dr.KyoSHe_SyainCdSeq == BusAllocationDataUpdate.SYARYO_SyainCdSeq);
                    if(driver != null)
                    {
                        DriverCharts.Skip(1).FirstOrDefault(t => t.KyoSHe_SyainCdSeq == driver.KyoSHe_SyainCdSeq).isView = false;
                        Driverlst driverAssign = new Driverlst();
                        driverAssign.SyainCdSeq = driver.KyoSHe_SyainCdSeq;
                        driverAssign.DriverName = driver.Syain_SyainNm;
                        driverAssign.StartTime = BusAllocationDataUpdate.SyuKoTime;
                        driverAssign.EndTime = BusAllocationDataUpdate.KikTime;
                        driverAssign.Syokum_SyokumuCdSeq = driver.Syokum_SyokumuCdSeq;
                        driverAssign.SyokumuKbn = driver.SyokumuKbn;
                        BusAllocationDataUpdate.DriverAssigneds.Add(driverAssign);
                        isAutoAdd = true;
                    }
                }
                else
                {
                    isNotChanged = false;
                }
                return driver;
            }
            else
            {
                return DriverCharts.FirstOrDefault(dr => dr != null
                        && dr.KyoSHe_SyainCdSeq == (BusAllocationDataUpdate.DriverAssigneds?.ElementAtOrDefault(indexOrder)?.SyainCdSeq ?? -1));
            }
        }
        else
        {
            return null;
        }
    }

    private void ClosePopupItemHaiSha()
    {
        Popupwhenclick = false;
        isNotChanged = true;
        isAutoAdd = false;
        isEdit = false;
        enableCopy = false;
        enablePaste = false;
        enableTemp = false;
        CheckedItems.Clear();

        StateHasChanged();
    }



    #region Init data
    private async Task InitDataForPopupHaisha()
    {
        DriverCharts = await TPM_SyokumDataService.GetDriver(DateTime.Today, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, new ClaimModel().TenantID);
        DriverCharts.Insert(0, null);

    }
    #endregion

    #region Button action

    private async Task HandleValidSubmitItemHaiSha()
    {
        InitBtnDiableState = true;
        StateHasChanged();
        haitaCheck = await TKD_HaishaDataService.HaitaCheck(busAllocationHaitaCheck, false);
        bool isValid = formContextItemHaiSha.Validate();
        if (isValid && !disableAll && haitaCheck)
        {
            try
            {
                BusAllocationDataUpdate.CheckDeleteDriver = checkDeleteDriver;
                //TKD_HaishaDataService.updateHaiindata(BusAllocationDataUpdate, checkDeleteDriver);
                var client = await Http.GetHttpClient();
                var content = Http.getStringContentFromObject(BusAllocationDataUpdate);
                var url = $"{baseUrl}/api/BusAllocation/updateItemHaiSha/{BusAllocationDataUpdate.YYKSHO_UkeNo}";
                HttpResponseMessage response = await client.PutAsync(url, content);
                if (response.IsSuccessStatusCode)
                {
                    string newUkeNo = await response.Content.ReadAsStringAsync();
                    //await TKD_HaishaDataService.UpdateTKD_KobanBusallocation(BusAllocationDataUpdate);
                    if(BusAllocationDataUpdate.screenKbn == 0)
                    {
                        BusBookingDataService.UpdateHaiSha(BusAllocationDataUpdate.YYKSHO_UkeNo, BusAllocationDataUpdate.HAISHA_UnkRen,
                            BusAllocationDataUpdate.HAISHA_TeiDanNo, BusAllocationDataUpdate.HAISHA_BunkRen, FormName, BusAllocationDataUpdate.HaiSYmd.ToString("yyyyMMdd"), true, false);
                    } else
                    {
                        BusBookingDataService.UpdateHaiSha(BusAllocationDataUpdate.YYKSHO_UkeNo, BusAllocationDataUpdate.HAISHA_UnkRen,
                            BusAllocationDataUpdate.HAISHA_TeiDanNo, BusAllocationDataUpdate.HAISHA_BunkRen, FormName, BusAllocationDataUpdate.HaiSYmd.ToString("yyyyMMdd"), true, true);
                    }

                    BusBookingDataService.UpdateUnkobi(BusAllocationDataUpdate.YYKSHO_UkeNo, BusAllocationDataUpdate.HAISHA_UnkRen, FormName);
                    BusBookingDataService.UpdateYyksho(BusAllocationDataUpdate.YYKSHO_UkeNo, new ClaimModel().TenantID, FormName);

                    await GetBusAllocationDataGrid();
                    Popupwhenclick = false;
                    isNotChanged = true;
                    isAutoAdd = false;

                }
                else
                {
                    Popupwhenclick = false;
                }
            }
            catch (Exception ex)
            {
                Popupwhenclick = false;
                isNotChanged = true;
                isAutoAdd = false;
                ErrorHandlerService.HandleError(ex);
            }
        }
        InitBtnDiableState = false;
        StateHasChanged();
    }

    private async Task HandleValidSubmitAllHaiSha()
    {
        haitaCheckAll = await TKD_HaishaDataService.HaitaCheck(busAllocationHaitaCheckAll, true);
        bool isValid = formContextAllHaiSha.Validate();

        if (isValid && !FormCustomError && haitaCheckAll)
        {
            try
            {
                int countUkeno = 0;
                var dataTempList = selectedKeyscheck;
                if (dataTempList != null)
                {
                    busAllDataNewGridListTemp.Clear();
                    busAllocationDataGridEditAllListTemp = dataTempList;
                    foreach (var item in busAllocationDataGridEditAllListTemp)
                    {
                        var checkLockRow = await BusLineCssColorServices.GetCssColor(item.YYKSHO_UkeNo, item.HAISHA_UnkRen, item.HAISHA_TeiDanNo, item.HAISHA_BunkRen);
                        if (!checkLockRow.isLock && item.HAISHA_YouTblSeq == 0)
                        {
                            busAllDataNewGridListTemp.Add(item);
                        }
                    }
                    if (busAllDataNewGridListTemp.Count > 0)
                    {
                        countUkeno = busAllDataNewGridListTemp.GroupBy(x => new { x.YYKSHO_UkeNo, x.HAISHA_UnkRen }).Select(x => x.First()).ToList().Count;
                        busAllocationDataUpdateAll.YYKSHO_UkeNo = dataTempList.First().YYKSHO_UkeNo;
                        busAllocationDataUpdateAll.HAISHA_UnkRen = dataTempList.First().HAISHA_UnkRen;
                    }
                }
                if (busAllDataNewGridListTemp.Count > 0 && countUkeno == 1)
                {
                    busAllocationDataEditSimultaneously.DataSourceItem = busAllocationDataUpdateAll;
                    busAllocationDataEditSimultaneously.DataUpdateList = busAllDataNewGridListTemp;
                    var client = await Http.GetHttpClient();
                    var content = Http.getStringContentFromObject(busAllocationDataEditSimultaneously);
                    var url = $"{baseUrl}/api/BusAllocation/updateListHaiSha/";
                    HttpResponseMessage response = await client.PutAsync(url, content);
                    if (response.IsSuccessStatusCode)
                    {
                        string newUkeNo = await response.Content.ReadAsStringAsync();
                        BusBookingDataService.UpdateUnkobi(busAllDataNewGridListTemp.First().YYKSHO_UkeNo, busAllocationDataUpdateAll.HAISHA_UnkRen, FormName);
                        BusBookingDataService.UpdateYyksho(busAllDataNewGridListTemp.First().YYKSHO_UkeNo, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID, FormName);
                        await Task.Run(() =>
                        {
                            GetBusAllocationDataGrid().Wait();
                        });
                        ResetValueFormHaiShaAll();
                        selectedKeyscheck.Clear();
                        popupEditAll = false;
                        FormCustomError = true;
                    }
                    else
                    {
                        Popupwhenclick = false;
                    }
                }
                else
                {
                    popupEditAll = false;
                    FormCustomError = true;
                }
            }
            catch (Exception ex)
            {
                ErrorHandlerService.HandleError(ex);
            }
        }
        StateHasChanged();
    }

    private void ResetValueFormHaiShaAll()
    {
        departure_date_time_checked = true;
        delivery_time_checked = true;
        departure_time_checked = true;
        return_time_checked = true;
        arrival_date_checked = true;
        depot_connection_checked = true;
        arrival_connection_checked = true;
    }

    #endregion

    #region Value change

    private void OnAssigedDriverChanged(TPM_SyokumData e, int index)
    {
        OnChangeValueInitState();

        if (e is null)
        {
            if (BusAllocationDataUpdate.DriverAssigneds.Count <= index)
                return;

            var oldSyanId = BusAllocationDataUpdate.DriverAssigneds.ElementAt(index).SyainCdSeq;

            BusAllocationDataUpdate.DriverAssigneds.RemoveAt(index);

            DriverCharts.Skip(1).FirstOrDefault(t => t.KyoSHe_SyainCdSeq == oldSyanId).isView = true;

            if (BusAllocationDataUpdate.DriverAssigneds.Count == 0) isNotChanged = true;
        }
        else
        {
            Driverlst driver = new Driverlst();
            driver.SyainCdSeq = e.KyoSHe_SyainCdSeq;
            driver.DriverName = e.Syain_SyainNm;
            driver.StartTime = BusAllocationDataUpdate.SyuKoTime;
            driver.EndTime = BusAllocationDataUpdate.KikTime;
            driver.Syokum_SyokumuCdSeq = e.Syokum_SyokumuCdSeq;
            driver.SyokumuKbn = e.SyokumuKbn;

            if (BusAllocationDataUpdate.DriverAssigneds.Count <= index)
                BusAllocationDataUpdate.DriverAssigneds.Add(driver);
            else
            {
                var oldSyanId = BusAllocationDataUpdate.DriverAssigneds.ElementAt(index).SyainCdSeq;
                BusAllocationDataUpdate.DriverAssigneds[index] = driver;
                DriverCharts.Skip(1).FirstOrDefault(t => t.KyoSHe_SyainCdSeq == oldSyanId).isView = true;
            }

            DriverCharts.Skip(1).FirstOrDefault(t => t.KyoSHe_SyainCdSeq == e.KyoSHe_SyainCdSeq).isView = false;

            isNotChanged = false;
        }
        isAutoAdd = false;

        checkDeleteDriver = true;
        formContextItemHaiSha.Validate();
        StateHasChanged();
    }

    private void OnHaishaAll_DanTaNm2Changed(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.DanTaNm2 = newValue;
        formContextAllHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaishaAll_IkNmChanged(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.IkNm = newValue;
        formContextAllHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaishaAll_codeKbDataKenCDChanged(TPM_CodeKbDataKenCD data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            busAllocationDataUpdateAll.TPM_CodeKbDataKenCD = data;
            if (data.BasyoBasyoMapCdSeq == 0)
            {
                busAllocationDataUpdateAll.IkNm = "";
            }
            else
            {
                busAllocationDataUpdateAll.IkNm = data.BasyoBasyoNm;
            }
        }
        formContextAllHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaishaAll_branchchartlstbycurrentcpnChanged(BranchChartData data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            busAllocationDataUpdateAll.BranchChartData = data;
        }
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_branchchartlstbycurrentcpntouChanged(BranchChartData data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            busAllocationDataUpdateAll.BranchChartDataKik = data;
        }
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_SyuKoYmdChanged(DateTime newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.SyuKoYmd = newValue;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_SyuKoTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        SyuKoTime = BusScheduleHelper.ConvertTime(timeValue);
        busAllocationDataUpdateAll.SyuKoTime = SyuKoTime.ToString("hhmm");
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_HaiSYmdChanged(DateTime newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.HaiSYmd = newValue;
        TPM_CodeKbDataDepotStartList = TPM_CodeKbDataDepotStartList.Where(x =>
        String.Compare(x.BINSiyoStaYmd, newValue.ToString("yyyyMMdd")) <= 0 && String.Compare(x.BINSiyoEndYmd, newValue.ToString("yyyyMMdd")) >= 0).ToList();
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_HaiSTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        HaiSTime = BusScheduleHelper.ConvertTime(timeValue);
        busAllocationDataUpdateAll.HaiSTime = HaiSTime.ToString("hhmm");
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_SyuPaTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        SyuPaTime = BusScheduleHelper.ConvertTime(timeValue);
        busAllocationDataUpdateAll.SyuPaTime = SyuPaTime.ToString("hhmm");
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_TouYmdChanged(DateTime newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.TouYmd = newValue;
        TPM_CodeKbDataDepotEndList = TPM_CodeKbDataDepotEndList.Where(x =>
        String.Compare(x.BINSiyoStaYmd, newValue.ToString("yyyyMMdd")) <= 0 && String.Compare(x.BINSiyoEndYmd, newValue.ToString("yyyyMMdd")) >= 0).ToList();
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_TouChTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        TouChTime = BusScheduleHelper.ConvertTime(timeValue);
        busAllocationDataUpdateAll.TouChTime = TouChTime.ToString("hhmm");
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_KikYmdChanged(DateTime newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.KikYmd = newValue;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_KikTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        KikTime = BusScheduleHelper.ConvertTime(timeValue);
        busAllocationDataUpdateAll.KikTime = KikTime.ToString("hhmm");
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_depotNameChanged(TPM_CodeKbDataBunruiCD data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            busAllocationDataUpdateAll.TPM_CodeKbDataBunruiCDStart = data;
            if (data.HaiChiHaiSCdSeq == 0)
            {
                busAllocationDataUpdateAll.HaiSNm = "";
                busAllocationDataUpdateAll.HaiSJyus1 = "";
                busAllocationDataUpdateAll.HaiSJyus2 = "";
                busAllocationDataUpdateAll.HaiSKigou = "";
            }
            else
            {
                busAllocationDataUpdateAll.HaiSNm = data.HaiChiHaiSNm;
                busAllocationDataUpdateAll.HaiSJyus1 = data.HaiChiJyus1;
                busAllocationDataUpdateAll.HaiSJyus2 = data.HaiChiJyus2;
                busAllocationDataUpdateAll.HaiSKigou = data.HaiChiHaiSKigou;
            }
        }
        formContextAllHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaishaAll_HaiSNmChanged(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.HaiSNm = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_HaiSJyus1Changed(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.HaiSJyus1 = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_HaiSJyus2Changed(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.HaiSJyus2 = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_HaiSKigouChanged(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.HaiSKigou = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_depottouNameChanged(TPM_CodeKbDataBunruiCD data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            busAllocationDataUpdateAll.TPM_CodeKbDataBunruiCDEnd = data;
            if (data.HaiChiHaiSCdSeq == 0)
            {
                busAllocationDataUpdateAll.TouNm = "";
                busAllocationDataUpdateAll.TouJyusyo1 = "";
                busAllocationDataUpdateAll.TouJyusyo2 = "";
                busAllocationDataUpdateAll.TouKigou = "";
            }
            else
            {
                busAllocationDataUpdateAll.TouNm = data.HaiChiHaiSNm;
                busAllocationDataUpdateAll.TouJyusyo1 = data.HaiChiJyus1;
                busAllocationDataUpdateAll.TouJyusyo2 = data.HaiChiJyus2;
                busAllocationDataUpdateAll.TouKigou = data.HaiChiHaiSKigou;
            }
        }
        formContextAllHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaishaAll_TouNmChanged(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.TouNm = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_TouJyusyo1Changed(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.TouJyusyo1 = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_TouJyusyo2Changed(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.TouJyusyo2 = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_TouKigouChanged(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.TouKigou = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_CodeKbDataDepotChanged(TPM_CodeKbDataDepot data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            busAllocationDataUpdateAll.TPM_CodeKbDataDepotStart = data;
            if (data.BinBinCdSeq == 0)
            {
                busAllocationDataUpdateAll.HaisBinNm = "";
                busAllocationDataUpdateAll.HaiSSetTime = "";
                HaiSSetTime = ParseStringToTimeSpan("0000");
            }
            else
            {
                busAllocationDataUpdateAll.HaisBinNm = data.BinBinNm ?? "";
                busAllocationDataUpdateAll.HaiSSetTime = data.BINTouChTime;
                HaiSSetTime = ParseStringToTimeSpan(data.BINTouChTime);
            }
        }
        formContextAllHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaishaAll_HaisBinNmChanged(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.HaisBinNm = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_HaiSSetTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        HaiSSetTime = BusScheduleHelper.ConvertTime(timeValue);
        busAllocationDataUpdateAll.HaiSSetTime = HaiSSetTime.ToString("hhmm");
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_CodeKbDataDepottouChanged(TPM_CodeKbDataDepot data)
    {
        if (data != null)
        {
            OnChangeValueInitState();
            busAllocationDataUpdateAll.TPM_CodeKbDataDepotEnd = data;
            if (data.BinBinCdSeq == 0)
            {
                busAllocationDataUpdateAll.TouBinNm = "";
                busAllocationDataUpdateAll.TouSetTime = "";
                TouSetTime = ParseStringToTimeSpan("0000");
            }
            else
            {
                busAllocationDataUpdateAll.TouBinNm = data.BinBinNm ?? "";
                busAllocationDataUpdateAll.TouSetTime = data.BINSyuPaTime;
                TouSetTime = ParseStringToTimeSpan(data.BINSyuPaTime);
            }
        }
        formContextAllHaiSha.Validate();
        InvokeAsync(StateHasChanged);
    }
    private void OnHaishaAll_TouSBinNmChanged(string newValue)
    {
        OnChangeValueInitState();
        busAllocationDataUpdateAll.TouBinNm = newValue;
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void OnHaishaAll_TouSetTimeChanged(BookingInputHelper.MyTime newTime)
    {
        OnChangeValueInitState();
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        TouSetTime = BusScheduleHelper.ConvertTime(timeValue);
        busAllocationDataUpdateAll.TouSetTime = TouSetTime.ToString("hhmm");
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void CheckedSyukoTimeChanged(bool value)
    {
        OnChangeValueInitState();
        departure_date_time_checked = value;
        busAllocationDataUpdateAll.DisableSyukoDateTime = value;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void CheckedHaiSTimeChanged(bool value)
    {
        OnChangeValueInitState();
        delivery_time_checked = value;
        busAllocationDataUpdateAll.DisableHaiSDateTime = value;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void CheckedSyaPaTimeChanged(bool value)
    {
        OnChangeValueInitState();
        departure_time_checked = value;
        busAllocationDataUpdateAll.DisableSyaPaTime = value;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void CheckedKikDateTimeChanged(bool value)
    {
        OnChangeValueInitState();
        return_time_checked = value;
        busAllocationDataUpdateAll.DisableKikDateTime = value;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void CheckedTouDateTimeChanged(bool value)
    {
        OnChangeValueInitState();
        arrival_date_checked = value;
        busAllocationDataUpdateAll.DisableTouDateTime = value;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void CheckedHaiSSetTimeChanged(bool value)
    {
        OnChangeValueInitState();
        depot_connection_checked = value;
        busAllocationDataUpdateAll.DisableHaiSSetTime = value;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }
    private void CheckedTouSetTimeChanged(bool value)
    {
        OnChangeValueInitState();
        arrival_connection_checked = value;
        busAllocationDataUpdateAll.DisableTouSetTime = value;
        CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
        formContextAllHaiSha.Validate();
        StateHasChanged();
    }

    #endregion

    #endregion


    #region ButtonAc filter Form

    private async void OnResetBusAllocationFormClicked()
    {

        pickupDate = DateTime.Today;
        Param.DateType = (int)DateType.Dispatch;
        busAllocationSearchItem.pickupDate = pickupDate;
        busAllocationSearchItem.bookingParam = "";
        Param.ReservationType = 0;
        Param.SortOrder = (int)BusAllocationSortOrder.DeliveryVehicle;
        busAllocationSearchItem.outputSortOrder = Param.SortOrder;
        Param.Size = (int)ViewMode.Large;
        busAllocationSearchItem.size = Param.Size.ToString();
        EnableBtnSearch = true;
        busAllocationSearchItem.CompanyChart = companychartlst.First();
        busAllocationSearchItem.BranchChart = branchchartlst.First();
        busAllocationSearchItem.ReservationClassification.YoyaKbnSeq = Param.ReservationType;
        busAllocationSearchItem.UnprovisionedVehicle1 = "有";
        busAllocationSearchItem.BookingFrom = null;
        busAllocationSearchItem.BookingTo = null;
        SetupReservationListByFromTo();

        formContext = new EditContext(busAllocationSearchItem);
        await FilterCondition.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, FormName);
        await Task.Run(() =>
        {
            GetBusAllocationDataGrid().Wait();
        });
        StateHasChanged();
    }

    private async Task OnBtnCopyClicked(MouseEventArgs e)
    {
        /* if (selectedKeyCopyItem > 0 && !String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo))
         {
             selectedKeyCopyItem = SelectedKeyTempList.Count > 0 ? SelectedKeyTempList.First() : 0;
         }*/
        if (CheckedItems.Count == 1)
        {
            var dataCopy = busAllocationDataGrid.Where(x => x.RowID == CheckedItems[0].RowID).FirstOrDefault();
            if (dataCopy != null)
            {
                busAllocationDataGridItemCopy = dataCopy;
                CheckedItems.Clear();
            }
            CheckEnableBtnPaste();
            // await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }

    }

    private async Task OnBtnTempClicked(MouseEventArgs e)
    {
        if (!String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo) && IsEnableBtnTemp())
        {
            var dataTempList = busAllocationDataGrid.Where(x => CheckedItems.Select(x => x.RowID).ToArray().Contains(x.RowID)).ToList();
            if (dataTempList != null)
            {
                busAllocationDataGridListTemp = dataTempList;
            }
            CheckEnableBtnPaste();
            CheckedItems.Clear();
            //await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }

    }

    private async Task OnBtnPasteClicked(MouseEventArgs e)
    {
        if (!String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo) && (busAllocationDataGridListTemp != null || busAllocationDataGridListTemp.Count > 0))
        {
            popupConfirmPaste = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnBtnEditAllClicked(MouseEventArgs e)
    {
        isEdit = CheckEnableBtnEditAllClick(selectedKeyscheck);
        if (isEdit)
        {
            await GetAllDataComboboxUpdateHaiShaAll();
            GetDataPopupEditAll();
            var dataTempList = busAllocationDataGrid.Where(x => selectedKeyscheck.Select(x => x.RowID).ToArray().Contains(x.RowID)).ToList();
            //get data for haita check
            haitaCheckAll = true;
            busAllocationHaitaCheckAll = await BusAllocationService.GetBusAllocationHaitaCheck(selectedKeyscheck.FirstOrDefault()?.YYKSHO_UkeNo);

            await Task.Run(() =>
            {
                FilterDataUpdateAll(dataTempList).Wait();
            });
            CheckDateTimeHaishaEditAllInValid(busAllocationDataUpdateAll, busAllDataNewGridListTemp);
            formContextAllHaiSha = new EditContext(busAllocationDataUpdateAll);
            IsDefaultState = true;
            popupConfirmEditAll = true;
            FormCustomError = false;
            StateHasChanged();
        }
    }

    private void CancelPasteData(MouseEventArgs e)
    {
        popupConfirmPaste = false;
        isUpdateCopyPaste = false;

        StateHasChanged();
    }

    private async void AccessPasteData(MouseEventArgs e)
    {
        popupConfirmPaste = false;
        busAllDataNewGridListTemp.Clear();
        int countDistinctUkeno = 0;
        foreach (var item in busAllocationDataGridListTemp)
        {
            var checkLockRow = await BusLineCssColorServices.GetCssColor(item.YYKSHO_UkeNo, item.HAISHA_UnkRen, item.HAISHA_TeiDanNo, item.HAISHA_BunkRen);
            if (!checkLockRow.isLock && item.HAISHA_YouTblSeq == 0)
            {
                busAllDataNewGridListTemp.Add(item);
            }
        }
        if (busAllDataNewGridListTemp.Count > 0)
        {
            countDistinctUkeno = busAllDataNewGridListTemp.GroupBy(x => new { x.YYKSHO_UkeNo, x.HAISHA_UnkRen }).Select(x => x.First()).ToList().Count();
        }
        if (!String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo) && busAllDataNewGridListTemp.Count > 0 && countDistinctUkeno == 1)
        {
            busAllocationDataCopyPaste.DataSourceItem = busAllocationDataGridItemCopy;
            busAllocationDataCopyPaste.DataUpdateList = busAllDataNewGridListTemp;
            try
            {
                var client = await Http.GetHttpClient();
                var content = Http.getStringContentFromObject(busAllocationDataCopyPaste);
                var url = $"{baseUrl}/api/BusAllocation/updateListHaiShaCopyPaste/{busAllocationDataGridItemCopy.YYKSHO_UkeNo}";
                HttpResponseMessage response = await client.PutAsync(url, content);
                if (response.IsSuccessStatusCode)
                {
                    string newUkeNo = await response.Content.ReadAsStringAsync();
                    await Task.Run(() =>
                    {
                        GetBusAllocationDataGrid().Wait();
                    });
                }
            }
            catch (Exception ex)
            {
                ErrorHandlerService.HandleError(ex);
            }
        }
        StateHasChanged();
    }

    private void CancelEditAllData(MouseEventArgs e)
    {
        popupConfirmEditAll = false;
        popupEditAll = true;
        StateHasChanged();
    }

    private void AccessEditAllData(MouseEventArgs e)
    {
        popupConfirmEditAll = false;
        popupEditAll = true;
        InitBtnDiableState = true;
        StateHasChanged();
    }

    private async Task FilterDataUpdateAll(List<BusAllocationDataGrid> dataTempList)
    {
        if (dataTempList != null && dataTempList.Count > 0)
        {
            busAllDataNewGridListTemp.Clear();
            busAllocationDataGridEditAllListTemp = dataTempList;
            foreach (var item in busAllocationDataGridEditAllListTemp)
            {
                var checkLockRow = await BusLineCssColorServices.GetCssColor(item.YYKSHO_UkeNo, item.HAISHA_UnkRen, item.HAISHA_TeiDanNo, item.HAISHA_BunkRen);
                if (!checkLockRow.isLock && item.HAISHA_YouTblSeq == 0)
                {
                    busAllDataNewGridListTemp.Add(item);
                }
            }
        }
    }

    private void CheckEnableBtnPaste()
    {
        var checkDistinctUkeno = busAllocationDataGridListTemp.GroupBy(x => new { x.YYKSHO_UkeNo, x.HAISHA_UnkRen }).Select(x => x.First()).ToList();
        int countUkeno = busAllocationDataGridListTemp.Where(x => x.YYKSHO_UkeNo == busAllocationDataGridItemCopy.YYKSHO_UkeNo).Count();
        if (!String.IsNullOrEmpty(busAllocationDataGridItemCopy.YYKSHO_UkeNo) && busAllocationDataGridListTemp.Count > 0 && checkDistinctUkeno.Count() == 1
            && countUkeno == busAllocationDataGridListTemp.Count && busAllocationDataGridItemCopy.YYKSHO_UkeNo == busAllocationDataGridListTemp.FirstOrDefault().YYKSHO_UkeNo)
        {
            enablePaste = true;
        }
        else
        {
            enablePaste = false;
        }
    }

    private bool IsEnableBtnTemp()
    {
        bool isAnyHaiSKbnInvalid = false;
        bool isDistinctUkeno = true;
        var dataTempList = busAllocationDataGrid.Where(x => CheckedItems.Select(x => x.RowID).ToArray().Contains(x.RowID)).ToList();
        var checkDistinctUkeno = dataTempList.GroupBy(x => new { x.YYKSHO_UkeNo, x.HAISHA_UnkRen }).Select(x => x.First()).ToList();
        foreach (var item in dataTempList)
        {
            if (item.YYKSHO_UkeNo != busAllocationDataGridItemCopy.YYKSHO_UkeNo)
            {
                isDistinctUkeno = false;
            }
            if (item.HAISHA_HaiSKbn == 2)
            {
                isAnyHaiSKbnInvalid = true;
            }
        }
        // !isAnyHaiSKbnInvalid && HaiSKbn == 1 => 選択区分 = 1(仮車入力)　かつ　配車済のデータ（HaiSKbn = 2)を選択する場合、無効とする。
        if (checkDistinctUkeno.Count == 1 && isDistinctUkeno && !isAnyHaiSKbnInvalid && HaiSKbn != "1")
        {
            return true;
        }
        return false;
    }

    private void GetDataPopupEditAll()
    {
        //branchchartlst.Insert(0, new BranchChartData());
        TPM_CodeKbDataKenCDList.Insert(0, new TPM_CodeKbDataKenCD { BasyoBasyoMapCdSeq = 0 });
        TPM_CodeKbDataBunruiCDList.Insert(0, new TPM_CodeKbDataBunruiCD { HaiChiHaiSCdSeq = 0 });
        TPM_CodeKbDataDepotStartList.Insert(0, new TPM_CodeKbDataDepot { KoutuKoukCdSeq = 0 });
        TPM_CodeKbDataDepotEndList.Insert(0, new TPM_CodeKbDataDepot { KoutuKoukCdSeq = 0 });
        busAllocationDataUpdateAll.DanTaNm2 = defaultStr;
        busAllocationDataUpdateAll.TPM_CodeKbDataKenCD = TPM_CodeKbDataKenCDList.FirstOrDefault();
        busAllocationDataUpdateAll.IkNm = defaultStr;
        busAllocationDataUpdateAll.BranchChartData = branchchartlst.FirstOrDefault();
        busAllocationDataUpdateAll.BranchChartDataKik = branchchartlst.FirstOrDefault();
        busAllocationDataUpdateAll.SyuKoYmd = defaultDate;
        SyuKoTime = ParseStringToTimeSpan(defaultDate.ToString("HHmm"));
        busAllocationDataUpdateAll.SyuKoTime = defaultDate.ToString("HHmm");
        busAllocationDataUpdateAll.HaiSYmd = defaultDate;
        HaiSTime = ParseStringToTimeSpan(defaultDate.ToString("HHmm"));
        busAllocationDataUpdateAll.HaiSTime = defaultDate.ToString("HHmm");
        busAllocationDataUpdateAll.SyuPaTime = defaultDate.ToString("HHmm");
        SyuPaTime = ParseStringToTimeSpan(defaultDate.ToString("HHmm"));
        busAllocationDataUpdateAll.TouYmd = defaultDate;
        TouChTime = ParseStringToTimeSpan(defaultDate.ToString("HHmm"));
        busAllocationDataUpdateAll.TouChTime = defaultDate.ToString("HHmm");
        busAllocationDataUpdateAll.KikYmd = defaultDate;
        KikTime = ParseStringToTimeSpan(defaultDate.ToString("HHmm"));
        busAllocationDataUpdateAll.KikTime = defaultDate.ToString("HHmm");
        busAllocationDataUpdateAll.TPM_CodeKbDataBunruiCDStart = TPM_CodeKbDataBunruiCDList.FirstOrDefault();
        busAllocationDataUpdateAll.HaiSNm = defaultStr;
        busAllocationDataUpdateAll.HaiSJyus1 = defaultStr;
        busAllocationDataUpdateAll.HaiSJyus2 = defaultStr;
        busAllocationDataUpdateAll.HaiSKigou = defaultStr;
        busAllocationDataUpdateAll.TPM_CodeKbDataBunruiCDEnd = TPM_CodeKbDataBunruiCDList.FirstOrDefault();
        busAllocationDataUpdateAll.TouNm = defaultStr;
        busAllocationDataUpdateAll.TouJyusyo1 = defaultStr;
        busAllocationDataUpdateAll.TouJyusyo2 = defaultStr;
        busAllocationDataUpdateAll.TouKigou = defaultStr;
        busAllocationDataUpdateAll.TPM_CodeKbDataDepotStart = TPM_CodeKbDataDepotStartList.FirstOrDefault();
        busAllocationDataUpdateAll.HaisBinNm = defaultStr;
        HaiSSetTime = ParseStringToTimeSpan("0000");
        busAllocationDataUpdateAll.HaiSSetTime = defaultDate.ToString("HHmm");
        busAllocationDataUpdateAll.TPM_CodeKbDataDepotEnd = TPM_CodeKbDataDepotEndList.FirstOrDefault();
        busAllocationDataUpdateAll.TouBinNm = defaultStr;
        TouSetTime = ParseStringToTimeSpan("0000");
        busAllocationDataUpdateAll.TouSetTime = defaultDate.ToString("HHmm");
        busAllocationDataUpdateAll.CustomData = new Dictionary<string, string>();
        var dataTempList = busAllocationDataGrid.Where(x => selectedKeyscheck.Select(x => x.RowID).ToArray().Contains(x.RowID)).ToList();
        /*CUSTOM ITEM*/
        if (CustomFieldList == null)
        {
            CustomFieldList = new List<CustomFieldConfigs>();
        }
        foreach (var field in CustomFieldList)
        {
            CustomFieldValidation = ValidationHelper.ValidationCustomItem(field, "", false);
            if (!InitFormCustomError)
            {
                if (CustomFieldValidation.IsError)
                {
                    InitFormCustomError = true;
                }
            }
        }
        if (dataTempList != null && dataTempList.Count > 0)
        {
            SetValueCheckValidDateHaiShaAll(dataTempList.First(), busAllocationDataUpdateAll);
        }
    }
    #endregion

    #region Filter condition
    private async Task LoadCustomFilter()
    {
        if (ItemList.Count > 0)
        {
            tkdInpConList = await FilterCondition.GetFilterCondition(FormName, ItemList.First(f => f.FilterId == 1).FilterId, SyainCdSeq);
            foreach (var item in tkdInpConList)
            {
                switch (item.ItemNm)
                {
                    case nameof(busAllocationSearchItem.DateSpecified):
                        busAllocationSearchItem.DateSpecified = item.JoInput;
                        if (item.JoInput == "配車日")
                        {
                            Param.DateType = 0;
                        }
                        else
                        {
                            Param.DateType = 1;
                        }
                        break;
                    case nameof(busAllocationSearchItem.pickupDate):
                        busAllocationSearchItem.pickupDate = ParseStringToDate(item.JoInput);
                        pickupDate = ParseStringToDate(item.JoInput);
                        break;
                    case nameof(busAllocationSearchItem.BranchChart):
                        busAllocationSearchItem.BranchChart = branchchartlst.Where(x => x.EigyoCdSeq == ParseStringToInt(item.JoInput)).FirstOrDefault();
                        break;
                    case nameof(busAllocationSearchItem.bookingParam):
                        busAllocationSearchItem.bookingParam = item.JoInput;
                        break;
                    case nameof(busAllocationSearchItem.ReservationClassification):
                        busAllocationSearchItem.ReservationClassification = reservationlst.Where(x => x.YoyaKbnSeq == ParseStringToInt(item.JoInput)).FirstOrDefault();
                        if (busAllocationSearchItem.ReservationClassification == null)
                        {
                            busAllocationSearchItem.ReservationClassification = new ReservationData { YoyaKbnSeq = 0 };
                        }
                        Param.ReservationType = ParseStringToInt(item.JoInput);
                        break;
                    case nameof(busAllocationSearchItem.size):
                        Param.Size = ParseStringToInt(item.JoInput);
                        break;
                    case nameof(busAllocationSearchItem.CompanyChart):
                        busAllocationSearchItem.CompanyChart = companychartlst.Where(x => x.CompanyCdSeq == ParseStringToInt(item.JoInput)).FirstOrDefault();
                        break;
                    case nameof(busAllocationSearchItem.BookingFrom):
                        busAllocationSearchItem.BookingFrom = ReservationComponent.ListReservationClass.FirstOrDefault(_ => _.YoyaKbnSeq == (string.IsNullOrEmpty(item.JoInput) ? 0 : byte.Parse(item.JoInput)));
                        break;
                    case nameof(busAllocationSearchItem.BookingTo):
                        busAllocationSearchItem.BookingTo = ReservationComponent.ListReservationClass.FirstOrDefault(_ => _.YoyaKbnSeq == (string.IsNullOrEmpty(item.JoInput) ? 0 : byte.Parse(item.JoInput)));
                        break;
                    case nameof(busAllocationSearchItem.UnprovisionedVehicle1):
                        busAllocationSearchItem.UnprovisionedVehicle1 = item.JoInput;
                        break;
                    case nameof(busAllocationSearchItem.outputSortOrder):
                        busAllocationSearchItem.outputSortOrder = ParseStringToInt(item.JoInput);
                        Param.SortOrder = ParseStringToInt(item.JoInput);
                        break;
                }
            }
            SetupReservationListByFromTo();
        }
    }

    private async Task CreateFilterItem()
    {
        var isCreateSuccess = await FilterCondition.SaveCustomFiler(SyainCdSeq, maxFilterId + 1, FormName, FilterName);
        if (isCreateSuccess)
        {
            var dic = await BusAllocationService.Generate(busAllocationSearchItem);
            var success = await FilterCondition.SaveFilterCondtion(dic, FormName, maxFilterId + 1, SyainCdSeq);
        }
        //  await LoadCustomFilter();
    }

    private async Task UpdateFilterItem()
    {
        var dic = await BusAllocationService.Generate(busAllocationSearchItem);
        var success = await FilterCondition.SaveFilterCondtion(dic, FormName, maxFilterId, SyainCdSeq);
    }

    private Dictionary<string, string> SetValueFilterTable(List<KeyValueFilter> keyValueFormList)
    {
        Dictionary<string, string> result = new Dictionary<string, string>();
        foreach (var item in keyValueFormList)
        {
            result.Add(item.Key, item.Value);
        }
        return result;
    }
    #endregion

    #region Helper

    private int ParseStringToInt(string strValue)
    {
        int result = 0;
        bool checkParse = int.TryParse(strValue, out result);
        return result;
    }

    private DateTime ParseStringToDate(string strValue)
    {
        DateTime result;
        DateTime.TryParseExact(strValue, "yyyyMMdd", new CultureInfo("ja-JP"), DateTimeStyles.None, out result);
        return result;
    }

    private DateTime ParseStringToDateTime(string strValueDate, string strValueTime)
    {
        DateTime result;
        DateTime.TryParseExact(strValueDate + strValueTime, "yyyyMMddHHmm", new CultureInfo("ja-JP"), DateTimeStyles.None, out result);
        return result;
    }

    private TimeSpan ParseStringToTimeSpan(string strValue)
    {
        TimeSpan result = new TimeSpan(0, 0, 0);
        if (!String.IsNullOrEmpty(strValue) && !String.IsNullOrWhiteSpace(strValue))
        {
            string timeValue = CommonUtil.MyTimeFormat(strValue, Formats.HHmm);
            result = BusScheduleHelper.ConvertTime(timeValue);
        }
        return result;
    }

    private void SetupReservationListByFromTo()
    {
        ReservationClassComponentData bookingfrom = new ReservationClassComponentData();
        if (busAllocationSearchItem.BookingFrom != null)
        {
            bookingfrom = busAllocationSearchItem.BookingFrom;
        }
        else
        {
            bookingfrom = ReservationComponent.ListReservationClass.FirstOrDefault();
        }

        ReservationClassComponentData bookingto = new ReservationClassComponentData();
        if (busAllocationSearchItem.BookingTo != null)
        {
            bookingto = busAllocationSearchItem.BookingTo;
        }
        else
        {
            bookingto = ReservationComponent.ListReservationClass.LastOrDefault();
        }

        if(bookingfrom != null && bookingto == null)
            busAllocationSearchItem.BookingTypes = ReservationComponent.ListReservationClass.Where(_ => _.YoyaKbn >= bookingfrom.YoyaKbn).ToList();
        else if(bookingto != null && bookingfrom == null)
            busAllocationSearchItem.BookingTypes = ReservationComponent.ListReservationClass.Where(_ => _.YoyaKbn <= bookingto.YoyaKbn).ToList();
        else if(bookingfrom != null && bookingto != null)
            busAllocationSearchItem.BookingTypes = ReservationComponent.ListReservationClass.Where(_ => _.YoyaKbn >= bookingfrom.YoyaKbn && _.YoyaKbn <= bookingto.YoyaKbn).ToList();
    }

    private void ResetValueFormSearch()
    {
        enableCopy = false;
        enablePaste = false;
        enableTemp = false;
        isEdit = false;
        busAllocationDataGridEditAllListTemp.Clear();
        busAllocationDataGridListTemp.Clear();
        busAllocationDataGridItemCopy = new BusAllocationDataGrid();
    }

    private bool CheckEnableBtnEditAllClick(List<BusAllocationDataGrid> selectedKeys)
    {
        var checkDistinctUkeno = selectedKeys.GroupBy(x => new { x.YYKSHO_UkeNo, x.HAISHA_UnkRen }).Select(x => x.First()).ToList();
        if ((HaiSKbn != "1" || !checkDistinctUkeno.Any(e => e.HAISHA_HaiSKbn != 2)) && checkDistinctUkeno.Count() == 1 && selectedKeys.Count > 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void CheckDateTimeHaishaEditAllInValid(BusAllocationDataUpdateAll updateItem, List<BusAllocationDataGrid> busAllocationDataGridList)
    {
        if (updateItem != null && busAllocationDataGridList.Count > 0)
        {
            updateItem.DateTimeHaiShaList.Clear();
            foreach (var item in busAllocationDataGridList)
            {
                var newItem = new DateTimeHaiShaItem();
                newItem.CheckSyukoHaiSha = item.CheckSyuKoHaiSha;
                newItem.CheckHaiSHaiSha = item.CheckHaiSHaiSha;
                newItem.CheckTouHaiSha = item.CheckTouHaiSha;
                newItem.CheckKikHaiSha = item.CheckKikHaiSha;
                newItem.CheckHaiSHaiShaForm = updateItem.CheckHaiSHaiSha;
                newItem.CheckSyukoHaiShaForm = updateItem.CheckSyuKoHaiSha;
                newItem.CheckTouHaiShaForm = updateItem.CheckTouHaiSha;
                newItem.CheckKikHaiShaForm = updateItem.CheckKikHaiSha;
                newItem.DisableSyukoDateTime = updateItem.DisableSyukoDateTime;
                newItem.DisableHaiSDateTime = updateItem.DisableHaiSDateTime;
                newItem.DisableTouDateTime = updateItem.DisableTouDateTime;
                newItem.DisableKikDateTime = updateItem.DisableKikDateTime;
                updateItem.DateTimeHaiShaList.Add(newItem);
            }
        }
    }

    private void SetValueCheckValidDateHaiShaAll(BusAllocationDataGrid dataUpdate, BusAllocationDataUpdateAll itemUpdate)
    {
        itemUpdate.CheckHaiSUnkobi = ParseStringToDateTime(dataUpdate.UNKOBI_HaiSYmd, dataUpdate.UNKOBI_HaiSTime);
        itemUpdate.CheckSyuKoUnkobi = ParseStringToDateTime(dataUpdate.UNKOBI_SyukoYmd, dataUpdate.UNKOBI_SyuKoTime);
        itemUpdate.CheckTouUnkobi = ParseStringToDateTime(dataUpdate.UNKOBI_TouYmd, dataUpdate.UNKOBI_TouChTime);
        itemUpdate.CheckKikUnkobi = ParseStringToDateTime(dataUpdate.UNKOBI_KikYmd, dataUpdate.UNKOBI_KikTime);
    }

    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService ErrorHandlerService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IGridLayoutService GridLayoutService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoadingService _loadingService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFilterCondition FilterCondition { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomNavigation NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusLineCssColorServices BusLineCssColorServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusAllocationService BusAllocationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper BusScheduleHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_SyokumDataListService TPM_SyokumDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CodeKbListService TPM_CodeKbnService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusDataListService BusDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomItemService CustomItemService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_HaishaDataListService TKD_HaishaDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusBookingDataListService BusBookingDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BusAllocation> Lang { get; set; }
    }
}
#pragma warning restore 1591
