#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\Tehai.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d52eb5616c0369bf8b2bee350bb44bde98ec5ba3"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\Pages\Components\Tehai.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
    public partial class Tehai : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 201 "E:\Project\HassyaAllrightCloud\Pages\Components\Tehai.razor"
       
    [Parameter] public string UkeNo { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    protected bool IsDisableEdit { get; set; }
    protected List<BookingArrangementData> ArrangementDataList { get; set; }
    protected List<BookingArrangementData> ArrangementDataListNotDeleted { get => ArrangementDataList.Where(_ => _.EditState != FormEditState.Deleted).ToList(); }
    protected List<ArrangementCar> CarArrangementList { get; set; }
    protected List<ArrangementType> ArrangementTypeList { get; set; }
    protected List<ArrangementCode> ArrangementCodeList { get; set; }
    protected List<ArrangementPlaceType> ArrangementPlaceTypeList { get; set; }
    protected List<ArrangementLocation> ArrangementLocationList { get; set; }
    protected List<ScheduleSelectorModel> ScheduleList { get; set; }
    protected ArrangementCar SelectedCar { get; set; }
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    protected Action OnClosePopup { get; set; }
    protected CultureInfo CurrentCulture { get; set; }
    protected EditContext FormContext { get; set; }
    protected BookingArrangementData SelectedArrangementItem { get; set; }

    protected bool IsLoading { get; set; } = true;
    protected bool ShowFormCreateArrangement { get; set; }
    protected bool ShowPopupConfirmDelete { get; set; }
    protected bool IsShowPopupInfo { get; set; }
    protected bool IsShowPopupError { get; set; }

    protected string PopupTitle { get; set; }
    protected string PopupInfoContent { get; set; }
    protected string PopupConfirmDeleteTitle { get; set; }
    protected string PopupConfirmDeleteContent { get; set; }
    protected string TempStr { get; set; }

    [Inject] protected ITehaiService service { get; set; }
    protected string ErrorMessage { get; set; }

    protected bool IsEmptyCarArrangementList
    {
        get
        {
            return CarArrangementList is null || CarArrangementList.Count == 0;
        }
    }

    private int indexToDelete;
    private string baseUrl;
    Dictionary<string, string> emptyItemMessage = new Dictionary<string, string>();
    #region Localization string
    string EmptyCarArrangementList = "";
    string Ok;
    string Yes;
    string No;
    string PopupTitleInfo;
    string PopupTitleError;
    string UpdateSucces;
    string UpdateFail;

    private void LocalizationInit()
    {
        Ok = Lang["Ok"];
        Yes = Lang["Yes"];
        No = Lang["No"];
        PopupTitleInfo = Lang["PopupTitleInfo"];
        PopupTitleError = Lang["PopupTitleError"];
        UpdateSucces = Lang["UpdateTehaiSuccess"];
        UpdateFail = Lang["UpdateTehaiFail"];
        PopupConfirmDeleteTitle = Lang["ConfirmDeleteTehaiTitle"];
        PopupConfirmDeleteContent = Lang["ConfirmDeleteTehaiContent"];
        EmptyCarArrangementList = Lang["BI_T008"];
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {

        LocalizationInit();
        baseUrl = AppSettingsService.GetBaseUrl();
        CurrentCulture = new CultureInfo("ja-JP");
        SelectedArrangementItem = new BookingArrangementData();

        // check booking can edit or not
        // disable edit
        //  - paid or coupon
        //  - lock table
        var editStateList = await LoadBookingEditableStateAsync(UkeNo);
        if (editStateList?.Count > 0)
        {
            IsDisableEdit = true;
        }

        await LoadAllDataComboboxAsync();
        var arrangementDataListDb = await LoadBookingArrangementDataAsync(SelectedCar);
        if (arrangementDataListDb != null)
        {
            ArrangementDataList = arrangementDataListDb;
            ScheduleList = ScheduleHelper.GetScheduleSelectorList(SelectedCar.StartDate, SelectedCar.EndDate, SelectedCar.IsPreviousDate, SelectedCar.IsAfterDate);
            LoadArrangementComboboxValue(ArrangementDataList);
            FormContext = new EditContext(ArrangementDataList);
        }
        else
        {
            NavManager.NavigateTo("bookinginput?UkeCd=" + UkeNo.Substring(5), true);
            return;
        }
        if (IsEmptyCarArrangementList)
        {
            emptyItemMessage[nameof(EmptyCarArrangementList)] = EmptyCarArrangementList;
        }

        await base.OnInitializedAsync().ContinueWith((t) => { IsLoading = false; });
        await InvokeAsync(StateHasChanged);
    }

    protected bool IsEnableSubmitButton()
    {
        if (IsDisableEdit)
        {
            return false;
        }
        if (ShowFormCreateArrangement || ArrangementDataList.Any(f => f.Editing))
        {
            return false;
        }
        var result = FormContext.IsModified() && FormContext.Validate();
        return result;
    }

    private async Task<List<BookingArrangementData>> LoadBookingArrangementDataAsync(ArrangementCar car)
    {
        try
        {
            string uri = string.Format("{0}/api/BookingArrangement?ukeNo={1}&unkRen={2}&teiDanNo={3}&bunkRen={4}", baseUrl, UkeNo, car.UnkRen, car.TeiDanNo, car.BunkRen);
            var response = await HttpClient.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<List<BookingArrangementData>>(await response.Content.ReadAsStringAsync());
            }
            else
            {
                return null;
            }
        }
        catch (Exception)
        {
            return null;
        }
    }

    private async Task<List<BookingDisableEditState>> LoadBookingEditableStateAsync(string ukeNo)
    {
        try
        {
            string uri = string.Format("{0}/api/BookingInput/DisabledBookingStateList?ukeNo={1}", baseUrl, ukeNo);
            var response = await HttpClient.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<List<BookingDisableEditState>>(await response.Content.ReadAsStringAsync());
            }
            else
            {
                return null;
            }
        }
        catch (Exception)
        {
            return null;
        }
    }

    protected async Task LoadAllDataComboboxAsync()
    {
        ArrangementTypeList = await HttpClient.GetJsonAsync<List<ArrangementType>>(string.Format("{0}/api/BookingArrangement/ArrangementType?ukeNo={1}", baseUrl, UkeNo));
        ArrangementPlaceTypeList = await HttpClient.GetJsonAsync<List<ArrangementPlaceType>>(string.Format("{0}/api/BookingArrangement/ArrangementPlaceType?ukeNo={1}", baseUrl, UkeNo));
        ArrangementLocationList = await HttpClient.GetJsonAsync<List<ArrangementLocation>>(string.Format("{0}/api/BookingArrangement/ArrangementLocation?ukeNo={1}", baseUrl, UkeNo));
        ArrangementCodeList = await HttpClient.GetJsonAsync<List<ArrangementCode>>(string.Format("{0}/api/BookingArrangement/ArrangementCode?ukeNo={1}", baseUrl, UkeNo));

        CarArrangementList = await HttpClient.GetJsonAsync<List<ArrangementCar>>(string.Format("{0}/api/BookingArrangement/ArrangementCar?ukeNo={1}", baseUrl, UkeNo));
        SelectedCar = CarArrangementList.First();
        if (ArrangementTypeList.Any())
        {
            ArrangementTypeList.Insert(0, ArrangementType.CreateDefault());
        }
        if (ArrangementPlaceTypeList.Any())
        {
            ArrangementPlaceTypeList.Insert(0, ArrangementPlaceType.CreateDefault());
        }
        if (ArrangementCodeList.Any())
        {
            ArrangementCodeList.Insert(0, ArrangementCode.CreateDefault());
        }
        if(ArrangementLocationList.Any())
        {
            ArrangementLocationList.Insert(0, new ArrangementLocation());
        }
    }

    public void LoadArrangementComboboxValue(List<BookingArrangementData> arrangementList)
    {
        if (ArrangementTypeList != null)
        {
            for (int index = 0; index < arrangementList.Count; index++)
            {
                int code = arrangementList[index].SelectedArrangementType.TypeCode;
                arrangementList[index].SelectedArrangementType = ArrangementTypeList.SingleOrDefault(t => t.TypeCode == code);
            }
        }
    }

    private void HandleClosePopupInfoAfterSubmit()
    {
        IsShowPopupInfo = false;
        IsShowPopupError = false;
        StateHasChanged();
    }

    protected void OnConfirmDelete()
    {
        var arrangement = ArrangementDataList.SingleOrDefault(f => f.No == indexToDelete);

        // check if added then delete
        if (arrangement.EditState == FormEditState.Added)
        {
            SelectedCar.TehRenMax -= 1;
            ArrangementDataList.Remove(arrangement);
        }
        else
        {
            arrangement.EditState = FormEditState.Deleted;
        }

        FormContext.NotifyFieldChanged(() => ArrangementDataList);
        ShowPopupConfirmDelete = false;

        StateHasChanged();
    }

    protected void OnClosePopupConfirmDelete()
    {
        ShowPopupConfirmDelete = false;
        StateHasChanged();
    }

    protected async Task HandleCarArrangementChanged(ArrangementCar newValue)
    {
        ErrorMessage = string.Empty;
        SelectedCar = newValue;
        ScheduleList = ScheduleHelper.GetScheduleSelectorList(SelectedCar.StartDate, SelectedCar.EndDate, SelectedCar.IsPreviousDate, SelectedCar.IsAfterDate);
        ArrangementDataList = await LoadBookingArrangementDataAsync(SelectedCar);
        LoadArrangementComboboxValue(ArrangementDataList);
        ShowFormCreateArrangement = false;
        FormContext.MarkAsUnmodified();
        StateHasChanged();
    }

    protected void HandleCreateArrangement()
    {
        if (IsDisableEdit == false && ShowFormCreateArrangement == false)
        {
            ArrangementDataList.ForEach(f => f.Editing = false);

            SelectedArrangementItem = new BookingArrangementData();
            SelectedArrangementItem.SelectedArrangementCode = ArrangementCodeList.FirstOrDefault();
            SelectedArrangementItem.SelectedArrangementPlaceType = ArrangementPlaceTypeList.FirstOrDefault();
            SelectedArrangementItem.SelectedArrangementType = ArrangementTypeList.FirstOrDefault();
            SelectedArrangementItem.No = ++SelectedCar.TehRenMax;
            SelectedArrangementItem.Schedule = ScheduleList.FirstOrDefault();
            SelectedArrangementItem.UnkRen = SelectedCar.UnkRen;
            SelectedArrangementItem.TeiDanNo = SelectedCar.TeiDanNo;
            SelectedArrangementItem.BunkRen = SelectedCar.BunkRen;

            ShowFormCreateArrangement = true;
        }
    }

    protected void HandleAddArrangement()
    {
        ArrangementDataList.Add(SelectedArrangementItem);
        SelectedArrangementItem.EditState = FormEditState.Added;
        FormContext.NotifyFieldChanged(() => ArrangementDataList);
        ShowFormCreateArrangement = false;
        StateHasChanged();
    }

    protected void HandleCancelCreateArrangement(int index)
    {
        ShowFormCreateArrangement = false;
        StateHasChanged();
    }

    protected void HandleEditArrangement(int no)
    {
        if (IsDisableEdit == false)
        {
            ArrangementDataList.ForEach(f => f.Editing = false);
            HandleCancelCreateArrangement(no);

            var selectedArrangement = ArrangementDataList.SingleOrDefault(f => f.No == no);
            selectedArrangement.Editing = true;
            StateHasChanged();
        }
    }

    protected void HandleSaveEditArrangement(int no)
    {
        var selectedArrangement = ArrangementDataList.SingleOrDefault(f => f.No == no);
        selectedArrangement.Editing = false;
        selectedArrangement.EditState = selectedArrangement.EditState == FormEditState.Added ? FormEditState.Added : FormEditState.Edited;
        FormContext.NotifyFieldChanged(() => ArrangementDataList);
        StateHasChanged();
    }

    protected void HandleCancelEditArrangement(int no)
    {
        var selectedArrangement = ArrangementDataList.SingleOrDefault(f => f.No == no);
        selectedArrangement.Editing = false;
        StateHasChanged();
    }

    protected void HandleDeleteArrangement(int no)
    {
        if (IsDisableEdit == false)
        {
            indexToDelete = no;
            ShowPopupConfirmDelete = true;
            StateHasChanged();
        }
    }

    protected async Task HandleValidSubmitAsync()
    {
        ErrorMessage = string.Empty;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged);
        });

        var tehai = ArrangementDataList.OrderByDescending(_ => _.UpdYmd).ThenByDescending(_ => _.UpdTime).FirstOrDefault();
        var updYmdTime = tehai == null ? string.Empty : tehai.UpdYmd + tehai.UpdTime;
        var isValid = await HaitaCheck(updYmdTime);
        if (FormContext.Validate() && isValid)
        {
            HttpResponseMessage response = new HttpResponseMessage();
            var requstUri = string.Format("{0}/api/BookingArrangement?ukeNo={1}&unkRen={2}&teiDanNo={3}&bunkRen={4}",
                                        baseUrl, UkeNo, SelectedCar.UnkRen, SelectedCar.TeiDanNo, SelectedCar.BunkRen);
            response = await HttpClient.PutJsonAsync(requstUri, ArrangementDataList);

            if (response.IsSuccessStatusCode)
            {
                IsShowPopupInfo = true;
                PopupInfoContent = UpdateSucces;
                PopupTitle = PopupTitleInfo;
            }
            else
            {
                IsShowPopupError = true;
                PopupInfoContent = UpdateFail;
                PopupTitle = PopupTitleInfo;
            }
            var arrangementDataListDb = await LoadBookingArrangementDataAsync(SelectedCar);
            if (arrangementDataListDb != null)
            {
                ArrangementDataList = arrangementDataListDb;
                ScheduleList = ScheduleHelper.GetScheduleSelectorList(SelectedCar.StartDate, SelectedCar.EndDate, SelectedCar.IsPreviousDate, SelectedCar.IsAfterDate);
                LoadArrangementComboboxValue(ArrangementDataList);
                FormContext = new EditContext(ArrangementDataList);
            }
            else
            {
                NavManager.NavigateTo("bookinginput?UkeCd=" + UkeNo.Substring(5), true);
            }
            OnClosePopup = HandleClosePopupInfoAfterSubmit;
        }
        else if (!isValid)
        {
            ErrorMessage = Lang["BI_T009"];
        }
        await InvokeAsync(StateHasChanged);
    }


    private async Task<bool> HaitaCheck(string updYmdTime)
    {
        var haita = await service.GetHaitaCheck(UkeNo, SelectedCar.UnkRen, SelectedCar.TeiDanNo, SelectedCar.BunkRen);
        if (haita == updYmdTime) return true;
        return false;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomNavigation NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient HttpClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<Tehai> Lang { get; set; }
    }
}
#pragma warning restore 1591
