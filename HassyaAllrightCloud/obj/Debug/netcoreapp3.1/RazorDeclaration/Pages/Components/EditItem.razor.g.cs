#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\EditItem.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cf7a7c6cbf58ce2c4807651b4758134ea7eced0f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
    public partial class EditItem : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 96 "E:\Project\HassyaAllrightCloud\Pages\Components\EditItem.razor"
       
    [Inject] protected IErrorHandlerService _errorModalService { get; set; }
    [Inject] public IBusScheduleService _busScheduleService { get; set; }
    [CascadingParameter] MouseContainer Container { get; set; }
    [Parameter] public ItemBus Item { get; set; }
    [Parameter] public double Width { get; set; }
    [Parameter] public ConfigBusSchedule Param { get; set; }
    [Parameter] public List<ResponseHaiTaCheck> UpYmdTimes { get; set; }
    private List<ResponseHaiTaCheck> UpYmdTimeInits { get; set; }
    [Parameter] public EventCallback<DataInit> ValueCheckHaitaBusLines { get; set; }
    [Parameter] public List<ItemBus> BusLines { get; set; }
    private List<ResponseHaiTaCheck> UpYmdTimeAfters { get; set; }
    private DataInit dataInit = new DataInit();
    double startMove = 0;
    double childMouse;
    int IsLeft { get; set; } = 0;
    public double StartX { get; set; } = -1;
    public double StartY { get; set; } = -1;
    int x, y;
    private bool IsCheckValidCreate = false;
    bool IsShow = false;
    private bool enableCuting = false;
    double childWidth = 20;
    double time = 5;
    DateTime startView;
    DateTime endView;
    DateTime midView;

    private void CuttingMouseOver(MouseEventArgs e)
    {
        enableCuting = true;
    }

    private async Task CreateMouseMove(MouseEventArgs e, double dataInt)
    {
        if (Container.Mode != 3)
        {
            return;
        }
        if (Container.Payload.Left > e.ClientX)
        {
            return;
        }
        if (StartX == -1)
        {
            StartX = e.ClientX + Item.Width;
            startMove = e.ClientX;
        }
        if (startMove >= e.ClientX)
        {
            return;
        }
        double iWidth = Item.Width;
        iWidth += (e.ClientX - StartX);
        Item.CCSStyle = "width:" + iWidth.ToString() + "px;height:" + Item.Height.ToString() + "rem;top:" + Item.Top.ToString() + "rem;left:" + Item.Left.ToString() + "px;";
        Item.CCSStyleDefault = "width:" + Item.WidthDefault.ToString() + "px;height:" + Item.Height.ToString() + "rem;top:0;left:" + Item.LeftDefault.ToString() + "px;";
        StartX = e.ClientX;
        double compairwith = Item.WidthDefault / Item.Width;

        Item.Width = iWidth;
        //await JSRuntime.InvokeVoidAsync("console.log", "CreateMouseMove moving => " + e.ClientX.ToString() + " == dataInt=" + dataInt.ToString());
        //await JSRuntime.InvokeVoidAsync("console.log", Item.CCSStyle);
        IsCheckValidCreate = true;
    }

    private async Task CreateMouseUp(MouseEventArgs e, double dataInt)
    {
        if (IsCheckValidCreate == false)
        {

            return;
        }
        else
        {
            int d = Param.Number_of_days;
            childMouse = e.ClientX;
            //await JSRuntime.InvokeVoidAsync("console.log", "Data line mouse move => " + dataInt.ToString());

            if (StartX == -1)
            {
                StartX = e.ClientX;
            }
            double iWidth = Item.Width;
            iWidth += (e.ClientX - StartX);
            //Item.Name = "Editing able";
            Item.CCSStyle = "width:" + iWidth.ToString() + "px;height:" + Item.Height.ToString() + "rem;top:" + Item.Top.ToString() + "rem;left:" + Item.Left.ToString() + "px;";
            Item.CCSStyleDefault = "width:" + Item.WidthDefault.ToString() + "px;height:" + Item.Height.ToString() + "rem;top:0;left:" + Item.LeftDefault.ToString() + "px;";
            StartX = e.ClientX;
            double compairwith = Item.WidthDefault / Item.Width;
            if (iWidth > Item.MaxWidth && Item.MaxWidth != -1)
            {
                Item.Width = Item.MaxWidth;
                Item.WidthDefault = Item.Width * compairwith;
                DateTime datestart = busScheduleHelper.convertwidthtodate(Width, Item.Left, d, Container.defaultdate);
                Item.StartDate = datestart.ToString("yyyyMMdd");
                Item.TimeStart = int.Parse(datestart.ToString("HHmm"));
                DateTime dateend = busScheduleHelper.convertwidthtodate(Width, Item.Left + Item.Width, d, Container.defaultdate);
                Item.EndDate = dateend.ToString("yyyyMMdd");
                Item.TimeEnd = int.Parse(dateend.ToString("HHmm"));


            }
            else
            {
                Item.Width = iWidth;
                Item.WidthDefault = Item.Width * compairwith;
                DateTime datestart = busScheduleHelper.convertwidthtodate(Width, Item.Left, d, Container.defaultdate);
                Item.StartDate = datestart.ToString("yyyyMMdd");
                Item.TimeStart = int.Parse(datestart.ToString("HHmm"));
                DateTime dateend = busScheduleHelper.convertwidthtodate(Width, Item.Left + Item.Width, d, Container.defaultdate);
                Item.EndDate = dateend.ToString("yyyyMMdd");
                Item.TimeEnd = int.Parse(dateend.ToString("HHmm"));

            }
            if (Item.ColorLine == "color-11")
            {
                Item.ColorLine = "color-10";
            }
            /*
             * To Do
             * Call save Item created
             */
            IsShow = true;
            //await JSRuntime.InvokeVoidAsync("console.log", "CreateMouseUp moving => " + e.ClientX.ToString() + " == dataInt=" + dataInt.ToString());
            Container.IsCreating = false;
        }
    }

    private async Task CreateMouseOver(MouseEventArgs e, double dataInt)
    {
        Container.IsCreating = false;
        //await JSRuntime.InvokeVoidAsync("console.log", "CreateMouseOver moving => " + e.ClientX.ToString() + " == dataInt=" + dataInt.ToString());
    }

    private async Task HandleClickMenu(MouseEventArgs e, ItemBus item)
    {
        Container.Payload = item;
        await Container.UpdateMenuAsync(item);
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private void HandleMouseDownStart(ItemBus selectedItem, int isLeft)
    {
        startMove = 1;
        IsLeft = isLeft;
        StartX = -1;
        JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "Setzindex", selectedItem.BusLine, 3);
        /*Container.Payload = selectedItem;
        Container.IsLeft = isLeft;
        Container.OnMouseDown = true;
        Container.OnDragAble = false;*/
    }

    private async Task HandleDragStart(ItemBus selectedJob)
    {
        if (Container.OnMouseDown == true && Container.Mode != 1)
        {
            return;
        }
        Container.Payload = selectedJob;
        Container.OnDragAble = true;
        Container.OnMouseDown = false;
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await blazorContextMenuService.HideMenu("myMenuBusRepair");
        await blazorContextMenuService.HideMenu("myMenuCutline");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadComponentScript", "editItemComponent", "setHover");
            if (Container.Mode == (int)BusLineMode.View || Container.Mode == (int)BusLineMode.Zoom || Container.Mode == (int)BusLineMode.Cut)
            {
                await JSRuntime.InvokeVoidAsync("loadComponentScript", "editItemComponent", "setTooltip");
            }
        }
    }

    private void ChildMouseMove(MouseEventArgs e, double dataInt)
    {
        int d = Param.Number_of_days;
        childMouse = e.ClientX;
        //JSRuntime.InvokeVoidAsync("console.log", "Data line mouse move => " + dataInt.ToString());
        if (IsLeft == 2)
        {
            if (StartX == -1)
            {
                StartX = e.ClientX;
            }
            double iWidth = Item.Width;
            iWidth += (e.ClientX - StartX);
            //Item.Name = "Editing able";
            Item.CCSStyle = "width:" + iWidth.ToString() + "px;height:" + Item.Height.ToString() + "rem;top:" + Item.Top.ToString() + "rem;left:" + Item.Left.ToString() + "px;";
            Item.CCSStyleDefault = "width:" + Item.WidthDefault.ToString() + "px;height:" + Item.Height.ToString() + "rem;top:0;left:" + Item.LeftDefault.ToString() + "px;";
            StartX = e.ClientX;
            double compairwith = Item.WidthDefault / Item.Width;
            if (iWidth > Item.MaxWidth && Item.MaxWidth != -1 && Item.MaxWidth > 0)
            {
                Item.Width = Item.MaxWidth;
                Item.WidthDefault = Item.Width * compairwith;
                DateTime datestart = busScheduleHelper.convertwidthtodate(Width, Item.Left, d, Container.defaultdate);
                Item.StartDate = datestart.ToString("yyyyMMdd");
                Item.TimeStart = int.Parse(datestart.ToString("HHmm"));
                DateTime dateend = busScheduleHelper.convertwidthtodate(Width, Item.Left + Item.Width, d, Container.defaultdate);
                Item.EndDate = dateend.ToString("yyyyMMdd");
                Item.TimeEnd = int.Parse(dateend.ToString("HHmm"));


            }
            else
            {
                DateTime datestart = busScheduleHelper.convertwidthtodate(Width, Item.Left, d, Container.defaultdate);
                DateTime dateminwidth = datestart.AddMinutes(15);
                double minwidth = busScheduleHelper.calwidth(Width, datestart.ToString("yyyyMMdd"), datestart.ToString("HHmm"), dateminwidth.ToString("yyyyMMdd"), dateminwidth.ToString("HHmm"), Param.Number_of_days);
                if (iWidth <= minwidth)
                {
                    iWidth = minwidth;
                }
                Item.Width = iWidth;
                Item.WidthDefault = Item.Width * compairwith;
                Item.StartDate = datestart.ToString("yyyyMMdd");
                Item.TimeStart = int.Parse(datestart.ToString("HHmm"));
                DateTime dateend = busScheduleHelper.convertwidthtodate(Width, Item.Left + Item.Width, d, Container.defaultdate);
                Item.EndDate = dateend.ToString("yyyyMMdd");
                Item.TimeEnd = int.Parse(dateend.ToString("HHmm"));

            }
            if (Item.ColorLine == "color-11")
            {
                Item.ColorLine = "color-10";
            }
        }
        else if (IsLeft == 1)
        {
            double compairwith = Item.WidthDefault / Item.Width;
            if (StartX == -1)
            {
                StartX = e.ClientX;
            }
            double iWidth = Item.Width;
            if (e.ClientX < StartX)
            {
                iWidth += (StartX - e.ClientX);
                Item.Left -= (StartX - e.ClientX);
                if (Item.Left < Item.MinLeft && Item.MinLeft != -1)
                {
                    Item.Left = Item.MinLeft;
                    iWidth = Item.Width;
                }
                DateTime datestart = busScheduleHelper.convertwidthtodate(Width, Item.Left, d, Container.defaultdate);
                DateTime dateminwidth = datestart.AddMinutes(15);
                double minwidth = busScheduleHelper.calwidth(Width, datestart.ToString("yyyyMMdd"), datestart.ToString("HHmm"), dateminwidth.ToString("yyyyMMdd"), dateminwidth.ToString("HHmm"), Param.Number_of_days);
                if (iWidth < 20)
                {
                    Item.Width = 20;
                    iWidth = 20;
                }
                Item.Width = iWidth;
                Item.WidthDefault = Item.Width * compairwith;
                Item.StartDate = datestart.ToString("yyyyMMdd");
                Item.TimeStart = int.Parse(datestart.ToString("HHmm"));
                DateTime dateend = busScheduleHelper.convertwidthtodate(Width, Item.Left + Item.Width, d, Container.defaultdate);
                Item.EndDate = dateend.ToString("yyyyMMdd");
                Item.TimeEnd = int.Parse(dateend.ToString("HHmm"));
            }
            else if (e.ClientX > StartX)
            {
                iWidth += (StartX - e.ClientX);
                DateTime datestart = busScheduleHelper.convertwidthtodate(Width, Item.Left, d, Container.defaultdate);
                DateTime dateminwidth = datestart.AddMinutes(15);
                double minwidth = busScheduleHelper.calwidth(Width, datestart.ToString("yyyyMMdd"), datestart.ToString("HHmm"), dateminwidth.ToString("yyyyMMdd"), dateminwidth.ToString("HHmm"), Param.Number_of_days);
                if (iWidth < 20)
                {
                    Item.Width = 20;
                    iWidth = 20;
                }
                else
                {
                    Item.Left += (e.ClientX - StartX);
                    Item.Width = iWidth;
                    Item.WidthDefault = Item.Width * compairwith;
                    Item.StartDate = datestart.ToString("yyyyMMdd");
                    Item.TimeStart = int.Parse(datestart.ToString("HHmm"));
                    DateTime dateend = busScheduleHelper.convertwidthtodate(Width, Item.Left + Item.Width, d, Container.defaultdate);
                    Item.EndDate = dateend.ToString("yyyyMMdd");
                    Item.TimeEnd = int.Parse(dateend.ToString("HHmm"));
                }
            }
            Item.CCSStyle = "width:" + iWidth.ToString() + "px;height:" + Item.Height.ToString() + "rem;top:" + Item.Top.ToString() + "rem;left:" + Item.Left.ToString() + "px;";
            Item.CCSStyleDefault = "width:" + Item.WidthDefault.ToString() + "px;height:" + Item.Height.ToString() + "rem;top:0;left:" + Item.LeftDefault.ToString() + "px;";
            StartX = e.ClientX;
            if (Item.ColorLine == "color-11")
            {
                Item.ColorLine = "color-10";
            }
        }
        return;
    }

    private async Task ChildMouseUp(double dataInt)
    {
        if (Container.Mode == (int)BusLineMode.Edit)
        {
            int d = Param.Number_of_days;
            startMove = 0;
            //await isClickedLine.InvokeAsync(dataInt);

            DateTime datestart = busScheduleHelper.convertwidthtodate(Width, Item.Left, d, Container.defaultdate);
            DateTime dateend = busScheduleHelper.convertwidthtodate(Width, Item.Left + Item.Width, d, Container.defaultdate);
            TKD_HaishaDataService.Updatebustimedata(Item, 1, datestart, dateend);
            await JSRuntime.InvokeVoidAsync("console.log", "ChildMouseUp Clicked => " + Item.BusLine.ToString());
            await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "Setzindex", Item.BusLine, 2);
            await Container.UpdateLineCutAsync("reloadgrid");
        }

    }
    private async Task ChildMouseOver(double dataInt)
    {
        startMove = 0;
        StartX = -1;
        IsLeft = -1;
        //await isClickedLine.InvokeAsync(dataInt);
        //await JSRuntime.InvokeVoidAsync("console.log", "ChildMouseUp Clicked => " + dataInt.ToString());
    }

    private async Task HandleClickCut(MouseEventArgs e, ItemBus selectedItem, double breakDateTime, double spaceTime)
    {
        var isValid = await HaiTaCheck();
        var upYmdTimeInits = UpYmdTimeInits;
        var ukeNo = Item?.BookingId?.Substring(5, 10);
        await JSRuntime.InvokeVoidAsync("removeTooltip");

        if (isValid)
        {
            if (selectedItem.ColorLine != "color-9")
            {
                DateTime start, end, startdefault, enddefault;
                DateTime.TryParseExact(selectedItem.StartDate + selectedItem.TimeStart.ToString("D4"), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out start);
                DateTime.TryParseExact(selectedItem.EndDate + selectedItem.TimeEnd.ToString("D4"), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out end);
                DateTime.TryParseExact(selectedItem.StartDateDefault + selectedItem.TimeStartDefault.ToString("D4"), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out startdefault);
                DateTime.TryParseExact(selectedItem.EndDateDefault + selectedItem.TimeEndDefault.ToString("D4"), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out enddefault);
                double spacestart = (start - startdefault).TotalMinutes;
                double spaceend = (enddefault - end).TotalMinutes;

                SplitBusData busdate1 = new SplitBusData();
                busdate1.SyuKoYmd = selectedItem.StartDateDefault;
                busdate1.SyuKoTime = selectedItem.TimeStartDefault.ToString("D4");
                busdate1.HaiSYmd = selectedItem.StartDate;
                busdate1.HaiSTime = selectedItem.TimeStart.ToString("D4");
                busdate1.SyuPaTime = busdate1.HaiSTime;
                busdate1.TouYmd = start.AddMinutes((double)(breakDateTime)).ToString("yyyyMMdd");
                busdate1.TouChTime = start.AddMinutes((double)(breakDateTime)).ToString("HHmm");
                busdate1.KikYmd = start.AddMinutes((double)(breakDateTime)).ToString("yyyyMMdd");
                busdate1.KikTime = start.AddMinutes((double)(breakDateTime)).ToString("HHmm");

                SplitBusData busdate2 = new SplitBusData();
                busdate2.SyuKoYmd = start.AddMinutes((double)(breakDateTime + spaceTime)).ToString("yyyyMMdd");
                busdate2.SyuKoTime = start.AddMinutes((double)(breakDateTime + spaceTime)).ToString("HHmm");
                busdate2.HaiSYmd = start.AddMinutes((double)(breakDateTime + spaceTime)).ToString("yyyyMMdd");
                busdate2.HaiSTime = start.AddMinutes((double)(breakDateTime + spaceTime)).ToString("HHmm");
                busdate2.SyuPaTime = busdate2.HaiSTime;
                busdate2.TouYmd = selectedItem.EndDate;
                busdate2.TouChTime = selectedItem.TimeEnd.ToString("D4");
                busdate2.KikYmd = selectedItem.EndDateDefault;
                busdate2.KikTime = selectedItem.TimeEndDefault.ToString("D4");
                await Task.Run(() =>
                {
                     TKD_HaishaDataService.SplitBusUpdate(selectedItem.BookingId, selectedItem.haUnkRen, selectedItem.TeiDanNo, selectedItem.BunkRen, busdate1, busdate2, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, "KU0100");
                });               
                await Container.UpdateLineCutAsync("reloadgrid");
                
                dataInit.IsValid = isValid;
                dataInit.ResponseHaiTaCheckInit = await GetUpdYmds();
            }
        }
        else
        {
            dataInit.IsValid = false;
            dataInit.ResponseHaiTaCheckInit = upYmdTimeInits;
        }

        dataInit.UkeNo = ukeNo;
        dataInit.ActionBusSchedule = ActionBusSchedule.Cut;
        await ValueCheckHaitaBusLines.InvokeAsync(dataInit);
    }

    private async Task HandleMouseDown(MouseEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task HandleRemoveLine(ItemBus item)
    {
        await Container.RemoveJobAsync(item);
    }

    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadComponentScript", "editItemComponent");
        // 1day-15minute
        if (Container.GridView == (int)TimeMode.Minute)
        {
            childWidth = 20;
            time = 5;
        }
        // 1day-1hour, 1day-3hours, 1day-6hour, 3days-1hour, 1week-1hour, 1month-1hour
        if (Container.GridData == (int)DayMode.OneDay && Container.GridView == (int)TimeMode.OneHour ||
            Container.GridData == (int)DayMode.OneDay && Container.GridView == (int)TimeMode.ThreeHours ||
            Container.GridData == (int)DayMode.OneDay && Container.GridView == (int)TimeMode.SixHours ||
            Container.GridData == (int)DayMode.ThreeDays && Container.GridView == (int)TimeMode.OneHour ||
            Container.GridData == (int)DayMode.Week && Container.GridView == (int)TimeMode.OneHour ||
            Container.GridData == (int)DayMode.Month && Container.GridView == (int)TimeMode.OneHour)
        {
            childWidth = Container.Width / (Param.Number_of_days * 96);
            time = 15;
        }
        // 3days-3hours, 3days-6hours, 1week-3hours, 1week-6hours
        if (Container.GridData == (int)DayMode.ThreeDays && Container.GridView == (int)TimeMode.ThreeHours ||
            Container.GridData == (int)DayMode.ThreeDays && Container.GridView == (int)TimeMode.SixHours ||
            Container.GridData == (int)DayMode.Week && Container.GridView == (int)TimeMode.ThreeHours ||
            Container.GridData == (int)DayMode.Week && Container.GridView == (int)TimeMode.SixHours)
        {
            childWidth = Container.Width / (Param.Number_of_days * 48);
            time = 30;
        }
        // 1week-1day, 1month-3hours, 1month-1day, 1month-6hours -->
        if (Container.GridData == (int)DayMode.Week && Container.GridView == (int)TimeMode.Day ||
            Container.GridData == (int)DayMode.Month && Container.GridView == (int)TimeMode.ThreeHours ||
            Container.GridData == (int)DayMode.Month && Container.GridView == (int)TimeMode.SixHours ||
            Container.GridData == (int)DayMode.Month && Container.GridView == (int)TimeMode.Day)
        {
            childWidth = Container.Width / (Param.Number_of_days * 24);
            time = 60;
        }

        startView = new DateTime(Container.Date.Year, Container.Date.Month, Container.Date.Day, 0, 0, 0);
        var endDate = Container.Date.AddDays(Param.Number_of_days);
        endView = new DateTime(endDate.Year, endDate.Month, endDate.Day, 0, 0, 0);
        var midDate = Container.Date.AddDays((int)(Param.Number_of_days / 2));
        midView = new DateTime(midDate.Year, midDate.Month, midDate.Day, 12, 0, 0);
        IsShow = Item.IsShow;
        if (UpYmdTimes?.Count() > 0)
        {
            UpYmdTimeInits = UpYmdTimes;
        }
    }

    private async Task<bool> HaiTaCheck()
    {
        try
        {
            UpYmdTimeAfters = await GetUpdYmds();

            var upYmdTimeInitSelectd = UpYmdTimeInits.FirstOrDefault(_ => _.UkeNo == Item.BookingId && _.UnkRen == Item.haUnkRen
                              && _.TeiDanNo == Item.TeiDanNo && _.BunkRen == Item.BunkRen);

            var upYmdTimeAfterSelectd = UpYmdTimeAfters.FirstOrDefault(_ => _.UkeNo == Item.BookingId && _.UnkRen == Item.haUnkRen
                                       && _.TeiDanNo == Item.TeiDanNo && _.BunkRen == Item.BunkRen);

            var upYmdTimeInitJson = JsonConvert.SerializeObject(upYmdTimeInitSelectd?.UpYmdTimes);
            var upYmdTimeAfterJson = JsonConvert.SerializeObject(upYmdTimeAfterSelectd?.UpYmdTimes);

            return upYmdTimeInitJson == upYmdTimeAfterJson ? true : false;
        }
        catch (Exception ex)
        {
            _errorModalService.HandleError(ex);
        }
        return true;
    }

    protected async Task<List<ResponseHaiTaCheck>> GetUpdYmds()
    {
        if (BusLines.Any())
        {
            var dataParam = BusLines?.Select(_ => new ParamHaiTaCheck
            {
                UkeNo = _.BookingId,
                UnkRen = _.haUnkRen,
                TeiDanNo = _.TeiDanNo,
                BunkRen = _.BunkRen,
                SyaSyuRen = _.SyaSyuRen
            }).ToList();
            if (dataParam.Any())
                return await _busScheduleService.GetUpYmdTimes(dataParam);
        }
        return new List<ResponseHaiTaCheck>();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorContextMenuService blazorContextMenuService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_HaishaDataListService TKD_HaishaDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper busScheduleHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
