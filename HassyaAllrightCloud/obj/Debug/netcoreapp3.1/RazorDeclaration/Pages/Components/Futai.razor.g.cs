#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\Futai.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2ac9feb3c90a686bcd7fcc4b7622c3ccc21fe192"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\Pages\Components\Futai.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
    public partial class Futai : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 403 "E:\Project\HassyaAllrightCloud\Pages\Components\Futai.razor"
       
    [Parameter] public IncidentalViewMode CurrentViewMode { get; set; }
    [Parameter] public string UkeNo { get; set; }
    [Inject] IFutaiService _service { get; set; }
    protected List<ScheduleSelectorModel> FutaiScheduleList { get; set; }
    protected List<LoadTsumi> LoadTsumiList { get; set; }
    protected List<LoadFutai> LoadFutaiList { get; set; }
    protected List<LoadNyuRyokinName> LoadNyuRyokinNameList { get; set; }
    protected List<LoadSeisanCd> LoadSeisanCdList { get; set; }
    protected List<LoadSeisanKbn> LoadSeisanKbnList { get; set; }
    protected List<LoadCustomerList> CustomerList { get; set; }
    protected List<TaxTypeList> TaxTypeDataList { get; set; }
    protected List<LoadDouro> LoadDouroDataList { get; set; }
    protected SettingTaxRate SettingTaxRate { get; set; }

    protected IncidentalBooking IncidentalBookingData { get; set; }
    protected LoadFuttum SelectedLoadFuttumItem { get; set; }
    protected EditContext FormContext { get; set; }

    protected string PopupTitle { get; set; }
    protected string PopupConfirmDeleteTitle { get; set; }
    protected string PopupConfirmDeleteContent { get; set; }
    protected string PopupInfoContent { get; set; }
    protected string TempStr { get; set; }

    protected bool IsLoading { get; set; } = true;
    protected bool ShowFormCreateFuttum { get; set; }
    protected bool ShowPopupConfirmDelete { get; set; }
    protected bool IsShowPopupInfo { get; set; }
    protected bool IsShowPopupError { get; set; }
    protected bool IsDisableEdit { get; set; }

    protected CultureInfo CurrentCulture { get; set; }
    protected Action OnClosePopup { get; set; }

    private MaxUpdYmdTime _maxUpdYmd { get; set; }

    private int indexToDelete;
    private string baseUrl;
    private bool isHaitaValid = true;

    #region Localization string

    string Ok;
    string Yes;
    string No;
    string PopupTitleInfo;
    string PopupTitleError;
    string CannotDeleteFuttumMessage;
    string UpdateFuttumSucces;
    string UpdateFail;

    private void LocalizationInit()
    {
        Ok = Lang["Ok"];
        Yes = Lang["Yes"];
        No = Lang["No"];
        PopupTitleInfo = Lang["PopupTitleInfo"];
        PopupTitleError = Lang["PopupTitleError"];
        CannotDeleteFuttumMessage = Lang["BI_T001"];

        PopupConfirmDeleteTitle = Lang["VerificationDelete"];
        PopupConfirmDeleteContent = Lang["BI_T0010"];

        UpdateFuttumSucces = Lang["BI_T008"];
        UpdateFail = Lang["BI_T009"];
    }

    #endregion

    #region Component Lifecycle

    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        baseUrl = AppSettingsService.GetBaseUrl();
        CurrentCulture = new CultureInfo("ja-JP");
        SelectedLoadFuttumItem = new LoadFuttum();
        SelectedLoadFuttumItem.FirstLoad = false;

        // check booking can edit or not
        // disable edit
        //  - paid or coupon
        //  - lock table
        var editStateList = await LoadBookingEditableStateAsync(UkeNo);
        if (editStateList?.Count > 0)
        {
            IsDisableEdit = true;
        }

        await LoadAllDataComboboxAsync();
        var incidentalDb = await LoadBookingIncidentalDataAsync();
        if (incidentalDb != null)
        {
            IncidentalBookingData = incidentalDb;
            _maxUpdYmd = await _service.FutTumMishumMaxUpdYmdTimeAsync(UkeNo, CurrentViewMode);
            FutaiScheduleList = GetFutaiScheduleList(incidentalDb);
            LoadSelectedDataCombobox();

            // enable auto calculate
            IncidentalBookingData.LoadFuttumList.ForEach(f => f.FirstLoad = false);
            FormContext = new EditContext(IncidentalBookingData);
        }
        else
        {
            NavManager.NavigateTo("bookinginput?UkeCd=" + UkeNo.Substring(5), true);
            return;
        }

        await base.OnInitializedAsync().ContinueWith((t) => { IsLoading = false; });
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Common methods

    private async Task LoadAllDataComboboxAsync()
    {
        if (CurrentViewMode == IncidentalViewMode.Tsumi)
        {
            LoadTsumiList = await HttpClient.GetJsonAsync<List<LoadTsumi>>(baseUrl + "/api/BookingIncidental/LoadTsumi?tenantId=" + new ClaimModel().TenantID);
        }
        else if (CurrentViewMode == IncidentalViewMode.Futai)
        {
            LoadFutaiList = await HttpClient.GetJsonAsync<List<LoadFutai>>(baseUrl + "/api/BookingIncidental/LoadFutai?tenantId=" + new ClaimModel().TenantID);
        }
        LoadNyuRyokinNameList = await HttpClient.GetJsonAsync<List<LoadNyuRyokinName>>(baseUrl + "/api/BookingIncidental/LoadNyuRyokinName");
        LoadSeisanCdList = await HttpClient.GetJsonAsync<List<LoadSeisanCd>>(baseUrl + "/api/BookingIncidental/LoadSeisanCd");
        LoadSeisanKbnList = await HttpClient.GetJsonAsync<List<LoadSeisanKbn>>(baseUrl + "/api/BookingIncidental/LoadSeisanKbn");
        CustomerList = await HttpClient.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
        TaxTypeDataList = await HttpClient.GetJsonAsync<List<TaxTypeList>>(baseUrl + "/api/TaxType");
        LoadDouroDataList = await HttpClient.GetJsonAsync<List<LoadDouro>>(baseUrl + "/api/BookingIncidental/LoadDouro");
        SettingTaxRate = await HttpClient.GetJsonAsync<SettingTaxRate>(baseUrl + "/api/BookingIncidental/SettingTaxRate");
    }

    private void LoadSelectedDataCombobox()
    {
        if (LoadSeisanKbnList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadSeisanKbn =
                    LoadSeisanKbnList.SingleOrDefault(s => byte.Parse(s.CodeKbn) == byte.Parse(futtum.SelectedLoadSeisanKbn.CodeKbn));
            }
        }
        if (LoadSeisanCdList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadSeisanCd =
                    LoadSeisanCdList.SingleOrDefault(s => s.SeisanCdSeq == futtum.SelectedLoadSeisanCd.SeisanCdSeq);
            }
        }
        if (CustomerList != null)
        {
            if (!CustomerList.Any(_ => _ == null))
                CustomerList.Insert(0, null); //insert empty object for option: not select

            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];

                if (futtum.SelectedCustomer != null && futtum.SelectedCustomer.SitenCdSeq != 0 && futtum.SelectedCustomer.TokuiSeq != 0)
                {
                    futtum.SelectedCustomer =
                        CustomerList.Skip(1).SingleOrDefault(s => s.SitenCdSeq == futtum.SelectedCustomer.SitenCdSeq && s.TokuiSeq == futtum.SelectedCustomer.TokuiSeq);
                }
                else
                {
                    futtum.SelectedCustomer = CustomerList.FirstOrDefault();
                }
            }
        }
        if (LoadNyuRyokinNameList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadNyuRyokinName =
                    LoadNyuRyokinNameList.SingleOrDefault(s => s.RyokinCd == futtum.SelectedLoadNyuRyokinName.RyokinCd && s.RyokinTikuCd == futtum.SelectedLoadNyuRyokinName.RyokinTikuCd);

                futtum.SelectedLoadShuRyokin =
                    LoadNyuRyokinNameList.SingleOrDefault(s => s.RyokinCd == futtum.SelectedLoadShuRyokin.RyokinCd && s.RyokinTikuCd == futtum.SelectedLoadShuRyokin.RyokinTikuCd);
            }
        }
        if (TaxTypeDataList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.TaxType =
                    TaxTypeDataList.SingleOrDefault(s => s.IdValue == futtum.TaxType.IdValue);
                futtum.SirTaxType =
                    TaxTypeDataList.SingleOrDefault(s => s.IdValue == futtum.SirTaxType.IdValue);
            }
        }
        if (FutaiScheduleList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.ScheduleDate =
                    FutaiScheduleList.SingleOrDefault(s => s.Date == futtum.ScheduleDate.Date) ?? futtum.ScheduleDate;
            }
        }
        if (CurrentViewMode == IncidentalViewMode.Futai && LoadFutaiList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadFutai =
                    LoadFutaiList.SingleOrDefault(s => s.FutaiCdSeq == futtum.SelectedLoadFutai.FutaiCdSeq);

            }
        }
        else if (CurrentViewMode == IncidentalViewMode.Tsumi && LoadTsumiList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadTsumi =
                        LoadTsumiList.SingleOrDefault(s => s.CodeKbnSeq == futtum.SelectedLoadTsumi.CodeKbnSeq);
            }
        }
    }

    private List<ScheduleSelectorModel> GetFutaiScheduleList(IncidentalBooking incidental)
    {
        return ScheduleHelper.GetScheduleSelectorList(incidental.HaiSYmd, incidental.TouYmd, incidental.IsPreviousDay, incidental.IsAfterDay);
    }

    protected bool IsEnableSubmitButton()
    {
        if (IsDisableEdit)
        {
            return false;
        }
        if (ShowFormCreateFuttum || IncidentalBookingData.LoadFuttumList.Any(f => f.Editing))
        {
            return false;
        }
        var result = FormContext.IsModified() && FormContext.Validate();
        return result;
    }

    private void HandleClosePopupInfoAfterSubmit()
    {
        IsShowPopupInfo = false;
        IsShowPopupError = false;
        StateHasChanged();
    }

    private async Task<IncidentalBooking> LoadBookingIncidentalDataAsync()
    {
        try
        {
            string uri = string.Format("{0}/api/BookingIncidental?ukeNo={1}&viewMode={2}", baseUrl, UkeNo, CurrentViewMode);
            var response = await HttpClient.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<IncidentalBooking>(await response.Content.ReadAsStringAsync());
            }
            else
            {
                return null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
    }

    private async Task<List<BookingDisableEditState>> LoadBookingEditableStateAsync(string ukeNo)
    {
        try
        {
            string uri = string.Format("{0}/api/BookingInput/DisabledBookingStateList?ukeNo={1}", baseUrl, ukeNo);
            var response = await HttpClient.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<List<BookingDisableEditState>>(await response.Content.ReadAsStringAsync());
            }
            else
            {
                return null;
            }
        }
        catch (Exception)
        {
            return null;
        }
    }

    #endregion

    protected void HandleCreateFuttum()
    {
        if (IsDisableEdit == false && ShowFormCreateFuttum == false)
        {
            IncidentalBookingData.LoadFuttumList.ForEach(f => f.Editing = false);

            SelectedLoadFuttumItem = new LoadFuttum();
            SelectedLoadFuttumItem.FirstLoad = false;
            SelectedLoadFuttumItem.Index = IncidentalBookingData.LoadFuttumList.Select(f => f.Index).DefaultIfEmpty(0).Max(index => index + 1);
            SelectedLoadFuttumItem.FutTumRen = ++IncidentalBookingData.FuttumRenMax;

            SelectedLoadFuttumItem.FuttumKbnMode = CurrentViewMode;
            SelectedLoadFuttumItem.SelectedLoadSeisanKbn = LoadSeisanKbnList.FirstOrDefault();
            if (CurrentViewMode == IncidentalViewMode.Futai)
            {
                SelectedLoadFuttumItem.TaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == Constants.ForeignTax.IdValue);
                SelectedLoadFuttumItem.SirTaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == Constants.ForeignTax.IdValue);
            }
            else
            {
                SelectedLoadFuttumItem.TaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == IncidentalBookingData.DefaultLoadedItemTaxType);
                SelectedLoadFuttumItem.SirTaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == IncidentalBookingData.DefaultLoadedItemTaxType);
            }

            SelectedLoadFuttumItem.ScheduleDate = FutaiScheduleList.FirstOrDefault();
            foreach (var item in IncidentalBookingData.SettingQuantityList)
            {
                if (SelectedLoadFuttumItem.ScheduleDate.Date.IsInRange(item.GarageLeaveDate, item.GarageReturnDate))
                {
                    var settingQuantity = new SettingQuantity();
                    settingQuantity.SimpleCloneProperties(item);
                    SelectedLoadFuttumItem.SettingQuantityList.Add(settingQuantity);
                }
            }

            SelectedLoadFuttumItem.DefaultTaxRate = SettingTaxRate.GetTaxRate(IncidentalBookingData.HaiSYmd);
            SelectedLoadFuttumItem.Zeiritsu = SelectedLoadFuttumItem.DefaultTaxRate.ToString();
            SelectedLoadFuttumItem.SirZeiritsu = SettingTaxRate.GetTaxRate(IncidentalBookingData.HaiSYmd).ToString();
            SelectedLoadFuttumItem.TesuRitu = IncidentalBookingData.DefaultFutaiChargeRate.ToString();
            SelectedLoadFuttumItem.RoundType = IncidentalBookingData.RoundType;

            ShowFormCreateFuttum = true;
        }
    }

    protected void HandleAddFuttum()
    {
        IncidentalBookingData.LoadFuttumList.Add(SelectedLoadFuttumItem);
        SelectedLoadFuttumItem.EditState = FormEditState.Added;
        FormContext.NotifyFieldChanged(() => IncidentalBookingData.LoadFuttumList);
        ShowFormCreateFuttum = false;
        StateHasChanged();
    }

    protected void HandleCancelCreateFuttum(int index)
    {
        ShowFormCreateFuttum = false;
        StateHasChanged();
    }

    protected void HandleEditFuttum(int index)
    {
        if (IsDisableEdit == false)
        {
            IncidentalBookingData.LoadFuttumList.ForEach(f => f.Editing = false);
            HandleCancelCreateFuttum(index);

            var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == index);
            selectedFuttum.DefaultTaxRate = SettingTaxRate.GetTaxRate(IncidentalBookingData.HaiSYmd);
            selectedFuttum.Editing = true;
            StateHasChanged();
        }
    }

    protected void HandleSaveEditFuttum(int index)
    {
        var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == index);
        selectedFuttum.Editing = false;
        selectedFuttum.EditState = selectedFuttum.EditState == FormEditState.Added ? FormEditState.Added : FormEditState.Edited;
        FormContext.NotifyFieldChanged(() => IncidentalBookingData.LoadFuttumList);
        StateHasChanged();
    }

    protected void HandleCancelEditFuttum(int index)
    {
        var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == index);
        selectedFuttum.Editing = false;
        StateHasChanged();
    }

    protected void HandleDeleteFuttum(int index)
    {
        if (IsDisableEdit == false)
        {
            var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == index);
            if (selectedFuttum.CanDelete)
            {
                indexToDelete = index;
                ShowPopupConfirmDelete = true;
            }
            else
            {
                IsShowPopupInfo = true;
                PopupTitle = PopupTitleInfo;
                PopupInfoContent = CannotDeleteFuttumMessage;
                OnClosePopup = () =>
                {
                    IsShowPopupInfo = false;
                    IsShowPopupError = false;
                    InvokeAsync(StateHasChanged);
                };
            }
            StateHasChanged();
        }
    }

    protected void OnConfirmDelete()
    {
        var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == indexToDelete);

        // check if create new then delete
        if (selectedFuttum.EditState == FormEditState.Added)
        {
            IncidentalBookingData.FuttumRenMax -= 1;
        }

        IncidentalBookingData.LoadFuttumList.Remove(selectedFuttum);
        FormContext.NotifyFieldChanged(() => IncidentalBookingData.LoadFuttumList);

        ShowPopupConfirmDelete = false;
        StateHasChanged();
    }

    protected void OnClosePopupConfirmDelete()
    {
        ShowPopupConfirmDelete = false;
        StateHasChanged();
    }

    protected async Task HandleValidSubmitAsync()
    {
        if (FormContext.Validate())
        {
            var maxUpdYmd = await _service.FutTumMishumMaxUpdYmdTimeAsync(UkeNo, CurrentViewMode);
            isHaitaValid = _maxUpdYmd.FutTumMaxUpdYmdTime == maxUpdYmd.FutTumMaxUpdYmdTime && _maxUpdYmd.MishumMaxUpdYmdTime == maxUpdYmd.MishumMaxUpdYmdTime;
            if (!isHaitaValid)
            {
                StateHasChanged();
                return;
            }

            HttpResponseMessage response = new HttpResponseMessage();
            if (IncidentalBookingData.IsEditMode)
            {
                var requstUri = string.Format("{0}/api/BookingIncidental/{1}", baseUrl, UkeNo);
                response = await HttpClient.PutJsonAsync(requstUri, IncidentalBookingData);
            }
            else
            {
                var requstUri = string.Format("{0}/api/BookingIncidental/{1}", baseUrl, UkeNo);
                response = await HttpClient.PostJsonAsync(requstUri, IncidentalBookingData);
            }

            if (response.IsSuccessStatusCode)
            {
                IsShowPopupInfo = true;
                PopupInfoContent = UpdateFuttumSucces;
                PopupTitle = PopupTitleInfo;
            }
            else
            {
                IsShowPopupError = true;
                PopupInfoContent = UpdateFail;
                PopupTitle = PopupTitleInfo;
            }
            var incidentalDb = await LoadBookingIncidentalDataAsync();
            if (incidentalDb != null)
            {
                IncidentalBookingData = incidentalDb;
                _maxUpdYmd = await _service.FutTumMishumMaxUpdYmdTimeAsync(UkeNo, CurrentViewMode);
                IncidentalBookingData.LoadFuttumList = incidentalDb.LoadFuttumList.Where(f => f.FuttumKbnMode == CurrentViewMode).ToList();
                FutaiScheduleList = GetFutaiScheduleList(incidentalDb);

                LoadSelectedDataCombobox();
                FormContext.MarkAsUnmodified();
            }
            else
            {
                NavManager.NavigateTo("/", true);
            }
            OnClosePopup = HandleClosePopupInfoAfterSubmit;
            await InvokeAsync(StateHasChanged);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomNavigation NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient HttpClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<Futai> Lang { get; set; }
    }
}
#pragma warning restore 1591
