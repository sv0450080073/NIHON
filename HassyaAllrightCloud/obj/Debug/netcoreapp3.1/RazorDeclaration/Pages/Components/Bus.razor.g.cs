#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\Bus.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b680ca06e6c47e7d1c6e59f5c75587f4b88acb58"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
    public partial class Bus : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 622 "E:\Project\HassyaAllrightCloud\Pages\Components\Bus.razor"
      
    [Inject] public IBusScheduleService _busScheduleService { get; set; }
    CultureInfo ci = new CultureInfo("ja-JP");
    public int type { get; set; }
    [Parameter] public ConfigBusSchedule Param { get; set; }
    [Parameter] public DateTime Date { get; set; }
    [Parameter] public List<BusDataType> Busnames { get; set; }
    [Parameter] public List<BusDataType> Busgreen { get; set; }
    [Parameter] public List<BusDataType> Busgray { get; set; }
    [Parameter] public List<BusInfoData> BusInfo { get; set; }
    [Parameter] public List<TKD_ShuriData> Busrepair { get; set; }
    [Parameter] public List<ItemBus> Businsert { get; set; }
    [Parameter] public List<TkdCalend> Calendlst { get; set; }
    [Parameter] public VPM_RepairData CodeKbnItem { get; set; }
    [Parameter] public double Width { get; set; }
    [Parameter] public List<ItemBus> BusLines { get; set; }
    [Parameter] public EventCallback<string> OnRowUpdated { get; set; }
    [Parameter] public EventCallback<string> OnClickDateComment { get; set; }
    [Parameter] public List<KyoSHeDatabyDate> listKyoSHebyDate { get; set; }
    //[Parameter] public EventCallback<List<ItemBus>> Activesave { get; set; }
    [Parameter] public EventCallback<ItemBus> OnShowContextMenuUpdated { get; set; }
    [Parameter] public EventCallback<ItemBus> updateitem { get; set; }
    [Parameter] public int GroupID { get; set; }
    [Parameter] public IEnumerable<BranchChartData> SelectedBranchItems { get; set; }
    [Parameter] public List<ResponseHaiTaCheck> UpYmdTimes { get; set; }
    public List<ResponseHaiTaCheck> UpYmdTimeTmps { get; set; }
    [Parameter] public EventCallback<DataInit> ValueCheckHaitaBusSchedule { get; set; }
    public int linestatus { get; set; }
    public string color { get; set; } = "#000";
    string commentClass = "";

    public async Task HandleUpdateLineCut(string text)
    {
        await OnRowUpdated.InvokeAsync(text);
    }

    public async Task HandleShowMenu(ItemBus item)
    {
        await OnShowContextMenuUpdated.InvokeAsync(item);
    }

    public string GetheaderColor(string date)
    {
        if (Calendlst.Count != 0 && Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date).Any())
        {
            string commentdate = Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date).FirstOrDefault().CalenCom;
            if (commentdate != "" && commentdate.Length <= 100)
            {
                color = "#8533ff";
            }
            else
            {
                color = "#000";
            }
        }
        else
        {
            color = "#000";
        }
        return color;
    }

    public string GetheaderText(DateTime date)
    {
        string datestr = date.ToString("yyyyMMdd");
        int countbusname = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7).Select(x => x.BusID).Count();
        int countbusnameLarge = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 1).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 1).Select(x => x.BusID).Count();
        int countbusnameMedium = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 2).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 2).Select(x => x.BusID).Count();
        int countbusnameSmall = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 3).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 3).Select(x => x.BusID).Count();

        if (countbusname != 0)
        {
            int a = countbusname;
        }
        int countbus = 0;
        int countbusrp = 0;
        int countbusLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusSmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countbusgrayLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusgrayMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusgraySmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countbusrpLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusrpMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusrpSmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countBusdriver = 0;
        int countBusguider = 0;
        int countBusdriveroff = 0;
        int countBusguieroff = 0;
        int countbusdriveruse = 0;
        int countbusguideruse = 0;

        int countBusdriverNew = 0;
        int countBusguiderNew = 0;
        int countBusdriverLarge = 0;
        int countBusdriverMedium = 0;
        int countBusdriverSmall = 0;
        int countBusdriverLargeNew = 0;
        int countBusdriverMediumNew = 0;
        int countBusdriverSmallNew = 0;
        int countBusdriveroffLarge = 0;
        int countBusdriveroffMedium = 0;
        int countBusdriveroffSmall = 0;
        int countbusdriverwork = 0;
        int countbusdriverholiday = 0;
        int countbusdriverpublic = 0;

        List<int> listbranch = new List<int>();
        if (SelectedBranchItems != null)
        {
            listbranch = SelectedBranchItems.Select(t => t.EigyoCdSeq).ToList();
        }

        /*Update by M*/
        if (Param.ActiveG == (int)GroupMode.All)
        {

            countbusLarge = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId) || t.KSKbn == 1) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId) || t.KSKbn == 1) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId) || t.KSKbn == 1) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();

            countbusgrayLarge = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7).Select(x => x.BusLine).Distinct().Count();
            countbusgrayMedium = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7).Select(x => x.BusLine).Distinct().Count();
            countbusgraySmall = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7).Select(x => x.BusLine).Distinct().Count();
        }
        else if (Param.ActiveG == (int)GroupMode.Branch)
        {
            countbusLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
        }
        else
        {
            countbusLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
        }
        /*END*/
        if (Param.ActiveG == (int)GroupMode.All)
        {
            var busitem = BusLines.Where(t => t.YouTblSeq == 0 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId) || t.KSKbn == 1) && t.SyaRyo_NinKaKbn != 7 && t.BusLine != "0").ToList();
            countbus = busitem.Where(t => t.IsBusRepair == false).Select(t => t.BusLine).Distinct().Count();
            countbusrp = busitem.Where(t => t.IsBusRepair == true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {

                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem = listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    countBusdriver = listKyoSHebyDateitem.Where(t => t.SyokumuKbn == 1 || t.SyokumuKbn == 2).Count();
                    countBusguider = listKyoSHebyDateitem.Where(t => t.SyokumuKbn == 3 || t.SyokumuKbn == 4).Count();
                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.SmallTypeDrivingFlg == 1).Count();

                    countBusdriverNew = haishadrgdDataitem.Sum(t => t.allDrivers);
                    countBusguiderNew = haishadrgdDataitem.Sum(t => t.allGuides);
                    countBusdriverLargeNew = haishadrgdDataitem.Sum(t => t.largeDriver);
                    countBusdriverMediumNew = haishadrgdDataitem.Sum(t => t.MediumDriver);
                    countBusdriverSmallNew = haishadrgdDataitem.Sum(t => t.SmallDriver);
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }
        else if (Param.ActiveG == (int)GroupMode.Branch)
        {
            var busitem = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.SyaRyo_NinKaKbn != 7 && t.BusLine != "0").ToList();
            countbus = busitem.Where(t => t.IsBusRepair == false).Select(t => t.BusLine).Distinct().Count();
            countbusrp = busitem.Where(t => t.IsBusRepair == true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {
                List<TPM_KyoSHeData> busdriver = new List<TPM_KyoSHeData>();
                List<TPM_KyoSHeData> busguider = new List<TPM_KyoSHeData>();
                List<int> busdriverlst = new List<int>();
                List<int> busguiderlst = new List<int>();
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem = listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    busdriver = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID).ToList();
                    busguider = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 3 || t.SyokumuKbn == 4) && t.EigyoCdSeq == GroupID).ToList();
                    busdriverlst = busdriver.Select(t => t.SyainCdSeq).ToList();
                    busguiderlst = busguider.Select(t => t.SyainCdSeq).ToList();
                    countBusdriver = busdriver.Count();
                    countBusguider = busguider.Count();

                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.SmallTypeDrivingFlg == 1).Count();

                    countBusdriverNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.allDrivers);
                    countBusguiderNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.allGuides);
                    countBusdriverLargeNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.largeDriver);
                    countBusdriverMediumNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.MediumDriver);
                    countBusdriverSmallNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.SmallDriver);
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }
        else
        {
            var busitem = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.SyaRyo_NinKaKbn != 7 && t.BusLine != "0").ToList();
            countbus = busitem.Where(t => t.IsBusRepair == false).Select(t => t.BusLine).Distinct().Count();
            countbusrp = busitem.Where(t => t.IsBusRepair == true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {
                List<TPM_KyoSHeData> busdriver = new List<TPM_KyoSHeData>();
                List<TPM_KyoSHeData> busguider = new List<TPM_KyoSHeData>();
                List<int> busdriverlst = new List<int>();
                List<int> busguiderlst = new List<int>();
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem = listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    busdriver = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID).ToList();
                    busguider = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 3 || t.SyokumuKbn == 4) && t.CompanyCdSeq == GroupID).ToList();
                    busdriverlst = busdriver.Select(t => t.SyainCdSeq).ToList();
                    busguiderlst = busguider.Select(t => t.SyainCdSeq).ToList();
                    countBusdriver = busdriver.Count();
                    countBusguider = busguider.Count();

                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.SmallTypeDrivingFlg == 1).Count();

                    countBusdriverNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.allDrivers);
                    countBusguiderNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.allGuides);
                    countBusdriverLargeNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.largeDriver);
                    countBusdriverMediumNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.MediumDriver);
                    countBusdriverSmallNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.SmallDriver);
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }

        object tooltip = new Object();
        tooltip = "<div class=\"d-flex\"><div>空台数：</div><div>";
        tooltip += "<div>" + (countbusnameLarge - countbusLarge - countbusrpLarge - countbusgrayLarge) + "台　大型（" + (countbusLarge + countbusgrayLarge) + "/" + (countbusnameLarge - countbusrpLarge) + "）</div>";
        tooltip += "<div>" + (countbusnameMedium - countbusMedium - countbusrpMedium - countbusgrayMedium) + "台　中型（" + (countbusMedium + countbusgrayMedium) + "/" + (countbusnameMedium - countbusrpMedium) + "）</div>";
        tooltip += "<div>" + (countbusnameSmall - countbusSmall - countbusrpSmall - countbusgraySmall) + "台　小型（" + (countbusSmall + countbusgraySmall) + "/" + (countbusnameSmall - countbusrpSmall) + "）</div>";
        tooltip += "</div></div>";

        object tooltipDriver = new Object();
        tooltipDriver = "<div class=\"d-flex\"><div>空運転手：</div><div>";
        tooltipDriver += "<div>大型　" + (countBusdriverLarge - countBusdriveroffLarge - countBusdriverLargeNew).ToString() + "人（" + countBusdriverLargeNew.ToString() + "/" + (countBusdriverLarge - countBusdriveroffLarge).ToString() + "）</div>";
        tooltipDriver += "<div>中型　" + (countBusdriverMedium - countBusdriveroffMedium - countBusdriverMediumNew).ToString() + "人（" + countBusdriverMediumNew.ToString() + "/" + (countBusdriverMedium - countBusdriveroffMedium).ToString() + "）</div>";
        tooltipDriver += "<div>小型　" + (countBusdriverSmall - countBusdriveroffSmall - countBusdriverSmallNew).ToString() + "人（" + countBusdriverSmallNew.ToString() + "/" + (countBusdriverSmall - countBusdriveroffSmall).ToString() + "）</div>";
        tooltipDriver += "</div></div><div>勤務：" + countbusdriverwork.ToString() + "人　休日：" + countbusdriverholiday.ToString() + "人　公出：" + countbusdriverpublic.ToString() + "人</div>";

        return "<a href='javascript:void(0)' data-toggle='tooltip' data-html='true' data-placement='right' data-original-title='" + tooltip + "'>空台数：" + (countbusname - countbus - countbusrp).ToString() + "台（" + countbus + "/" + (countbusname - countbusrp) + "）</a>" +
                "<a href='javascript:void(0)' data-toggle='tooltip' data-html='true' data-placement='right' data-original-title='" + tooltipDriver + "'>空運転手：" + (countBusdriverLarge - countBusdriveroffLarge - countBusdriverNew).ToString() + "人（" + countBusdriverNew.ToString() + "/" + (countBusdriverLarge - countBusdriveroffLarge).ToString() + "）</a>" +
                "<div>空ガイド：" + (countBusguider - countbusguideruse - countBusguieroff).ToString() + "人（" + (countbusguideruse).ToString() + "/" + (countBusguider - countBusguieroff) + "）</div>";
    }

    public async Task HandlerStatusUpdated(ItemBus updatedBus)
    {
        try
        {
            if (updatedBus.BusLine == "-4" || updatedBus.BusLine == "-5" || updatedBus.BusLine == "-6" || updatedBus.BusVehicle == 2)
            {

                //await OnRowUpdated.InvokeAsync("reloadgird");
                await updateitem.InvokeAsync(updatedBus);
            }
            else if (updatedBus.BusLine == "-1" || updatedBus.BusLine == "-2" || updatedBus.BusLine == "-3" || updatedBus.BusVehicle == 1)
            {
                await updateitem.InvokeAsync(updatedBus);
            }
            else if (updatedBus.BookingId != "0")
            {
                await updateitem.InvokeAsync(updatedBus);
                //TKD_HaishaDataService.Updatebusdata(updatedBus, 1);
                //await OnRowUpdated.InvokeAsync("reloadgird");
            }
            else
            {
                DateTime datestart = busScheduleHelper.convertwidthtodate(Width, updatedBus.Left, Param.Number_of_days, Date);
                updatedBus.StartDate = datestart.ToString("yyyyMMdd");
                updatedBus.TimeStart = int.Parse(datestart.ToString("HHmm"));
                DateTime dateend = busScheduleHelper.convertwidthtodate(Width, updatedBus.Left + updatedBus.Width, Param.Number_of_days, Date);
                updatedBus.EndDate = dateend.ToString("yyyyMMdd");
                updatedBus.TimeEnd = int.Parse(dateend.ToString("HHmm"));
                updatedBus.SyaSyuCdSeq = BusInfo.Where(t => t.SyaRyoCdSeq.ToString() == updatedBus.BusLine).First().SyaSyuCdSeq;
                updatedBus.KikEigSeq = BusInfo.Where(t => t.SyaRyoCdSeq.ToString() == updatedBus.BusLine).First().EigyoCdSeq;
                updatedBus.SyuEigCdSeq = BusInfo.Where(t => t.SyaRyoCdSeq.ToString() == updatedBus.BusLine).First().EigyoCdSeq;
                updatedBus.YykSyu_KataKbn = BusInfo.Where(t => t.SyaRyoCdSeq.ToString() == updatedBus.BusLine).First().KataKbn;
                Businsert.Add(updatedBus);
                //await Activesave.InvokeAsync(Businsert);
            }
        }
        catch (Exception ex)
        {
            await OnRowUpdated.InvokeAsync("reloadgird");
        };
        for (var i = 0; i < Busnames.Count; i++)
        {
            if (Busnames[i].BusID != updatedBus.BusLine)
            {
                Busnames[i].BusHeight = 0;
            }
        }
        for (var i = 0; i < Busgreen.Count; i++)
        {
            if (i < Busnames.Count && Busnames[i].BusID != updatedBus.BusLine)
            {
                Busnames[i].BusHeight = 0;
            }
        }
        for (var i = 0; i < Busgray.Count; i++)
        {
            if (i < Busnames.Count && Busnames[i].BusID != updatedBus.BusLine)
            {
                Busnames[i].BusHeight = 0;
            }
        }
    }

    private void ReupdateLineBusHeight(BusLineData busheight)
    {
        for (var i = 0; i < Busnames.Count; i++)
        {
            if (Busnames[i].BusID == busheight.LineID)
            {
                Busnames[i].BusHeight = busheight.LineHeight;
                break;
            }
        }

        for (var i = 0; i < Busgreen.Count; i++)
        {
            if (Busgreen[i].BusID == busheight.LineID)
            {
                Busgreen[i].BusHeight = busheight.LineHeight;
                break;
            }
        }

        for (var i = 0; i < Busgray.Count; i++)
        {
            if (Busgray[i].BusID == busheight.LineID)
            {
                Busgray[i].BusHeight = busheight.LineHeight;
                break;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "customScrollbar");
        await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "TooltipNumberDriver");
    }

    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent");
        if (Param.ActiveS1 == (int)SortVehicleLineMode.Model_Branch)
        {
            Busnames = Busnames.OrderBy(x => x.SyaSyuCd).ThenBy(x => x.EigyoCd).ToList();
        }
        else if (Param.ActiveS1 == (int)SortVehicleLineMode.Model_Vehicle)
        {
            Busnames = Busnames.OrderBy(x => x.SyaSyuCd).ThenBy(x => x.SyaRyoCd).ToList();
        }
        else if (Param.ActiveS1 == (int)SortVehicleLineMode.Branch_Vehicle)
        {
            Busnames = Busnames.OrderBy(x => x.EigyoCd).ThenBy(x => x.SyaRyoCd).ToList();
        }
        else if (Param.ActiveS1 == (int)SortVehicleLineMode.Branch_Model)
        {
            Busnames = Busnames.OrderBy(x => x.EigyoCd).ThenBy(x => x.SyaSyuCd).ToList();
        }
        else if (Param.ActiveS1 == (int)SortVehicleLineMode.Rollcall)
        {
            Busnames = Busnames.OrderBy(x => x.TenkoNo).ToList();
        }

        List<string> buslineid = BusLines.Select(t => t.BusLine).ToList();

        foreach (var i in Busnames)
        {
            if (Param.ActiveS2 == (int)SortVehicleNameMode.Model_Vehicle)
            {
                i.BusName = i.SyaSyuNm + "－" + i.SyaRyoNm;
            }
            else if (Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Model)
            {
                i.BusName = i.RyakuNm + "－" + i.SyaSyuNm;
            }
            else if (Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Temporary_Vehicle)
            {
                i.BusName = i.RyakuNm + "－" + i.KariSyaRyoNm;
            }
            else if (Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Vehicle)
            {
                i.BusName = i.RyakuNm + "－" + i.SyaRyoNm;
            }

            if (DateTime.Compare(Date, DateTime.ParseExact(i.StaYmd, "yyyyMMdd", CultureInfo.InvariantCulture)) >= 0 && DateTime.Compare(Date, DateTime.ParseExact(i.EndYmd, "yyyyMMdd", CultureInfo.InvariantCulture)) < 0)
            {
                i.IsOutOfDate = false;
            }
            else
            {
                i.IsOutOfDate = true;
            }
            if (buslineid.ToArray().Contains(i.BusID))
            {
                if (Busnames.Where(t => t.BusID == i.BusID).Count() > 1)
                {
                    if (i.IsOutOfDate == true)
                    {
                        i.IsHasBooking = false;
                    }
                    else
                    {
                        i.IsHasBooking = true;
                    }
                }
                else
                { i.IsHasBooking = true; }
            }
            else
            {
                i.IsHasBooking = false;
            }
        }

        if (Param.ActiveR == 0)
        {
            BusLines = BusLines.ToList();
        }
        else if (Param.ActiveR != 0)
        {
            BusLines = BusLines.Where(t => t.BookingType == Param.ActiveR || t.IsBusRepair == true).ToList();
        }

        List<string> busid = Busnames.Where(x => x.IsOutOfDate == false).Select(x => x.BusID).ToList();
        List<BusDataType> busnameexpried = Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking).ToList();
        foreach (var i in busnameexpried)
        {
            if (busid.ToArray().Contains(i.BusID))
            {
                i.IsActive = true;
            }
            else
            {
                if (busnameexpried.Where(x => x.BusID == i.BusID).Count() > 1)
                {
                    i.IsActive = true;
                    busnameexpried.Where(x => x.BusID == i.BusID).First().IsActive = true;
                }
                else
                {
                    i.IsActive = true;
                }
            }
        }

        List<string> busnameid = Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive).Select(t => t.BusID).ToList();
        foreach (var i in BusLines)
        {
            i.Width = busScheduleHelper.calwidth(Width, i.StartDate, i.TimeStart.ToString("D4"), i.EndDate, i.TimeEnd.ToString("D4"), Param.Number_of_days);
            i.Left = busScheduleHelper.calleft(Width, i.StartDate, i.TimeStart.ToString("D4"), Param.Number_of_days, Date);
            i.WidthDefault = busScheduleHelper.calwidth(Width, i.StartDateDefault, i.TimeStartDefault.ToString("D4"), i.EndDateDefault, i.TimeEndDefault.ToString("D4"), Param.Number_of_days);
            i.LeftDefault = busScheduleHelper.calleft(Width, i.StartDateDefault, i.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - busScheduleHelper.calleft(Width, i.StartDate, i.TimeStart.ToString("D4"), Param.Number_of_days, Date);

            if (i.BookingId == "0")
            {
                i.Name = i.Text.ToString();
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.Custom)
            {
                i.Name = i.Text.ToString();
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.Organization)
            {
                i.Name = i.DanTaNm;
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.Destination)
            {
                i.Name = i.IkNm;
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.Customer)
            {
                i.Name = i.TokiSk_RyakuNm + "　" + i.TokiSt_RyakuNm;
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.None)
            {
                i.Name = "";
            }

            if (busnameid.ToArray().Contains(i.BusLine))
            {
                i.AllowEdit = true;
            }
        }

        if (Param.ActiveL == (int)LineDrawMode.Normal)
        {
            type = 0;
        }
        else if (Param.ActiveL == (int)LineDrawMode.RentalBus)
        {
            type = 1;
        }
        else if (Param.ActiveL == (int)LineDrawMode.SpareBus)
        {
            type = 2;
        }
        else if (Param.ActiveL == (int)LineDrawMode.All)
        {
            type = 3;
        }

        if (Calendlst.Count != 0 && Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == Date.ToString("yyyyMMdd")).Any())
        {
            string commentdate = Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == Date.ToString("yyyyMMdd")).FirstOrDefault().CalenCom;
            if (commentdate != "" && commentdate.Length <= 100)
            {
                commentClass = "hascomment";
            }
            else
            {
                commentClass = "nocomment";
            }
        }
        else
        {
            commentClass = "nocomment";
        }
        //GetUpdYmdInit().Wait();
        UpYmdTimeTmps = UpYmdTimes;
    }

    async Task HandleMouseWheel()
    {
        await blazorContextMenuService.HideMenu("myMenuBusRepair");
        await blazorContextMenuService.HideMenu("myMenuCutline");
        await blazorContextMenuService.HideMenu("menuDate");
    }

    public void HandleStatusRemove(ItemBus updatedBus)
    {
        Businsert.Remove(updatedBus);
    }

    public string GetCommentDate(DateTime date)
    {
        if (Calendlst.Count != 0 && Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date.ToString("yyyyMMdd")).Any())
        {
            string commentdate = Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date.ToString("yyyyMMdd")).FirstOrDefault().CalenCom;
            if (commentdate != "" && commentdate.Length <= 100)
            {
                return commentdate;
            }
            else
            {
                return "";
            }
        }
        else
        {
            return "";
        }
    }

    public async Task ValueCheckHaitaBus(DataInit item)
    {
        await ValueCheckHaitaBusSchedule.InvokeAsync(item);
    }

    protected async Task GetUpdYmdInit()
    {
        if (BusLines.Any())
        {
            var dataParam = BusLines?.Select(_ => new ParamHaiTaCheck
            {
                UkeNo = _.BookingId,
                UnkRen = _.haUnkRen,
                TeiDanNo = _.TeiDanNo,
                BunkRen = _.BunkRen,
                SyaSyuRen = _.SyaSyuRen
            }).ToList();
            if (dataParam.Any())
                UpYmdTimeTmps = await _busScheduleService.GetUpYmdTimes(dataParam);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BusSchedule> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CalendDataListService TPM_CalendDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorContextMenuService blazorContextMenuService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper busScheduleHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_HaishaDataListService TKD_HaishaDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
