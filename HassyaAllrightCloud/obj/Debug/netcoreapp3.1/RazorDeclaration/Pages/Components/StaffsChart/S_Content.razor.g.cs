#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\StaffsChart\S_Content.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5635dfdda5d6f58cb575735200feda9a63d91f42"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components.StaffsChart
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
    public partial class S_Content : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 279 "E:\Project\HassyaAllrightCloud\Pages\Components\StaffsChart\S_Content.razor"
       
    [CascadingParameter] S_Container Container { get; set; }
    [Parameter] public ConfigStaffsChart Param { get; set; }
    [Parameter] public DateTime Date { get; set; }
    [Parameter] public double Width { get; set; }
    [Parameter] public List<StaffData> StaffsName { get; set; }
    [Parameter] public List<StaffData> StaffsNameUnassigned { get; set; }
    [Parameter] public List<ItemStaff> StaffsLines { get; set; }
    [Parameter] public EventCallback<string> OnClickDateComment { get; set; }
    [Parameter] public List<TkdCalend> Calendlst { get; set; }
    [Parameter] public EventCallback<ItemStaff> OnShowContextMenuUpdated { get; set; }
    [Parameter] public List<KyoSHeDatabyDate> listKyoSHebyDate { get; set; }
    [Parameter] public EventCallback<string> OnRowUpdated { get; set; }
    [Parameter] public IEnumerable<BranchChartData> SelectedBranchItems { get; set; }
    [Parameter] public List<ItemBus> BusLines { get; set; }
    [Parameter] public List<BusDataType> Busnames { get; set; }
    [Parameter] public VpmKinKyuData CodeKbnItem { get; set; }
    CultureInfo ci = new CultureInfo("ja-JP");
    [Parameter] public int GroupID { get; set; }
    string commentClass;
    string commentdate;
    string color { get; set; } = "#000";

    #region Component Lifecycle
    /// <summary>
    /// Load javascript of page
    /// </summary>
    /// <returns></returns>
    protected override void OnParametersSet()
    {

        // 乗務員並び
        if (Param.OrderbyList == (int)Staffs_OrderbyList.DutyEmployee)
        {
            StaffsName = StaffsName.OrderBy(x => x.SyokumuCdSeq).ThenBy(x => x.SyainCdSeq).ToList();
        }
        if (Param.OrderbyList == (int)Staffs_OrderbyList.BranchEmployee)
        {
            StaffsName = StaffsName.OrderBy(x => x.EigyoCdSeq).ThenBy(x => x.SyainCdSeq).ToList();
        }
        if (Param.OrderbyList == (int)Staffs_OrderbyList.BranchJob)
        {
            StaffsName = StaffsName.OrderBy(x => x.EigyoCdSeq).ThenBy(x => x.SyokumuCdSeq).ToList();
        }
        if (Param.OrderbyList == (int)Staffs_OrderbyList.Rolling)
        {
            StaffsName = StaffsName.OrderBy(x => x.TenkoNo).ToList();
        }

        // 乗務員表示名順
        foreach (var i in StaffsName)
        {
            if (Param.OrderbyName == (int)Staffs_OrderbyName.DutyEmployee)
            {
                i.StaffName = i.SyokumuNm + "・" + i.SyainNm;
            }
            if (Param.OrderbyName == (int)Staffs_OrderbyName.BranchDuty)
            {
                i.StaffName = i.RyakuNm + "・" + i.SyokumuNm;
            }
            if (Param.OrderbyName == (int)Staffs_OrderbyName.BranchEmployee)
            {
                i.StaffName = i.RyakuNm + "・" + i.SyainNm;
            }
            if(i.IsGray==true)
            {
                i.StaffName = i.SyokumuNm;
            }
        }

        // 職務
        if (Param.Duties == (int)Staffs_Duties.All)
        {
            StaffsName = StaffsName.ToList();
        }
        if (Param.Duties == (int)Staffs_Duties.Driver)
        {
            StaffsName = StaffsName.Where(x => x.SyokumuKbn < 3).ToList();
        }
        if (Param.Duties == (int)Staffs_Duties.Guide)
        {
            StaffsName = StaffsName.Where(x => x.SyokumuKbn == 3 || x.SyokumuKbn == 4).ToList();
        }
        if (Param.Duties == (int)Staffs_Duties.OfficeWork)
        {
            StaffsName = StaffsName.Where(x => x.SyokumuKbn > 4).ToList();
        }
    }
    #endregion

    /// <summary>
    /// Get color
    /// </summary>
    /// <param name="date"></param>
    /// <returns></returns>
    public string GetheaderColor(string date)
    {
        if (Calendlst.Count != 0 && Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date).Any())
        {
            string commentdate = Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date).FirstOrDefault().CalenCom;
            if (commentdate != "" && commentdate.Length <= 100)
            {
                color = "#8533ff";
            }
            else
            {
                color = "#000";
            }
        }
        else
        {
            color = "#000";
        }
        return color;
    }

    /// <summary>
    /// Get text
    /// </summary>
    /// <param name="date"></param>
    /// <returns></returns>
    public string GetheaderText(DateTime date)
    {
        string datestr = date.ToString("yyyyMMdd");
        int countbusname = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7).Select(x => x.BusID).Count();
        int countbusnameLarge = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 1).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 1).Select(x => x.BusID).Count();
        int countbusnameMedium = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 2).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 2).Select(x => x.BusID).Count();
        int countbusnameSmall = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 3).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 3).Select(x => x.BusID).Count();

        if (countbusname != 0)
        {
            int a = countbusname;
        }
        int countbus = 0;
        int countbusrp = 0;
        int countbusLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusSmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countbusgrayLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusgrayMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusgraySmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countbusrpLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusrpMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusrpSmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countBusdriver = 0;
        int countBusguider = 0;
        int countBusdriveroff = 0;
        int countBusguieroff = 0;
        int countbusdriveruse = 0;
        int countbusguideruse = 0;

        int countBusdriverNew = 0;
        int countBusguiderNew = 0;
        int countBusdriverLarge = 0;
        int countBusdriverMedium = 0;
        int countBusdriverSmall = 0;
        int countBusdriverLargeNew = 0;
        int countBusdriverMediumNew = 0;
        int countBusdriverSmallNew = 0;
        int countBusdriveroffLarge = 0;
        int countBusdriveroffMedium = 0;
        int countBusdriveroffSmall = 0;
        int countbusdriverwork = 0;
        int countbusdriverholiday = 0;
        int countbusdriverpublic = 0;

        List<int> listbranch = new List<int>();
        if (SelectedBranchItems != null)
        {
            listbranch = SelectedBranchItems.Select(t => t.EigyoCdSeq).ToList();
        }

        /*Update by M*/
        if (Param.Grouping == (int)GroupMode.All)
        {

            countbusLarge = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId)|| t.KSKbn == 1) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x=>x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId)|| t.KSKbn == 1) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t =>  String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId)|| t.KSKbn == 1) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x=>x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId)&& t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x => x.BusLine).Distinct().Count();

            countbusgrayLarge = BusLines.Where(t =>  String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn==1 && t.SyaRyo_NinKaKbn != 7).Select(x=>x.BusLine).Distinct().Count();
            countbusgrayMedium = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn==2 && t.SyaRyo_NinKaKbn != 7).Select(x => x.BusLine).Distinct().Count();
            countbusgraySmall = BusLines.Where(t =>  String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn==3 && t.SyaRyo_NinKaKbn != 7).Select(x => x.BusLine).Distinct().Count();
        }
        else if (Param.Grouping == (int)GroupMode.Branch)
        {
            countbusLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x => x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x => x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x => x.BusLine).Distinct().Count();
        }
        else
        {
            countbusLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x => x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==false).Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x => x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair==true).Select(x => x.BusLine).Distinct().Count();
        }
        /*END*/
        if (Param.Grouping == (int)GroupMode.All)
        {
            var busitem = BusLines.Where(t => t.YouTblSeq==0 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId)||t.KSKbn==1) && t.SyaRyo_NinKaKbn != 7 && t.BusLine!="0").ToList();
            countbus = busitem.Where(t=>t.IsBusRepair==false).Select(t => t.BusLine).Distinct().Count();
            countbusrp= busitem.Where(t=>t.IsBusRepair==true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {

                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem=listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    countBusdriver = listKyoSHebyDateitem.Where(t => t.SyokumuKbn == 1 || t.SyokumuKbn == 2).Count();
                    countBusguider = listKyoSHebyDateitem.Where(t => t.SyokumuKbn == 3 || t.SyokumuKbn == 4).Count();
                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.SmallTypeDrivingFlg == 1).Count();
                    if (haishadrgdDataitem != null)
                    {
                        countBusdriverNew = haishadrgdDataitem.Sum(t => t.allDrivers);
                        countBusguiderNew = haishadrgdDataitem.Sum(t => t.allGuides);
                        countBusdriverLargeNew = haishadrgdDataitem.Sum(t => t.largeDriver);
                        countBusdriverMediumNew = haishadrgdDataitem.Sum(t => t.MediumDriver);
                        countBusdriverSmallNew = haishadrgdDataitem.Sum(t => t.SmallDriver);
                    }
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }
        else if (Param.Grouping == (int)GroupMode.Branch)
        {
            var busitem = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.SyaRyo_NinKaKbn != 7 && t.BusLine!="0").ToList();
            countbus = busitem.Where(t=>t.IsBusRepair==false).Select(t => t.BusLine).Distinct().Count();
            countbusrp= busitem.Where(t=>t.IsBusRepair==true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {
                List<TPM_KyoSHeData> busdriver = new List<TPM_KyoSHeData>();
                List<TPM_KyoSHeData> busguider = new List<TPM_KyoSHeData>();
                List<int> busdriverlst = new List<int>();
                List<int> busguiderlst = new List<int>();
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem=listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    busdriver = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID).ToList();
                    busguider = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 3 || t.SyokumuKbn == 4) && t.EigyoCdSeq == GroupID).ToList();
                    busdriverlst = busdriver.Select(t => t.SyainCdSeq).ToList();
                    busguiderlst = busguider.Select(t => t.SyainCdSeq).ToList();
                    countBusdriver = busdriver.Count();
                    countBusguider = busguider.Count();

                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.SmallTypeDrivingFlg == 1).Count();

                    if (haishadrgdDataitem != null)
                    {
                        countBusdriverNew = haishadrgdDataitem.Where(t=> t.EigyoCdSeq == GroupID && t.KSKbn==2).Sum(t => t.allDrivers);
                        countBusguiderNew = haishadrgdDataitem.Where(t=> t.EigyoCdSeq == GroupID && t.KSKbn==2).Sum(t=>t.allGuides);
                        countBusdriverLargeNew = haishadrgdDataitem.Where(t=> t.EigyoCdSeq == GroupID && t.KSKbn==2).Sum(t=>t.largeDriver);
                        countBusdriverMediumNew = haishadrgdDataitem.Where(t=> t.EigyoCdSeq == GroupID && t.KSKbn==2).Sum(t=>t.MediumDriver);
                        countBusdriverSmallNew = haishadrgdDataitem.Where(t=> t.EigyoCdSeq == GroupID && t.KSKbn==2).Sum(t=>t.SmallDriver);
                    }
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }
        else
        {
            var busitem = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.SyaRyo_NinKaKbn != 7 && t.BusLine!="0").ToList();
            countbus = busitem.Where(t=>t.IsBusRepair==false).Select(t => t.BusLine).Distinct().Count();
            countbusrp= busitem.Where(t=>t.IsBusRepair==true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {
                List<TPM_KyoSHeData> busdriver = new List<TPM_KyoSHeData>();
                List<TPM_KyoSHeData> busguider = new List<TPM_KyoSHeData>();
                List<int> busdriverlst = new List<int>();
                List<int> busguiderlst = new List<int>();
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem=listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    busdriver = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID).ToList();
                    busguider = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 3 || t.SyokumuKbn == 4) && t.CompanyCdSeq == GroupID).ToList();
                    busdriverlst = busdriver.Select(t => t.SyainCdSeq).ToList();
                    busguiderlst = busguider.Select(t => t.SyainCdSeq).ToList();
                    countBusdriver = busdriver.Count();
                    countBusguider = busguider.Count();

                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.SmallTypeDrivingFlg == 1).Count();
                    if(haishadrgdDataitem!=null)
                    {
                        countBusdriverNew = haishadrgdDataitem.Where(t=> t.CompanyCdSeq == GroupID && t.KSKbn==2).Sum(t => t.allDrivers);
                        countBusguiderNew = haishadrgdDataitem.Where(t=> t.CompanyCdSeq == GroupID && t.KSKbn==2).Sum(t=>t.allGuides);
                        countBusdriverLargeNew = haishadrgdDataitem.Where(t=> t.CompanyCdSeq == GroupID && t.KSKbn==2).Sum(t=>t.largeDriver);
                        countBusdriverMediumNew = haishadrgdDataitem.Where(t=> t.CompanyCdSeq == GroupID && t.KSKbn==2).Sum(t=>t.MediumDriver);
                        countBusdriverSmallNew = haishadrgdDataitem.Where(t=> t.CompanyCdSeq == GroupID && t.KSKbn==2).Sum(t=>t.SmallDriver);
                    }
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }

        object tooltip = new Object();
        tooltip = "<div class=\"d-flex\"><div>空台数：</div><div>";
        tooltip += "<div>" + (countbusnameLarge - countbusLarge-countbusrpLarge-countbusgrayLarge) + "台　大型（" + (countbusLarge+countbusgrayLarge) + "/" + (countbusnameLarge-countbusrpLarge) + "）</div>";
        tooltip += "<div>" + (countbusnameMedium - countbusMedium-countbusrpMedium-countbusgrayMedium) + "台　中型（" + (countbusMedium+ countbusgrayMedium)+ "/" + (countbusnameMedium-countbusrpMedium) + "）</div>";
        tooltip += "<div>" + (countbusnameSmall - countbusSmall-countbusrpSmall-countbusgraySmall) + "台　小型（" + (countbusSmall+countbusgraySmall) + "/" + (countbusnameSmall-countbusrpSmall) + "）</div>";
        tooltip += "</div></div>";

        object tooltipDriver = new Object();
        tooltipDriver = "<div class=\"d-flex\"><div>空運転手：</div><div>";
        tooltipDriver += "<div>大型　" + (countBusdriverLarge - countBusdriveroffLarge-countBusdriverLargeNew).ToString() + "人（" + countBusdriverLargeNew.ToString() + "/" + (countBusdriverLarge- countBusdriveroffLarge).ToString() + "）</div>";
        tooltipDriver += "<div>中型　" + (countBusdriverMedium - countBusdriveroffMedium-countBusdriverMediumNew).ToString() + "人（" + countBusdriverMediumNew.ToString() + "/" + (countBusdriverMedium-countBusdriveroffMedium).ToString() + "）</div>";
        tooltipDriver += "<div>小型　" + (countBusdriverSmall - countBusdriveroffSmall-countBusdriverSmallNew).ToString() + "人（" + countBusdriverSmallNew.ToString() + "/" + (countBusdriverSmall-countBusdriveroffSmall).ToString() + "）</div>";
        tooltipDriver += "</div></div><div>勤務：" + countbusdriverwork.ToString() + "人　休日：" + countbusdriverholiday.ToString() + "人　公出：" + countbusdriverpublic.ToString() + "人</div>";

        return "<a href='javascript:void(0)' data-toggle='tooltip' data-html='true' data-placement='right' data-original-title='" + tooltip + "'>空台数：" + (countbusname - countbus-countbusrp).ToString() + "台（" + countbus + "/" + (countbusname-countbusrp) + "）</a>" +
                "<a href='javascript:void(0)' data-toggle='tooltip' data-html='true' data-placement='right' data-original-title='" + tooltipDriver + "'>空運転手：" + (countBusdriverLarge - countBusdriveroffLarge-countBusdriverNew).ToString() + "人（" + countBusdriverNew.ToString() + "/" + (countBusdriverLarge-countBusdriveroffLarge).ToString() + "）</a>" +
                "<div>空ガイド：" + (countBusguider - countbusguideruse - countBusguieroff).ToString() + "人（" + (countbusguideruse ).ToString() + "/" + (countBusguider - countBusguieroff) + "）</div>";
    }

    /// <summary>
    /// Get comment
    /// </summary>
    /// <param name="date"></param>
    /// <returns></returns>
    public string GetCommentDate(DateTime date)
    {
        if (Calendlst.Count != 0 && Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date.ToString("yyyyMMdd")).Any())
        {
            string commentdate = Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date.ToString("yyyyMMdd")).FirstOrDefault().CalenCom;
            if (commentdate != "" && commentdate.Length <= 100)
            {
                return commentdate;
            }
            else
            {
                return "";
            }
        }
        else
        {
            return "";
        }
    }

    /// <summary>
    /// MouseWheel hide context menu
    /// </summary>
    /// <returns></returns>
    private async Task OnHandleMouseWheel()
    {
        await blazorContextMenuService.HideMenu("MenuRepair");
        await blazorContextMenuService.HideMenu("MenuSplit");
        await blazorContextMenuService.HideMenu("MenuDate");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }


    void ReupdateLineBusHeight(BusLineData busheight)
    {
        for (var i = 0; i < StaffsName.Count; i++)
        {
            if (StaffsName[i].StaffID == busheight.LineID)
            {
                StaffsName[i].StaffHeight = busheight.LineHeight;
                break;
            }
        }

        for (var i = 0; i < StaffsNameUnassigned.Count; i++)
        {
            if (StaffsNameUnassigned[i].StaffID == busheight.LineID)
            {
                StaffsNameUnassigned[i].StaffHeight = busheight.LineHeight;
                break;
            }
        }
    }

    public async Task HandlerStatusUpdated(ItemStaff updatedStaff)
    {
        try
        {
            updatedStaff.KinKyuCdSeq = CodeKbnItem.KinKyuCdSeq;
            updatedStaff.KinKyuKbn = CodeKbnItem.KinKyuKbn;
            if (updatedStaff.BookingId == "-1")
            {
                TKD_KikyujDataService.UpdateStaffdata(updatedStaff, 1);
                await OnRowUpdated.InvokeAsync("reloadgrid");
            }
            else if (updatedStaff.BookingId == "0" && updatedStaff.KinKyuTblCdSeq != 0)
            {
                TKD_KikyujDataService.UpdateStaffLinedata(updatedStaff.KinKyuTblCdSeq, int.Parse(updatedStaff.BusLine), new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
                await OnRowUpdated.InvokeAsync("reloadgrid");
            }
            else
            {
                if(updatedStaff.isGray==true||updatedStaff.BusLine=="9999999999999991"||updatedStaff.BusLine=="9999999999999992"||updatedStaff.BusLine=="9999999999999993")
                {
                    TKD_HaiinDataService.UpdateStaffMovetoGray(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen, (byte)updatedStaff.haiInRen,  new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, updatedStaff);

                    await OnRowUpdated.InvokeAsync("reloadgrid");
                    if (CheckHaisha(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen) == true)
                    {
                        TKD_HaishaDataService.UpdatebusHaiIKbn(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen, 1, (byte)2);
                    }
                    else
                    {
                        TKD_HaishaDataService.UpdatebusHaiIKbn(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen, 1, (byte)1);
                    }
                    BusBookingDataListService.UpdateHaiSha(updatedStaff.BookingId, updatedStaff.HaUnkRen,updatedStaff.TeiDanNo,updatedStaff.BunkRen,"KU1300",updatedStaff.HasYmd);
                    BusBookingDataListService.UpdateUnkobi(updatedStaff.BookingId, updatedStaff.HaUnkRen,"KU1300");
                    BusBookingDataListService.UpdateYyksho(updatedStaff.BookingId,new ClaimModel().TenantID,"KU1300");
                    await OnRowUpdated.InvokeAsync("reloadgrid");
                }
                else if(TKD_HaiinDataService.CheckDataHaiin(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen, int.Parse(updatedStaff.BusLine))==false)
                {
                    await OnRowUpdated.InvokeAsync("warningMoveLine");
                }
                else if(updatedStaff.BusVehicle==StaffsName.Where(t=>t.StaffID==updatedStaff.BusLine).First().StaffVehicle)
                {
                    TKD_HaiinDataService.UpdateStaffLinedata(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen, (byte)updatedStaff.haiInRen, int.Parse(updatedStaff.BusLine), new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, updatedStaff);
                    await OnRowUpdated.InvokeAsync("reloadgrid");
                    if(CheckHaisha(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen)==true)
                    {
                        TKD_HaishaDataService.UpdatebusHaiIKbn(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen, 1, (byte)2);
                    }
                    else
                    {
                        TKD_HaishaDataService.UpdatebusHaiIKbn(updatedStaff.BookingId, updatedStaff.HaUnkRen, updatedStaff.TeiDanNo, updatedStaff.BunkRen, 1, (byte)1);
                    }
                    BusBookingDataListService.UpdateHaiSha(updatedStaff.BookingId, updatedStaff.HaUnkRen,updatedStaff.TeiDanNo,updatedStaff.BunkRen,"KU1300",updatedStaff.HasYmd);
                    BusBookingDataListService.UpdateUnkobi(updatedStaff.BookingId, updatedStaff.HaUnkRen,"KU1300");
                    BusBookingDataListService.UpdateYyksho(updatedStaff.BookingId,new ClaimModel().TenantID,"KU1300");
                    await OnRowUpdated.InvokeAsync("reloadgrid");
                }
                else if(StaffsName.Where(t=>t.StaffID==updatedStaff.BusLine).First().StaffVehicle==1)
                {
                    await OnRowUpdated.InvokeAsync("warningDriver");
                }
                else if(StaffsName.Where(t=>t.StaffID==updatedStaff.BusLine).First().StaffVehicle==2)
                {
                    await OnRowUpdated.InvokeAsync("warningGuide");
                }
                else
                {
                    await OnRowUpdated.InvokeAsync("reloadgrid");
                }
            }
        }
        catch (Exception ex)
        {
            await OnRowUpdated.InvokeAsync("reloadgrid");
        };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "customScrollbar");
    }
    public bool CheckHaisha(string BookingId,  int HaUnkRen, int TeiDanNo, int BunkRen)
    {
        bool checkdata = false;
        int driver = StaffsLines.Where(t => t.BookingId == BookingId && t.HaUnkRen == HaUnkRen && t.TeiDanNo == TeiDanNo && t.BunkRen == BunkRen).First().NumberDriver;
        int guider = StaffsLines.Where(t => t.BookingId == BookingId && t.HaUnkRen == HaUnkRen && t.TeiDanNo == TeiDanNo && t.BunkRen == BunkRen).First().NumberGuider;
        int sumdriver = StaffsLines.Where(t => t.BookingId == BookingId && t.HaUnkRen == HaUnkRen && t.TeiDanNo == TeiDanNo && t.BunkRen == BunkRen && t.BusVehicle==1 && t.isGray==false).ToList().Count();
        int sumguider = StaffsLines.Where(t => t.BookingId == BookingId && t.HaUnkRen == HaUnkRen && t.TeiDanNo == TeiDanNo && t.BunkRen == BunkRen && t.BusVehicle==2 && t.isGray==false).ToList().Count();
        if(sumdriver>=driver&&sumguider>=guider)
        {
            checkdata = true;
        }
        return checkdata;
    }
    public async Task HandleShowMenu(ItemStaff item)
    {
        await OnShowContextMenuUpdated.InvokeAsync(item);
    }

    public async Task HandleUpdateLineCut(string text)
    {
        await OnRowUpdated.InvokeAsync(text);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusBookingDataListService BusBookingDataListService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_HaishaDataListService TKD_HaishaDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_HaiinDataService TKD_HaiinDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_KikyujDataListService TKD_KikyujDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorContextMenuService blazorContextMenuService { get; set; }
    }
}
#pragma warning restore 1591
