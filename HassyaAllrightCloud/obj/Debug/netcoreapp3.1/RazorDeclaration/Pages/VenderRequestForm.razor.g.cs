#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\VenderRequestForm.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3dd1a13f0beb95577294466a3a8853e370b3d778"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\Pages\VenderRequestForm.razor"
using HassyaAllrightCloud.IService.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\Pages\VenderRequestForm.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\Pages\VenderRequestForm.razor"
using HassyaAllrightCloud.Domain.Dto.CommonComponents;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/venderrequestform")]
    public partial class VenderRequestForm : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 251 "E:\Project\HassyaAllrightCloud\Pages\VenderRequestForm.razor"
       
    [Parameter] public string Option { get; set; }
    [Parameter] public string UkeCd { get; set; }
    [Parameter] public string UnkRen { get; set; }
    [Parameter] public string YouTblSeq { get; set; }
    [Parameter] public string Date { get; set; }

    [Inject] public IReportLayoutSettingService _reportLayoutSettingService { get; set; }

    public VenderRequestFormData data = new VenderRequestFormData();
    private bool notifyNotFound = false;
    private bool isShowPreviewReport = false;
    private bool isFilterApply = false;
    private string PreviewReportUrl = string.Empty;
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    EditContext formContext;

    private List<LoadSaleBranch> Branches = new List<LoadSaleBranch>();

    private bool isLoading = true;

    string baseUrl;
    string filterConditionFormName = "KU4700";

    private List<CustomerComponentGyosyaData> listGyoSya { get; set; }
    private List<CustomerComponentTokiskData> listTokisk { get; set; }
    private List<CustomerComponentTokiStData> listTokist { get; set; }

    #region string LocalizationInit

    string NotFound;
    string PageTitle;
    string ReceiptNumber;
    string ReservationCategory;
    string DateOfDispatch;
    string ReceptionOffice;
    string CarDestination;
    string Preview;
    string Export;
    string Output;

    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        NotFound = Lang["BI_T001"];
        PageTitle = Lang["PageTitle"];
        ReceiptNumber = Lang["ReceiptNumber"];
        ReservationCategory = Lang["ReservationCategory"];
        DateOfDispatch = Lang["DateOfDispatch"];
        ReceptionOffice = Lang["ReceptionOffice"];
        CarDestination = Lang["CarDestination"];
        Preview = Lang["Preview"];
        Export = Lang["Export"];
        Output = Lang["Output"];

        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }
    #endregion

    #region Component Lifecycle
    /// <summary>
    /// Invoked once, after OnInit is finished.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            LocalizationInit();
            formContext = new EditContext(data);
            baseUrl = AppSettingsService.GetBaseUrl();

            await LoadBranch();

            var taskReservation = _service.GetListReservationClass();
            var taskGyosya = _customerService.GetListGyosya();
            var taskTokisk = _customerService.GetListTokisk();
            var taskTokist = _customerService.GetListTokiSt();

            await Task.WhenAll(taskReservation, taskGyosya, taskTokisk, taskTokist);

            data.BookingTypes = taskReservation.Result;
            listGyoSya = taskGyosya.Result;
            listTokisk = taskTokisk.Result;
            listTokist = taskTokist.Result;

            DateTime dateTimeConvert;
            if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(Date) && !string.IsNullOrEmpty(UkeCd)
           && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()) && !string.IsNullOrEmpty(UnkRen))
            {
                dateTimeConvert = DateTime.ParseExact(Date, "yyyyMMdd", new CultureInfo("ja-JP"));
                data.UkeCdFrom = UkeCd;
                data.UkeCdTo = UkeCd;
                data._ukeCdFrom = int.Parse(UkeCd);
                data._ukeCdTo = int.Parse(UkeCd);
                data.StartDate = dateTimeConvert;
                data.EndDate = dateTimeConvert.AddYears(1);
                data.OutputSetting = OutputInstruction.Pdf;
                var reportDatas = await VenderRequestService.GetVenderRequestReport(data, new ClaimModel().TenantID);
                var reportResult = await VenderRequestService.GetVenderRequestReportPaged(reportDatas);
                if (reportResult.Any())
                {
                    var report = await _reportLayoutSettingService.GetCurrentTemplate(ReportIdForSetting.Venderrequestform, BaseNamespace.Venderrequestform, new ClaimModel().TenantID, new ClaimModel().EigyoCdSeq, (byte)PaperSize.A4);
                    report.DataSource = reportResult;
                    await new System.Threading.Tasks.TaskFactory().StartNew(() =>
                    {
                        report.CreateDocument();
                        using (MemoryStream ms = new MemoryStream())
                        {
                            report.ExportToPdf(ms);

                            byte[] exportedFileBytes = ms.ToArray();
                            string myExportString = Convert.ToBase64String(exportedFileBytes);
                            IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", "VenderRequestReport");
                        }
                    });
                }
                else
                {
                    notifyNotFound = true;
                }
            }

            await ApplyFilter();
            isLoading = false;
        }
        catch(Exception ex)
        {

        }
    }
    #endregion

    #region Load Data

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await IJSRuntime.InvokeAsync<string>("addMaxLength", "length", 10);
    }

    private async Task LoadBranch()
    {
        Branches = await BranchDataService.GetBranchDataByTenantId(new ClaimModel().TenantID);
        InsertSelectAll(Branches);

        data.Branch = Branches.FirstOrDefault();
    }

    private void InsertSelectAll<T>(List<T> source) where T : class
    {
        if (source.Any(item => item is null))
            return;

        source.Insert(0, null);
    }
    #endregion

    #region Value changed methods

    private void OnUkeCdChanged(string newUkeCd, bool isFrom = true)
    {
        if (isFrom)
        {
            data.UkeCdFrom = newUkeCd;
        }
        else
        {
            data.UkeCdTo = newUkeCd;
        }

        if (!isFilterApply) StateHasChanged();
    }

    private void OnBookingTypeChanged(ReservationClassComponentData newType, bool isFrom = true)
    {
        if (isFrom)
        {
            data.BookingTypeStart = newType;
        }
        else
        {
            data.BookingTypeEnd = newType;
        }

        if (!isFilterApply) StateHasChanged();
    }

    private void OnStartDateChanged(DateTime newDate)
    {
        data.StartDate = newDate;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnEndDateChanged(DateTime newDate)
    {
        data.EndDate = newDate;
        if (!isFilterApply) StateHasChanged();
    }

    private void OnSaleBranchChanged(LoadSaleBranch e)
    {
        data.Branch = e;

        if (!isFilterApply)
            StateHasChanged();
    }

    protected void OnChangeGyosya(CustomerComponentGyosyaData gyosya, bool isFrom = true)
    {
        if (isFrom)
            data.SelectedGyosyaFrom = gyosya;
        else
            data.SelectedGyosyaTo = gyosya;
    }

    protected void OnChangeTokisk(CustomerComponentTokiskData tokisk, bool isFrom = true)
    {
        if (isFrom)
            data.SelectedTokiskFrom = tokisk;
        else
            data.SelectedTokiskTo = tokisk;
    }

    protected void OnChangeTokist(CustomerComponentTokiStData tokist, bool isFrom = true)
    {
        if (isFrom)
            data.SelectedTokiStFrom = tokist;
        else
            data.SelectedTokiStTo = tokist;
    }

    #endregion

    #region Button Action

    private async void OnPreviewReportClicked(MouseEventArgs args)
    {
        await SaveCurrentFilter();
        var hadData = await VenderRequestService.VenderRequestReportHadData(data, new ClaimModel().TenantID);
        if (hadData)
        {
            string baseUrl = AppSettingsService.GetBaseUrl();
            PreviewReportUrl = EncryptHelper.EncryptToUrl(data);
            string url = baseUrl + "/VenderRequestFormPreview";
            url = url + string.Format("/?PreviewReportUrl={0}", PreviewReportUrl);
            await IJSRuntime.InvokeVoidAsync("open", url, "_blank");
            //isShowPreviewReport = true;
        }
        else
        {
            notifyNotFound = true;
        }
        StateHasChanged();
    }

    private async void OnExportReportClicked(MouseEventArgs args)
    {
        await SaveCurrentFilter();
        var reportDatas = await VenderRequestService.GetVenderRequestReport(data, new ClaimModel().TenantID);

        var reportResult = await VenderRequestService.GetVenderRequestReportPaged(reportDatas);

        if (reportResult.Any())
        {
            var report = await _reportLayoutSettingService.GetCurrentTemplate(ReportIdForSetting.Venderrequestform, BaseNamespace.Venderrequestform, new ClaimModel().TenantID, new ClaimModel().EigyoCdSeq, (byte)PaperSize.A4);
            report.DataSource = reportResult;
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                report.CreateDocument();
                using (MemoryStream ms = new MemoryStream())
                {
                    report.ExportToPdf(ms);

                    byte[] exportedFileBytes = ms.ToArray();
                    string myExportString = Convert.ToBase64String(exportedFileBytes);
                    IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", "VenderRequestReport");
                }
            });
        }
        else
        {
            notifyNotFound = true;
        }
        StateHasChanged();
    }

    #endregion

    private async Task SaveCurrentFilter()
    {
        try
        {
            await FilterServices.SaveCustomFilterAndConditions(VenderRequestService.GetFieldValues(data), filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
        }
        catch (Exception) { }
    }

    private async Task ApplyFilter()
    {
        var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq)).ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues();
        if (filterValues.Count > 0)
        {
            try
            {
                VenderRequestService.ApplyFilter(ref data, filterValues, data.BookingTypes, listGyoSya, listTokisk, listTokist);
                isFilterApply = true;

                OnUkeCdChanged(data.UkeCdFrom);
                OnUkeCdChanged(data.UkeCdTo, false);
                OnStartDateChanged(data.StartDate);
                OnEndDateChanged(data.EndDate);
                OnSaleBranchChanged(data.Branch == null ? null : Branches.FirstOrDefault(_ => _ != null && _.EigyoCdSeq == data.Branch.EigyoCdSeq));

                isFilterApply = false;
            }
            catch (Exception) { }

            await InvokeAsync(StateHasChanged);
        }
    }

    private async void ResetForm()
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);

        //isExportable = true;

        data = new VenderRequestFormData();

        await FilterServices.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName);

        await OnInitializedAsync();

        isLoading = false;
        StateHasChanged();
    }

    private async void BtnSubmitClick()
    {
        if (formContext.Validate())
        {
            isLoading = true;
            StateHasChanged();

            var reportDatas = await VenderRequestService.GetVenderRequestReport(data, new ClaimModel().TenantID);
            var reportResult = await VenderRequestService.GetVenderRequestReportPaged(reportDatas);

            if (reportResult.Any())
            {
                await SaveCurrentFilter();

                if (data.OutputSetting == OutputInstruction.Preview)
                {
                    string baseUrl = AppSettingsService.GetBaseUrl();
                    PreviewReportUrl = EncryptHelper.EncryptToUrl(data);
                    string url = baseUrl + "/VenderRequestFormPreview";
                    url = url + string.Format("/?PreviewReportUrl={0}", PreviewReportUrl);
                    await new System.Threading.Tasks.TaskFactory().StartNew(() =>
                    {
                        IJSRuntime.InvokeVoidAsync("open", url, "_blank");
                    });
                }
                else if (data.OutputSetting == OutputInstruction.Pdf)
                {
                    var report = await _reportLayoutSettingService.GetCurrentTemplate(ReportIdForSetting.Venderrequestform, BaseNamespace.Venderrequestform, new ClaimModel().TenantID, new ClaimModel().EigyoCdSeq, (byte)PaperSize.A4);
                    report.DataSource = reportResult;
                    await new System.Threading.Tasks.TaskFactory().StartNew(() =>
                    {
                        report.CreateDocument();
                        using (MemoryStream ms = new MemoryStream())
                        {
                            report.ExportToPdf(ms);

                            byte[] exportedFileBytes = ms.ToArray();
                            string myExportString = Convert.ToBase64String(exportedFileBytes);
                            IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", "VenderRequestReport");
                        }
                    });
                }
            }
            else
            {
                notifyNotFound = true;
            }

            isLoading = false;
            StateHasChanged();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerComponentService _customerService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IReservationClassComponentService _service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFilterCondition FilterServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVenderRequestService VenderRequestService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerListService CustomerService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService BranchDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<VenderRequestForm> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
    }
}
#pragma warning restore 1591
