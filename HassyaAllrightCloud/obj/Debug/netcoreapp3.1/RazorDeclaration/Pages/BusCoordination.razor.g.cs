#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e1370566963f25c6e9d40c283c28834c86595f8c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
using DevExpress.XtraPrinting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
using HassyaAllrightCloud.IService.CommonComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
using HassyaAllrightCloud.Domain.Dto.CommonComponents;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/buscoordination")]
    public partial class BusCoordination : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 338 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
       
    [Parameter]
    public string Option { get; set; }
    [Parameter]
    public string UnkobiDate { get; set; }
    [Parameter]
    public string Ukeno { get; set; }
    [Parameter]
    public string UnkRen { get; set; }
    [Parameter]
    public string UkenoList { get; set; }
    [Parameter]
    public string FormOutput { get; set; }

    [Inject] public IReportLayoutSettingService _reportLayoutSettingService { get; set; }

    EditContext formContext;
    BusCoordinationSearchParam report = new BusCoordinationSearchParam();
    DateTime startdate = DateTime.Today;
    DateTime enddate = DateTime.Today;
    IEnumerable<ReservationData> SelectedReservations = new List<ReservationData>();
    List<LoadCustomerList> customerlst = new List<LoadCustomerList>();
    List<SupplierData> supplierlst = new List<SupplierData>();
    List<LoadServiceOffice> salebranchlst = new List<LoadServiceOffice>();
    List<LoadStaffList> stafflst = new List<LoadStaffList>();
    ReservationData allreservation = new ReservationData();
    LoadCustomerList allCustomer = new LoadCustomerList();
    LoadServiceOffice allBranch = new LoadServiceOffice();
    LoadStaffList allStaff = new LoadStaffList();
    protected List<CustomerComponentGyosyaData> ListGyosya { get; set; } = new List<CustomerComponentGyosyaData>();
    protected List<CustomerComponentTokiskData> TokiskData { get; set; } = new List<CustomerComponentTokiskData>();
    protected List<CustomerComponentTokiStData> TokiStData { get; set; } = new List<CustomerComponentTokiStData>();
    protected List<ReservationClassComponentData> ListReservationClass { get; set; } = new List<ReservationClassComponentData>();

    // bool CheckSelectedReservationEndAll = true;
    // bool CheckSelectedSupplierEndAll = true;
    bool checkNullItem = false;
    bool isFilterApply;
    int datetype { get; set; }
    long bookingFrom { get; set; } = 0;
    long bookingTo { get; set; } = 9999999999;
    string baseUrl;
    // List<string> emptyItemMessage = new List<string>();
    Dictionary<string, string> emptyItemMessage = new Dictionary<string, string>();
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    string EmptyBookingTypeMessage = "";
    string EmptyCustomerMessage = "";
    string EmptySaleBranchMessage = "";
    string EmptyStaffMessage = "";
    string TitlePopupInfo = "";
    string TitlePopupViewer = "";
    string MessageCheckDataExist = "";
    bool PopupCheckData { get; set; } = false;
    bool OpenPopPreview = false;
    bool isSelectAllReservation = true;
    string searchString = "";
    string filterConditionFormName = "KU4300";

    bool CustomerError = false;
    bool Customer01Error = false;
    bool DateError = false;
    bool BookingError = false;
    bool EmptyBookingType = false;
    bool EmptySaleBranch = false;
    bool EmptyCustomer = false;
    bool EmptyStaff = false;
    string MessageCustomerError;
    string MessageCustomer01Error;
    string MessageDateError;
    string MessageBookingError;

    protected string strDateGetCustomer = DateTime.Now.ToString(CommonConstants.FormatYMD);
    protected string endDateGetCustomer = DateTime.Now.ToString(CommonConstants.FormatYMD);
    protected CustomerComponent refCustomerFrom = new CustomerComponent();
    protected CustomerComponent refCustomerTo = new CustomerComponent();
    protected CustomerComponent refSupplierFrom = new CustomerComponent();
    protected CustomerComponent refSupplierTo = new CustomerComponent();

    #region string LocalizationInit
    string PageTitleReport;
    string DateType;
    string DispatchDate;
    string ArrivalDate;
    string ReceptionDate;
    string Date;
    string BookingCategory;
    string Customer;
    string Supplier;
    string ReceptionOffice;
    string ReceiptNumber;
    string SalesRepresentative;
    string PersonInput;
    string Preview;
    string Export;
    string Clear;
    string PDF;
    bool isUkenoEmpty = false;
    string strReceiptNumberFrom { get; set; } = "";
    string strReceiptNumberTo { get; set; } = "";

    private void LocalizationInit()
    {
        PageTitleReport = Lang["PageTitleReport"];
        DateType = Lang["date_setting"];
        DispatchDate = Lang["dispatch_date"];
        ArrivalDate = Lang["arrival_date"];
        ReceptionDate = Lang["reception_date"];
        Date = Lang["date"];
        BookingCategory = Lang["booking_category"];
        Customer = Lang["customer"];
        Supplier = Lang["supplier"];
        ReceptionOffice = Lang["reception_office"];
        ReceiptNumber = Lang["receipt_number"];
        SalesRepresentative = Lang["sales_representative"];
        PersonInput = Lang["person_input"];
        Preview = Lang["btn_preview"];
        Export = Lang["btn_export"];
        EmptyBookingTypeMessage = Lang["BI_T006"];
        EmptyCustomerMessage = Lang["BI_T007"];
        EmptySaleBranchMessage = Lang["BI_T008"];
        EmptyStaffMessage = Lang["BI_T008"];
        MessageCheckDataExist = Lang["BI_T007"];
        TitlePopupInfo = Lang["TitlePopupInfo"];
        TitlePopupViewer = Lang["TitlePopupViewer"];
        Clear = Lang["Clear"];
        PDF = Lang["PDF"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }
    #endregion

    #region Component Lifecycle
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        formContext = new EditContext(report);
        datetype = (int)DateTypeContract.Dispatch;
        ListReservationClass = await _yoyakuservice.GetListReservationClass();

        // 得意先, 仕入先
        ListGyosya = await _service.GetListGyosya();

        salebranchlst = await ServiceOfficeService.GetBranchReport(new ClaimModel().TenantID);
        if (salebranchlst == null)
        {
            salebranchlst = new List<LoadServiceOffice>();
        }
        else
        {
            salebranchlst.Insert(0, allBranch);
        }
        stafflst = await StaffListService.GetStaffReport(new ClaimModel().TenantID, startdate.ToString("yyyyMMdd"));
        if (stafflst == null)
        {
            stafflst = new List<LoadStaffList>();
        }
        else
        {
            stafflst.Insert(0, allStaff);
        }
        CheckDataNullFromService();
        await Load().ContinueWith(async t =>
        {
            await ApplyFilter();
        });
    }
    async Task Load()
    {
        report.OutputSetting = OutputInstruction.Preview;
        if (emptyItemMessage.Count > 0) checkNullItem = true;
        report.DateType = datetype;
        report.StartDate = startdate;
        report.EndDate = enddate;

        if (salebranchlst.Count >= 1)
        {
            report.SaleBranch = salebranchlst.First();
        }
        else
        {
            EmptySaleBranch = true;
        }
        if (stafflst.Count >= 1)
        {
            report.Staff = stafflst.First();
            report.PersonInput = stafflst.First();
        }
        else
        {
            EmptyStaff = true;
        }
        if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(UnkobiDate) && !string.IsNullOrEmpty(Ukeno)
        && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()) && !string.IsNullOrEmpty(UnkRen))
        {
            DateTime dateTimeConvert;
            try
            {
                dateTimeConvert = DateTime.ParseExact(UnkobiDate, "yyyyMMdd", new CultureInfo("ja-JP"));
                report.StartDate = dateTimeConvert;
                report.EndDate = dateTimeConvert;
                report.BookingFrom = Ukeno;
                report.BookingTo = Ukeno;
                startdate = dateTimeConvert;
                enddate = dateTimeConvert;
                bookingFrom = long.TryParse(Ukeno, out long valueFrom) ? valueFrom : 0;
                bookingTo = long.TryParse(Ukeno, out long valueTo) ? valueTo : 0;
                report.UnkRen = short.Parse(UnkRen);
                NavManager.NavigateTo("/buscoordination", false);
                bool checkDataExist = false;
                checkDataExist = await BusCoordinationReportService.CheckExistDataReport(report);
                if (checkDataExist)
                {
                    if (Option == OptionReport.Preview.ToString())//preview
                    {
                        await OnExportPdf(0);
                    }
                    else //download
                    {
                        report.OutputSetting = OutputInstruction.Pdf;
                        strReceiptNumberFrom = Ukeno;
                        strReceiptNumberTo = Ukeno;
                        await OnExportPdf(1);
                    }
                }
                else
                {
                    PopupCheckData = true;
                }
            }
            catch
            {
                PopupCheckData = true;
            }
            await SaveCurrentFilter();
        }
        else if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(UkenoList) && !string.IsNullOrEmpty(FormOutput))
        {
            DatetimeData datetimeData = new DatetimeData();
            datetimeData = await CoordinationReportService.GetUnkobiDatebyUkenoList(UkenoList);
            report.StartDate = datetimeData.DateStart;
            report.EndDate = datetimeData.DateEnd;
            report.UkenoList = UkenoList;
            NavManager.NavigateTo("/buscoordination", false);
            bool checkDataExist = false;
            checkDataExist = await BusCoordinationReportService.CheckExistDataReport(report);
            if (checkDataExist)
            {
                if (Option == OptionReport.Preview.ToString())//preview
                {
                    await OnExportPdf(0);
                }
                else //download
                {
                    report.OutputSetting = OutputInstruction.Pdf;
                    strReceiptNumberFrom = Ukeno;
                    strReceiptNumberTo = Ukeno;
                    await OnExportPdf(1);
                }
            }
            else
            {
                PopupCheckData = true;
            }
        }
        else
        {

        }
    }
    #endregion
    //check data null
    void CheckDataNullFromService()
    {
        if (ListReservationClass.Count == 0 || ListReservationClass == null)
        {
            emptyItemMessage[nameof(EmptyBookingTypeMessage)] = EmptyBookingTypeMessage;
        }
        if (ListGyosya.Count == 0 || ListGyosya == null)
        {
            emptyItemMessage[nameof(EmptyCustomerMessage)] = EmptyCustomerMessage;
        }
        if (salebranchlst.Count == 0 || salebranchlst == null)
        {
            emptyItemMessage[nameof(EmptySaleBranchMessage)] = EmptySaleBranchMessage;
        }
        if (stafflst.Count == 0 || stafflst == null)
        {
            emptyItemMessage[nameof(EmptyStaffMessage)] = EmptyStaffMessage;
        }
    }
    #region value changed method
    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    async void OnStartDateChanged(DateTime newDate)
    {
        startdate = newDate;
        report.StartDate = newDate;
        report.GyosyaTokuiSakiFrom = null;
        report.GyosyaTokuiSakiTo = null;
        report.TokiskTokuiSakiFrom = null;
        report.TokiskTokuiSakiTo = null;
        report.TokiStTokuiSakiFrom = null;
        report.TokiStTokuiSakiTo = null;
        report.GyosyaShiireSakiFrom = null;
        report.GyosyaShiireSakiTo = null;
        report.TokiskShiireSakiFrom = null;
        report.TokiskShiireSakiTo = null;
        report.TokiStShiireSakiFrom = null;
        report.TokiStShiireSakiTo = null;
        report.Staff = stafflst.First();
        report.PersonInput = stafflst.First();

        if (formContext.Validate())
        {
            callResetCustomer();
        }
        stafflst = await StaffListService.GetStaffReport(new ClaimModel().TenantID, report.StartDate.ToString("yyyyMMdd"));
        stafflst.Insert(0, allStaff);
        formContext.Validate();
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    async void OnEndDateChanged(DateTime newDate)
    {
        enddate = newDate;
        report.EndDate = newDate;
        if (formContext.Validate())
        {
            callResetCustomer();
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void callResetCustomer()
    {
        strDateGetCustomer = report.StartDate.ToString(CommonConstants.FormatYMD);
        endDateGetCustomer = report.EndDate.ToString(CommonConstants.FormatYMD);
        // 得意先, 仕入先
        var taskTokisk = _service.GetListTokisk(strDateGetCustomer, endDateGetCustomer);
        var taskTokiSt = _service.GetListTokiSt(strDateGetCustomer, endDateGetCustomer);

        await Task.WhenAll(taskTokisk, taskTokiSt);

        TokiskData = taskTokisk.Result;
        TokiStData = taskTokiSt.Result;

        refCustomerFrom.OnchangeCustomerDataByTime(TokiskData, TokiStData);
        refCustomerTo.OnchangeCustomerDataByTime(TokiskData, TokiStData);
        refSupplierFrom.OnchangeCustomerDataByTime(TokiskData, TokiStData);
        refSupplierTo.OnchangeCustomerDataByTime(TokiskData, TokiStData);
    }
    /// <summary>
    /// Change value customer from, to
    /// </summary>
    /// <param name="ValueName"></param>
    /// <param name="value"></param>
    /// <param name="formContext"></param>
    /// <returns></returns>
    private void ChangeValueForm(string ValueName, dynamic value, EditContext formContext)
    {
        try
        {
            if (value is string && string.IsNullOrEmpty(value))
            {
                value = null;
            }

            var propertyInfo = report.GetType().GetProperty(ValueName);
            propertyInfo.SetValue(report, value, null);
            formContext.Validate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnBookingFromChange(string newValue)
    {
        if (string.IsNullOrEmpty(newValue))
        {
            report.BookingFrom = "";
            strReceiptNumberFrom = "";
        }
        else
        {
            long bookingfromParse;
            if (CommonUtil.NumberTryParse(newValue, out bookingfromParse) && bookingfromParse >= 0)
            {
                report.BookingFrom = bookingfromParse.ToString();
                strReceiptNumberFrom = bookingfromParse.ToString().Length == 10 ? bookingfromParse.ToString() : bookingfromParse.ToString().PadLeft(10, '0');
            }
            else
            {
                strReceiptNumberFrom = report.BookingFrom.Length == 10 ? report.BookingFrom : report.BookingFrom.PadLeft(10, '0');
                report.BookingFrom = report.BookingFrom == "" ? strReceiptNumberFrom : report.BookingFrom;
            }
        }
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnBookingToChange(string newValue)
    {
        if (string.IsNullOrEmpty(newValue))
        {
            report.BookingTo = "";
            strReceiptNumberTo = "";
        }
        else
        {
            long bookingToParse;
            if (CommonUtil.NumberTryParse(newValue, out bookingToParse) && bookingToParse >= 0)
            {
                report.BookingTo = bookingToParse.ToString();
                strReceiptNumberTo = bookingToParse.ToString().Length == 10 ? bookingToParse.ToString() : bookingToParse.ToString().PadLeft(10, '0');
            }
            else
            {
                strReceiptNumberTo = report.BookingTo.Length == 10 ? report.BookingTo : report.BookingTo.PadLeft(10, '0');
                report.BookingTo = report.BookingTo == "" ? strReceiptNumberTo : report.BookingTo;
            }
        }
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickDateType(MouseEventArgs e, int number)
    {
        datetype = number;
        report.DateType = number;
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnSaleBranchChanged(LoadServiceOffice e)
    {
        report.SaleBranch = e ?? new LoadServiceOffice();
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnStaffChanged(LoadStaffList e, bool isFrom = true)
    {
        if (isFrom)
        {
            report.Staff = e ?? new LoadStaffList();
        }
        else
        {
            report.Staff01 = e ?? new LoadStaffList();
        }
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnPersonInputChanged(LoadStaffList e, bool isFrom = true)
    {
        if (isFrom)
        {
            report.PersonInput = e ?? new LoadStaffList();
        }
        else
        {
            report.PersonInput01 = e ?? new LoadStaffList();
        }
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    private void OnHandleValidSubmit()
    {
        bool isValid = formContext.Validate();
        if (isValid)
        {
            try
            {
                var client = new HttpClient();
            }
            catch
            {
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    async void OpenPopupPreview()
    {
        if (formContext.Validate())
        {
            await SaveCurrentFilter();
            bool checkDataExistInDB = await BusCoordinationReportService.CheckExistDataReport(report);
            if (checkDataExistInDB)
            {
                await OnExportPdf(0);
            }
            else
            {
                PopupCheckData = true;
            }
        }
        StateHasChanged();
    }
    /// <summary>
    ///
    /// </summary>
    async void DownLoadReport()
    {
        if (formContext.Validate())
        {
            await SaveCurrentFilter();
            bool checkDataExistInDB = await BusCoordinationReportService.CheckExistDataReport(report);
            if (checkDataExistInDB)
            {
                await OnExportPdf(1);
            }
            else
            {
                PopupCheckData = true;
            }
        }
        StateHasChanged();
    }
    private async Task OnExportPdf(byte type)
    {
        if (type == 0)
        {
            searchString = EncryptHelper.EncryptToUrl(report);
            OpenPopPreview = true;
        }
        else
        {
            await SaveCurrentFilter();
            var data = await BusCoordinationReportService.GetPDFData(report);
            if (data.Count > 0)
            {
                var report = await _reportLayoutSettingService.GetCurrentTemplate(ReportIdForSetting.Buscoordination, BaseNamespace.Buscoordination, new ClaimModel().TenantID, new ClaimModel().EigyoCdSeq, (byte)PaperSize.A4);
                report.DataSource = data;
                await new System.Threading.Tasks.TaskFactory().StartNew(() =>
                {
                    report.CreateDocument();
                    using (MemoryStream ms = new MemoryStream())
                    {
                        /*if (type == 1)
                        {
                            PrintToolBase tool = new PrintToolBase(report.PrintingSystem);
                            tool.Print();
                            return;
                        }*/
                        report.ExportToPdf(ms);
                        byte[] exportedFileBytes = ms.ToArray();
                        string myExportString = Convert.ToBase64String(exportedFileBytes);
                        JSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", "Busutehaisyo");
                    }
                });
            }
        }
    }

    #endregion
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 10);
    }

    private async Task SaveCurrentFilter()
    {
        await FilterServices.SaveCustomFilterAndConditions(GetFieldValues(), filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
    }

    private async Task ApplyFilter()
    {
        var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq)).ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues();
        if (filterValues.Count > 0)
        {
            isFilterApply = true;
            if (string.IsNullOrEmpty(Option) && string.IsNullOrEmpty(UnkobiDate) && string.IsNullOrEmpty(Ukeno) && string.IsNullOrEmpty(UnkRen))
            {
                BusCoordinationReportService.ApplyFilter(ref report, ListReservationClass, ListGyosya, _service, salebranchlst, stafflst, filterValues);
                report.UnkRen = 0;
            }
            datetype = report.DateType;
            startdate = report.StartDate;
            enddate = report.EndDate;
            if (!string.IsNullOrEmpty(report.BookingFrom))
            {
                bookingFrom = long.TryParse(report.BookingFrom, out long fromValue) ? fromValue : 0;
                strReceiptNumberFrom = bookingFrom.ToString().Length == 10 ? bookingFrom.ToString() : bookingFrom.ToString().PadLeft(10, '0');
            }
            else
            {
                strReceiptNumberFrom = "";
            }
            if (!string.IsNullOrEmpty(report.BookingTo))
            {
                bookingTo = long.TryParse(report.BookingTo, out long toValue) ? toValue : 0;
                strReceiptNumberTo = bookingTo.ToString().Length == 10 ? bookingTo.ToString() : bookingTo.ToString().PadLeft(10, '0');
            }
            else
            {
                strReceiptNumberTo = "";
            }
            // CheckSelectedReservationEndAll = report.ReservationList.Any(_ => _ == 0);

            if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(UnkobiDate) && !string.IsNullOrEmpty(Ukeno)
&& (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()) && !string.IsNullOrEmpty(UnkRen))
            {
                DateTime dateTimeConvert;
                try
                {
                    dateTimeConvert = DateTime.ParseExact(UnkobiDate, "yyyyMMdd", new CultureInfo("ja-JP"));
                    report.StartDate = dateTimeConvert;
                    report.EndDate = dateTimeConvert;
                    report.BookingFrom = Ukeno;
                    report.BookingTo = Ukeno;
                    startdate = dateTimeConvert;
                    enddate = dateTimeConvert;
                    bookingFrom = int.Parse(Ukeno);
                    bookingTo = int.Parse(Ukeno);
                    report.UnkRen = short.Parse(UnkRen);
                    await SaveCurrentFilter();
                }
                catch (Exception ex)
                {

                }
            }
            isFilterApply = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private Dictionary<string, string> GetFieldValues()
    {
        var result = new Dictionary<string, string>();
        result = BusCoordinationReportService.GetFieldValues(report);
        return result;
    }

    async void ResetForm()
    {
        report.OutputSetting = OutputInstruction.Preview;
        datetype = (int)DateTypeContract.Dispatch;
        report.DateType = datetype;
        startdate = DateTime.Today;
        enddate = DateTime.Today;
        report.StartDate = startdate;
        report.EndDate = enddate;
        strReceiptNumberFrom = "";
        strReceiptNumberTo = "";
        report.BookingFrom = "";
        report.BookingTo = "";
        report.YoyakuFrom = null;
        report.YoyakuTo = null;
        report.GyosyaTokuiSakiFrom = null;
        report.GyosyaTokuiSakiTo = null;
        report.TokiskTokuiSakiFrom = null;
        report.TokiskTokuiSakiTo = null;
        report.TokiStTokuiSakiFrom = null;
        report.TokiStTokuiSakiTo = null;
        report.GyosyaShiireSakiFrom = null;
        report.GyosyaShiireSakiTo = null;
        report.TokiskShiireSakiFrom = null;
        report.TokiskShiireSakiTo = null;
        report.TokiStShiireSakiFrom = null;
        report.TokiStShiireSakiTo = null;

        if (salebranchlst.Count >= 1)
        {
            report.SaleBranch = salebranchlst.First();
        }
        else
        {
            EmptySaleBranch = true;
        }
        if (stafflst.Count >= 1)
        {
            report.Staff = stafflst.First();
            report.PersonInput = stafflst.First();
        }
        else
        {
            EmptyStaff = true;
        }
        formContext = new EditContext(report);
        await FilterServices.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName);
        StateHasChanged();
    }

    private async void BtnSubmitClick()
    {
        await SaveCurrentFilter();
        bool checkDataExist = false;
        checkDataExist = await BusCoordinationReportService.CheckExistDataReport(report);
        if (checkDataExist)
        {
            if (report.OutputSetting == OutputInstruction.Preview)
            {
                string baseUrl = AppSettingsService.GetBaseUrl();
                searchString = EncryptHelper.EncryptToUrl(report);
                string url = baseUrl + "/BusCoordinationReportPreview";
                url = url + string.Format("/?SearchString={0}", searchString);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
            }
            else if (report.OutputSetting == OutputInstruction.Pdf)
            {
                await OnExportPdf(1);
            }
        }
        else
        {
            PopupCheckData = true;
        }
        formContext = new EditContext(report);
        StateHasChanged();
    }
    void OnBookingFromSelectedChanged(ReservationClassComponentData value)
    {
        report.YoyakuFrom = value;
        if (!isFilterApply) StateHasChanged();
    }
    void OnBookingToSelectedChanged(ReservationClassComponentData value)
    {
        report.YoyakuTo = value;
        if (!isFilterApply) StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IReservationClassComponentService _yoyakuservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerComponentService _service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService errorModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusCoordinationReportService CoordinationReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomNavigation NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFilterCondition FilterServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusCoordinationReportService BusCoordinationReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStaffListService StaffListService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IServiceOfficeService ServiceOfficeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerListService CustomerListService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BusCoordination> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
