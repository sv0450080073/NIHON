#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\PartnerBookingInput.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "46a1548784f38382b2d7a2b11f71756ed7fee6f5"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using SharedLibraries.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\Pages\PartnerBookingInput.razor"
using HassyaAllrightCloud.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\Pages\PartnerBookingInput.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 952 "E:\Project\HassyaAllrightCloud\Pages\PartnerBookingInput.razor"
using HassyaAllrightCloud.Pages.Components.CommonComponents;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/partnerbookinginput")]
    public partial class PartnerBookingInput : OwningComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 953 "E:\Project\HassyaAllrightCloud\Pages\PartnerBookingInput.razor"
       
    [Parameter] public string UkeCd { get; set; } = "";
    [Parameter] public string UnkRen { get; set; } = "";
    private string Ukeno => $"{(string.IsNullOrEmpty(UkeCd) ? string.Empty : new ClaimModel().TenantID.ToString("D5"))}{UkeCd}";

    YouShaDataInsert YouShaDataInsert = new YouShaDataInsert();
    List<HaiShaDataTable> HaiShaDataList = new List<HaiShaDataTable>();
    List<YouShaDataTable> YouShaDataList = new List<YouShaDataTable>();
    List<YyKSyuDataPopup> YyKSyuDataPopupList = new List<YyKSyuDataPopup>();
    List<TokistData> TokistDataList = new List<TokistData>();
    List<CodeKbnDataPopup> CodeKbnDataPopupList = new List<CodeKbnDataPopup>();
    VATDataPopup VATDataPopup = new VATDataPopup();
    HaiShaDataTable HaiShaDataItem = new HaiShaDataTable();
    YouShaDataTable youShaItemUpdate = new YouShaDataTable();
    HaiShaDataUpdate haiShaDataItemUpdate = new HaiShaDataUpdate();
    List<VehicleDispatchPopup> vehicleDispatchPopupList = new List<VehicleDispatchPopup>();
    List<VehicleDispatchPopup> vehicleDispatchPopupListStart = new List<VehicleDispatchPopup>();
    List<VehicleDispatchPopup> vehicleDispatchPopupListEnd = new List<VehicleDispatchPopup>();
    List<TPM_CodeKbData> tpm_CodeUKEJYKBNCDKbDataList = new List<TPM_CodeKbData>();
    List<YouSyuTable> YouSyuTableList = new List<YouSyuTable>();
    IEnumerable<TPM_CodeKbDataOTHJINKBN> tpm_CodeKbDataOTHJINKBNList;
    List<TPM_CodeKbDataKenCD> tpm_CodeKbDataKenCDList;
    EditContext formContextPopup;
    EditContext formContextPopupHaiSha;
    List<BusTypeDataPartner> cartypelst = new List<BusTypeDataPartner>();
    BusTypeDataPartner cartypeItem = new BusTypeDataPartner();
    List<CodeKbnBunruiDataPopup> depotNamelst = new List<CodeKbnBunruiDataPopup>();
    List<TPM_CodeKbDataDepot> depotConnectionlst = new List<TPM_CodeKbDataDepot>();
    IEnumerable<TPM_CodeKbDataOTHJINKBN> codeKbDataOTHJINKBNlst = new List<TPM_CodeKbDataOTHJINKBN>();
    List<TKM_KasSetData> TKM_KasSetDataList = new List<TKM_KasSetData>();
    Dictionary<string, string> emptyItemMessage = new Dictionary<string, string>();
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    YouShaDataTable SelectedItem = new YouShaDataTable();
    public int youTblSeq { get; set; } = 0;
    public string dateformat = "yyyyMMdd";
    string validatestring = "";
    string validatestringText = "";
    string baseUrl = string.Empty;
    string MessageCheckDataExist = "";
    string messageHaiSDate = "";
    string messageTouYDate = "";
    string messageTouChTimeGreaterThanHaisTime = "";
    bool PopupHireCarRegister { get; set; }
    bool PopupHireCarUpdate { get; set; } = false;
    bool disableAll = false;
    bool checkOptionAddYouSha { get; set; } = true;
    bool PopupConfirmUpdateYouSha { get; set; } = false;
    bool PopupHaiShaUpdate { get; set; } = false;
    bool PopupConfirmDeleteYouSha { get; set; } = false;
    bool disableSubmit = true;
    bool disableSubmitTouS = true;
    bool PopupCheckData = false;
    bool checkDataExist = false;
    bool CheckTouTime = false;
    bool CheckHaiSTime = false;
    bool HaiSTimeError = false;
    bool TouTimeError = false;
    bool TouTimeGreaterThanHaisTimeError = false;
    bool PopupYatoiSha { get; set; } = false;
    bool isRegisterYouShaMenu = false;
    bool isUpdateHaiShaMenu = false;
    bool isBusCooradinationReportMenu = false;
    bool isVenderRequestformReportMenu = false;
    bool isperatingInstructionReportMenu = false;
    bool isOperatingInstructionReport02Menu = false;
    string tempstr;
    bool PopupNotificationItemHaiSha = false;
    public int SelectedYouShaYouTblSeq { get; set; }
    string txtPopupYouSha = "";
    string txtInsertForm = "";
    string txtEditForm = "";
    public List<string> messageValidDateTime { get; set; } = new List<string>();
    TimeSpan Haisha_HaiSSetTime;
    TimeSpan Haisha_TouSetTime;
    DateTime EndDayOfMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));
    DateTime HaiSYmdValue;
    TimeSpan HaiSTimeValue;
    TimeSpan SyuPaTimeValue;
    DateTime TouYmdValue;
    TimeSpan TouChTimeValue;
    TimeSpan BIN_TouChTime;
    TimeSpan BIN_SyuPaTime;
    DateTime MinDateTimeUnkobi;
    DateTime MaxDateTimeUnkobi;
    IncidentalViewMode IncidentalView { get; set; }
    bool enableCarCooperation { get; set; } = true;
    bool PopupCarCooperation { get; set; } = false;
    bool PopupMessageCarCooperation { get; set; } = false;
    private string FormName = "KU1700";
    private CustomerModel Model { get; set; } = new CustomerModel();
    private DefaultCustomerData DefaultValue { get; set; } = new DefaultCustomerData();
    private bool isCheckBIT02 { get; set; }
    private bool isCustomerNull { get; set; } = false;
    private bool isGyosyaNull { get; set; } = false;
    private bool isTokiskNull { get; set; } = false;

    //Grid HaiSha Layout
    protected HeaderTemplate Header { get; set; }
    protected BodyTemplate Body { get; set; }
    protected List<HaiShaDataTable> CheckedItems { get; set; } = new List<HaiShaDataTable>();
    public string CssClass { get; set; }
    protected Pagination pagination { get; set; }
    protected int totalPage { get; set; }
    public string Value { get; set; }
    public bool isClickRow { get; set; } = false;
    public int LastXClicked { get; set; }
    public int LastYClicked { get; set; }
    public int? CurrentClick { get; set; } = null;
    public int? CurrentScroll { get; set; }
    protected ShowCheckboxArgs<HaiShaDataTable> ShowCheckboxOptions { get; set; } = new ShowCheckboxArgs<HaiShaDataTable>()
    {
        RowIdentifier = (checkedItem, item) => checkedItem.Index == item.Index,
        Disable = (item) => false
    };
    private int CurrentPage = 1;
    private byte RecordsPerPage = 25;
    private int TotalItems;
    //Grid Yousha
    protected HeaderTemplate HeaderYouSha { get; set; }
    protected BodyTemplate BodyYouSha { get; set; }
    protected List<YouShaDataTable> CheckedItemsYouSha { get; set; } = new List<YouShaDataTable>();
    public string CssClassYouSha { get; set; }
    public string ValueYouSha { get; set; }
    public bool isClickRowYouSha { get; set; } = false;
    public int LastXClickedYouSha { get; set; }
    public int LastYClickedYouSha { get; set; }
    public int? CurrentClickYouSha { get; set; } = null;
    public int? CurrentScrollYouSha { get; set; }
    protected ShowCheckboxArgs<YouShaDataTable> ShowCheckboxOptionsYouSha { get; set; } = new ShowCheckboxArgs<YouShaDataTable>()
    {
        RowIdentifier = (checkedItem, item) => checkedItem.Index == item.Index,
        Disable = (item) => false
    };
    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    private int GridSize = 1;
    private bool isBtnAddNewYouShaEnable;

    //popup
    string popupTitle { get; set; }
    string popupContent { get; set; }
    string popupiconinfo = "fa-info-circle";
    string popupiconerror = "fa fa-times text-danger";
    string popupicon { get; set; }
    bool isHaitaValid { get; set; } = true;
    ParterBookingInputHaita _haita;

    #region Component Lifecycle
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("setColorTextFromDb", BusLineCssColorServices.GetAllCssColor());
        base.OnParametersSet();
    }
    private void LocalizationInit()
    {
        MessageCheckDataExist = Lang["BI_T002"];
        txtInsertForm = Lang["HireCarRegistration"];
        txtEditForm = Lang["TxtFormEditYouSha"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadingService.ShowAsync();
            DefaultValue.GyosyaCdSeq = 0;
            formContextPopup = new EditContext(YouShaDataInsert);
            formContextPopupHaiSha = new EditContext(haiShaDataItemUpdate);
            LocalizationInit();

            if (Ukeno != "" && UnkRen != "")
            {
                //NavManager.NavigateTo("/partnerbookinginput", false);
                //HaiShaDataList = await PartnerBookingInputService.GetHaiShaData(Ukeno, UnkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                //YouShaDataList = await PartnerBookingInputService.GetYouShaData(Ukeno, UnkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);

                await LoadCodeKbnData();
                await LoadHaiShaDataListWithIndex();
                await LoadYouShaDataListWithIndex();
                YyKSyuDataPopupList = await PartnerBookingInputService.GetYyKSyuDataPopup(Ukeno, UnkRen, new ClaimModel().TenantID, youTblSeq);
                CodeKbnDataPopupList = await PartnerBookingInputService.GetCodeKbnData(new ClaimModel().TenantID);

                YouSyuTableList = await PartnerBookingInputService.GetYouSyuTableData(Ukeno, UnkRen, new ClaimModel().TenantID);
                TokistDataList = await PartnerBookingInputService.GetTokiskData(Ukeno, UnkRen, HaiShaDataList.FirstOrDefault().HAISHA_KikYmd, new ClaimModel().TenantID);
                TKM_KasSetDataList = await PartnerBookingInputService.GetTKM_KasSetData(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
                if (HaiShaDataList != null && HaiShaDataList.Count > 0)
                {
                    MinDateTimeUnkobi = DateTime.ParseExact(HaiShaDataList.FirstOrDefault().UNKOBI_HaiSYmd + HaiShaDataList.FirstOrDefault().UNKOBI_HaiSTime, "yyyyMMddHHmm", new CultureInfo("ja-JP"));
                    MaxDateTimeUnkobi = DateTime.ParseExact(HaiShaDataList.FirstOrDefault().UNKOBI_TouYmd + HaiShaDataList.FirstOrDefault().UNKOBI_TouChTime, "yyyyMMddHHmm", new CultureInfo("ja-JP"));
                }

            }
            baseUrl = AppSettingsService.GetBaseUrl();
            cartypelst = new List<BusTypeDataPartner>() {
                new BusTypeDataPartner {Id =1, Text = "大型" },
                new BusTypeDataPartner {Id =2, Text = "中型" },
                new BusTypeDataPartner { Id =3, Text = "小型"},
            };

            LoadData();
            formContextPopup = new EditContext(YouShaDataInsert);
            formContextPopupHaiSha = new EditContext(haiShaDataItemUpdate);
            GenrateGrid();
            HeaderYouSha = InitHeaderYouSha();
            BodyYouSha = InitBodyYouSha();
        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }

        await base.OnInitializedAsync().ContinueWith(async t => await InvokeAsync(StateHasChanged));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 8);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 2);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 4);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 5);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 6);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 20);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 30);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 50);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 100);
        await JSRuntime.InvokeAsync<string>("addtabindex", "notabindex");
        await JSRuntime.InvokeAsync<string>("loadPageScript", "partnerBookingInputPage", "partnerBookingPageTabKey");

        if (!firstRender)
        {
            await LoadingService.HideAsync();
            // await  JSRuntime.InvokeAsync<string>("focusEditor", "focus");
            await JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    #endregion

    #region LoadData

    private async Task LoadCodeKbnData()
    {
        try
        {
            var currentTenantId = new ClaimModel().TenantID;

            tpm_CodeKbDataOTHJINKBNList = await TPM_CodeKbnService.GetdataOTHJINKBN(currentTenantId);
            depotNamelst = await TPM_CodeKbnService.GetCodeKbnBunruiData(currentTenantId);
            tpm_CodeKbDataKenCDList = await TPM_CodeKbnService.GetdataKenCDYouSha(currentTenantId);
            tpm_CodeUKEJYKBNCDKbDataList = await TPM_CodeKbnService.GetdataUKEJYKBNCD(currentTenantId);

            depotNamelst?.Insert(0, null);
            tpm_CodeKbDataKenCDList?.Insert(0, null);

        }
        catch (Exception ex)
        {

        }

        //tpm_CodeUKEJYKBNCDKbDataList?.Insert(0, null);
    }

    async void LoadData()
    {
        try
        {
            if (HaiShaDataList != null && HaiShaDataList.Count > 0)
            {
                foreach (var item in HaiShaDataList)
                {
                    item.ColorClass = "";
                    var checkColor = await BusLineCssColorServices.GetCssColor(item.HAISHA_UkeNo, item.HAISHA_UnkRen, item.HAISHA_TeiDanNo, item.HAISHA_BunkRen);
                    if (item.HAISHA_YouTblSeq != 0)
                    {
                        item.CheckHasYouSha = true;
                    }
                    item.ColorClass = checkColor.cssColor;
                }
            }
            YouShaDataInsert.CodeKbnDataPopup = CodeKbnDataPopupList.FirstOrDefault();
            var paged = PagedList<HaiShaDataTable>.ToPagedList(HaiShaDataList.AsQueryable(), CurrentPage, (int)RecordsPerPage);
            TotalItems = paged.TotalCount;
            HaiShaDataList = paged;
            CheckedItems.Clear();
            CheckedItemsYouSha.Clear();
            IsEnableBtnAddNew();
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    #endregion


    #region Value method change
    void OnHaisha_HaiSTimeChanged(BookingInputHelper.MyTime newTime)
    {
        try
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            HaiSTimeValue = BusScheduleHelper.ConvertTime(timeValue);
            haiShaDataItemUpdate.HaiSTime = HaiSTimeValue.ToString("hhmm");
        }
        catch (Exception ex)
        {
        }
        StateHasChanged();
    }
    void OnHaisha_SyuPaTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        SyuPaTimeValue = BusScheduleHelper.ConvertTime(timeValue);
        haiShaDataItemUpdate.SyuPaTime = SyuPaTimeValue.ToString("hhmm");
        StateHasChanged();
    }
    void OnHaisha_TouChTimeChanged(BookingInputHelper.MyTime newTime)
    {
        try
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            TouChTimeValue = BusScheduleHelper.ConvertTime(timeValue);
            haiShaDataItemUpdate.TouChTime = TouChTimeValue.ToString("hhmm");
        }
        catch (Exception ex)
        {
        }
        StateHasChanged();
    }
    void OnHaisha_HaiSSetTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        BIN_TouChTime = BusScheduleHelper.ConvertTime(timeValue);
        haiShaDataItemUpdate.BIN_TouChTime = BIN_TouChTime.ToString("hhmm");
        StateHasChanged();
    }
    void OnHaisha_TouSetTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        BIN_SyuPaTime = BusScheduleHelper.ConvertTime(timeValue);
        haiShaDataItemUpdate.BIN_SyuPaTime = BIN_SyuPaTime.ToString("hhmm");
        StateHasChanged();
    }
    #endregion

    #region Action
    void HireCarRegister()
    {
        PopupHireCarRegister = false;
    }
    private async Task OpenPopupHireCarRegister()
    {

        try

        {
            checkOptionAddYouSha = true;
            //var Data = e.Data as HaiShaDataTable;
            var Data = CheckedItems[0] ?? new HaiShaDataTable();
            isCheckBIT02 = true;
            if (checkOptionAddYouSha)
            {
                if (haiShaDataListTemp.Count == 0)
                {
                    haiShaDataListTemp.Add(Data);
                }
                await LoadPopup_YouSha(checkOptionAddYouSha, null);
                txtPopupYouSha = txtInsertForm;
                PopupHireCarRegister = true;
                isHaitaValid = true;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    async Task OpenPopupHireCarUpdate(ItemClickEventArgs e)
    {
        try
        {
            checkOptionAddYouSha = false;
            // var Data = e.Data as YouShaDataTable;
            var Data = CheckedItemsYouSha[0];
            youShaItemUpdate = Data;
            if (!checkOptionAddYouSha)
            {
                isHaitaValid = true;
                _haita = await PartnerBookingInputService.GetHaitaCheck(Ukeno, short.Parse(UnkRen), youShaItemUpdate.YOUSHA_YouTblSeq);
                await LoadPopup_YouSha(checkOptionAddYouSha, Data);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    #endregion
    List<HaiShaDataTable> haiShaDataListTemp = new List<HaiShaDataTable>();
    void OnCheckedHaiShaChanged(bool newValue, HaiShaDataTable data)
    {
        try
        {
            if (data != null)
            {
                HaiShaDataList.Where(x => x.HAISHA_UkeNo == data.HAISHA_UkeNo
                    && x.HAISHA_UnkRen == data.HAISHA_UnkRen
                    && x.HAISHA_SyaSyuRen == data.HAISHA_SyaSyuRen
                    && x.HAISHA_BunkRen == data.HAISHA_BunkRen
                    && x.HAISHA_TeiDanNo == data.HAISHA_TeiDanNo).First().Checked = newValue;
                if (newValue == true && data != null && data.HAISHA_YouTblSeq == 0)
                {
                    haiShaDataListTemp.Add(data);
                }
                else if (newValue == false && data != null)
                {
                    haiShaDataListTemp.Remove(data);
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }

    async Task LoadPopup_YouSha(bool optionAddYouSha, YouShaDataTable youShaDataTable)
    {
        isCustomerNull = isGyosyaNull = isTokiskNull = false;
        try
        {
            if (optionAddYouSha && youShaDataTable == null)
            {
                YouShaDataInsert.HaiShaDataTableList = haiShaDataListTemp;
                TokistDataList = await PartnerBookingInputService.GetTokiskData(Ukeno, UnkRen, haiShaDataListTemp.FirstOrDefault().HAISHA_KikYmd, new ClaimModel().TenantID);
                YouShaDataInsert.TokistData = TokistDataList.FirstOrDefault();
                Model = new CustomerModel();
                DefaultValue = new DefaultCustomerData();
                DefaultValue.GyosyaCdSeq = 0;
                foreach (var item in YyKSyuDataPopupList)
                {
                    var haiShaList = haiShaDataListTemp.Where(y => y.HAISHA_UkeNo == item.YYKSYU_UkeNo
                                                              && y.HAISHA_UnkRen == item.YYKSYU_UnkRen
                                                              && y.HAISHA_SyaSyuRen == item.YYKSYU_SyaSyuRen).ToList();

                    List<int> teiDanNo = new List<int>();
                    var itemBusType = item.YYKSYU_KataKbn;
                    item.BusTypeDataPartner = cartypelst.Where(x => x.Id == itemBusType).First();
                    if (haiShaDataListTemp.Select(x => x.HAISHA_UkeNo).ToArray().Contains(item.YYKSYU_UkeNo)
                                  && haiShaDataListTemp.Select(x => x.HAISHA_UnkRen).ToArray().Contains(item.YYKSYU_UnkRen)
                                  && haiShaDataListTemp.Select(x => x.HAISHA_SyaSyuRen).ToArray().Contains(item.YYKSYU_SyaSyuRen))
                    {
                        item.CheckChoose = true;
                        item.CheckDisable = false;
                        if (haiShaList != null)
                        {
                            item.YOUSYU_SyaSyuDai = 0;
                            item.YOUSYU_SyaSyuTan = 0;
                            foreach (var itemHaiSha in haiShaList)
                            {
                                if (!teiDanNo.Contains(itemHaiSha.HAISHA_TeiDanNo))
                                {
                                    item.YOUSYU_SyaSyuDai++;
                                    teiDanNo.Add(itemHaiSha.HAISHA_TeiDanNo);
                                }
                            }
                        }
                        item.YOUSYU_SyaRyoUnc = item.YOUSYU_SyaSyuDai * item.YOUSYU_SyaSyuTan;
                    }
                    else
                    {
                        item.CheckDisable = true;
                    }
                }
                VATDataPopup = await PartnerBookingInputService.GetVATPopup_HaiShaData(haiShaDataListTemp);
                SetValueFormYouShaInsert();
            }
            else if (!optionAddYouSha && youShaDataTable != null)
            {
                if (haiShaDataListTemp.Count > 0)
                {
                    await GetDataUpdateYouShaPopup();
                    txtPopupYouSha = txtEditForm;
                    PopupHireCarRegister = true;
                }
                else
                {
                    PopupConfirmUpdateYouSha = true;
                }
            }
        }
        catch (Exception ex)
        {
        }


    }
    private void SetValueFormYouShaInsert()
    {
        try
        {
            SetValueYouSyuFormInsert();
            YouShaDataInsert.CodeKbnDataPopup = CodeKbnDataPopupList.FirstOrDefault();

            YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu = VATDataPopup.VAT_HaiSha;
            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo = CaculateVATMoney(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
              YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            YouShaDataInsert.YouShaDataPopup.Sum_MoneyAllShow = CaculateSumMoneyShow(YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo,
            YouShaDataInsert.Sum_YOUSYU_SyaSyuTan, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu = TokistDataList.FirstOrDefault().TOKIST_TesuRitu;
            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = CaculateVATMoneyCustomer(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
            YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm, YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo);
            YouShaDataInsert.YouShaDataPopup.YOUSHA_SihYotYmd = YouShaDataInsert.InvoiceDate.ToString("yyyyMMdd");
            YouShaDataInsert.YyKSyuDataPopups = YyKSyuDataPopupList.Where(x => x.CheckChoose == true).ToList();
        }
        catch (Exception ex)
        {

        }

    }
    private void SetValueYouSyuFormInsert()
    {
        try
        {
            YouShaDataInsert.Sum_YYKSYU_SyaSyuDai = YyKSyuDataPopupList.Sum(x => x.YYKSYU_SyaSyuDai);
            YouShaDataInsert.Sum_YYKSYU_UnitBusPrice = YyKSyuDataPopupList.Sum(x => x.YYKSYU_SyaRyoUnc);
            YouShaDataInsert.Sum_YOUSYU_SyaSyuDai = YyKSyuDataPopupList.Where(x => x.CheckChoose == true).Sum(x => x.YOUSYU_SyaSyuDai);
            YouShaDataInsert.Sum_YOUSYU_SyaSyuTan = YyKSyuDataPopupList.Where(x => x.CheckChoose == true).Sum(x => x.YOUSYU_SyaRyoUnc);
        }
        catch (Exception ex)
        {

        }

    }
    void OnYouSyu_SyaSyuTanChanged(string value, int rowID)
    {
        try
        {
            var yyKSyuDataRowId = YyKSyuDataPopupList.Where(x => x.RowID == rowID).First();
            int valueParse = 0;
            bool checkParse = int.TryParse(value, out valueParse);

            if (checkParse && valueParse >= 0)
            {
                yyKSyuDataRowId.YOUSYU_SyaSyuTan = valueParse;
                yyKSyuDataRowId.YOUSYU_SyaRyoUnc = valueParse * yyKSyuDataRowId.YOUSYU_SyaSyuDai;
            }
            else
            {
                YyKSyuDataPopupList.Where(x => x.RowID == rowID).First().YOUSYU_SyaSyuTan = yyKSyuDataRowId.YOUSYU_SyaSyuTan;
            }
            YyKSyuDataPopupList.Where(x => x.RowID == rowID).First().YOUSYU_SyaSyuTan = yyKSyuDataRowId.YOUSYU_SyaSyuTan;
            YyKSyuDataPopupList.Where(x => x.RowID == rowID).First().YOUSYU_SyaRyoUnc = yyKSyuDataRowId.YOUSYU_SyaRyoUnc;
            YouShaDataInsert.Sum_YOUSYU_SyaSyuTan = calculateSumSyaSyuTan(YyKSyuDataPopupList);

            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo = CaculateVATMoney(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
            YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            YouShaDataInsert.YouShaDataPopup.Sum_MoneyAllShow = CaculateSumMoneyShow(YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo,
                YouShaDataInsert.Sum_YOUSYU_SyaSyuTan, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = CaculateVATMoneyCustomer(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
            YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm, YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo);

            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    void OnYOUSYU_SyaRyoUncChanged(string value, int rowID)
    {
        try
        {
            var yyKSyuDataRowId = YyKSyuDataPopupList.Where(x => x.RowID == rowID).First();
            int valueParse = 0;
            bool checkParse = int.TryParse(value, out valueParse);
            if (checkParse && valueParse >= 0)
            {
                yyKSyuDataRowId.YOUSYU_SyaRyoUnc = valueParse;
            }
            else
            {
                YyKSyuDataPopupList.Where(x => x.RowID == rowID).FirstOrDefault().YOUSYU_SyaRyoUnc = yyKSyuDataRowId.YOUSYU_SyaRyoUnc;
            }
            YyKSyuDataPopupList.Where(x => x.RowID == rowID).First().YOUSYU_SyaRyoUnc = yyKSyuDataRowId.YOUSYU_SyaRyoUnc;
            YouShaDataInsert.Sum_YOUSYU_SyaSyuTan = calculateSumSyaSyuTan(YyKSyuDataPopupList);

            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo = CaculateVATMoney(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
            YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            YouShaDataInsert.YouShaDataPopup.Sum_MoneyAllShow = CaculateSumMoneyShow(YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo,
                YouShaDataInsert.Sum_YOUSYU_SyaSyuTan, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = CaculateVATMoneyCustomer(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
            YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm, YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo);
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }

    void SelectedTaxTypeForBusChanged(CodeKbnDataPopup codeKbnData)
    {
        try
        {
            if (codeKbnData != null)
            {
                YouShaDataInsert.CodeKbnDataPopup = codeKbnData;
                if (codeKbnData.CodeKbnNm == "非課税")
                {
                    YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu = 0;
                }
                else
                {
                    YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu = VATDataPopup.VAT_HaiSha;
                }
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo = CaculateVATMoney(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
                YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu, codeKbnData.CodeKbnNm);
                YouShaDataInsert.YouShaDataPopup.Sum_MoneyAllShow = CaculateSumMoneyShow(YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo,
                YouShaDataInsert.Sum_YOUSYU_SyaSyuTan, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = CaculateVATMoneyCustomer(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
            YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm, YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    void OnYouSha_ZeiritsuChanged(string valueVAT)
    {
        try
        {
            decimal valueParse = 0;
            bool checkParse = decimal.TryParse(valueVAT, out valueParse);
            if (checkParse)
            {
                YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu = valueParse;
            }
            else
            {
                YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu = 0;
            }
            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo = CaculateVATMoney(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
            valueParse, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            YouShaDataInsert.YouShaDataPopup.Sum_MoneyAllShow = CaculateSumMoneyShow(YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo,
            YouShaDataInsert.Sum_YOUSYU_SyaSyuTan, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = CaculateVATMoneyCustomer(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
                YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm, YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo);
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    void OnYouSha_SyaRyoSyoChanged(string valueMoneyVAT)
    {
        try
        {
            int valueParse = 0;
            bool checkParse = int.TryParse(valueMoneyVAT, out valueParse);
            if (checkParse && valueParse >= 0)
            {
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo = valueParse;
            }
            else
            {
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo = YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo;
            }
            YouShaDataInsert.YouShaDataPopup.Sum_MoneyAllShow = CaculateSumMoneyShow(YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo,
                YouShaDataInsert.Sum_YOUSYU_SyaSyuTan, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    void OnYouSha_TesuRituChanged(string valueVATCustomer)
    {
        try
        {
            decimal valueParse = 0;
            bool checkParse = decimal.TryParse(valueVATCustomer, out valueParse);
            if (checkParse)
            {
                YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu = valueParse;
            }
            else
            {
                YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu = 0;
            }
            YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = CaculateVATMoneyCustomer(YouShaDataInsert.Sum_YOUSYU_SyaSyuTan,
                YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm, YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo);
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    void OnYouSha_SyaRyoTesChanged(string valueMoneyVATCustomer)
    {
        try
        {
            int valueParse = 0;
            bool checkParse = int.TryParse(valueMoneyVATCustomer, out valueParse);
            if (checkParse && valueParse >= 0)
            {
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = valueParse;
            }
            else
            {
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    void OnDateChanged(DateTime newValue)
    {
        EndDayOfMonth = newValue;
        YouShaDataInsert.YouShaDataPopup.YOUSHA_SihYotYmd = newValue.ToString("yyyyMMdd");
        StateHasChanged();
    }

    void OnSelectedCarTypeItemChanged(BusTypeDataPartner selectedItem, int rowID)
    {
        try
        {
            if (selectedItem != null)
            {
                YyKSyuDataPopupList.Where(x => x.RowID == rowID).FirstOrDefault().YOUSYU_YouKataKbn = (byte)selectedItem.Id;
                YyKSyuDataPopupList.Where(x => x.RowID == rowID).FirstOrDefault().BusTypeDataPartner = selectedItem;
            }
            StateHasChanged();

        }
        catch (Exception ex)
        {

        }

    }
    private int calculateSumSyaSyuTan(List<YyKSyuDataPopup> yyKSyuDataPopupList)
    {
        int result = 0;
        try
        {

            if (yyKSyuDataPopupList != null)
            {
                result = yyKSyuDataPopupList.Where(x => x.CheckChoose == true).Sum(x => x.YOUSYU_SyaRyoUnc);
            }
            return result;
        }
        catch (Exception ex)
        {
            return result;
        }

    }
    private int CaculateVATMoney(decimal sumMoney, decimal VAT, string typeVAT)
    {
        int result = 0;
        try
        {
            var dataKaset = TKM_KasSetDataList.FirstOrDefault();
            decimal vatMoney = 0;

            if (typeVAT == "外税")
            {
                vatMoney = sumMoney * (VAT / 100);
            }
            else if (typeVAT == "内税")
            {
                vatMoney = sumMoney * VAT / (100 + VAT);
            }
            else if (typeVAT == "非課税")
            {
                vatMoney = 0;
            }
            if (dataKaset != null)
            {
                if (dataKaset.SyohiHasu == 1)
                {
                    result = (int)Math.Ceiling(vatMoney);
                }
                else if (dataKaset.SyohiHasu == 2)
                {
                    result = (int)Math.Floor(vatMoney);
                }
                else
                {
                    result = (int)Math.Round(vatMoney, 0, MidpointRounding.AwayFromZero);
                }
            }
            return result;
        }
        catch (Exception ex)
        {
            return result;
        }

    }
    private int CaculateVATMoneyCustomer(decimal sumMoney, decimal VAT, string typeVAT, decimal tax)
    {
        int result = 0;
        try
        {
            var dataKaset = TKM_KasSetDataList.FirstOrDefault();
            decimal vatMoney = 0;

            if (typeVAT == "外税")
            {
                vatMoney = (sumMoney + tax) * (VAT / 100);
            }
            else
            { vatMoney = sumMoney * (VAT / 100); }

            if (dataKaset != null)
            {
                if (dataKaset.TesuHasu == 1)
                {
                    result = (int)Math.Ceiling(vatMoney);
                }
                else if (dataKaset.TesuHasu == 2)
                {
                    result = (int)Math.Floor(vatMoney);
                }
                else
                {
                    result = (int)Math.Round(vatMoney, 0, MidpointRounding.AwayFromZero);
                }
            }
            return result;
        }
        catch (Exception ex)
        {
            return result;
        }

    }

    void MenuOnAppearingHandler(MenuAppearingEventArgs e)
    {
        try
        {
            if (e.Data != null)
            {
                var data = e.Data as YouShaDataTable;
                SelectedYouShaYouTblSeq = data.YOUSHA_YouTblSeq;
                HaiShaDataList.ForEach(x => x.Checked = false);
                foreach (var item in HaiShaDataList)
                {
                    if (item.HAISHA_YouTblSeq == data.YOUSHA_YouTblSeq)
                    {
                        item.Checked = true;
                    }
                    if (haiShaDataListTemp.Select(x => x.HAISHA_UkeNo).ToArray().Contains(item.HAISHA_UkeNo)
                        && haiShaDataListTemp.Select(x => x.HAISHA_UnkRen).ToArray().Contains(item.HAISHA_UnkRen)
                        && haiShaDataListTemp.Select(x => x.HAISHA_SyaSyuRen).ToArray().Contains(item.HAISHA_SyaSyuRen)
                        && haiShaDataListTemp.Select(x => x.HAISHA_BunkRen).ToArray().Contains(item.HAISHA_BunkRen)
                        && haiShaDataListTemp.Select(x => x.HAISHA_TeiDanNo).ToArray().Contains(item.HAISHA_TeiDanNo))
                    {
                        item.Checked = true;
                    }
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    async void ReLoadDataHaiSha_YouSha()
    {
        try
        {
            if (Ukeno != "" && UnkRen != "")
            {
                await LoadHaiShaDataListWithIndex();
                //HaiShaDataList = await PartnerBookingInputService.GetHaiShaData(Ukeno, UnkRen, new ClaimModel().TenantID);
                await LoadYouShaDataListWithIndex();
                //YouShaDataList = await PartnerBookingInputService.GetYouShaData(Ukeno, UnkRen, new ClaimModel().TenantID);
                YyKSyuDataPopupList = await PartnerBookingInputService.GetYyKSyuDataPopup(Ukeno, UnkRen, new ClaimModel().TenantID, youTblSeq);
                CodeKbnDataPopupList = await PartnerBookingInputService.GetCodeKbnData(new ClaimModel().TenantID);
                IsEnableBtnAddNew();
                LoadData();
            }
        }
        catch (Exception ex)
        {

        }

    }

    void HidePopupHireCarRegister()
    {
        ReLoadDataHaiSha_YouSha();
        haiShaDataListTemp.Clear();
        IsEnableBtnAddNew();
        youTblSeq = 0;
        checkDataExist = false;
        disableSubmit = true;
        PopupHireCarRegister = false;
        StateHasChanged();
    }
    async Task GetDataUpdateYouShaPopup()
    {
        try
        {
            YyKSyuDataPopupList = await PartnerBookingInputService.GetYyKSyuDataPopup(Ukeno, UnkRen, new ClaimModel().TenantID, youShaItemUpdate.YOUSHA_YouTblSeq);
            TokistDataList = await PartnerBookingInputService.GetTokiskData(Ukeno, UnkRen, HaiShaDataList.First().HAISHA_KikYmd, new ClaimModel().TenantID);
            YouShaDataInsert.HaiShaDataTableList = haiShaDataListTemp;
            var itemUpdate = await PartnerBookingInputService.GetYouShaDataPopup(youShaItemUpdate.YOUSHA_UkeNo,
                youShaItemUpdate.YOUSHA_UnkRen.ToString(), new ClaimModel().TenantID, youShaItemUpdate.YOUSHA_YouTblSeq);
            if (itemUpdate != null)
            {
                YouShaDataInsert.YouShaDataPopup = itemUpdate;
                DefaultValue.GyosyaCdSeq = YouShaDataInsert.YouShaDataPopup.GYOUSYA_GyosyaCdSeq;
                DefaultValue.TokiskCdSeq = YouShaDataInsert.YouShaDataPopup.TOKISK_TokuiCdSeq;
                DefaultValue.TokiStCdSeq = YouShaDataInsert.YouShaDataPopup.TOKIST_SitenCdSeq;
                isCustomerNull = isGyosyaNull = isTokiskNull = false;
                isCheckBIT02 = false;
                YouShaDataInsert.TokistData = TokistDataList.Where(x => x.TOKISK_TokuiSeq == itemUpdate.YOUSHA_YouCdSeq
                && x.TOKIST_SitenCdSeq == itemUpdate.YOUSHA_YouSitCdSeq).FirstOrDefault();
                var youSyuList = await PartnerBookingInputService.GetYouSyuDataPopup(youShaItemUpdate.YOUSHA_UkeNo,
                youShaItemUpdate.YOUSHA_UnkRen.ToString(), youShaItemUpdate.YOUSHA_YouTblSeq);
                if (youSyuList != null && youSyuList.Count > 0)

                {
                    foreach (var item in YyKSyuDataPopupList)
                    {
                        item.BusTypeDataPartner = cartypelst.Where(x => x.Id == item.YYKSYU_KataKbn).FirstOrDefault();
                        var youSyuItem = youSyuList.Where(x => x.UkeNo == item.YYKSYU_UkeNo && x.UnkRen == item.YYKSYU_UnkRen
                        && x.SyaSyuRen == item.YYKSYU_SyaSyuRen).FirstOrDefault();
                        if (youSyuItem != null)
                        {
                            item.CheckChoose = true;
                            item.CheckDisable = false;
                            item.BusTypeDataPartner = cartypelst.Where(x => x.Id == youSyuItem.YouKataKbn).FirstOrDefault();
                        }
                        if (haiShaDataListTemp.Count > 0)
                        {
                            if (haiShaDataListTemp.Select(x => x.HAISHA_UkeNo).ToArray().Contains(item.YYKSYU_UkeNo)
                                 && haiShaDataListTemp.Select(x => x.HAISHA_UnkRen).ToArray().Contains(item.YYKSYU_UnkRen)
                                 && haiShaDataListTemp.Select(x => x.HAISHA_SyaSyuRen).ToArray().Contains(item.YYKSYU_SyaSyuRen))
                            {
                                var haiShaList = haiShaDataListTemp.Where(y => y.HAISHA_UkeNo == item.YYKSYU_UkeNo
                                    && y.HAISHA_UnkRen == item.YYKSYU_UnkRen
                                    && y.HAISHA_SyaSyuRen == item.YYKSYU_SyaSyuRen).ToList();
                                var data = await PartnerBookingInputService.CheckDataYouSha(item.YYKSYU_UkeNo, item.YYKSYU_UnkRen.ToString(), new ClaimModel().TenantID);
                                if (data != null && data.Count > 0)
                                {
                                    haiShaList = null;
                                }
                                List<int> teiDanNo = new List<int>();
                                if (haiShaList != null)
                                {
                                    foreach (var itemHaiSha in haiShaList)
                                    {
                                        if (!teiDanNo.Contains(itemHaiSha.HAISHA_TeiDanNo))
                                        {
                                            item.YOUSYU_SyaSyuDai++;
                                            teiDanNo.Add(itemHaiSha.HAISHA_TeiDanNo);
                                        }
                                    }
                                }
                                if (item.CheckChoose == true)
                                {
                                    item.YOUSYU_SyaSyuTan = youSyuItem.SyaSyuTan;
                                    item.YOUSYU_SyaRyoUnc = item.YOUSYU_SyaSyuTan * item.YOUSYU_SyaSyuDai;
                                }
                                else
                                {
                                    item.CheckChoose = true;
                                    item.CheckDisable = false;
                                    item.YOUSYU_SyaRyoUnc = item.YOUSYU_SyaSyuDai * item.YOUSYU_SyaSyuTan;
                                }
                            }
                        }
                    }
                    SetValueYouSyuFormInsert();
                }
                YouShaDataInsert.CodeKbnDataPopup = CodeKbnDataPopupList.Where(x => x.CodeKbn == itemUpdate.YOUSHA_ZeiKbn.ToString("D2")).FirstOrDefault();
                YouShaDataInsert.YouShaDataPopup.YOUSHA_Zeiritsu = itemUpdate.YOUSHA_Zeiritsu;
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo = itemUpdate.YOUSHA_SyaRyoSyo;
                YouShaDataInsert.YouShaDataPopup.Sum_MoneyAllShow = CaculateSumMoneyShow(YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoSyo,
                YouShaDataInsert.Sum_YOUSYU_SyaSyuTan, YouShaDataInsert.CodeKbnDataPopup.CodeKbnNm);
                YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu = itemUpdate.YOUSHA_TesuRitu;
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = itemUpdate.YOUSHA_SyaRyoTes;
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SihYotYmd = itemUpdate.YOUSHA_SihYotYmd;
                EndDayOfMonth = ParseStringToDateTime(itemUpdate.YOUSHA_SihYotYmd);
                YouShaDataInsert.YyKSyuDataPopups = YyKSyuDataPopupList.Where(x => x.CheckChoose == true).ToList();

            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    void AddNewYouSha(MouseEventArgs e)
    {
        PopupConfirmUpdateYouSha = false;
        StateHasChanged();
    }

    async Task CancelAddNewHaiSha(MouseEventArgs e)
    {
        PopupConfirmUpdateYouSha = false;
        if (PopupConfirmUpdateYouSha == false)
        {
            await GetDataUpdateYouShaPopup();
            txtPopupYouSha = txtEditForm;
            PopupHireCarRegister = true;
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmitPopupYouSha()
    {
        youTblSeq = 0;
        disableSubmit = false;
        bool isValid = formContextPopup.Validate();
        isCustomerNull = Model.SelectedTokiSt == null;
        isGyosyaNull = Model.SelectedGyosya == null;
        isTokiskNull = Model.SelectedTokisk == null;
        if (isValid && !isCustomerNull)
        {
            try
            {

                YouShaDataInsert.TKM_KasSetDataList = TKM_KasSetDataList;
                var client = await Http.GetHttpClient();
                if (!String.IsNullOrEmpty(youShaItemUpdate.YOUSHA_UkeNo) && !String.IsNullOrWhiteSpace(youShaItemUpdate.YOUSHA_UkeNo))
                {
                    var haita = await PartnerBookingInputService.GetHaitaCheck(youShaItemUpdate.YOUSHA_UkeNo,
                        youShaItemUpdate.YOUSHA_UnkRen, youShaItemUpdate.YOUSHA_YouTblSeq);
                    isHaitaValid = _haita.HaishaUpdYmdTime == haita.HaishaUpdYmdTime &&
                                    _haita.YoushaUpdYmdTime == haita.YoushaUpdYmdTime &&
                                    _haita.YouSyuUpdYmdTime == haita.YouSyuUpdYmdTime &&
                                    _haita.MihrimUpdYmdTime == haita.MihrimUpdYmdTime &&
                                    _haita.YykshoUpdYmdTime == haita.YykshoUpdYmdTime &&
                                    _haita.UnkobiUpdYmdTime == haita.UnkobiUpdYmdTime &&
                                    _haita.HaiinUpdYmdTime == haita.HaiinUpdYmdTime;
                    if (!isHaitaValid) return;


                    HttpResponseMessage response = await client.PutAsync($"{baseUrl}/api/PartnerBookingInput/{youShaItemUpdate.YOUSHA_UkeNo}", Http.getStringContentFromObject(YouShaDataInsert));
                    if (response.IsSuccessStatusCode)
                    {
                        disableSubmit = true;
                        string newUkeNo = await response.Content.ReadAsStringAsync();
                        PopupHireCarRegister = false;
                        ReLoadDataHaiSha_YouSha();
                        haiShaDataListTemp.Clear();
                        youShaItemUpdate.YOUSHA_UkeNo = "";
                    }
                    else
                    {
                        ErrorHandlerService.HandleError(new Exception("Can't Insert PartnerBookingInput"));
                        PopupHireCarRegister = false;
                        StateHasChanged();
                    }
                }
                else
                {
                    bool checkDataYouShaExistDb = await CheckDataYousha(YouShaDataInsert);
                    if (!checkDataYouShaExistDb)
                    {
                        checkDataExist = false;
                        HttpResponseMessage response = await client.PostAsync($"{baseUrl}/api/PartnerBookingInput/", Http.getStringContentFromObject(YouShaDataInsert));
                        if (response.IsSuccessStatusCode)
                        {
                            disableSubmit = true;
                            string newUkeNo = await response.Content.ReadAsStringAsync();
                            PopupHireCarRegister = false;
                            haiShaDataListTemp.Clear();
                            ReLoadDataHaiSha_YouSha();
                        }
                        else
                        {
                            ErrorHandlerService.HandleError(new Exception("Can't Update PartnerBookingInput"));
                            PopupHireCarRegister = false;
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        checkDataExist = true;
                        emptyItemMessage[nameof(MessageCheckDataExist)] = MessageCheckDataExist;
                    }
                }

            }
            catch (Exception ex)
            {
                ErrorHandlerService.HandleError(ex);
            }
        }
        IsEnableBtnAddNew();
        StateHasChanged();
    }
    async Task OpenPopupHaiShaUpdate(ItemClickEventArgs e)
    {
        try
        {
            if (e != null)
            {
                await LoadingService.ShowAsync();

                //var Data = e.Data as HaiShaDataTable;
                var Data = CheckedItems[0] ?? new HaiShaDataTable();
                await GetDataPopupHaiSha(Data);
                formContextPopupHaiSha = new EditContext(haiShaDataItemUpdate);
                PopupHaiShaUpdate = true;
                isHaitaValid = true;
                _haita = await PartnerBookingInputService.GetHaitaCheck(Data.HAISHA_UkeNo, Data.HAISHA_UnkRen, -1);
            }
        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }
        await InvokeAsync(StateHasChanged);
    }
    void ClosePopupHaiShaUpdate()
    {
        ResetCondition_HaiSha();
        StateHasChanged();
    }
    private void ResetCondition_HaiSha()
    {
        try

        {
            messageValidDateTime.Clear();
            disableSubmit = true;
            disableSubmitTouS = true;
            CheckHaiSTime = false;
            CheckTouTime = false;
            PopupHaiShaUpdate = false;
            CheckedItems.Clear();
            CheckedItemsYouSha.Clear();

        }
        catch (Exception ex)
        {

        }

    }

    async Task GetDataPopupHaiSha(HaiShaDataTable data)
    {
        try
        {
            await LoadCodeKbnData();

            HaiShaDataItem = data;
            haiShaDataItemUpdate.HAISHA_UkeNo = data.HAISHA_UkeNo;
            haiShaDataItemUpdate.HAISHA_UnkRen = data.HAISHA_UnkRen;
            haiShaDataItemUpdate.HAISHA_BunkRen = data.HAISHA_BunkRen;
            haiShaDataItemUpdate.HAISHA_TeiDanNo = data.HAISHA_TeiDanNo;
            haiShaDataItemUpdate.HAISHA_SyaSyuRen = data.HAISHA_SyaSyuRen;

            haiShaDataItemUpdate.GYOUSYA_GyosyaCd = data.GYOUSYA_GyosyaCd;
            haiShaDataItemUpdate.GYOUSYA_GyosyaNm = data.GYOUSYA_GyosyaNm;
            haiShaDataItemUpdate.YOUSHASAKI_TokuiCd = data.YOUSHASAKI_TokuiCd;
            haiShaDataItemUpdate.YOUSHASAKISITEN_SitenCd = data.YOUSHASAKISITEN_SitenCd;

            HaiSYmdValue = ParseStringToDateTime(data.HAISHA_HaiSYmd);
            haiShaDataItemUpdate.HaiSYmd = HaiSYmdValue.ToString("yyyyMMdd");
            HaiSTimeValue = ParseStringToTimeSpan(data.HAISHA_HaiSTime);
            haiShaDataItemUpdate.HaiSTime = HaiSTimeValue.ToString("hhmm");
            SyuPaTimeValue = ParseStringToTimeSpan(data.HAISHA_SyuPaTime);
            haiShaDataItemUpdate.SyuPaTime = SyuPaTimeValue.ToString("hhmm");
            TouYmdValue = ParseStringToDateTime(data.HAISHA_TouYmd);
            haiShaDataItemUpdate.TouYmd = TouYmdValue.ToString("yyyyMMdd");
            TouChTimeValue = ParseStringToTimeSpan(data.HAISHA_TouChTime);
            haiShaDataItemUpdate.TouChTime = TouChTimeValue.ToString("hhmm");
            haiShaDataItemUpdate.GoSya = string.Format("{0:D4}", data.HAISHA_GoSya).Trim();
            haiShaDataItemUpdate.DataNm2 = data.HAISHA_DanTaNm2;
            haiShaDataItemUpdate.codeKbnBunruiDataPopupStart = depotNamelst.FirstOrDefault(x => x != null && x.HAICHI_HaiSCdSeq == data.HAISHA_HaiSCdSeq);

            haiShaDataItemUpdate.HAISHA_HaiSJyus1 = data.HAISHA_HaiSJyus1;
            haiShaDataItemUpdate.HAISHA_HaiSJyus2 = data.HAISHA_HaiSJyus2;
            if (haiShaDataItemUpdate.codeKbnBunruiDataPopupStart != null)
            {
                haiShaDataItemUpdate.HAISHA_HaiSKigou = data.HAISHA_HaiSKigou;
            }
            else
            {
                haiShaDataItemUpdate.HAISHA_HaiSKigou = "";
                haiShaDataItemUpdate.HAISHA_TouKigou = string.Empty;
            }

            vehicleDispatchPopupListStart = await TPM_CodeKbnService.GetVehicleDispatchDataPopup(new ClaimModel().TenantID, data.HAISHA_HaiSYmd);
            vehicleDispatchPopupListStart.Insert(0, null);
            haiShaDataItemUpdate.vehicleDispatchPopupStart = vehicleDispatchPopupListStart.FirstOrDefault(x => x != null && x.KOUTU_KoukCdSeq == data.HAISHA_HaiSKouKCdSeq);
            if (!String.IsNullOrWhiteSpace(data.HAISHA_HaiSSetTime) && !String.IsNullOrEmpty(data.HAISHA_HaiSSetTime))
            {
                BIN_TouChTime = ParseStringToTimeSpan(data.HAISHA_HaiSSetTime);
                haiShaDataItemUpdate.BIN_BinNmStart = data.HAISHA_HaisBinNm.Trim();
            }
            else
            {
                if (haiShaDataItemUpdate.vehicleDispatchPopupStart != null)
                {
                    BIN_TouChTime = ParseStringToTimeSpan(haiShaDataItemUpdate.vehicleDispatchPopupStart.BIN_TouChTime);
                    haiShaDataItemUpdate.BIN_BinNmStart = haiShaDataItemUpdate.vehicleDispatchPopupStart.BIN_BinNm ?? "";
                }
                else
                {
                    BIN_TouChTime = ParseStringToTimeSpan("0000");
                    haiShaDataItemUpdate.BIN_BinNmStart = "";
                }
            }
            haiShaDataItemUpdate.BIN_TouChTime = BIN_TouChTime.ToString("hhmm");
            haiShaDataItemUpdate.codeKbnBunruiDataPopupEnd = depotNamelst.FirstOrDefault(x => x != null && x.HAICHI_HaiSCdSeq == data.HAISHA_TouCdSeq);
            haiShaDataItemUpdate.HAISHA_TouJyusyo1 = data.HAISHA_TouJyusyo1;
            haiShaDataItemUpdate.HAISHA_TouJyusyo2 = data.HAISHA_TouJyusyo2;
            if (haiShaDataItemUpdate.codeKbnBunruiDataPopupEnd != null)
            {
                haiShaDataItemUpdate.HAISHA_TouKigou = data.HAISHA_TouKigou;
            }
            else
            {
                haiShaDataItemUpdate.HAISHA_TouKigou = "";
            }
            vehicleDispatchPopupListEnd = await TPM_CodeKbnService.GetVehicleDispatchDataPopup(new ClaimModel().TenantID, data.HAISHA_TouYmd);
            vehicleDispatchPopupListEnd.Insert(0, null);
            haiShaDataItemUpdate.vehicleDispatchPopupEnd = vehicleDispatchPopupListEnd.FirstOrDefault(x => x != null && x.KOUTU_KoukCdSeq == data.HAISHA_TouKouKCdSeq);
            if (!String.IsNullOrWhiteSpace(data.HAISHA_TouSetTime) && !String.IsNullOrEmpty(data.HAISHA_TouSetTime))
            {
                BIN_SyuPaTime = ParseStringToTimeSpan(data.HAISHA_TouSetTime);
                haiShaDataItemUpdate.BIN_BinNmEnd = data.HAISHA_TouBinNm.Trim();
            }
            else
            {
                if (haiShaDataItemUpdate.vehicleDispatchPopupEnd != null)
                {
                    BIN_SyuPaTime = ParseStringToTimeSpan(haiShaDataItemUpdate.vehicleDispatchPopupEnd.BIN_SyuPaTime);
                    haiShaDataItemUpdate.BIN_BinNmEnd = haiShaDataItemUpdate.vehicleDispatchPopupEnd.BIN_BinNm ?? "";
                }
                else
                {
                    BIN_SyuPaTime = ParseStringToTimeSpan("0000");
                    haiShaDataItemUpdate.BIN_BinNmEnd = "";
                }
            }
            haiShaDataItemUpdate.BIN_SyuPaTime = BIN_SyuPaTime.ToString("hhmm");
            haiShaDataItemUpdate.HAISHA_DrvJin = data.HAISHA_DrvJin;
            haiShaDataItemUpdate.HAISHA_GuiSu = data.HAISHA_GuiSu;
            haiShaDataItemUpdate.HAISHA_JyoSyaJin = data.HAISHA_JyoSyaJin;
            haiShaDataItemUpdate.HAISHA_PlusJin = data.HAISHA_PlusJin;
            //todo
            haiShaDataItemUpdate.tPM_CodeKbDataOTHJINKBN01 = tpm_CodeKbDataOTHJINKBNList.Where(x => x.CodeKb_CodeKbn == data.HAISHA_OthJinKbn1.ToString("D2")).FirstOrDefault();
            haiShaDataItemUpdate.OthJin1 = data.HAISHA_OthJin1;
            haiShaDataItemUpdate.tPM_CodeKbDataOTHJINKBN02 = tpm_CodeKbDataOTHJINKBNList.Where(x => x.CodeKb_CodeKbn == data.HAISHA_OthJinKbn2.ToString("D2")).FirstOrDefault();
            haiShaDataItemUpdate.OthJin2 = data.HAISHA_OthJin2;
            haiShaDataItemUpdate.tPM_CodeKbDataKenCD = tpm_CodeKbDataKenCDList.FirstOrDefault(x => x != null && x.BasyoBasyoKenCdSeq == data.HAISHA_IkMapCdSeq);
            if (haiShaDataItemUpdate.tPM_CodeKbDataKenCD == null)
            {
                haiShaDataItemUpdate.tPM_CodeKbDataKenCD = new TPM_CodeKbDataKenCD();
            }
            haiShaDataItemUpdate.YOUSHA_YouCdSeq = data.YOUSHA_YouCdSeq;
            haiShaDataItemUpdate.YOUSHA_YouSitCdSeq = data.YOUSHA_YouSitCdSeq;
            haiShaDataItemUpdate.YOUSHASAKI_RyakuNm = data.YOUSHASAKI_RyakuNm;
            haiShaDataItemUpdate.YOUSHASAKISITEN_RyakuNm = data.YOUSHASAKISITEN_RyakuNm;
            haiShaDataItemUpdate.TOKISK_RyakuNm = data.TOKISK_RyakuNm;
            haiShaDataItemUpdate.TOKIST_RyakuNm = data.TOKIST_RyakuNm;
            haiShaDataItemUpdate.tpm_CodeUKEJYKBNCDKbData = tpm_CodeUKEJYKBNCDKbDataList.Where(x => x.CodeKb_CodeKbn == data.HAISHA_UkeJyKbnCd.ToString()).FirstOrDefault();
            haiShaDataItemUpdate.UNKOBI_HaiSYmd = DateTime.ParseExact(data.UNKOBI_HaiSYmd, "yyyyMMdd", new CultureInfo("ja-JP")).ToString("yyyy/MM/dd (ddd)");
            haiShaDataItemUpdate.UNKOBI_HaiSTime = ParseStringToTimeSpan(data.UNKOBI_HaiSTime).ToString(@"hh\:mm");
            haiShaDataItemUpdate.UNKOBI_TouYmd = DateTime.ParseExact(data.UNKOBI_TouYmd, "yyyyMMdd", new CultureInfo("ja-JP")).ToString("yyyy/MM/dd (ddd)");
            haiShaDataItemUpdate.UNKOBI_TouChTime = ParseStringToTimeSpan(data.UNKOBI_TouChTime).ToString(@"hh\:mm");
            haiShaDataItemUpdate.YouSyuTableList = YouSyuTableList;

            haiShaDataItemUpdate.CheckHaiSUnkobi = MinDateTimeUnkobi;
            haiShaDataItemUpdate.CheckTouUnkobi = MaxDateTimeUnkobi;

            haiShaDataItemUpdate.HAISHA_IkNm = data.HAISHA_IkNm;
            haiShaDataItemUpdate.HAISHA_HaiSNm = data.HAISHA_HaiSNm;
            haiShaDataItemUpdate.HAISHA_TouchName = data.HAISHA_TouNm;
        }
        catch (Exception ex)
        {

        }
    }

    async Task OnHaisha_HaiSYmdChanged(DateTime newValue)
    {
        try
        {
            HaiSYmdValue = newValue;
            haiShaDataItemUpdate.HaiSYmd = newValue.ToString("yyyyMMdd");
            vehicleDispatchPopupListStart = await TPM_CodeKbnService.GetVehicleDispatchDataPopup(new ClaimModel().TenantID, haiShaDataItemUpdate.HaiSYmd);
            vehicleDispatchPopupListStart.Insert(0, null);
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    async Task OnHaisha_TouYmdChanged(DateTime newValue)
    {
        try
        {
            TouYmdValue = newValue;
            haiShaDataItemUpdate.TouYmd = newValue.ToString("yyyyMMdd");
            vehicleDispatchPopupListEnd = await TPM_CodeKbnService.GetVehicleDispatchDataPopup(new ClaimModel().TenantID, HaiShaDataItem.HAISHA_TouYmd);
            vehicleDispatchPopupListEnd.Insert(0, null);
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    void OnHaisha_GoSyaChanged(string newValue)
    {
        haiShaDataItemUpdate.GoSya = newValue.Trim();
        InvokeAsync(StateHasChanged);
    }
    void OnHaisha_DanTaNm2Changed(string newValue)
    {
        haiShaDataItemUpdate.DataNm2 = newValue;
        InvokeAsync(StateHasChanged);
    }
    void OnDepotNameSelectedItemChanged(CodeKbnBunruiDataPopup data)
    {
        haiShaDataItemUpdate.codeKbnBunruiDataPopupStart = data;
        haiShaDataItemUpdate.HAISHA_HaiSKigou = data?.HAICHI_HaiSKigou.Trim() ?? string.Empty;
        if(data !=null)
        {
            haiShaDataItemUpdate.HAISHA_HaiSJyus1= data.HAICHI_Jyus1.Trim();
            haiShaDataItemUpdate.HAISHA_HaiSJyus2= data.HAICHI_Jyus2.Trim();
            haiShaDataItemUpdate.HAISHA_HaiSNm = data.HAICHI_RyakuNm.Trim();
        }
        else
        {

        }
        InvokeAsync(StateHasChanged);
    }
    void OnHaisha_HaiSJyus1Changed(string newValue)
    {
        haiShaDataItemUpdate.HAISHA_HaiSJyus1 = newValue;
        StateHasChanged();
    }
    void OnHaisha_HaiSJyus2Changed(string newValue)
    {
        haiShaDataItemUpdate.HAISHA_HaiSJyus2 = newValue;
        StateHasChanged();
    }
    void OnHaisha_HaiSKigouChanged(string newValue)
    {
        haiShaDataItemUpdate.HAISHA_HaiSKigou = newValue;
        StateHasChanged();
    }

    private void OnHaisha_HaiSNmChanged(string newVal)
    {
        haiShaDataItemUpdate.HAISHA_HaiSNm = newVal;
        StateHasChanged();
    }

    private void OnHaisha_TouNmChanged(string newVal)
    {
        haiShaDataItemUpdate.HAISHA_TouchName = newVal;
        StateHasChanged();
    }

    void CodeKbDataDepotChanged(VehicleDispatchPopup data)
    {
        try
        {
            haiShaDataItemUpdate.vehicleDispatchPopupStart = data;
            BIN_TouChTime = ParseStringToTimeSpan(data?.BIN_TouChTime ?? "0000");
            haiShaDataItemUpdate.BIN_TouChTime = BIN_TouChTime.ToString("hhmm");
            haiShaDataItemUpdate.BIN_BinNmStart = data?.BIN_BinNm ?? string.Empty;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {

        }

    }
    void OnHaishaExp_HaisBinNmChanged(string newValue)
    {
        haiShaDataItemUpdate.BIN_BinNmStart = newValue;
        StateHasChanged();
    }
    void OnArrivalPlaceNameSelectedItemChanged(CodeKbnBunruiDataPopup data)
    {
        haiShaDataItemUpdate.codeKbnBunruiDataPopupEnd = data;
        haiShaDataItemUpdate.HAISHA_TouKigou = data?.HAICHI_HaiSKigou.Trim() ?? string.Empty;
        if (data != null)
        {
            haiShaDataItemUpdate.HAISHA_TouJyusyo1 = data.HAICHI_Jyus1.Trim();
            haiShaDataItemUpdate.HAISHA_TouJyusyo2 = data.HAICHI_Jyus2.Trim();
            haiShaDataItemUpdate.HAISHA_TouchName = data.HAICHI_RyakuNm.Trim();
        }
        else
        {
        }

        InvokeAsync(StateHasChanged);
    }
    void OnHaisha_TouJyusyo1Changed(string newValue)
    {
        haiShaDataItemUpdate.HAISHA_TouJyusyo1 = newValue;
        StateHasChanged();
    }
    void OnHaisha_TouJyusyo2Changed(string newValue)
    {
        haiShaDataItemUpdate.HAISHA_TouJyusyo2 = newValue;
        StateHasChanged();
    }
    void OnHaisha_TouKigouChanged(string newValue)
    {
        haiShaDataItemUpdate.HAISHA_TouKigou = newValue;
        StateHasChanged();
    }
    void CodeKbDataDepottouChanged(VehicleDispatchPopup data)
    {
        try
        {
            haiShaDataItemUpdate.vehicleDispatchPopupEnd = data;
            BIN_SyuPaTime = ParseStringToTimeSpan(data?.BIN_SyuPaTime ?? "0000");
            haiShaDataItemUpdate.BIN_SyuPaTime = BIN_SyuPaTime.ToString("hhmm");
            haiShaDataItemUpdate.BIN_BinNmEnd = data?.BIN_BinNm ?? string.Empty;

            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {

        }

    }
    void OnHaishaExp_TouSBinNmChanged(string newValue)
    {
        haiShaDataItemUpdate.BIN_BinNmEnd = newValue;
        StateHasChanged();
    }
    void OnBasyo_BasyoNmChanged(string newValue)
    {
        haiShaDataItemUpdate.HAISHA_IkNm = newValue;
        StateHasChanged();
    }
    void OnHaisha_JyoSyaJinChanged(string newValue)
    {
        try
        {
            haiShaDataItemUpdate.HAISHA_JyoSyaJin = short.Parse(newValue);
        }
        catch
        {
            haiShaDataItemUpdate.HAISHA_JyoSyaJin = haiShaDataItemUpdate.HAISHA_JyoSyaJin;
        }
        StateHasChanged();
    }
    void OnHaisha_PlusJinChanged(string newValue)
    {
        try
        {
            haiShaDataItemUpdate.HAISHA_PlusJin = short.Parse(newValue);
        }
        catch
        {
            haiShaDataItemUpdate.HAISHA_PlusJin = haiShaDataItemUpdate.HAISHA_PlusJin;
        }
        StateHasChanged();
    }
    void TPM_CodeKbDataOTHJINKBNChanged(TPM_CodeKbDataOTHJINKBN data)
    {
        if (data != null)
        {
            haiShaDataItemUpdate.tPM_CodeKbDataOTHJINKBN01 = data;
        }
        StateHasChanged();
    }
    void OnHaisha_OthJin1Changed(string newValue)
    {
        try
        {
            haiShaDataItemUpdate.OthJin1 = short.Parse(newValue);
        }
        catch
        {
            haiShaDataItemUpdate.OthJin1 = haiShaDataItemUpdate.OthJin1;
        }
        StateHasChanged();
    }
    void TPM_CodeKbDataOTHJINKBNtouChanged(TPM_CodeKbDataOTHJINKBN data)
    {
        if (data != null)
        {
            haiShaDataItemUpdate.tPM_CodeKbDataOTHJINKBN02 = data;
        }
        StateHasChanged();
    }
    void OnHaisha_OthJin2Changed(string newValue)
    {
        try
        {
            haiShaDataItemUpdate.OthJin2 = short.Parse(newValue);
        }
        catch
        {
            haiShaDataItemUpdate.OthJin2 = haiShaDataItemUpdate.OthJin2;
        }
        StateHasChanged();
    }
    void CodeKbDataDepottou02Changed(TPM_CodeKbDataKenCD data)
    {
        haiShaDataItemUpdate.tPM_CodeKbDataKenCD = data;
        haiShaDataItemUpdate.HAISHA_IkNm = data?.BasyoBasyoNm ?? string.Empty;

        InvokeAsync(StateHasChanged);
    }
    private DateTime ParseStringToDateTime(string strValue)
    {
        DateTime result;
        DateTime.TryParseExact(strValue, "yyyyMMdd", new CultureInfo("ja-JP"), DateTimeStyles.None, out result);
        return result;
    }
    private TimeSpan ParseStringToTimeSpan(string strValue)
    {
        TimeSpan result = new TimeSpan(0, 0, 0);
        if (!String.IsNullOrEmpty(strValue) && !String.IsNullOrWhiteSpace(strValue))
        {
            string timeValue = CommonUtil.MyTimeFormat(strValue, Formats.HHmm);
            result = BusScheduleHelper.ConvertTime(timeValue);
        }
        return result;
    }
    private async Task HandleValidSubmitPopupHaiSha(MouseEventArgs args)
    {
        disableSubmit = false;
        bool isValid = formContextPopupHaiSha.Validate();
        if (isValid)
        {
            try
            {
                var haita = await PartnerBookingInputService.GetHaitaCheck(haiShaDataItemUpdate.HAISHA_UkeNo,
                       haiShaDataItemUpdate.HAISHA_UnkRen, -1);
                isHaitaValid = _haita.HaishaUpdYmdTime == haita.HaishaUpdYmdTime &&
                                _haita.YoushaUpdYmdTime == haita.YoushaUpdYmdTime &&
                                _haita.YouSyuUpdYmdTime == haita.YouSyuUpdYmdTime &&
                                _haita.MihrimUpdYmdTime == haita.MihrimUpdYmdTime &&
                                _haita.YykshoUpdYmdTime == haita.YykshoUpdYmdTime &&
                                _haita.UnkobiUpdYmdTime == haita.UnkobiUpdYmdTime &&
                                _haita.HaiinUpdYmdTime == haita.HaiinUpdYmdTime;
                if (!isHaitaValid) { StateHasChanged(); return; }

                await LoadingService.ShowAsync();

                var client = await Http.GetHttpClient();
                HttpResponseMessage response = await client.PutAsync($"{baseUrl}/api/PartnerBookingInput/updateHaiSha/{haiShaDataItemUpdate.HAISHA_UkeNo}", Http.getStringContentFromObject(haiShaDataItemUpdate));
                if (response.IsSuccessStatusCode)
                {
                    await LoadHaiShaDataListWithIndex();

                    disableSubmit = true;
                    string newUkeNo = await response.Content.ReadAsStringAsync();
                    PopupHaiShaUpdate = false;
                    ReLoadDataHaiSha_YouSha();
                    ResetCondition_HaiSha();
                    haiShaDataListTemp.Clear();
                    youShaItemUpdate.YOUSHA_UkeNo = "";
                }
            }
            catch (Exception ex)
            {
                ErrorHandlerService.HandleError(ex);
            }
        }
        StateHasChanged();
    }

    void CancelDeleteYouSha(MouseEventArgs e)
    {
        PopupConfirmDeleteYouSha = false;
        youShaItemUpdate = new YouShaDataTable();
        StateHasChanged();
    }

    async void AccessDeleteYouSha(MouseEventArgs e)
    {
        try
        {

            await HandleValidDeleteYouSha(youShaItemUpdate);
            youShaItemUpdate.YOUSHA_UkeNo = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }
    void OpenPopupDeleteYouSha()
    {
        PopupConfirmDeleteYouSha = true;
        //var Data = e.Data as YouShaDataTable;
        var Data = CheckedItemsYouSha[0] ?? new YouShaDataTable();
        youShaItemUpdate = Data;
        StateHasChanged();
    }

    private async Task HandleValidDeleteYouSha(YouShaDataTable youShaItemUpdate)
    {
        try
        {
            var client = await Http.GetHttpClient();
            HttpResponseMessage response = await client.PostAsync($"{baseUrl}/api/PartnerBookingInput/deleteYouSha", Http.getStringContentFromObject(youShaItemUpdate));
            if (response.IsSuccessStatusCode)
            {
                PopupConfirmDeleteYouSha = false;
                PopupHireCarRegister = false;
                string newUkeNo = await response.Content.ReadAsStringAsync();
                ReLoadDataHaiSha_YouSha();
                haiShaDataListTemp.Clear();

                youShaItemUpdate = new YouShaDataTable();
            }
        }
        catch (Exception ex)
        {
        }
        IsEnableBtnAddNew();
        StateHasChanged();
    }
    void ItemOnAppearingHandler(ItemAppearingEventArgs e)
    {
        try
        {
            switch (e.MenuItem.Id)
            {
                case "menuitem-car-cooperation":
                    if (SelectedItem.YOUSHA_YouTblSeq != 0)
                    {
                        e.IsVisible = true;
                        if (CarCooperationService.CheckDataYoushaNotice(new ClaimModel().TenantID, SelectedItem.YOUSHA_UkeNo, SelectedItem.YOUSHA_UnkRen, SelectedItem.YOUSHA_YouTblSeq))
                        {
                            e.IsEnabled = false;
                        }
                    }
                    else
                    {
                        e.IsVisible = false;
                    }
                    break;
            }
        }
        catch (Exception)
        {
            e.IsEnabled = false;
        }

        /*  try
          {
              var currentHaiShaItem = e.Data as HaiShaDataTable;
              switch (e.MenuItem.Id)
              {
                  case "RegisterYouSha":
                      e.IsEnabled = true;
                      if (currentHaiShaItem.CheckHasYouSha == true || currentHaiShaItem.HAISHA_NippoKbn == 2)
                      {
                          e.IsEnabled = false;
                      }
                      break;
                  case "UpdateHaiSha":
                      e.IsEnabled = true;
                      if (currentHaiShaItem.HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1 || currentHaiShaItem.CheckHasYouSha == false)
                      {
                          e.IsEnabled = false;
                      }
                      break;
                  case "BusCooradinationReport":
                      e.IsEnabled = true;
                      if (currentHaiShaItem.HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1)
                      {
                          e.IsEnabled = false;
                      }
                      break;
                  case "VenderRequestformReport":
                      e.IsEnabled = true;
                      if (currentHaiShaItem.HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1 || currentHaiShaItem.CheckHasYouSha == false)
                      {
                          e.IsEnabled = false;
                      }
                      break;
                  case "OperatingInstructionReport":
                      e.IsEnabled = true;
                      if (currentHaiShaItem.HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1 || currentHaiShaItem.CheckHasYouSha == true)
                      {
                          e.IsEnabled = false;
                      }
                      break;
                  case "OperatingInstructionReport02":
                      e.IsEnabled = true;
                      if (currentHaiShaItem.HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1 || currentHaiShaItem.CheckHasYouSha == true)
                      {
                          e.IsEnabled = false;
                      }
                      break;
              }
          }
          catch (Exception)
          {
              e.IsEnabled = false;
          }*/
    }
    async Task<bool> CheckDataYousha(YouShaDataInsert youShaDataInsert)
    {
        try
        {
            bool checkData = false;
            if (youShaDataInsert != null)
            {
                var parameterValue = youShaDataInsert.YyKSyuDataPopups.FirstOrDefault();
                var data = await PartnerBookingInputService.CheckDataYouSha(parameterValue.YYKSYU_UkeNo, parameterValue.YYKSYU_UnkRen.ToString(), new ClaimModel().TenantID);
                if (data != null && data.Count > 0)
                {
                    if (data.Select(x => x.YOUSHA_YouCdSeq).ToArray().Contains(youShaDataInsert.TokistData.TOKISK_TokuiSeq)
                               && data.Select(x => x.YOUSHA_YouSitCdSeq).ToArray().Contains(youShaDataInsert.TokistData.TOKIST_SitenCdSeq))
                    {
                        checkData = true;
                    }
                }
            }
            return checkData;
        }
        catch (Exception ex)
        {
            return false;
        }

    }
    void OpenPopupYatoiShaFutai()
    {
        PopupYatoiSha = true;
        IncidentalView = IncidentalViewMode.Futai;
    }

    void OpenPopupYatoiShaZeikomi()
    {
        PopupYatoiSha = true;
        IncidentalView = IncidentalViewMode.Tsumi;
    }
    private int CaculateSumMoneyShow(int VatMoney, int SyaSyuTan, string option)
    {

        int result = 0;
        if (option == "外税")
        {
            result = VatMoney + SyaSyuTan;
        }
        else if (option == "内税")
        {
            result = SyaSyuTan;
        }
        else if (option == "非課税")
        {
            result = SyaSyuTan;
        }
        return result;
    }
    public void OpenCarCooperation()
    {
        PopupCarCooperation = true;
        StateHasChanged();
    }

    public void ClosePopupCarCooperation(Dictionary<string, dynamic> parameters)
    {
        PopupCarCooperation = false;
        if ((bool)parameters["OpenPopup"])
        {
            if (parameters["Status"] == "Error")
            {
                popupTitle = Lang["title_PopupError"];
                popupContent = Lang["CommonError"];
                popupicon = popupiconerror;
            }
            else
            {
                popupTitle = Lang["title_PopupInfo"];
                popupContent = Lang["mesage_car_cooperation"];
                popupicon = popupiconinfo;
            }
            PopupMessageCarCooperation = true;
        }
        StateHasChanged();
    }

    public async void ItemClickBusCooradinationReport(ItemClickEventArgs e)
    {
        try
        {

            // var Data = e.Data as HaiShaDataTable;
            var Data = CheckedItems[0] ?? new HaiShaDataTable();
            string baseUrl = AppSettingsService.GetBaseUrl();
            string url = "";
            switch (e.MenuItem.Id)
            {
                case "BusCoooradination_Preview":
                    url = baseUrl + "/BusCoordinationReportPreview";
                    url = url + string.Format("/?Option={0}&UnkobiDate={1}&Ukeno={2}&IsLoadDefault={3}&UnkRen={4}", OptionReport.Preview, Data.UNKOBI_HaiSYmd, Data.YYKSHO_UkeCD, 1, Data.HAISHA_UnkRen);
                    JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    break;
                case "BusCoooradination_Download":
                    url = baseUrl + "/buscoordination";
                    url = url + string.Format("/?Option={0}&UnkobiDate={1}&Ukeno={2}&UnkRen={3}", OptionReport.Download, Data.UNKOBI_HaiSYmd, Data.YYKSHO_UkeCD, Data.HAISHA_UnkRen);
                    JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    break;
            }
        }
        catch (Exception ex)
        {

        }

    }
    public async void ItemClickOperatingInstructionReport(ItemClickEventArgs e)
    {
        try
        {

            //var Data = e.Data as HaiShaDataTable;
            var Data = CheckedItems[0] ?? new HaiShaDataTable();
            string baseUrl = AppSettingsService.GetBaseUrl();
            string url = "";
            switch (e.MenuItem.Id)
            {
                case "OperatingInstruction_Preview":
                    url = "/operatinginstructionreportpreviewNew";
                    url = url + string.Format("/?Option={0}&Date={1}&Mode={2}&BookingID={3}&TeiDanNo={4}&UnkRen={5}&BunkRen={6}&IsLoadDefault={7}",
                    OptionReport.Preview, Data.HAISHA_SyuKoYmd, 1, Data.HAISHA_UkeNo, Data.HAISHA_TeiDanNo, Data.HAISHA_UnkRen, Data.HAISHA_BunkRen, 1);
                    JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    break;
                case "OperatingInstruction_Download":
                    UnkoushijishoReportService.ExportReportDateAsPdf(Data.HAISHA_UkeNo, Data.HAISHA_TeiDanNo, Data.HAISHA_UnkRen, Data.HAISHA_BunkRen, new DateTime().ToString("yyyyMMdd"), JSRuntime);
                    // url = "/operatinginstructionreport";
                    // url = url + string.Format("/?Option={0}&Date={1}&Mode={2}&BookingID={3}&TeiDanNo={4}&UnkRen={5}&BunkRen={6}",
                    //OptionReport.Preview, Data.HAISHA_SyuKoYmd, 1, Data.HAISHA_UkeNo, Data.HAISHA_TeiDanNo, Data.HAISHA_UnkRen, Data.HAISHA_BunkRen);
                    // JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    break;
            }
        }
        catch (Exception ex)
        {

        }

    }
    public async void ItemClickOperatingInstruction02Report(ItemClickEventArgs e)
    {
        try
        {
            //var Data = e.Data as HaiShaDataTable;
            var Data = CheckedItems[0] ?? new HaiShaDataTable();
            string baseUrl = AppSettingsService.GetBaseUrl();
            string url = "";
            switch (e.MenuItem.Id)
            {
                case "OperatingInstruction02_Preview":
                    url = baseUrl + "/operatinginstructionreportpreviewNew";
                    url = url + string.Format("/?Option={0}&Date={1}&Mode={2}&BookingID={3}&TeiDanNo={4}&UnkRen={5}&BunkRen={6}&IsLoadDefault={7}",
                    OptionReport.Preview, Data.HAISHA_SyuKoYmd, 2, Data.HAISHA_UkeNo, Data.HAISHA_TeiDanNo, Data.HAISHA_UnkRen, Data.HAISHA_BunkRen, 1);
                    JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    break;
                case "OperatingInstruction02_Download":
                    UnkoushijishoReportService.ExportReportdriDateAsPdf(Data.HAISHA_UkeNo, Data.HAISHA_TeiDanNo, Data.HAISHA_UnkRen, Data.HAISHA_BunkRen, Data.HAISHA_SyuKoYmd, JSRuntime);
                    // url = baseUrl + "/operatinginstructionreport";
                    // url = url + string.Format("/?Option={0}&Date={1}&Mode={2}&BookingID={3}&TeiDanNo={4}&UnkRen={5}&BunkRen={6}",
                    //OptionReport.Preview, Data.HAISHA_SyuKoYmd, 2, Data.HAISHA_UkeNo, Data.HAISHA_TeiDanNo, Data.HAISHA_UnkRen, Data.HAISHA_BunkRen);
                    // JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    break;
            }
        }
        catch (Exception ex)
        {

        }


    }
    public async void ItemClickVenderRequestformReportReport(ItemClickEventArgs e)
    {
        try
        {
            //var Data = e.Data as HaiShaDataTable;
            var Data = CheckedItems[0] ?? new HaiShaDataTable();
            string baseUrl = AppSettingsService.GetBaseUrl();
            string url = "";
            switch (e.MenuItem.Id)
            {
                case "VenderRequestformReport_Preview":
                    url = baseUrl + "/VenderRequestFormPreview";
                    url = url + string.Format("/?Option={0}&Date={1}&UkeCd={2}&UnkRen={3}&YouTblSeq={4}&IsLoadDefault={5}",
                        OptionReport.Preview, Data.UNKOBI_HaiSYmd, Data.YYKSHO_UkeCD, Data.HAISHA_UnkRen, Data.HAISHA_YouTblSeq, 1);
                    JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    break;
                case "VenderRequestformReport_Download":
                    url = baseUrl + "/venderrequestform";
                    url = url + string.Format("/?Option={0}&Date={1}&UkeCd={2}&UnkRen={3}&YouTblSeq={4}",
                      OptionReport.Preview, Data.UNKOBI_HaiSYmd, Data.YYKSHO_UkeCD, Data.HAISHA_UnkRen, Data.HAISHA_YouTblSeq);
                    JSRuntime.InvokeVoidAsync("open", url, "_blank");
                    break;
            }
        }
        catch (Exception ex)
        {

        }


    }
    #region Grid Layout New
    //Grid Haisha
    private HeaderTemplate InitHeader()
    {
        var result = new HeaderTemplate();
        result = new HeaderTemplate()
        {
            Rows = new List<RowHeaderTemplate>()
{
                new RowHeaderTemplate()
                {
                    Columns = new List<ColumnHeaderTemplate>()
{
                        new ColumnHeaderTemplate() { ColName = Lang["no_col"], Width = 50 , RowSpan =2 },
                        new ColumnHeaderTemplate() { ColName = Lang["Car"], Width = 50, RowSpan =2 },
                        new ColumnHeaderTemplate() { ColName = Lang["MercenaryType"], Width = 150 , RowSpan =2},
                        new ColumnHeaderTemplate() { ColName =Lang["MercenaryName"], Width = 150, RowSpan =2 },
                        new ColumnHeaderTemplate() { ColName = Lang["SalesOffice"], Width = 150},
                        new ColumnHeaderTemplate() { ColName = Lang["CarType"], Width = 150, RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["OrganizationName"], Width = 150, RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["Issue/Return"], Width = 150, RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["Dispatch/Arrival"], Width = 150, RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["Depot/Arrival"], Width = 150 , RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["FaresIncludingTax"], Width = 150 , RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["Fare"], Width = 150 , RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["ConsumptionTax"], Width = 100 , RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["FeeAmount"], Width = 150 , RowSpan =2},
                        new ColumnHeaderTemplate() { ColName = Lang["Connection"], Width = 150 },
                        new ColumnHeaderTemplate() { ColName = Lang["DepotAddress"], Width = 150, RowSpan=2},
                        new ColumnHeaderTemplate() { ColName = Lang["BoardingPersonnel"], Width = 150  },
                        new ColumnHeaderTemplate() { ColName = Lang["OtherPersonnel"], Width = 150  , RowSpan=2},
                        new ColumnHeaderTemplate() { ColName = Lang["DestinationName"], Width = 150  , RowSpan=2},
                    }
                },
                new RowHeaderTemplate()
                {
                    Columns = new List<ColumnHeaderTemplate>()
{
                        new ColumnHeaderTemplate() { ColName = Lang["Vehicle"], Width = 150 },
                        new ColumnHeaderTemplate() { ColName = Lang["Dispatch/Arrival"], Width = 150 },
                        new ColumnHeaderTemplate() { ColName = Lang["PlusPersonnel"], Width = 150 },

                    }
                },
            }
        };
        return result;
    }
    private BodyTemplate InitBody()
    {
        var result = new BodyTemplate()
        {
            CustomCssDelegate = CustomRowCss,
            Rows = new List<RowBodyTemplate>()
{
                new RowBodyTemplate()
                {
                    Columns = new List<ColumnBodyTemplate>()
{
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.Index), AlignCol = AlignColEnum.Center,RowSpan=2 },
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextGoSya), AlignCol = AlignColEnum.Center,RowSpan=2 },
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.YOUSHAKATA_RyakuNmText), AlignCol = AlignColEnum.Center,RowSpan=2 },
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TOKISK_RyakuNmText), AlignCol = AlignColEnum.Left },
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.EIGYOS_RyakuNmText), AlignCol = AlignColEnum.Left },

                        new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.SYASYU_SyaSyuNmText), AlignCol = AlignColEnum.Center,RowSpan=2 },
                        new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.UNKOBI_DanTaNm), AlignCol = AlignColEnum.Center },

                       new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.TextHaiSyuKoYmd_HaiSyuKoTime), AlignCol = AlignColEnum.Left },

                       new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.TextHaiSYmd_HaiSTime), AlignCol = AlignColEnum.Left },
                       new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.HAISHA_HaiSNm), AlignCol = AlignColEnum.Left },

                       new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHAYoushaUnc_YoushaSyoTextGrid), AlignCol = AlignColEnum.Right,RowSpan=2 },
                        new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_YoushaUncTextGrid), AlignCol = AlignColEnum.Right,RowSpan=2 },
                        new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_YoushaSyoTextGrid), AlignCol = AlignColEnum.Right,RowSpan=2 },
                        new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_YoushaTesTextGrid), AlignCol = AlignColEnum.Right,RowSpan=2 },
                        new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextHaiSSetTime_HAISHA_HaiSKouKNm), AlignCol = AlignColEnum.Left },
                        new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.HAISHA_HaiSJyus1_HAISHA_HaiSJyus2), AlignCol = AlignColEnum.Left },
                        new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.HAISHA_JyoSyaJinText), AlignCol = AlignColEnum.Left },
                        new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.CodeKb_OTHER1_HAISHA_OthJin1), AlignCol = AlignColEnum.Left },
                      new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.HAISHA_IkNm), AlignCol = AlignColEnum.Left,RowSpan=2 },
                    }
    },
                 new RowBodyTemplate()
                {
                    Columns = new List<ColumnBodyTemplate>()
{
                        new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TOKIST_RyakuNmGrid), AlignCol = AlignColEnum.Left },
                         new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.SYARYO_SyaRyoNmGrid), AlignCol = AlignColEnum.Left },
                         new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.HAISHA_DanTaNm2), AlignCol = AlignColEnum.Center },
                          new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextHaiKikYmd_HaiKikTime), AlignCol = AlignColEnum.Left },
                          new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.TextHaiTouYmd_HaiTouTime), AlignCol = AlignColEnum.Left },
                          new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.HAISHA_TouNm), AlignCol = AlignColEnum.Left },
                          new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextTouSetTime_HAISHA_TouSKouKNm), AlignCol = AlignColEnum.Left },
                          new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.HAISHA_TouJyusyo1_HAISHA_TouJyusyo2), AlignCol = AlignColEnum.Left },
                          new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.HAISHA_PlusJinText), AlignCol = AlignColEnum.Left },
                          new ColumnBodyTemplate() { DisplayFieldName =nameof(HaiShaDataTable.CodeKb_OTHER2_HAISHA_OthJin2), AlignCol = AlignColEnum.Left },
                    }
    },
            }
        };
        result.CustomCssDelegate = CustomRowCss;
        return result;
    }
    public static Func<object, string> CustomRowCss = (item) =>
    {
        var cssClass = "";
        var model = item as HaiShaDataTable;

        if (model != null)
        {
            cssClass = model.ColorClass;
        }
        return cssClass;
    };
    protected async Task RowClick(RowClickEventArgs<HaiShaDataTable> args)
    {
        try
        {
            haiShaDataListTemp.Clear();
            HaiShaDataTable SelectedItem = args.SelectedItem;
            LastXClicked = Convert.ToInt32(args.Event.ClientX);
            /*にほん   */
            LastYClicked = Convert.ToInt32(args.Event.ClientY);
            CurrentScroll = null;
            if (!args.Event.ShiftKey && !args.Event.CtrlKey && args.Event.Detail != 2 && args.IsSelected)
            {
                CheckedItems = new List<HaiShaDataTable>() { SelectedItem };
                CheckEnableItemContextMenu();
                await blazorContextMenuService.ShowMenu("Menu2", LastXClicked, LastYClicked);
            }
            else
            {
                isClickRow = true;
                await blazorContextMenuService.HideMenu("Menu2");
                //await blazorContextMenuService.HideMenu("gridRowsClickMenuReservation");
                if (args.Event.CtrlKey)
                {
                    if (!CheckedItems.Any(item => item.Index == SelectedItem.Index))
                    {
                        CheckedItems.Add(HaiShaDataList.FirstOrDefault(item => item.Index == SelectedItem.Index));
                    }
                    else
                    {
                        CheckedItems.RemoveAll(item => item.Index == SelectedItem.Index);
                        if (CheckedItems.Count == 0)
                        {
                            CurrentClick = null;
                        }
                        else
                        {
                            CurrentClick = CheckedItems.Max(item => item.Index);
                        }
                    }
                }
                else if (args.Event.ShiftKey)
                {
                    int BeginIndex = Math.Min(SelectedItem.Index, (int)CurrentClick);
                    int EndIndex = Math.Max(SelectedItem.Index, (int)CurrentClick);
                    for (int IndexToBeAdd = BeginIndex; IndexToBeAdd <= EndIndex; IndexToBeAdd++)
                    {
                        if (!CheckedItems.Any(item => item.Index == IndexToBeAdd))
                        {
                            CheckedItems.Add(HaiShaDataList.FirstOrDefault(item => item.Index == IndexToBeAdd));
                        }
                    }
                }
            }
            /*  if (CheckedItems.Any())
              {
                  Value = string.Join('-', CheckedItems.Select(_ => _.Index));
              }*/
            CurrentClick = SelectedItem.Index;

            foreach (var item in CheckedItems)
            {
                if (item != null && item.HAISHA_YouTblSeq == 0 && item.HAISHA_NippoKbn != 2)
                {
                    haiShaDataListTemp.Add(item);
                    HaiShaDataList.Where(x => x.HAISHA_UkeNo == item.HAISHA_UkeNo
                      && x.HAISHA_UnkRen == item.HAISHA_UnkRen
                      && x.HAISHA_SyaSyuRen == item.HAISHA_SyaSyuRen
                      && x.HAISHA_BunkRen == item.HAISHA_BunkRen
                      && x.HAISHA_TeiDanNo == item.HAISHA_TeiDanNo).First().Checked = true;
                }
            }
            /* if (CheckedItems[0] != null && CheckedItems[0].HAISHA_YouTblSeq == 0 && CheckedItems[0].HAISHA_NippoKbn !=2)
             {
                 var itemClick = CheckedItems[0];
                 haiShaDataListTemp.Add(itemClick);
                 HaiShaDataList.Where(x => x.HAISHA_UkeNo == itemClick.HAISHA_UkeNo
                   && x.HAISHA_UnkRen == itemClick.HAISHA_UnkRen
                   && x.HAISHA_SyaSyuRen == itemClick.HAISHA_SyaSyuRen
                   && x.HAISHA_BunkRen == itemClick.HAISHA_BunkRen
                   && x.HAISHA_TeiDanNo == itemClick.HAISHA_TeiDanNo).First().Checked = true;
             }*/

            //await ValueCheckedChanged.InvokeAsync(Value);
            IsEnableBtnAddNew();
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    protected void CheckedChange(CheckedChangeEventArgs<HaiShaDataTable> args)
    {
        try
        {
            Value = "";
            var tmpListHaiSha = new List<HaiShaDataTable>();
            var itemClick = args.CheckedItem;
            if (args.IsCheckAll && args.CheckedItems.Any())
            {
                foreach (var item in HaiShaDataList)
                {
                    if (item.HAISHA_YouTblSeq == 0 && item.HAISHA_NippoKbn != 2)
                    {
                        item.Checked = true;
                        haiShaDataListTemp.Add(item);
                    }
                }
            }
            else if (args.IsCheckAll && !args.CheckedItems.Any())
            {
                haiShaDataListTemp.Clear();
                HaiShaDataList.ForEach(_ => _.Checked = false);
            }
            else
            {
                if (args.IsChecked && itemClick != null && itemClick.HAISHA_YouTblSeq == 0 && itemClick.HAISHA_NippoKbn != 2)
                {
                    haiShaDataListTemp.Add(itemClick);
                }
                else if (!args.IsChecked && itemClick != null)
                {
                    haiShaDataListTemp.Remove(itemClick);
                }
                HaiShaDataList.Where(x => x.HAISHA_UkeNo == itemClick.HAISHA_UkeNo
                    && x.HAISHA_UnkRen == itemClick.HAISHA_UnkRen
                    && x.HAISHA_SyaSyuRen == itemClick.HAISHA_SyaSyuRen
                    && x.HAISHA_BunkRen == itemClick.HAISHA_BunkRen
                    && x.HAISHA_TeiDanNo == itemClick.HAISHA_TeiDanNo).First().Checked = args.IsChecked;
            }
            IsEnableBtnAddNew();
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }


    }

    private async Task RowDbClick(HaiShaDataTable item)
    {
        try
        {
            CheckEnableItemContextMenu();
            if (isUpdateHaiShaMenu && CheckedItems.Any())
            {
                var Data = CheckedItems[0] ?? new HaiShaDataTable();
                await GetDataPopupHaiSha(Data);
                formContextPopupHaiSha = new EditContext(haiShaDataItemUpdate);
                PopupHaiShaUpdate = true;
                isHaitaValid = true;
                _haita = await PartnerBookingInputService.GetHaitaCheck(Data.HAISHA_UkeNo, Data.HAISHA_UnkRen, -1);
                //await blazorContextMenuService.HideMenu("Menu2");
            }
            else if (!isUpdateHaiShaMenu && CheckedItems.Any())
            {
                PopupNotificationItemHaiSha = true;
                CheckedItems.Clear();
            }

        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }
        IsEnableBtnAddNew();
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleClearHaiSha()
    {
        try
        {
            await LoadingService.ShowAsync();

            var data = CheckedItems[0] ?? new HaiShaDataTable();
            haiShaDataItemUpdate = new HaiShaDataUpdate();

            await GetDataPopupHaiSha(data);
            formContextPopupHaiSha = new EditContext(haiShaDataItemUpdate);
        }
        catch (Exception ex)
        {
            ErrorHandlerService.HandleError(ex);
        }

        await InvokeAsync(StateHasChanged);
    }

    //Grid YouSha
    private HeaderTemplate InitHeaderYouSha()
    {
        var result = new HeaderTemplate();
        result = new HeaderTemplate()
        {
            Rows = new List<RowHeaderTemplate>()
{
                new RowHeaderTemplate()
                {
                    Columns = new List<ColumnHeaderTemplate>()
{
                        new ColumnHeaderTemplate() { ColName = Lang["no_col"], Width = 50 },
                        new ColumnHeaderTemplate() { ColName = Lang["Mercenary"], Width = 300 ,ColSpan=3},
                        new ColumnHeaderTemplate() { ColName = Lang["NumberOfUnits"], Width = 150 },
                        new ColumnHeaderTemplate() { ColName =Lang["FaresIncludingTax"], Width = 150},
                        new ColumnHeaderTemplate() { ColName = Lang["Fare"], Width = 150},
                        new ColumnHeaderTemplate() { ColName = Lang["ConsumptionTax"], Width = 150},
                        new ColumnHeaderTemplate() { ColName = Lang["Fee"], Width = 150,ColSpan=2 },
                        new ColumnHeaderTemplate() { ColName = Lang["PlannedPaymentDate"], Width = 150},
                    }
                },
            }
        };
        return result;
    }
    private BodyTemplate InitBodyYouSha()
    {
        var result = new BodyTemplate()
        {
            CustomCssDelegate = CustomRowCss,
            Rows = new List<RowBodyTemplate>()
{
                new RowBodyTemplate()
                {
                    Columns = new List<ColumnBodyTemplate>()
{
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(YouShaDataTable.Index), AlignCol = AlignColEnum.Center},
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(YouShaDataTable.Text), AlignCol = AlignColEnum.Left ,ColSpan=1},
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(YouShaDataTable.YOUSHASAKI_RyakuNm), AlignCol = AlignColEnum.Left,ColSpan=1 },
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(YouShaDataTable.YOUSHASAKISITEN_RyakuNm), AlignCol = AlignColEnum.Left,ColSpan=1 },
                       new ColumnBodyTemplate() { DisplayFieldName = nameof(YouShaDataTable.Sum_SyaSyuDai), AlignCol = AlignColEnum.Right },
                        new ColumnBodyTemplate() { DisplayFieldName = nameof(YouShaDataTable.YOUSHA_SyaRyo_SyaRyoSyoText), AlignCol = AlignColEnum.Right },
                        new ColumnBodyTemplate() { DisplayFieldName =nameof(YouShaDataTable.YOUSHA_SyaRyoUncText), AlignCol = AlignColEnum.Right },
                       new ColumnBodyTemplate() { DisplayFieldName =nameof(YouShaDataTable.YOUSHA_SyaRyoSyoText), AlignCol = AlignColEnum.Right },
                       new ColumnBodyTemplate() { DisplayFieldName =nameof(YouShaDataTable.YOUSHA_TesuRituText), AlignCol = AlignColEnum.Right,ColSpan=1 },
                       new ColumnBodyTemplate() { DisplayFieldName =nameof(YouShaDataTable.YOUSHASyaRyoTes_TesuRituText), AlignCol = AlignColEnum.Right,ColSpan=1 },
                       new ColumnBodyTemplate() { DisplayFieldName =nameof(YouShaDataTable.TextSihYotYmd), AlignCol = AlignColEnum.Center },
                    }
    },
            }
        };
        return result;
    }
    public static Func<object, string> CustomRowCssYouSha = (item) =>
    {
        var cssClass = "";
        var model = item as YouShaDataTable;

        if (model != null)
        {
            //cssClass = model.ColorClass;
        }

        return cssClass;
    };
    protected async Task RowClickYouSha(RowClickEventArgs<YouShaDataTable> args)
    {
        try
        {
            // CheckedItemsYouSha = new List<YouShaDataTable>();
            Value = "";
            SelectedItem = new YouShaDataTable();
            SelectedItem = args.SelectedItem;
            LastXClicked = Convert.ToInt32(args.Event.ClientX);
            LastYClicked = Convert.ToInt32(args.Event.ClientY);
            CurrentScroll = null;
            if (!args.Event.ShiftKey && !args.Event.CtrlKey && args.Event.Detail != 2 && args.IsSelected)
            {
                CheckedItemsYouSha = new List<YouShaDataTable>() { SelectedItem };
                CheckSeletedHaiShaWhenClickYoUSha(SelectedItem);
                await blazorContextMenuService.ShowMenu("Menu1", LastXClicked, LastYClicked);
            }
            else
            {
                isClickRow = true;
                await blazorContextMenuService.HideMenu("Menu1");
                if (args.Event.CtrlKey)
                {
                    CheckSeletedHaiShaWhenClickYoUSha(SelectedItem);
                    if (!CheckedItemsYouSha.Any(item => item.Index == SelectedItem.Index))
                    {
                        CheckedItemsYouSha.Add(YouShaDataList.FirstOrDefault(item => item.Index == SelectedItem.Index));
                    }
                    else
                    {
                        CheckedItemsYouSha.RemoveAll(item => item.Index == SelectedItem.Index);
                        if (CheckedItemsYouSha.Count == 0)
                        {
                            CurrentClick = null;
                        }
                        else
                        {
                            CurrentClick = CheckedItemsYouSha.Max(item => item.Index);
                        }
                    }
                }
                else if (args.Event.ShiftKey)
                {
                    int BeginIndex = Math.Min(SelectedItem.Index, (int)CurrentClick);
                    int EndIndex = Math.Max(SelectedItem.Index, (int)CurrentClick);
                    for (int IndexToBeAdd = BeginIndex; IndexToBeAdd <= EndIndex; IndexToBeAdd++)
                    {
                        if (CheckedItemsYouSha.Any())
                        {
                            if (!CheckedItemsYouSha.Any(item => item.Index == IndexToBeAdd))
                            {
                                CheckedItemsYouSha.Add(YouShaDataList.FirstOrDefault(item => item.Index == IndexToBeAdd));
                            }
                        }
                    }
                }
            }
            if (CheckedItemsYouSha.Any())
            {
                /*  Value = string.Join('-', CheckedItemsYouSha.Select(_ => _.Index));*/
            }
            CurrentClick = SelectedItem.Index;
            IsEnableBtnAddNew();
            StateHasChanged();

        }
        catch (Exception ex)
        {

        }


    }
    protected void CheckedChangeYouSha(CheckedChangeEventArgs<YouShaDataTable> args)
    {
        StateHasChanged();
    }
    protected async Task RowDbClickYouSha(YouShaDataTable item)
    {
        try
        {
            // Console.WriteLine($"RowDbClick");
            checkOptionAddYouSha = false;
            // var Data = e.Data as YouShaDataTable;
            if (CheckedItemsYouSha.Any())
            {
                var Data = CheckedItemsYouSha[0];
                youShaItemUpdate = Data;
                await GetDataUpdateYouShaPopup();
                txtPopupYouSha = txtEditForm;
                PopupHireCarRegister = true;
                await blazorContextMenuService.HideMenu("Menu1");
                isHaitaValid = true;
                _haita = await PartnerBookingInputService.GetHaitaCheck(youShaItemUpdate.YOUSHA_UkeNo,
                youShaItemUpdate.YOUSHA_UnkRen, youShaItemUpdate.YOUSHA_YouTblSeq);
                IsEnableBtnAddNew();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

        }
        /*await blazorContextMenuService.HideMenu("gridRowsClickMenuReservation");
         OpenPopupEdit();*/
    }
    void btnSaveClick(MouseEventArgs e)
    {
        // to do
    }
    void btnInitializeClick(MouseEventArgs e)
    {
        // to do
    }
    async Task SelectedSize(MouseEventArgs e, int value)
    {
        GridSize = value;
        StateHasChanged();
    }
    protected async Task LoadYouShaDataListWithIndex()
    {
        try
        {
            YouShaDataList = await PartnerBookingInputService.GetYouShaData(Ukeno, UnkRen, new ClaimModel().TenantID)
  .ContinueWith(t =>
  {
      if (t.Status == TaskStatus.RanToCompletion)
      {
          int index = 1;
          foreach (var item in t.Result)
          {
              item.Index = index++;
          }
          return t.Result;
      }
      else
      {
          return new List<YouShaDataTable>();
      }
  });
        }
        catch (Exception ex)
        {

        }


    }
    protected async Task LoadHaiShaDataListWithIndex()
    {
        try
        {
            HaiShaDataList = await PartnerBookingInputService.GetHaiShaData(Ukeno, UnkRen, new ClaimModel().TenantID)
   .ContinueWith(t =>
   {
       if (t.Status == TaskStatus.RanToCompletion)
       {
           int index = 1;
           foreach (var item in t.Result)
           {
               item.Index = index++;
               item.CodeKb_OTHER1 = tpm_CodeKbDataOTHJINKBNList.Where(x => x.CodeKb_CodeKbn == item.HAISHA_OthJinKbn1.ToString("D2")).FirstOrDefault().CodeKb_RyakuNm;
               item.CodeKb_OTHER2 = tpm_CodeKbDataOTHJINKBNList.Where(x => x.CodeKb_CodeKbn == item.HAISHA_OthJinKbn2.ToString("D2")).FirstOrDefault().CodeKb_RyakuNm;
           }
           return t.Result;
       }
       else
       {
           return new List<HaiShaDataTable>();
       }
   });
        }
        catch (Exception ex)
        {

        }


    }
    protected async Task HandleClearYouSha()
    {
        try

        {
            if (checkOptionAddYouSha)
            {
                var Data = CheckedItems[0] ?? new HaiShaDataTable();
                if (checkOptionAddYouSha)
                {
                    if (haiShaDataListTemp.Count == 0)
                    {
                        haiShaDataListTemp.Add(Data);
                    }
                    await LoadPopup_YouSha(checkOptionAddYouSha, null);
                    txtPopupYouSha = txtInsertForm;
                }

            }
            else
            {
                var Data = CheckedItemsYouSha[0];
                youShaItemUpdate = Data;
                await GetDataUpdateYouShaPopup();
                txtPopupYouSha = txtEditForm;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
        }

    }
    //toddo delete yousha
    protected void HandleDeleteYouSha()
    {
        OpenPopupDeleteYouSha();
    }
    private void CheckEnableItemContextMenu()
    {
        try
        {
            if (CheckedItems.Any())
            {
                isRegisterYouShaMenu = CheckedItems[0].CheckHasYouSha || CheckedItems[0].HAISHA_NippoKbn == 2 ? false : true;
                isUpdateHaiShaMenu = CheckedItems[0].HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1
                    || !CheckedItems[0].CheckHasYouSha ? false : true;
                isBusCooradinationReportMenu = CheckedItems[0].HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1 ? false : true;
                isVenderRequestformReportMenu = CheckedItems[0].HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1 || !CheckedItems[0].CheckHasYouSha ? false : true;
                isperatingInstructionReportMenu = CheckedItems[0].HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1 || CheckedItems[0].CheckHasYouSha ? false : true;
                isOperatingInstructionReport02Menu = CheckedItems[0].HAISHA_NippoKbn == 2 || haiShaDataListTemp.Count > 1 || CheckedItems[0].CheckHasYouSha ? false : true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

        }

    }
    protected void HandleItemPerPageChange(byte newItemPerPage)
    {
        RecordsPerPage = newItemPerPage;
        StateHasChanged();
    }
    private async void OnPaginationChanged(int page)
    {
        try
        {
            //Because in Paination component page start at 0
            CurrentPage = page + 1;
            await LoadHaiShaDataListWithIndex();
            if (HaiShaDataList != null && HaiShaDataList.Count > 0)
            {
                foreach (var item in HaiShaDataList)
                {
                    item.ColorClass = "";
                    var checkColor = await BusLineCssColorServices.GetCssColor(item.HAISHA_UkeNo, item.HAISHA_UnkRen, item.HAISHA_TeiDanNo, item.HAISHA_BunkRen);
                    if (item.HAISHA_YouTblSeq != 0)
                    {
                        item.CheckHasYouSha = true;
                    }
                    item.ColorClass = checkColor.cssColor;
                }
            }
            HaiShaDataList = PagedList<HaiShaDataTable>.ToPagedList(HaiShaDataList.AsQueryable(), CurrentPage, (int)RecordsPerPage);
            CheckedItems.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    private void BtnAddNewYouShaClick()
    {
        try
        {
            haiShaDataListTemp = haiShaDataListTemp.Where(x => x.HAISHA_YouTblSeq == 0).ToList();
            if (haiShaDataListTemp.Any())
            {
                OpenPopupHireCarRegister();
            }
        }
        catch (Exception ex)
        {

        }

    }
    private void CancelPopupNotificationItemHaiSha()
    {
        PopupNotificationItemHaiSha = false;
        haiShaDataListTemp.Clear();
        CheckedItems.Clear();
        StateHasChanged();
    }
    private void CheckSeletedHaiShaWhenClickYoUSha(YouShaDataTable data)
    {
        try
        {
            if (data != null)
            {
                CheckedItems.Clear();
                SelectedYouShaYouTblSeq = data.YOUSHA_YouTblSeq;
                HaiShaDataList.ForEach(x => x.Checked = false);
                foreach (var item in HaiShaDataList)
                {
                    if (item.HAISHA_YouTblSeq == data.YOUSHA_YouTblSeq)
                    {
                        haiShaDataListTemp.Add(item);
                        CheckedItems.Add(item);
                        item.Checked = true;
                    }
                    if (haiShaDataListTemp.Select(x => x.HAISHA_UkeNo).ToArray().Contains(item.HAISHA_UkeNo)
                        && haiShaDataListTemp.Select(x => x.HAISHA_UnkRen).ToArray().Contains(item.HAISHA_UnkRen)
                        && haiShaDataListTemp.Select(x => x.HAISHA_SyaSyuRen).ToArray().Contains(item.HAISHA_SyaSyuRen)
                        && haiShaDataListTemp.Select(x => x.HAISHA_BunkRen).ToArray().Contains(item.HAISHA_BunkRen)
                        && haiShaDataListTemp.Select(x => x.HAISHA_TeiDanNo).ToArray().Contains(item.HAISHA_TeiDanNo))
                    {
                        item.Checked = true;
                    }
                }
            }
            //StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }
    /*Save Grid*/
    public async void SaveGridLayout()
    {
        await _loadingService.ShowAsync();
        await Task.Run(() =>
        {
            var headerColumns = Header.Rows.Count > 0 ? Header.Rows[0].Columns : new List<ColumnHeaderTemplate>();
            List<TkdGridLy> gridLayouts = new List<TkdGridLy>();
            if (headerColumns.Count > 0)
            {
                for (int i = 0; i < headerColumns.Count; i++)
                {
                    string itemName = headerColumns[i].CodeName;
                    gridLayouts.Add(new TkdGridLy()
                    {
                        DspNo = i,
                        FormNm = FormName,
                        FrozenCol = 0,
                        GridNm = PartnerBookingInputGridHeaderNameConstants.GridName,
                        ItemNm = itemName,
                        SyainCdSeq = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                        UpdPrgId = Common.UpdPrgId,
                        UpdSyainCd = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                        UpdYmd = DateTime.Now.ToString("yyyyMMdd"),
                        UpdTime = DateTime.Now.ToString("HHmmss"),
                        Width = headerColumns[i].Width
                    }); ; ;
                }
            }

            var isSaved = GridLayoutService.SaveGridLayout(gridLayouts).Result;
            InvokeAsync(StateHasChanged).Wait();
        });
        await _loadingService.HideAsync();
    }
    public async void InitGridLayout()
    {
        try
        {
            await _loadingService.ShowAsync();
            await Task.Run(() =>
            {
                List<TkdGridLy> tkdGridLies = new List<TkdGridLy>();
                RenderGridBySavedLayout(tkdGridLies);
                DeleteSavedGridLayout();
                InvokeAsync(StateHasChanged).Wait();
            });
            await _loadingService.HideAsync();
        }
        catch (Exception ex)
        {

        }

    }
    private void DeleteSavedGridLayout()
    {
        var isDeleted = GridLayoutService.DeleteSavedGridLayout(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, FormName, PartnerBookingInputGridHeaderNameConstants.GridName).Result;
    }
    private void GenrateGrid()
    {
        try
        {

            List<TkdGridLy> tkdGridLies = GridLayoutService.GetGridLayout(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, FormName, PartnerBookingInputGridHeaderNameConstants.GridName).Result;
            RenderGridBySavedLayout(tkdGridLies);
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
        }

    }
    private void RenderGridBySavedLayout(List<TkdGridLy> gridlayouts)
    {
        HeaderTemplate headerTemplate = new HeaderTemplate();
        headerTemplate.Rows = new List<RowHeaderTemplate>();
        headerTemplate.StickyCount = 1;
        BodyTemplate bodyTemplate = new BodyTemplate();
        bodyTemplate.Rows = new List<RowBodyTemplate>();
        bodyTemplate.CustomCssDelegate = CustomRowCss;
        for (int i = 0; i < 3; i++)
        {
            headerTemplate.Rows.Add(new RowHeaderTemplate());
            bodyTemplate.Rows.Add(new RowBodyTemplate());
        }
        for (int i = 0; i < 3; i++)
        {
            headerTemplate.Rows[i].Columns = new List<ColumnHeaderTemplate>();
            bodyTemplate.Rows[i].Columns = new List<ColumnBodyTemplate>();
        }
        int CurrentIndex = 0;
        while (true)
        {
            // No
            if ((gridlayouts.Count == 0 && CurrentIndex == 0) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.no_colItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["no_col"], CodeName = PartnerBookingInputGridHeaderNameConstants.no_colItemNm, RowSpan = 2, Width = gridlayouts.Count == 0 ? 50 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.Index), RowSpan = 2, AlignCol = AlignColEnum.Center });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 1) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.Car))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Car"], CodeName = PartnerBookingInputGridHeaderNameConstants.Car, RowSpan = 2, Width = gridlayouts.Count == 0 ? 50 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextGoSya), RowSpan = 2, AlignCol = AlignColEnum.Center });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 2) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.MercenaryType))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["MercenaryType"], CodeName = PartnerBookingInputGridHeaderNameConstants.MercenaryType, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.YOUSHAKATA_RyakuNmText), RowSpan = 2, AlignCol = AlignColEnum.Center });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 3) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.MercenaryName))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["MercenaryName"], CodeName = PartnerBookingInputGridHeaderNameConstants.MercenaryName, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                //headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Vehicle"], CodeName = PartnerBookingInputGridHeaderNameConstants.Vehicle, RowSpan = 1,Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TOKISK_RyakuNmText), RowSpan = 1, AlignCol = AlignColEnum.Left });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TOKIST_RyakuNmGrid), RowSpan = 1, AlignCol = AlignColEnum.Left });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 4) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.SalesOffice))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["SalesOffice"], CodeName = PartnerBookingInputGridHeaderNameConstants.SalesOffice, RowSpan = 1, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Vehicle"], CodeName = PartnerBookingInputGridHeaderNameConstants.Vehicle, RowSpan = 1, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.EIGYOS_RyakuNmText), AlignCol = AlignColEnum.Left, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.SYARYO_SyaRyoNmGrid), AlignCol = AlignColEnum.Left, RowSpan = 1 });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 5) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.CarType))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["CarType"], CodeName = PartnerBookingInputGridHeaderNameConstants.CarType, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width, RowSpan = 2 });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.SYASYU_SyaSyuNmText), RowSpan = 2, AlignCol = AlignColEnum.Center });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 6) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.OrganizationName))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["OrganizationName"], CodeName = PartnerBookingInputGridHeaderNameConstants.OrganizationName, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.UNKOBI_DanTaNm), AlignCol = AlignColEnum.Center, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_DanTaNm2), AlignCol = AlignColEnum.Center, RowSpan = 1 });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 7) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.Issue_Return))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Issue/Return"], CodeName = PartnerBookingInputGridHeaderNameConstants.Issue_Return, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextHaiSyuKoYmd_HaiSyuKoTime), AlignCol = AlignColEnum.Left, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextHaiKikYmd_HaiKikTime), AlignCol = AlignColEnum.Left, RowSpan = 1 });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 8) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.Dispatch_Arrival))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Dispatch/Arrival"], CodeName = PartnerBookingInputGridHeaderNameConstants.Dispatch_Arrival, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextHaiSYmd_HaiSTime), AlignCol = AlignColEnum.Left, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextHaiTouYmd_HaiTouTime), AlignCol = AlignColEnum.Left, RowSpan = 1 });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 9) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.Depot_Arrival))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Depot/Arrival"], CodeName = PartnerBookingInputGridHeaderNameConstants.Depot_Arrival, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_HaiSNm), AlignCol = AlignColEnum.Left, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_TouNm), AlignCol = AlignColEnum.Left, RowSpan = 1 });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 10) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.FaresIncludingTax))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["FaresIncludingTax"], CodeName = PartnerBookingInputGridHeaderNameConstants.FaresIncludingTax, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHAYoushaUnc_YoushaSyoTextGrid), RowSpan = 2, AlignCol = AlignColEnum.Right });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 11) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.Fare))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Fare"], CodeName = PartnerBookingInputGridHeaderNameConstants.Fare, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_YoushaUncTextGrid), RowSpan = 2, AlignCol = AlignColEnum.Right });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 12) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.ConsumptionTax))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ConsumptionTax"], CodeName = PartnerBookingInputGridHeaderNameConstants.ConsumptionTax, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_YoushaSyoTextGrid), RowSpan = 2, AlignCol = AlignColEnum.Right });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 13) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.FeeAmount))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["FeeAmount"], CodeName = PartnerBookingInputGridHeaderNameConstants.FeeAmount, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_YoushaTesTextGrid), RowSpan = 2, AlignCol = AlignColEnum.Right });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 14) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.Connection))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Connection"], CodeName = PartnerBookingInputGridHeaderNameConstants.Connection, RowSpan = 1, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Dispatch/Arrival"], CodeName = PartnerBookingInputGridHeaderNameConstants.Dispatch_Arrival, RowSpan = 1, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextHaiSSetTime_HAISHA_HaiSKouKNm), AlignCol = AlignColEnum.Left, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.TextTouSetTime_HAISHA_TouSKouKNm), AlignCol = AlignColEnum.Left, RowSpan = 1 });
            }
            if ((gridlayouts.Count == 0 && CurrentIndex == 15) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.DepotAddress))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["DepotAddress"], CodeName = PartnerBookingInputGridHeaderNameConstants.DepotAddress, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_HaiSJyus1_HAISHA_HaiSJyus2), AlignCol = AlignColEnum.Left, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_TouJyusyo1_HAISHA_TouJyusyo2), AlignCol = AlignColEnum.Left, RowSpan = 1 });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 16) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.BoardingPersonnel))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BoardingPersonnel"], CodeName = PartnerBookingInputGridHeaderNameConstants.BoardingPersonnel, RowSpan = 1, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["PlusPersonnel"], CodeName = PartnerBookingInputGridHeaderNameConstants.PlusPersonnel, RowSpan = 1, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_JyoSyaJinText), AlignCol = AlignColEnum.Left, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_PlusJinText), AlignCol = AlignColEnum.Left, RowSpan = 1 });
            }
            //
            if ((gridlayouts.Count == 0 && CurrentIndex == 17) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.OtherPersonnel))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["OtherPersonnel"], CodeName = PartnerBookingInputGridHeaderNameConstants.OtherPersonnel, RowSpan = 2, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.CodeKb_OTHER1_HAISHA_OthJin1), AlignCol = AlignColEnum.Left, RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.CodeKb_OTHER2_HAISHA_OthJin2), AlignCol = AlignColEnum.Left, RowSpan = 1 });
            }

            //プレートNo
            if ((gridlayouts.Count == 0 && CurrentIndex == 18) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == PartnerBookingInputGridHeaderNameConstants.DestinationName))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["DestinationName"], CodeName = PartnerBookingInputGridHeaderNameConstants.DestinationName, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width, RowSpan = 2 });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(HaiShaDataTable.HAISHA_IkNm), RowSpan = 2, AlignCol = AlignColEnum.Left });
                if (gridlayouts.Count == 0)
                {
                    break;
                }
            }

            CurrentIndex++;
            if (gridlayouts.Count != 0 && CurrentIndex >= gridlayouts.Count)
            {
                break;
            }
        }
        Header = headerTemplate;
        Body = bodyTemplate;
    }
    #endregion

    #region checkBtnAddNewYouSha
    private void IsEnableBtnAddNew()
    {
        try
        {
            isBtnAddNewYouShaEnable = false;
            haiShaDataListTemp = haiShaDataListTemp.Where(x => x.HAISHA_YouTblSeq == 0).ToList();
            if (haiShaDataListTemp.Any())
            {
                isBtnAddNewYouShaEnable = true;
            }
        }
        catch (Exception ex)
        { }

    }
    #endregion


    async Task OnModelChanged(string propertyName, dynamic val)
    {
        var propertyInfo = Model.GetType().GetProperty(propertyName);
        propertyInfo.SetValue(Model, val);

        if (propertyName == nameof(CustomerModel.SelectedGyosya))
            isGyosyaNull = Model.SelectedGyosya == null;
        if (propertyName == nameof(CustomerModel.SelectedTokisk))
            isTokiskNull = Model.SelectedTokisk == null;

        if (propertyName == nameof(CustomerModel.SelectedTokiSt))
        {
            isCustomerNull = Model.SelectedTokiSt == null;
            if (val != null)
            {
                TokistData tokistData = new TokistData()
                {
                    TOKISK_TokuiSeq = Model.SelectedTokiSt.TokuiSeq,
                    TOKIST_TesuRitu = Model.SelectedTokiSt.TesuRitu,
                    TOKIST_SitenCdSeq = Model.SelectedTokiSt.SitenCdSeq
                };
                YouShaDataInsert.TokistData = tokistData;
                YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu = tokistData.TOKIST_TesuRitu;
                decimal vatCustomer = YouShaDataInsert.Sum_YOUSYU_SyaSyuTan * (YouShaDataInsert.YouShaDataPopup.YOUSHA_TesuRitu / 100);
                YouShaDataInsert.YouShaDataPopup.YOUSHA_SyaRyoTes = (int)vatCustomer;
                if (isCheckBIT02)
                {
                    bool checkDataYouShaExistDb = await CheckDataYousha(YouShaDataInsert);
                    if (checkDataYouShaExistDb)
                    {
                        checkDataExist = true;
                        disableSubmit = false;
                        emptyItemMessage[nameof(MessageCheckDataExist)] = MessageCheckDataExist;
                    }
                    else
                    {
                        checkDataExist = false;
                        disableSubmit = true;
                    }
                }
                else
                {
                    isCheckBIT02 = true;
                }
            }
        }

        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoadingService LoadingService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IErrorHandlerService ErrorHandlerService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUnkoushijishoReportService UnkoushijishoReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICarCooperationListService CarCooperationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IGridLayoutService GridLayoutService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoadingService _loadingService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorContextMenuService blazorContextMenuService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusLineCssColorServices BusLineCssColorServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomNavigation NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPartnerBookingInputService PartnerBookingInputService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusBookingDataListService BusBookingDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CodeKbListService TPM_CodeKbnService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper BusScheduleHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<PartnerBookingInput> Lang { get; set; }
    }
}
#pragma warning restore 1591
