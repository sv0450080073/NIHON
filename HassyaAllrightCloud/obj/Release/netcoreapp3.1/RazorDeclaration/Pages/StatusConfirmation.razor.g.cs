#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\StatusConfirmation.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0589467bbadd2739383570cb35ac47c4112d4d47"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/statusconfirmation")]
    public partial class StatusConfirmation : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1469 "E:\Project\HassyaAllrightCloud\Pages\StatusConfirmation.razor"
       
    StatusConfirmationData.DataSearch data = new StatusConfirmationData.DataSearch();
    List<CompanyChartData> companylst = new List<CompanyChartData>();
    List<BranchChartData> branchlst = new List<BranchChartData>();
    List<LoadCustomerList> customerlst = new List<LoadCustomerList>();
    List<string> number_of_confirmations = new List<string>();
    List<string> items_to_check = new List<string>();
    List<string> number_of_units = new List<string>();
    List<string> amount_of_money = new List<string>();
    List<string> schedule = new List<string>();
    List<string> size_of_paper = new List<string>();
    List<string> heading_output = new List<string>();
    List<string> grouping_output = new List<string>();
    List<string> separator_output = new List<string>();

    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    DateTime startdate = DateTime.Today;
    DateTime enddate = DateTime.Today;
    string baseUrl;
    bool ResultSearch = false;
    bool isShow = false;
    bool isDisabled = false;
    bool isCSV = false;
    bool ClearBtnDisabled { get; set; } = true;
    int status_confirmed;
    int status_confirmation;
    int printmode;

    #region Component Lifecycle
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        baseUrl = AppSettingsService.GetBaseUrl();
        companylst = await TPM_CompnyDataService.GetCompany(Common.TenantID);
        companylst.Insert(0, new CompanyChartData());
        if (data.Company != null)
        {
            branchlst = TPM_EigyosDataService.GetBranchbyCompany1(data.Company.CompanyCdSeq, Common.TenantID);
        }
        branchlst.Insert(0, new BranchChartData());
        customerlst = await Http.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
        status_confirmed = (int)ConfirmStatus.Confirmed;
        status_confirmation = (int)ConfirmStatus.Yes;
        number_of_confirmations = new List<string>() {
            "未指定",
            "1回",
            "2回",
            "3回",
            "4回",
            "5回",
            "6回",
            "7回",
            "8回",
            "9回",
            "10回以上",
        };
        items_to_check = new List<string>() {
            "未指定",
            "確認済",
            "未確認",
        };
        number_of_units = new List<string>() {
            "未指定",
        };
        amount_of_money = new List<string>() {
            "未指定",
        };
        schedule = new List<string>() {
            "未指定",
        };
        printmode = (int)PrintMode.Preview;
        size_of_paper = new List<string>() {
            "A3",
            "A4",
            "B4",
        };
        heading_output = new List<string>()
        {
            "出力する",
            "出力しない"
        };
        grouping_output = new List<string>()
        {
            "「”」で括る",
            "「”」で括らない",
        };
        separator_output = new List<string>()
        {
            "カンマ",
            "セミコロン",
            "スペース",
            "固定長さ",
            "その他文字",
        };

        data.Company = companylst.First();
        data.BranchStart = branchlst.First();
        data.BranchEnd = branchlst.First();
        data.NumberOfConfirmations = number_of_confirmations.First();
        data.ItemsToCheck = items_to_check.First();
        data.NumberOfUnits = items_to_check.First();
        data.AmountOfMoney = items_to_check.First();
        data.Schedule = items_to_check.First();
        data.SizeOfPaper = size_of_paper.First();
        data.HeadingOutput = heading_output.First();
        data.GroupingOutput = grouping_output.First();
        data.SeparatorOutput = separator_output.First();
    }
    #endregion

    #region value changed method
    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    void OnStartDateChanged(DateTime newDate)
    {
        startdate = newDate;
        data.StartDate = newDate;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    void OnEndDateChanged(DateTime newDate)
    {
        enddate = newDate;
        data.EndDate = newDate;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedCompanyItems"></param>
    void OnSelectedCompanyItemsChanged(CompanyChartData selectedCompanyItems)
    {
        data.Company = selectedCompanyItems;
        branchlst = new List<BranchChartData>();
        if (data.Company != null)
        {
            branchlst = TPM_EigyosDataService.GetBranchbyCompany1(selectedCompanyItems.CompanyCdSeq, Common.TenantID);
        }
        branchlst.Insert(0, new BranchChartData());
        data.BranchStart = branchlst.First();
        data.BranchEnd = branchlst.First();
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedBranchStartItemsChanged(BranchChartData selectedItems)
    {
        data.BranchStart = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedBranchEndItemsChanged(BranchChartData selectedItems)
    {
        data.BranchEnd = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnCustomerStartChanged(LoadCustomerList selectedItems)
    {
        data.CustomerStart = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnCustomerEndChanged(LoadCustomerList selectedItems)
    {
        data.CustomerEnd = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickStatusConfirmed(MouseEventArgs e, int number)
    {
        status_confirmed = number;
        data.StatusConfirmed = number;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickStatusConfirmation(MouseEventArgs e, int number)
    {
        status_confirmation = number;
        data.StatusConfirmation = number;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedNumberConfirmationChanged(string selectedItems)
    {
        data.NumberOfConfirmations = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void @OnSelectedItemCheckChanged(string selectedItems)
    {
        data.ItemsToCheck = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedNumberUnitsChanged(string selectedItems)
    {
        data.NumberOfUnits = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedAmountChanged(string selectedItems)
    {
        data.AmountOfMoney = selectedItems;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedScheduleChanged(string selectedItems)
    {
        data.Schedule = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickSelectOutput(MouseEventArgs e, int number)
    {
        if (number == (int)PrintMode.SaveAsExcel)
        {
            isCSV = true;
        }
        else
        {
            isCSV = false;
        }
        printmode = number;
        data.PrintMode = number;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="size"></param>
    void OnSelectSizeOfPaper(string size)
    {
        data.SizeOfPaper = size;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedHeadingOutput(string selectedItems)
    {
        data.HeadingOutput = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedGroupingOutput(string selectedItems)
    {
        data.GroupingOutput = selectedItems;
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    void OnSelectedSeparatorOutput(string selectedItems)
    {
        data.SeparatorOutput = selectedItems;
        if (data.SeparatorOutput == "固定長さ")
        {
            isDisabled = true;
            data.HeadingOutput = heading_output.Single(x => x == "出力しない");
            data.GroupingOutput = grouping_output.Single(x => x == "「”」で括らない");
        }
        else
        {
            isDisabled = false;
        }
        if (data.SeparatorOutput == "その他文字")
        {
            isShow = true;
        }
        else
        {
            isShow = false;
        }
        ClearBtnDisabled = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnNoteChanged(string newValue)
    {
        data.Note = newValue;
        ClearBtnDisabled = false;
        StateHasChanged();
    }
    #endregion

    #region Button Action
    void Reset() {
        startdate = DateTime.Today;
        enddate = DateTime.Today;
        data.Company = companylst.First();
        data.BranchStart = branchlst.First();
        data.BranchEnd = branchlst.First();
        data.CustomerStart = new LoadCustomerList();
        data.CustomerEnd = new LoadCustomerList();
        data.StatusConfirmed = (int)ConfirmStatus.Confirmed;
        data.StatusConfirmation = (int)ConfirmStatus.Yes;
        data.NumberOfConfirmations = number_of_confirmations.First();
        data.ItemsToCheck = items_to_check.First();
        data.NumberOfUnits = items_to_check.First();
        data.AmountOfMoney = items_to_check.First();
        data.Schedule = items_to_check.First();
        data.PrintMode = (int)PrintMode.Preview;        
        data.SizeOfPaper = size_of_paper.First();
        data.HeadingOutput = heading_output.First();
        data.GroupingOutput = grouping_output.First();
        data.SeparatorOutput = separator_output.First();
        data.Note = null;
        StateHasChanged();
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<StatusConfirmation> Lang { get; set; }
    }
}
#pragma warning restore 1591
