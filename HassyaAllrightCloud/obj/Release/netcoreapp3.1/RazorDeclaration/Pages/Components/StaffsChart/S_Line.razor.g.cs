#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\StaffsChart\S_Line.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "282f93a211fd6c5960a3a1428a1ff36f5e6664e4"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components.StaffsChart
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
    public partial class S_Line : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 29 "E:\Project\HassyaAllrightCloud\Pages\Components\StaffsChart\S_Line.razor"
       
    [CascadingParameter] S_Container Container { get; set; }
    [Parameter] public StaffData Item { get; set; }
    [Parameter] public int Type { get; set; }
    List<ItemStaff> Jobs = new List<ItemStaff>();
    BusLineData tmpbus = new BusLineData();
    double height;
    double lineheight;
    string bg;
    string MenuId;
    string cssClass;
    DateTime startdatedt;
    DateTime enddatedt;
    public string colorAllow{ get; } = "#ffc0cb00";
    public string colorNotAllow { get; } = "#C6C6C6";
    string allow = "#ffc0cb00";
    string notallow = "#ffc0cb00";
    Double allowPercent = 50;

    #region Component Lifecycle
    /// <summary>
    /// Load javascript of page
    /// </summary>
    /// <returns></returns>
    protected override void OnParametersSet()
    {
        Jobs.Clear();
        ReformatRenderItem();
    }

    /// <summary>
    /// Invoked after each render of the component.
    /// Called for the first time when the component is initialized - firstRender = true
    /// and then after every re-render - firstRender = false.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override void OnAfterRender(bool firstRender)
    {
    }
    #endregion

    /// <summary>
    ///
    /// </summary>
    private void ReformatRenderItem()
    {
        height = 0;
        if (Container.Param.DisplayedLineHeight == (int)ViewMode.Large)
        {
            lineheight = 2; // 32px
        }
        if (Container.Param.DisplayedLineHeight == (int)ViewMode.Medium)
        {
            lineheight = 1.0625; // 17px
        }
        if (Container.Param.DisplayedLineHeight == (int)ViewMode.Small)
        {
            lineheight = 0.875; // 14px
        }

        List<ItemStaff> tmp = new List<ItemStaff>();
        if (Container.Param.Type == (int)Staffs_Type.Normal)
        {
            tmp.AddRange(Container.StaffsLines.Where(x => x.BusLine == Item.StaffID && x.KSKbn == 2).OrderBy(o => o.StartDate).ThenBy(o => o.TimeStartString));
        }
        if (Container.Param.Type == (int)Staffs_Type.Unassigned)
        {
            tmp.AddRange(Container.StaffsLines.Where(x => (x.BusLine == Item.StaffID && x.KSKbn == 2) || (x.BusName == Item.StaffName && x.KSKbn == 1 && x.YouTblSeq == 0)).OrderBy(o => o.StartDate).ThenBy(o => o.TimeStartString));
        }

        if (tmp.Count > 0)
        {
            List<List<ItemStaff>> myList = new List<List<ItemStaff>>();
            foreach (ItemStaff bus in tmp)
            {
                var rowPosition = arrangePositionTmp(bus, myList);

                if (myList.Any())
                {
                    if (rowPosition >= myList.Count - 1)
                    {
                        myList.Add(new List<ItemStaff>());
                    }
                    if (myList[rowPosition].Any())
                    {
                        myList[rowPosition].Add(bus);
                    }
                    else
                    {
                        myList[rowPosition].Add(bus);
                    }
                }
                else
                {
                    myList.Add(new List<ItemStaff>());
                    myList[rowPosition].Add(bus);
                }
            }
            for (var i = 0; i < myList.Count; i++)
            {
                if (myList[i].Count() < 1)
                {
                    myList.RemoveAt(i);
                }
            }

            for (var i = 0; i < myList.Count; i++)
            {
                for (var j = 0; j < myList[i].Count; j++)
                {
                    if (i == 0)
                    {
                        ItemStaff tmpV = myList[i][j];
                        DateTime startdate;
                        DateTime enddate;
                        DateTime.TryParseExact(tmpV.MinDate + tmpV.MinTime.ToString("D4"), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out startdate);
                        DateTime.TryParseExact(tmpV.Maxdate + tmpV.MaxTime.ToString("D4"), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out enddate);
                        if (j == 0)
                        {
                            if (startdate < startdatedt)
                            {
                                tmpV.MinLeft = busScheduleHelper.calleft(Container.Width, startdatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                            }
                            else
                            {
                                tmpV.MinLeft = busScheduleHelper.calleft(Container.Width, tmpV.MinDate, tmpV.MinTime.ToString("D4"), Container.Param.Number_of_days, Container.Date);
                            }
                            if (enddatedt < enddate)
                            {
                                tmpV.MaxWidth = busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                            }
                            else
                            {
                                tmpV.MaxWidth = busScheduleHelper.calleft(Container.Width, tmpV.Maxdate, tmpV.MaxTime.ToString("D4"), Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                            }
                            if (myList[i].Count() > (j + 1))
                            {
                                double maxWidthtpm = myList[i][j + 1].Left - myList[i][j].Left;
                                if (maxWidthtpm < tmpV.MaxWidth)
                                {
                                    tmpV.MaxWidth = maxWidthtpm;
                                }
                            }
                            //if (tmpV.StartDate == tmpV.MinDate && tmpV.TimeStart == tmpV.MinTime && tmpV.EndDate == tmpV.Maxdate && tmpV.TimeEnd == tmpV.MaxTime)
                            //{
                            //    tmpV.AllowEdit = false;
                            //}
                        }
                        else
                        {
                            double minleft1 = 0;
                            if (startdate < startdatedt)
                            {
                                minleft1 = busScheduleHelper.calleft(Container.Width, startdatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                            }
                            else
                            {
                                minleft1 = busScheduleHelper.calleft(Container.Width, tmpV.MinDate, tmpV.MinTime.ToString("D4"), Container.Param.Number_of_days, Container.Date);
                            }
                            if (enddatedt < enddate)
                            {
                                tmpV.MaxWidth = busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                            }
                            else
                            {
                                tmpV.MaxWidth = busScheduleHelper.calleft(Container.Width, tmpV.Maxdate, tmpV.MaxTime.ToString("D4"), Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                            }
                            double minleft2 = myList[i][j - 1].Left + myList[i][j - 1].Width;
                            tmpV.MinLeft = minleft1;
                            if (minleft2 > minleft1)
                            {
                                tmpV.MinLeft = minleft2;
                            }
                        }
                        if (myList[i].Count() > j && j > 0)
                        {
                            if ((myList[i].Count() - 1) == j)
                            {
                                if (enddatedt < enddate)
                                {
                                    tmpV.MaxWidth = busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                                }
                                else
                                {
                                    tmpV.MaxWidth = busScheduleHelper.calleft(Container.Width, tmpV.Maxdate, tmpV.MaxTime.ToString("D4"), Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                                }

                            }
                            else
                            {
                                double maxwidth = 0;
                                if (enddatedt < enddate)
                                {
                                    maxwidth = busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                                }
                                else
                                {
                                    maxwidth = busScheduleHelper.calleft(Container.Width, tmpV.Maxdate, tmpV.MaxTime.ToString("D4"), Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                                }
                                double maxwidth1 = myList[i][j + 1].Left - myList[i][j].Left;
                                tmpV.MaxWidth = maxwidth;
                                if (maxwidth1 < maxwidth)
                                {
                                    tmpV.MaxWidth = maxwidth1;
                                }
                            }
                        }

                        tmpV.Top = 0.3125; //5px
                        tmpV.BusVehicle = Item.StaffVehicle;
                        tmpV.Height = lineheight;
                        tmpV.CCSStyle = StyleItemText(tmpV);
                        tmpV.CCSStyleDefault = StyleItemTextDefault(tmpV);
                        tmpV.minleftcreate = busScheduleHelper.calleft(Container.Width, startdatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) < 0 ? 0 : busScheduleHelper.calleft(Container.Width, startdatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                        tmpV.maxwidthcreate = busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) > Container.Width ? Container.Width : busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                        Jobs.Add(tmpV);
                        continue;
                    }
                    else
                    {
                        ItemStaff tmpV = myList[i][j];
                        DateTime startdate;
                        DateTime enddate;
                        DateTime.TryParseExact(tmpV.MinDate + tmpV.MinTime.ToString("D4"), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out startdate);
                        DateTime.TryParseExact(tmpV.Maxdate + tmpV.MaxTime.ToString("D4"), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out enddate);
                        if (j == 0)
                        {
                            if (startdate < startdatedt)
                            {
                                tmpV.MinLeft = busScheduleHelper.calleft(Container.Width, startdatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                            }
                            else
                            {
                                tmpV.MinLeft = busScheduleHelper.calleft(Container.Width, tmpV.MinDate, tmpV.MinTime.ToString("D4"), Container.Param.Number_of_days, Container.Date);
                            }
                            if (enddatedt < enddate)
                            {
                                tmpV.MaxWidth = busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                            }
                            else
                            {
                                tmpV.MaxWidth = busScheduleHelper.calleft(Container.Width, tmpV.Maxdate, tmpV.MaxTime.ToString("D4"), Container.Param.Number_of_days, Container.Date) - tmpV.Left;
                            }


                            if (myList[i].Count() > (j + 1))
                            {
                                double maxwidth = 0;
                                if (enddatedt < enddate)
                                {
                                    maxwidth = busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                                }
                                else
                                {
                                    maxwidth = busScheduleHelper.calleft(Container.Width, tmpV.Maxdate, tmpV.MaxTime.ToString("D4"), Container.Param.Number_of_days, Container.Date);
                                }

                                double maxwidth1 = myList[i][j + 1].Left - myList[i][j].Left;
                                tmpV.MaxWidth = maxwidth;
                                if (maxwidth1 < maxwidth)
                                {
                                    tmpV.MaxWidth = maxwidth1;
                                }
                            }
                        }
                        else
                        {
                            double minleft1 = 0;
                            if (startdate < startdatedt)
                            {
                                minleft1 = busScheduleHelper.calleft(Container.Width, startdatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                            }
                            else
                            {
                                minleft1 = busScheduleHelper.calleft(Container.Width, tmpV.MinDate, tmpV.MinTime.ToString("D4"), Container.Param.Number_of_days, Container.Date);
                            }
                            double minleft2 = myList[i][j - 1].TimeEnd;
                            tmpV.MinLeft = minleft1;
                            if (minleft2 > minleft1)
                            {
                                tmpV.MinLeft = minleft2;
                            }
                            tmpV.MinLeft =
                            tmpV.MaxWidth = -1;
                        }
                        if (myList[i].Count() > j && j > 0)
                        {
                            if ((myList[i].Count() - 1) == j)
                            {
                                tmpV.MaxWidth = -1;
                            }
                            else
                            {
                                double maxWidthtpm = myList[i][j + 1].Left - myList[i][j].Left;
                                if (maxWidthtpm < tmpV.MaxWidth)
                                {
                                    tmpV.MaxWidth = maxWidthtpm;
                                }
                            }

                        }
                        tmpV.Top = lineheight * i + 0.3125 + (i) * 0.3125;
                        tmpV.Height = lineheight;
                        tmpV.BusVehicle = Item.StaffVehicle;
                        tmpV.CCSStyle = StyleItemText(tmpV);
                        tmpV.CCSStyleDefault = StyleItemTextDefault(tmpV);
                        tmpV.AllowEdit = true;
                        tmpV.minleftcreate = busScheduleHelper.calleft(Container.Width, startdatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) < 0 ? 0 : busScheduleHelper.calleft(Container.Width, startdatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                        tmpV.maxwidthcreate = busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date) > Container.Width ? Container.Width : busScheduleHelper.calleft(Container.Width, enddatedt.ToString("yyyyMMdd"), "0000", Container.Param.Number_of_days, Container.Date);
                        Jobs.Add(tmpV);
                        continue;
                    }
                }
            }
            if (myList.Count() == 1)
            {
                height = lineheight + 0.625;
            }
            else
            {
                height = lineheight * (myList.Count()) + (myList.Count() - 1) * 0.3125 + 0.625;
                tmpbus = new BusLineData();
                tmpbus.LineID = Item.StaffID;
                tmpbus.LineHeight = height;
            }
            for (var i = 0; i < Container.StaffsName.Count; i++)
            {
                if (Container.StaffsName[i].StaffID == Item.StaffID)
                {
                    Container.StaffsName[i].StaffHeight = height;
                }
            }
            for (var i = 0; i < Container.StaffsNameUnassigned.Count; i++)
            {
                if (Container.StaffsNameUnassigned[i].StaffName == Item.StaffName)
                {
                    Container.StaffsNameUnassigned[i].StaffHeight = height;
                }
            }

            DateTime fromdate = Container.Date;
            DateTime todate = Container.Date.AddDays(Container.Param.Number_of_days);
            DateTime.TryParseExact(Item.StaYmd != null ? Item.StaYmd.ToString() : "19700101", "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out startdatedt);
            DateTime.TryParseExact(Item.EndYmd != null ? Item.EndYmd.ToString() : "25003112", "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out enddatedt);
            if (startdatedt >= fromdate && startdatedt <= todate)
            {
                allow = colorNotAllow;
                notallow = colorAllow;
                int days = (startdatedt - fromdate).Days;
                allowPercent = ((double)days / (double)Container.Param.Number_of_days) * 100;
            }
            else if (enddatedt >= fromdate && enddatedt <= todate)
            {
                allow = colorAllow;
                notallow = colorNotAllow;
                int days = (enddatedt - fromdate).Days;
                allowPercent = ((double)days / (double)Container.Param.Number_of_days) * 100;
            }
            else if (startdatedt >= todate)
            {
                allow = colorAllow;
                notallow = colorNotAllow;
                allowPercent = 0;
            }
            else
            {
                allow = colorAllow;
                notallow = colorAllow;
                allowPercent = 100;
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="tmp"></param>
    /// <param name="itemList"></param>
    /// <returns></returns>
    private int arrangePositionTmp(ItemStaff tmp, List<List<ItemStaff>> itemList)
    {
        if (itemList.Count <= 0)
        {
            return 0;
        }
        for (var i = 0; i < itemList.Count; i++)
        {
            if (itemList[i].Count == 0)
            {
                return i;
            }
            if (itemList[i][itemList[i].Count - 1].TimeEndString <= tmp.TimeStartString)
            {
                return i;
            }
        }
        return itemList.Count;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private string StyleItemText(ItemStaff item)
    {
        return "width:" + item.Width.ToString() + "px;top:" + item.Top.ToString() + "rem;left:" + item.Left.ToString() + "px;";
    }

    /// <summary>
    /// /
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private string StyleItemTextDefault(ItemStaff item)
    {
        return "width:" + item.WidthDefault.ToString() + "px;left:" + item.LeftDefault.ToString() + "px;";
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private void OnHandleDrop()
    {
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper busScheduleHelper { get; set; }
    }
}
#pragma warning restore 1591
