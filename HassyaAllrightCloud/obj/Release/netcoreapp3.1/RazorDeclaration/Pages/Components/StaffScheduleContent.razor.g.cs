#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\StaffScheduleContent.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "aa50da51c89f78fb75c9afaf411ccb170161b487"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\Pages\Components\StaffScheduleContent.razor"
using TimeZoneConverter;

#line default
#line hidden
#nullable disable
    public partial class StaffScheduleContent : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 313 "E:\Project\HassyaAllrightCloud\Pages\Components\StaffScheduleContent.razor"
       
    [Parameter] public bool IsHomePage { get; set; }
    IEnumerable<StaffScheduleData> ScheduleData = new List<StaffScheduleData>();
    List<CompanyScheduleInfo> CompaniesScheduleInfo;
    List<GroupScheduleInfo> SelectedGroupScheduleInfo = new List<GroupScheduleInfo>();
    Dictionary<int, Dictionary<int, bool>> SelectedGroupScheduleDict = new Dictionary<int, Dictionary<int, bool>>();
    List<VpmCodeKb> ScheduleTypeList = new List<VpmCodeKb>();
    List<VpmCodeKb> ScheduleLabelList = new List<VpmCodeKb>();
    IEnumerable<StaffScheduleGroupData> StaffScheduleGroupDatas = new List<StaffScheduleGroupData>();
    IEnumerable<ScheduleDataModel> ScheduleDataModelFullDay = new List<ScheduleDataModel>();
    IEnumerable<ScheduleDataModel> ScheduleDataModel = new List<ScheduleDataModel>();
    List<StaffsData> StaffList;
    List<StaffModel> StaffListOfGroup;
    List<LoadLeaveDayType> LeaveDayTypeList = new List<LoadLeaveDayType>();
    int activeTabIndex = 0;
    bool NotAcecptSchedule;
    bool AcceptSchedule;
    bool IsDeciding = false;
    bool IsShowDetailAppointment = false;
    bool IsShowFeedbackBookingSchedule = false;
    bool IsShowGroupSchedule = false;
    bool isLoading = true;
    bool isClickByChangeTab = true;
    bool IsFirstSelect = true;
    bool PopupGroupScheduleAdd = false;
    bool PopupDisplaySetting = false;
    bool PopupGroupScheduleDelete = false;
    bool ShowErrorPopup = false;
    string ScheduleLabel = string.Empty;
    string DateNow = string.Empty;
    string key = "groupschedule";
    string keySelectedGroup = "selectedgroup";
    string label = string.Empty;
    string labelFB = string.Empty;
    string ScheduleLabelFB = string.Empty;
    List<string> timeRangeNow = new List<string>();
    CustomGroupScheduleForm customGroupScheduleForm = new CustomGroupScheduleForm();
    GroupScheduleInfo GroupToBeDelete;
    LoadDisplaySetting DisplaySettingData = new LoadDisplaySetting();
    LoadDisplaySetting DisplaySettingDataForm;
    List<TimeZoneInfo> TimeZones = new List<TimeZoneInfo>();
    List<NumberWithStringDisplay> DisplayTypes = new List<NumberWithStringDisplay>();
    List<NumberWithStringDisplay> WeekStartDays = new List<NumberWithStringDisplay>();
    List<StringWithStringDisplay> DayStartHours = new List<StringWithStringDisplay>();
    ScheduleDataModel AppointmentDetail = new ScheduleDataModel();
    BookedScheduleFeedback AppointmentDetailFB = new BookedScheduleFeedback();
    StaffScheduleData CurrentScheduleData = new StaffScheduleData();


    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadComponentScript", "staffScheduleContentComponent");
        JSRuntime.InvokeVoidAsync("loadComponentScript", "staffscheduleGroupContentComponent");
        base.OnParametersSet();
    }

    int ActiveTabIndex
    {
        get => activeTabIndex;
        set
        {
            activeTabIndex = value;
            if (isClickByChangeTab)
            {
                ChangeTab();
            }
            isClickByChangeTab = true;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        timeRangeNow = GetTimeRangeNow();

        SelectedGroupScheduleInfo.Add(new GroupScheduleInfo()
        {
            CompanyId = Common.CompanyID,
            GroupId = 0,
            GroupName = Common.UserName
        });

        SelectedGroupScheduleInfo = await localStorage.GetItemAsync<List<GroupScheduleInfo>>(key);

        if (SelectedGroupScheduleInfo == null)
        {
            SelectedGroupScheduleInfo = new List<GroupScheduleInfo>();
            SelectedGroupScheduleInfo.Add(new GroupScheduleInfo()
            {
                CompanyId = Common.CompanyID,
                GroupId = 0,
                GroupName = Common.UserName
            });
        }
        ScheduleData = await StaffScheduleService.GetStaffSchedule(Common.CompanyID, 0);
        ScheduleTypeList = await CodeKbService.GetScheduleType(Common.TenantID);
        ScheduleLabelList = await CodeKbService.GetScheduleLabel(Common.TenantID);
        LeaveDayTypeList = await LeaveDayTypeService.Get();
        StaffList = await SyainService.Get(Common.CompanyID, Common.UpdSyainCd);
        Dictionary<int, bool> CurrentUserDict = new Dictionary<int, bool>();
        if (!CurrentUserDict.ContainsKey(0))
        {
            CurrentUserDict.Add(0, true);
        }
        if (!SelectedGroupScheduleDict.ContainsKey(Common.CompanyID))
        {
            SelectedGroupScheduleDict.Add(Common.CompanyID, CurrentUserDict);
        }
        GenerateSelectedGroup(SelectedGroupScheduleInfo);
        IEnumerable<CompanyScheduleInfo> ScheduleInfo = await StaffScheduleService.GetGroupScheduleInfo(Common.TenantID, Common.CompanyID, 0);
        CompaniesScheduleInfo = ScheduleInfo.ToList();
        GenerateGroupScheduleDictionary(ScheduleInfo.ToList());
        LoadDisplaySetting SettingData = await DisplaySettingService.Get(Common.UpdSyainCd);
        DisplaySettingData = new LoadDisplaySetting(SettingData);
        DisplaySettingDataForm = new LoadDisplaySetting(SettingData);
        GetListOfDisplaySettingScreen(SettingData);
        ChangeTab();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 10);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("ResizeScheduleFired");
            JSRuntime.InvokeVoidAsync("fadeToggleExceptButton");
        }
    }

    private void GetListOfDisplaySettingScreen(LoadDisplaySetting SettingData)
    {
        // タイムゾーン
        TimeZones = TimeZoneInfo.GetSystemTimeZones().ToList();

        // 初期表示形式
        SettingData.DefaultDisplayType.Text = Lang["DefaultDisplayType" + SettingData.DefaultDisplayType.Value];
        for (int i = 0; i <= 1; i++)
        {
            DisplayTypes.Add(new NumberWithStringDisplay()
            {
                Value = i,
                Text = Lang["DefaultDisplayType" + i]
            });
        }

        // 週の開始日
        SettingData.WeekStartDay.Text = Lang["WeekStartDay" + SettingData.WeekStartDay.Value];
        for (int i = 0; i <= 6; i++)
        {
            WeekStartDays.Add(new NumberWithStringDisplay()
            {
                Value = i,
                Text = Lang["WeekStartDay" + i]
            });
        }

        // 表示する時間帯
        string Format = "{0:D2}:00";
        SettingData.DayStartTime.Text = SettingData.DayStartTime.Value == DisplaySettingConstants.DefaultDayStartTime ?
        Lang[DisplaySettingConstants.DefaultDayStartTime] : string.Format(Format, int.Parse(SettingData.DayStartTime.Value));
        DayStartHours.Add(new StringWithStringDisplay()
        {
            Value = DisplaySettingConstants.DefaultDayStartTime,
            Text = Lang[DisplaySettingConstants.DefaultDayStartTime]
        });
        for (int i = 0; i <= 23; i++)
        {
            DayStartHours.Add(new StringWithStringDisplay()
            {
                Value = i.ToString(),
                Text = string.Format(Format, i)
            });
        }
    }

    private async void ChangeTab()
    {
        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            if (!IsFirstSelect)
            {
                ScheduleData = StaffScheduleService.GetStaffSchedule(SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId, SelectedGroupScheduleInfo[ActiveTabIndex].GroupId).Result;
            }
            else
            {
                IsFirstSelect = false;
            }
            List<string> Keys = Lang.GetAllStrings().Select(x => x.Name).ToList();
            // Dictionary for multilangue
            Dictionary<string, string> LangDictionary = new Dictionary<string, string>();
            foreach (string Key in Keys)
            {
                LangDictionary.Add(Key, Lang[Key]);
            }
            CultureInfo Culture = System.Threading.Thread.CurrentThread.CurrentCulture;

            // Types of Schedule
            List<TypesInfo> ScheduleTypeData = new List<TypesInfo>();
            foreach (VpmCodeKb ScheduleType in ScheduleTypeList)
            {
                TypesInfo ScheduleTypes = new TypesInfo
                {
                    Id = int.Parse(ScheduleType.CodeKbn),
                    Text = ScheduleType.CodeKbnNm,
                    // Color = GetColorByScheduleType(int.Parse(ScheduleType.CodeKbn))
                };
                ScheduleTypeData.Add(ScheduleTypes);
            }

            // Types of Vacation
            List<TypesInfo> VacationTypeData = new List<TypesInfo>();
            foreach (LoadLeaveDayType LeaveDayType in LeaveDayTypeList)
            {
                TypesInfo VacationTypes = new TypesInfo
                {
                    Id = LeaveDayType.TypeKbnSeq,
                    Text = LeaveDayType.TypeName,
                    // Color = GetColorByVacationType(VacationType)
                };
                VacationTypeData.Add(VacationTypes);
            }

            // Types of Schedule label
            List<TypesInfo> ScheduleLabelData = new List<TypesInfo>();
            foreach (VpmCodeKb ScheduleLabel in ScheduleLabelList)
            {
                TypesInfo ScheduleLabels = new TypesInfo
                {
                    Id = int.Parse(ScheduleLabel.CodeKbn),
                    Text = ScheduleLabel.CodeKbnNm,
                };
                ScheduleLabelData.Add(ScheduleLabels);
            }

            string JsonObject = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleData);
            string JsonScheduleTypeData = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleTypeData);
            string JsonVacationTypeData = Newtonsoft.Json.JsonConvert.SerializeObject(VacationTypeData);
            string JsonScheduleLabelTypeData = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleLabelData);
            string JsonStaffData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffList);
            string JsonDisplaySettingData = Newtonsoft.Json.JsonConvert.SerializeObject(DisplaySettingData);
            string CurrentTimeZone = TZConvert.WindowsToIana(DisplaySettingData.TimeZone.Id);
            if (SelectedGroupScheduleInfo[ActiveTabIndex].GroupId == 0)
            {
                JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "renderDriverSchedule", IsHomePage, JsonObject, JsonScheduleTypeData,
                JsonVacationTypeData, JsonScheduleLabelTypeData, JsonStaffData, JsonDisplaySettingData, CurrentTimeZone, LangDictionary, Culture.Name, DotNetObjectReference.Create(this), Common.UpdSyainCd);
            }
            else
            {
                if (SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId != 0)
                {
                    StaffListOfGroup = SyainService.GetByGroup(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, timeRangeNow[0], timeRangeNow[1], timeRangeNow[2]);
                    ScheduleDataModelFullDay = StaffGroupDataService.GetScheduleDataModelsFullDay(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, timeRangeNow[0], timeRangeNow[1]).Result;
                    ScheduleDataModel = StaffGroupDataService.GetScheduleDataModels(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, timeRangeNow[0], timeRangeNow[1]).Result;
                    var DataScheduleGroupDatasInTimezone = ScheduleDataModelInTimezone(ScheduleDataModel.ToList(), DisplaySettingData.TimeZone.Id);
                    string JsonStaffGroupData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffListOfGroup);
                    string JsonScheduleData = Newtonsoft.Json.JsonConvert.SerializeObject(DataScheduleGroupDatasInTimezone);
                    string JsonDataOfSchedulerFullDay = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleDataModelFullDay);
                    string JsonDisplaySettingDataForGroup = Newtonsoft.Json.JsonConvert.SerializeObject(DisplaySettingData);
                    JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "SetCurrentDisplayData", JsonDisplaySettingDataForGroup, CurrentTimeZone, JsonScheduleData);
                    JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "renderDriverScheduleForGroup", JsonStaffGroupData, JsonScheduleData, JsonDataOfSchedulerFullDay, DotNetObjectReference.Create(this), CurrentTimeZone, JsonDisplaySettingDataForGroup, CommonConstants.currentScheduleview, LangDictionary);

                }
                else
                {
                    StaffListOfGroup = SyainService.GetByCustomGroup(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, timeRangeNow[0], timeRangeNow[1], timeRangeNow[2]);
                    ScheduleDataModelFullDay = StaffGroupDataService.GetScheduleDataModelsFullDayCustom(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, timeRangeNow[0], timeRangeNow[1]).Result;
                    ScheduleDataModel = StaffGroupDataService.GetScheduleDataModelsCustom(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, timeRangeNow[0], timeRangeNow[1]).Result;
                    var DataScheduleGroupDatasInTimezone = ScheduleDataModelInTimezone(ScheduleDataModel.ToList(), DisplaySettingData.TimeZone.Id);
                    string JsonStaffGroupData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffListOfGroup);
                    string JsonScheduleData = Newtonsoft.Json.JsonConvert.SerializeObject(DataScheduleGroupDatasInTimezone);
                    string JsonDataOfSchedulerFullDay = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleDataModelFullDay);
                    string JsonDisplaySettingDataForGroup = Newtonsoft.Json.JsonConvert.SerializeObject(DisplaySettingData);
                    JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "SetCurrentDisplayData", JsonDisplaySettingDataForGroup, CurrentTimeZone, JsonScheduleData);
                    JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "renderDriverScheduleForGroup", JsonStaffGroupData, JsonScheduleData, JsonDataOfSchedulerFullDay, DotNetObjectReference.Create(this), CurrentTimeZone, JsonDisplaySettingDataForGroup, CommonConstants.currentScheduleview, LangDictionary);

                }
            }
            isLoading = false;
            InvokeAsync(StateHasChanged).Wait();
        });
    }

    [JSInvokable]
    public void ShowFeedbackBookingSchedule(string data)
    {
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<StaffScheduleData>(data);
        CurrentScheduleData = schedule;
        var bookedScheduleFeedback = StaffGroupDataService.GetBookedScheduleFeedback(schedule).Result;
        AppointmentDetailFB = bookedScheduleFeedback;

        if (AppointmentDetailFB.IsAccept == true)
        {
            AcceptSchedule = true;
            NotAcecptSchedule = false;
            IsDeciding = false;
        }
        else
        {
            AcceptSchedule = false;
            IsDeciding = false;
        }
        IsShowFeedbackBookingSchedule = true;

        StateHasChanged();
    }

    [JSInvokable]
    public void ShowAppointmentPopup(ScheduleDataModel data)
    {
        IsShowDetailAppointment = true;
        AppointmentDetail = data;
        AppointmentDetail.scheduleType = data.scheduleType;
        if (AppointmentDetail.scheduleType == CommonConstants.leaveType)
        {
            label = AppointmentDetail.LeaveType == 2.ToString() ? Lang["leavetypetext2"] : Lang["leavetypetext1"];
            if (AppointmentDetail.LeaveType == 1.ToString())
            {
                ScheduleLabel = "schedule-label-green";
            }
            else
            {
                ScheduleLabel = "schedule-label-red";
            }
        }
        else if (AppointmentDetail.scheduleType == CommonConstants.planType)
        {
            label = Lang["plantext"];
            ScheduleLabel = "schedule-label-green";
            var members = AppointmentDetail.Participant != null ? AppointmentDetail.Participant.Split(";").ToList() : null;
            var result = string.Empty;
            if(members != null)
            {
                foreach (var item in members)
                {
                    var detail = item.Split(",").ToList();
                    var decide = detail[1].ToString() == " 0" ? "承諾待ち" : "承諾";
                    var final = $"{detail[0]} ({decide})";
                    result += final + "\n";
                }
            }

            AppointmentDetail.Participant = result;
        }
        else if (AppointmentDetail.scheduleType == CommonConstants.jouneyType)
        {
            label = Lang["journeytext"];
            ScheduleLabel = "schedule-label-orrange";
        }
        StateHasChanged();
    }

    public void GenerateSelectedGroup(List<GroupScheduleInfo> selectedGroupScheduleInfo)
    {
        foreach (var item in selectedGroupScheduleInfo)
        {
            if (!SelectedGroupScheduleDict.ContainsKey(item.CompanyId))
            {
                Dictionary<int, bool> CurrentUserDict = new Dictionary<int, bool>();
                CurrentUserDict.Add(item.GroupId, true);
                SelectedGroupScheduleDict.Add(item.CompanyId, CurrentUserDict);
            }
            SelectedGroupScheduleDict[item.CompanyId][item.GroupId] = true;
        }
    }
    public List<ScheduleDataModel> ScheduleDataModelInTimezone(List<ScheduleDataModel> dataModels, string timezoneId)
    {
        foreach (var item in dataModels)
        {
            TimeZoneInfo infotime = TimeZoneInfo.FindSystemTimeZoneById(timezoneId);
            item.startDate = TimeZoneInfo.ConvertTimeFromUtc(item.startDate.ToUniversalTime(), infotime);
            item.endDate = TimeZoneInfo.ConvertTimeFromUtc(item.endDate.ToUniversalTime(), infotime);
        }

        return dataModels;
    }

    public string GetStaffGroupData(string fromDate, string toDate, string from4WDate)
    {
        string JsonStaffGroupData = string.Empty;
        if (SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId != 0)
        {
            var StaffListOfGroup = SyainService.GetByGroup(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, fromDate, toDate, from4WDate);

            JsonStaffGroupData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffListOfGroup);
        }
        else
        {
            var StaffListOfGroup = SyainService.GetByCustomGroup(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, fromDate, toDate, from4WDate);

            JsonStaffGroupData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffListOfGroup);
        }

        return JsonStaffGroupData;

    }

    public string GetScheduleGroupData(string fromDate, string toDate)
    {
        return GetScheduleData(fromDate, toDate);
    }

    public string GetScheduleGroupDataFullDay(string fromDate, string toDate)
    {
        return GetSchedulerFullDayData(fromDate, toDate);
    }

    [JSInvokable]
    public List<string> GetRangeSheduleData(string preDate)
    {
        var Dates = GetTimeRange(preDate);
        var fromDate = Dates[0];
        var toDate = Dates[1];
        var from4WDate = Dates[2];

        List<string> result = new List<string>();
        var staff = GetStaffGroupData(fromDate, toDate, from4WDate);
        var scheduledata = GetScheduleGroupData(fromDate, toDate).ToString();
        var fullDayData = GetScheduleGroupDataFullDay(fromDate, toDate);
        result.Add(staff);
        result.Add(scheduledata);
        result.Add(fullDayData.ToString());
        string JsonDisplaySettingDataForGroup = Newtonsoft.Json.JsonConvert.SerializeObject(DisplaySettingData);
        string CurrentTimeZone = TZConvert.WindowsToIana(DisplaySettingData.TimeZone.Id);
        IEnumerable<ScheduleDataModel> ScheduleDataModelRange = new List<ScheduleDataModel>();
        if (SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId != 0)
        {
            ScheduleDataModelRange = StaffGroupDataService.GetScheduleDataModels(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, fromDate, toDate).Result;
        }
        else
        {
            ScheduleDataModelRange = StaffGroupDataService.GetScheduleDataModelsCustom(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, fromDate, toDate).Result;
        }
        var DataScheduleGroupDatasInTimezone = ScheduleDataModelInTimezone(ScheduleDataModelRange.ToList(), DisplaySettingData.TimeZone.Id);
        string JsonScheduleData = Newtonsoft.Json.JsonConvert.SerializeObject(DataScheduleGroupDatasInTimezone);

        JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "SetCurrentDisplayData", JsonDisplaySettingDataForGroup, CurrentTimeZone, JsonScheduleData);
        return result;
    }

    public List<string> GetTimeRangeNow()
    {
        var result = new List<string>();

        var date = DateTime.Now;

        result.Add(date.AddDays(-5).ToString().Substring(0, 10).Replace("/", string.Empty));
        result.Add(date.AddDays(+5).ToString().Substring(0, 10).Replace("/", string.Empty));
        result.Add(date.AddDays(-27).ToString().Substring(0, 10).Replace("/", string.Empty));

        return result;
    }

    public List<string> GetTimeRange(string preDate)
    {
        List<string> Dates = new List<string>();
        var month = GetMonth(preDate.Substring(4, 3));
        var date = $"{ Int32.Parse(preDate.Substring(8, 2)):00}";
        var scheduleFrom = string.Empty;
        var scheduleTo = string.Empty;
        var scheduleFrom4Week = string.Empty;

        var year = preDate.Substring(11, 4);

        var dateString = string.Format("{0}{1}{2}", new object[] { year, month, date });

        var dateTimeTemp = DateTime.ParseExact(dateString + "0000", "yyyyMMddHHmm", null);

        var fromDateString = dateTimeTemp.AddDays(-5);
        var toDateString = dateTimeTemp.AddDays(+3);
        var from4WeekString = dateTimeTemp.AddDays(-27);

        scheduleFrom = fromDateString.ToString().Substring(0, 10).Replace("/", string.Empty);
        scheduleTo = toDateString.ToString().Substring(0, 10).Replace("/", string.Empty);
        scheduleFrom4Week = from4WeekString.ToString().Substring(0, 10).Replace("/", string.Empty);
        Dates.Add(scheduleFrom);
        Dates.Add(scheduleTo);
        Dates.Add(scheduleFrom4Week);

        return Dates;
    }

    private void DecideBookingSchedule(bool value, string type)
    {
        if (type.Equals("accept"))
        {
            AcceptSchedule = value;
            if (value)
            {
                NotAcecptSchedule = false;
            }
            IsDeciding = false;
        }
        if (type.Equals("notaccept"))
        {
            NotAcecptSchedule = value;
            if (value)
            {
                AcceptSchedule = false;
            }
            IsDeciding = false;
        }
        if (type.Equals("deciding"))
        {
            IsDeciding = value;
            if (value)
            {
                AcceptSchedule = NotAcecptSchedule = false;
            }
        }
        StateHasChanged();
    }

    private void SendDecide()
    {
        var valueToUpdate = AcceptSchedule == true ? 1 : NotAcecptSchedule == true ? 0 : 0;
        var result = StaffGroupDataService.SubmitScheduleFeedback(CurrentScheduleData.scheduleId, valueToUpdate).Result;
        IsShowFeedbackBookingSchedule = false;
        StateHasChanged();
    }

    private string GetMonth(string monthInChar)
    {
        var result = string.Empty;
        switch (monthInChar)
        {
            case "Jan":
                result = "01";
                break;
            case "Feb":
                result = "02";
                break;
            case "Mar":
                result = "03";
                break;
            case "Apr":
                result = "04";
                break;
            case "May":
                result = "05";
                break;
            case "Jun":
                result = "06";
                break;
            case "Jul":
                result = "07";
                break;
            case "Aug":
                result = "08";
                break;
            case "Sep":
                result = "09";
                break;
            case "Oct":
                result = "10";
                break;
            case "Nov":
                result = "11";
                break;
            case "Dec":
                result = "12";
                break;
        }
        return result;
    }

    private string GetSchedulerFullDayData(string fromDate, string toDate)
    {
        string JsonDataOfSchedulerFullDay = string.Empty;
        if (SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId != 0)
        {
            ScheduleDataModelFullDay = StaffGroupDataService.GetScheduleDataModelsFullDay(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, fromDate, toDate).Result;
            JsonDataOfSchedulerFullDay = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleDataModelFullDay);
        }
        else
        {
            ScheduleDataModelFullDay = StaffGroupDataService.GetScheduleDataModelsFullDayCustom(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, fromDate, toDate).Result;
            JsonDataOfSchedulerFullDay = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleDataModelFullDay);
        }
        return JsonDataOfSchedulerFullDay;
    }

    private string GetScheduleData(string fromDate, string toDate)
    {
        string JsonScheduleData = string.Empty;
        if (SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId != 0)
        {
            StaffScheduleGroupDatas = StaffGroupDataService.GetStaffScheduleGroupDatas(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, fromDate, toDate).Result;
            JsonScheduleData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffScheduleGroupDatas);
        }
        else
        {
            StaffScheduleGroupDatas = StaffGroupDataService.GetStaffScheduleGroupDatasCustom(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, fromDate, toDate).Result;
            JsonScheduleData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffScheduleGroupDatas);
        }
        return JsonScheduleData;
    }

    [JSInvokable]
    public void SaveAppointment(string data)
    {
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<StaffScheduleData>(data);
        var save = StaffScheduleService.SaveStaffSchedule(schedule).Result;
        ChangeTab();
        StateHasChanged();
    }
    [JSInvokable]
    public void UpdateAppointment(string data)
    {
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<StaffScheduleData>(data);
        var save = StaffScheduleService.UpdateStaffSchedule(schedule).Result;
        ChangeTab();
        StateHasChanged();
    }
    [JSInvokable]
    public void DeleteAppointment(string data)
    {
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<StaffScheduleData>(data);
        var save = StaffScheduleService.DeleteStaffSchedule(schedule).Result;
        ChangeTab();
        StateHasChanged();
    }

    public void GenerateGroupScheduleDictionary(List<CompanyScheduleInfo> ScheduleInfo)
    {
        foreach (CompanyScheduleInfo CompanySchedule in ScheduleInfo)
        {
            Dictionary<int, bool> CurrentUserDict;
            if (SelectedGroupScheduleDict.ContainsKey(CompanySchedule.CompanyId))
            {
                CurrentUserDict = SelectedGroupScheduleDict[CompanySchedule.CompanyId];
            }
            else
            {
                CurrentUserDict = new Dictionary<int, bool>();
                SelectedGroupScheduleDict.Add(CompanySchedule.CompanyId, CurrentUserDict);
            }
            foreach (GroupScheduleInfo GroupInfo in CompanySchedule.GroupInfo)
            {
                if (!CurrentUserDict.ContainsKey(GroupInfo.GroupId))
                {
                    CurrentUserDict.Add(GroupInfo.GroupId, false);
                }
            }
        }
    }

    public async void SaveLocalStorage(List<GroupScheduleInfo> groupSchedules)
    {
        await localStorage.SetItemAsync(key, groupSchedules);
    }

    public async void ClearLocalStorage()
    {
        await localStorage.ClearAsync();
    }

    public string GetColorByScheduleType(int ScheduleType)
    {
        switch (ScheduleType)
        {
            case 1:
                return "";
            case 2:
                return "#bbd806";
            case 3:
                return "#ff9747";
            default:
                return "";
        }
    }

    private void ToggleGroupSChedule()
    {
        IsShowGroupSchedule = !IsShowGroupSchedule;
        StateHasChanged();
        JSRuntime.InvokeVoidAsync("repaintSchedule");
        JSRuntime.InvokeVoidAsync("repaintScheduleGroup");
    }

    private void CheckGroupSchedule(bool value, GroupScheduleInfo GroupSchedule)
    {
        SelectedGroupScheduleDict[GroupSchedule.CompanyId][GroupSchedule.GroupId] = value;
        if (value)
        {
            SelectedGroupScheduleInfo.Add(new GroupScheduleInfo()
            {
                CompanyId = GroupSchedule.CompanyId,
                GroupId = GroupSchedule.GroupId,
                GroupName = GroupSchedule.GroupName
            });
        }
        else
        {
            int SelectedCompanyId = SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId;
            int SelectedGroupId = SelectedGroupScheduleInfo[ActiveTabIndex].GroupId;
            SelectedGroupScheduleInfo.RemoveAll(g => g.CompanyId == GroupSchedule.CompanyId && g.GroupId == GroupSchedule.GroupId);
            int NewTabIndex = SelectedGroupScheduleInfo.FindIndex(g => g.CompanyId == SelectedCompanyId && g.GroupId == SelectedGroupId);
            if (NewTabIndex < 0)
            {
                ActiveTabIndex = 0;
            }
            else
            {
                isClickByChangeTab = false;
                ActiveTabIndex = NewTabIndex;
                ChangeState();
            }
        }
        ClearLocalStorage();
        SaveLocalStorage(SelectedGroupScheduleInfo);
        GenerateSelectedGroup(SelectedGroupScheduleInfo);
        InvokeAsync(StateHasChanged);
    }

    private async void ChangeState()
    {
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
        });
    }

    private void EditGroup(GroupScheduleInfo GroupSchedule)
    {
        PopupGroupScheduleAdd = true;
        customGroupScheduleForm = new CustomGroupScheduleForm(GroupSchedule, StaffList);
        InvokeAsync(StateHasChanged);
    }

    private void DisplaySettingOpen()
    {
        PopupDisplaySetting = true;
        DisplaySettingDataForm = new LoadDisplaySetting(DisplaySettingData);
        InvokeAsync(StateHasChanged);
    }

    private void ShowPopUpToDelete(GroupScheduleInfo GroupInfo)
    {
        PopupGroupScheduleDelete = true;
        GroupToBeDelete = GroupInfo;
        InvokeAsync(StateHasChanged);
    }

    private async void DeleteGroup()
    {
        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            bool IsDeleteSuccessfully = ScheduleCustomGroupService.Delete(GroupToBeDelete.GroupId).Result;
            if (IsDeleteSuccessfully)
            {
                ResetCustomGroupSchedule();
                CompaniesScheduleInfo[CompaniesScheduleInfo.Count() - 1].GroupInfo.RemoveAll(g => g.GroupId == GroupToBeDelete.GroupId);
                if (SelectedGroupScheduleDict[0][GroupToBeDelete.GroupId])
                {
                    CheckGroupSchedule(false, GroupToBeDelete);
                }
            }
            else
            {
                ShowErrorPopup = true;
            }
            isLoading = false;
            PopupGroupScheduleDelete = false;
            ClearLocalStorage();
            SaveLocalStorage(SelectedGroupScheduleInfo);
            GenerateSelectedGroup(SelectedGroupScheduleInfo);
            InvokeAsync(StateHasChanged);
        });
    }

    private void AddCustomGroup()
    {
        PopupGroupScheduleAdd = true;
        customGroupScheduleForm = new CustomGroupScheduleForm();
        InvokeAsync(StateHasChanged);
    }

    private void ChangeGroupName(string NewName)
    {
        customGroupScheduleForm.GroupName = NewName.Trim();
        InvokeAsync(StateHasChanged);
    }

    private void ChangeMemberList(IEnumerable<StaffsData> NewMemberList)
    {
        customGroupScheduleForm.StaffList = (NewMemberList == null ? new List<StaffsData>() : NewMemberList.ToList());
        InvokeAsync(StateHasChanged);
    }

    private async void SaveGroupSchedule()
    {
        if (string.IsNullOrEmpty(customGroupScheduleForm.GroupName) || string.IsNullOrEmpty(customGroupScheduleForm.GroupName.Trim()) || customGroupScheduleForm.StaffList.Count() == 0)
        {
            return;
        }

        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            bool IsUpdateSuccessfully = ScheduleCustomGroupService.Update(customGroupScheduleForm).Result;
            if (IsUpdateSuccessfully)
            {
                ResetCustomGroupSchedule();
            }
            else
            {
                ShowErrorPopup = true;
            }
            isLoading = false;
            PopupGroupScheduleAdd = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private async void SaveDisplaySetting()
    {
        isLoading = true;
        bool IsUpdateSuccessfully = false;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            IsUpdateSuccessfully = DisplaySettingService.Save(DisplaySettingDataForm).Result;
            if (IsUpdateSuccessfully)
            {
                DisplaySettingData = new LoadDisplaySetting(DisplaySettingDataForm);
            }
            else
            {
                ShowErrorPopup = true;
            }
            isLoading = false;
            PopupDisplaySetting = false;
            InvokeAsync(StateHasChanged);
        });
        if (IsUpdateSuccessfully)
        {
            ChangeTab();
        }
    }

    private void ResetCustomGroupSchedule()
    {
        List<GroupScheduleInfo> CustomGroupsInfo = ScheduleCustomGroupService.Get(Common.UpdSyainCd).Result;
        CompaniesScheduleInfo[CompaniesScheduleInfo.Count() - 1].GroupInfo = CustomGroupsInfo;
        GenerateGroupScheduleDictionary(CompaniesScheduleInfo);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService localStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IScheduleGroupDataService StaffGroupDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDisplaySettingService DisplaySettingService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IScheduleCustomGroupService ScheduleCustomGroupService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStaffListService SyainService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<StaffSchedule> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILeaveDayTypeService LeaveDayTypeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CodeKbListService CodeKbService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStaffScheduleService StaffScheduleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
