#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\SuperMenuVehicle.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c590c4631d44518561799305a5d7333ca00874d7"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
    public partial class SuperMenuVehicle : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 343 "E:\Project\HassyaAllrightCloud\Pages\Components\SuperMenuVehicle.razor"
       
    #region parameter
    [Parameter] public List<SuperMenuVehicleData> GridDatas { get; set; }
    [Parameter] public SuperMenuVehicleTotalGridData GridTotalDatas { get; set; }
    [Parameter] public int ActiveV { get; set; }
    [Parameter] public int RecordsPerPage { get; set; }
    [Parameter] public HyperFormData hyperData { get; set; }
    [Parameter] public EventCallback<int> ChangeState { get; set; }
    [Parameter] public int FirstPageSelect { get; set; }
    [Parameter] public EventCallback<int> FirstPageSelectChanged { get; set; }
    #endregion

    #region variable
    public bool isLoading { get; set; } = false;
    public List<SuperMenuVehicleData> GridDisplay { get; set; }
    public SuperMenuVehicleTotalData CurrentTotal { get; set; }
    public string CurrentTotalContent;
    public List<int> CurrentRow = new List<int>();
    public bool isClickRow { get; set; } = false;
    public int LastXClicked { get; set; }
    public int LastYClicked { get; set; }
    public int? CurrentClick { get; set; } = null;
    public int? CurrentScroll { get; set; }
    public int MaxPageCount = 5;
    public int CurrentPage = 1;
    public int NumberOfPage;
    public string Comma = "„ÄÅ";
    public bool ShowPopup = false;
    public Dictionary<string, List<string>> InfoMessage = new Dictionary<string, List<string>>();
    public List<ReservationDataToCheck> ReservertionData;
    #endregion

    #region Function
    protected override void OnInitialized()
    {
        CultureInfo cultureInfo = System.Threading.Thread.CurrentThread.CurrentCulture;
        if (cultureInfo.Name != "ja-JP")
        {
            Comma = ", ";
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
            JSRuntime.InvokeVoidAsync("handleSelectByKeyUp", DotNetObjectReference.Create(this));

        }
    }

    protected override void OnParametersSet()
    {
        CurrentTotal = GridTotalDatas.Order;
        CurrentTotalContent = Lang["Order"];
        NumberOfPage = (GridDatas.Count() + RecordsPerPage - 1) / RecordsPerPage;
        SelectPage(FirstPageSelect);
    }

    async Task HandleMouseWheel()
    {
        await blazorContextMenuService.HideMenu("gridRowClickMenu");
        await blazorContextMenuService.HideMenu("gridRowsClickMenu");
    }

    /// <summary>
    /// Set color for grid
    /// </summary>
    /// <param name="data"></param>
    /// <returns></returns>
    private int GetColorPattern(SuperMenuVehicleData data)
    {
        SuperMenuColorPattern result;
        if (data.SihKbn > 1)
        {
            result = SuperMenuColorPattern.Payment;
        }
        else if (data.SCouKbn > 1)
        {
            result = SuperMenuColorPattern.Support;
        }
        else if (data.NyuKinKbn > 1)
        {
            result = SuperMenuColorPattern.Deposit;
        }
        else if (data.NCouKbn > 1)
        {
            result = SuperMenuColorPattern.Enter;
        }
        else if (data.NippoKbn > 1)
        {
            result = SuperMenuColorPattern.DailyReport;
        }
        else if (data.YouKbn > 1)
        {
            result = SuperMenuColorPattern.Mercenary;
        }
        else if (data.HaiSKbn > 1)
        {
            result = SuperMenuColorPattern.Dispatch;
        }
        else if (data.HaiIKbn > 1)
        {
            result = SuperMenuColorPattern.Manning;
        }
        else if (data.GuiWNin != 0)
        {
            result = SuperMenuColorPattern.Allocation;
        }
        else if (data.KaktYmd != null && data.KaktYmd.Trim().Length > 0)
        {
            result = SuperMenuColorPattern.Confirmed;
        }
        else if (data.KaknKais != 0)
        {
            result = SuperMenuColorPattern.Confirmation;
        }
        else if (data.KSKbn > 1)
        {
            result = SuperMenuColorPattern.TemporaryBus;
        }
        else if (data.KHinKbn > 1)
        {
            result = SuperMenuColorPattern.TemporaryDistribution;
        }
        else
        {
            result = SuperMenuColorPattern.Unprovisioned;
        }
        return (int)result;
    }

    private async Task HandleMouseDown(MouseEventArgs e, int index)
    {
        LastXClicked = Convert.ToInt32(e.ClientX);
        LastYClicked = Convert.ToInt32(e.ClientY);
        CurrentScroll = null;
        if (!e.ShiftKey && !e.CtrlKey)
        {
            CurrentRow = new List<int>(new int[] { index });
            await blazorContextMenuService.ShowMenu("gridRowClickMenu", LastXClicked, LastYClicked);
        }
        else
        {
            isClickRow = true;
            await blazorContextMenuService.HideMenu("gridRowClickMenu");
            if (e.CtrlKey)
            {
                if (!CurrentRow.Contains(index))
                {
                    CurrentRow.Add(index);
                }
                else
                {
                    CurrentRow.RemoveAll(p => p == index);
                    if (CurrentRow.Count() == 0)
                    {
                        CurrentClick = null;
                    }
                    else
                    {
                        CurrentClick = CurrentRow.Max();
                    }
                }
            }
            else
            {
                int BeginIndex = Math.Min(index, (int)CurrentClick);
                int EndIndex = Math.Max(index, (int)CurrentClick);
                for (int IndexToBeAdd = BeginIndex; IndexToBeAdd <= EndIndex; IndexToBeAdd++)
                {
                    if (!CurrentRow.Contains(IndexToBeAdd))
                    {
                        CurrentRow.Add(IndexToBeAdd);
                    }
                }
            }
        }
        CurrentClick = index;
    }

    /// <summary>
    /// Change label grid total
    /// </summary>
    private void ChangeTotal()
    {
        if (CurrentTotalContent == Lang["Order"])
        {
            CurrentTotalContent = Lang["Company"];
            CurrentTotal = GridTotalDatas.Company;
        }
        else if (CurrentTotalContent == Lang["Company"])
        {
            CurrentTotalContent = Lang["Bus"];
            CurrentTotal = GridTotalDatas.Bus;
        }
        else
        {
            CurrentTotalContent = Lang["Order"];
            CurrentTotal = GridTotalDatas.Order;
        }
    }

    /// <summary>
    /// Select page
    /// </summary>
    /// <param name="index"></param>
    private async void SelectPage(int index)
    {

        CurrentRow = new List<int>();
        List<SuperMenuVehicleData> TempGridData = GridDatas.GetRange(index * RecordsPerPage, Math.Min(RecordsPerPage, GridDatas.Count() - index * RecordsPerPage));
        CurrentPage = index;
        if (CurrentPage != FirstPageSelect)
        {
            FirstPageSelect = CurrentPage;
            await FirstPageSelectChanged.InvokeAsync(FirstPageSelect);
        }

        if (TempGridData.Count() > 0 && TempGridData[0] == null)
        {
            isLoading = true;
            await Task.Run(() =>
            {
                InvokeAsync(StateHasChanged).Wait();
                GetPageData(index).Wait();
                isLoading = false;
                InvokeAsync(StateHasChanged);
                JSRuntime.InvokeVoidAsync("scrollToTop");
            });
        }
        else
        {
            GridDisplay = TempGridData;
        }

    }

    private async Task GetPageData(int PageNo)
    {
        int OffSet = PageNo * RecordsPerPage;
        List<SuperMenuVehicleData> PageData = await HyperDataService.GetSuperMenuVehicleData(hyperData, Common.CompanyID, Common.TenantID, OffSet, RecordsPerPage);
        GridDatas.RemoveRange(OffSet, PageData.Count());
        GridDatas.InsertRange(OffSet, PageData);
        GridDisplay = PageData;
        CurrentPage = PageNo;
    }

    /// <summary>
    /// Get pagination for table
    /// </summary>
    /// <returns></returns>
    private int[] GetPagination()
    {
        if (NumberOfPage <= MaxPageCount)
        {
            return Enumerable.Range(0, NumberOfPage).ToArray();
        }
        else
        {
            int BeginIndex = ((int)Math.Floor(CurrentPage * 1.0 / MaxPageCount)) * MaxPageCount;
            int Count = Math.Min(MaxPageCount, NumberOfPage - BeginIndex);
            return Enumerable.Range(BeginIndex, Count).ToArray();
        }
    }

    private void EditReservationForm()
    {
        int index = (CurrentPage - 1) * RecordsPerPage + CurrentRow[0];
        string UkeCd = GridDatas[index].UkeNo.Substring(5,10);
        NavigationManager.NavigateTo("/?UkeCd=" + UkeCd, true);
    }

    private async void CancelReservation()
    {
        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            GetDataReservationToCheck().Wait();
            if (InfoMessage.ContainsKey(""))
            {
                ShowPopup = HyperDataService.CancelRevervation(InfoMessage[""]).Result;
            }
            else
            {
                ShowPopup = true;
            }
            isLoading = false;
            InvokeAsync(StateHasChanged);
        });
        if (InfoMessage.ContainsKey(""))
        {
            isLoading = true;
            await ChangeState.InvokeAsync(CurrentPage - 1);
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetDataReservationToCheck()
    {
        InfoMessage = new Dictionary<string, List<string>>();
        List<string> SelectedReceiptNumber = new List<string>();
        foreach (int SelectRow in CurrentRow)
        {
            SelectedReceiptNumber.Add(GridDisplay[SelectRow].UkeNo);
        }
        ReservertionData = await HyperDataService.GetDataReservationToCheck(SelectedReceiptNumber);
        CheckReservationToBeCancel();
    }

    private void CheckReservationToBeCancel()
    {
        foreach (ReservationDataToCheck Data in ReservertionData)
        {
            string Error = "";
            if (Data.CompanySeq != Common.CompanyID)
            {
                Error = Lang["BelongToOtherCompanyMessage"];
            }
            else if (Data.NippoKbn != 1)
            {
                Error = Lang["DailyReportEnteredMessage"];
            }
            else if (Data.DepositClassificationStatus)
            {
                Error = Lang["DepositEnteredMessage"];
            }
            else if (Data.ClosedStatus)
            {
                Error = Lang["ClosedMessage"];
            }
            if (!InfoMessage.ContainsKey(Error))
            {
                InfoMessage.Add(Error, new List<string>());
            }
            InfoMessage[Error].Add(Data.ReceiptNumber);
        }
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<SuperMenu> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHyperDataService HyperDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorContextMenuService blazorContextMenuService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
