#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Components\BookingInputTab.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ee6b51e9a872faf97331e75d0220229880150944"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\Pages\Components\BookingInputTab.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\Pages\Components\BookingInputTab.razor"
using HassyaAllrightCloud.Commons.Extensions;

#line default
#line hidden
#nullable disable
    public partial class BookingInputTab : OwningComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1056 "E:\Project\HassyaAllrightCloud\Pages\Components\BookingInputTab.razor"
       
    int viewBooking { get; set; }
    bool PopupTsumi { get; set; } = false;
    bool PopupFutai { get; set; } = false;
    bool PopupJourney { get; set; } = false;
    bool PopupTehai { get; set; } = false;
    [CascadingParameter] string id { get; set; }
    [CascadingParameter] bool IsCopyMode { get; set; }
    [CascadingParameter] public CallBackTabBookingState CallBackIndexCommand { get; set; }
    [CascadingParameter] public EditContext formContext { get; set; }
    [Parameter] public EventCallback<CallBackTabBookingState> OnChangeCommandState { get; set; }
    [Parameter] public BookingFormData BookingData { get; set; }
    int activeTabIndex = 0;
    int waitingTabIndex = -1;
    public int ActiveTabIndex
    {
        get
        {
            return activeTabIndex;
        }
        set
        {
            // tab 4 not change data of booking input
            if(activeTabIndex == 4)
            {
                formContext.MarkAsUnmodified();
            }
            // 4 first tab not need save data when change tab
            if (activeTabIndex < 4 && value < 4)
            {
                activeTabIndex = value;
            }
            else if (isValidBookingForm)
            {
                if (formContext.IsModified())
                {
                    isPopupAskSaveBooking = true;
                    waitingTabIndex = value;
                }
                else
                {
                    CallBackTabBookingState cbAction;
                    activeTabIndex = value;
                    if (value < 4)
                    {
                        cbAction = CallBackTabBookingState.EnableIndex;
                    }
                    else
                    {
                        cbAction = CallBackTabBookingState.DisableIndex;
                    }
                    OnChangeCommandState.InvokeAsync(cbAction);
                }
            }
            StateHasChanged();
        }
    }
    string baseUrl = string.Empty;
    public ConfirmStatus confirmStatus;
    public bool isConfirmSuccess = false;
    public bool isPopupAskSaveBooking = false;
    public bool isEnableSubmitConfirm = false;
    public bool isEnableSubmitCancel = false;
    public int maxRowTab7 = 15;
    public string tempstr;
    public object tempObject;

    bool Value { get; set; }
    DateTime DateTimeValue = DateTime.Today;

    CultureInfo ci = new CultureInfo("ja-JP");
    string popupTitleInfo;
    string popupTitleError;
    string popupTitleWarning;
    string yes;
    string no;
    string ok;
    string bookingFixedSuccess;
    string bookingUnFixedSuccess;
    string commonError;
    string configurationButtonText;
    string updateButtonText;
    string popupTitle;
    string popupContent;

    List<SupplierData> supplierDataList;
    List<DestinationData> destinationDataList;
    List<PlaceData> placeDataList;
    List<TPM_CodeKbCodeSyuData> movementStatusList;
    List<TPM_CodeKbCodeSyuData> acceptanceConditionList;
    List<TPM_CodeKbCodeSyuData> rainyMeasureList;
    List<TPM_CodeKbCodeSyuData> paymentMethodList;
    List<TPM_CodeKbCodeSyuData> movementFormList;
    List<TPM_CodeKbCodeSyuData> guiderSettingList;
    List<TPM_CodeKbCodeSyuData> estimateSettingList;
    List<PassengerType> passengerTypeList;
    List<SettingStaff> settingStaffList;

    List<JourneysData> carListData;
    JourneysData selectedCar;
    List<JourneyNoteView> noteViewList = new List<JourneyNoteView>();
    SijJoKnmData SijJoKnmData { get; set; }

    private void LocalizationInit()
    {
        popupTitleError = Lang["PopupTitleError"];
        popupTitleInfo = Lang["PopupTitleInfo"];
        popupTitleWarning = Lang["PopupTitleWarning"];
        yes = Lang["Yes"];
        no = Lang["No"];
        ok = Lang["OK"];
        configurationButtonText = Lang["ConfigurationButton"];
        updateButtonText = Lang["UpdateButton"];
        bookingFixedSuccess = Lang["BookingFixed"];
        bookingUnFixedSuccess = Lang["BookingUnFixed"];
        commonError = Lang["CommonError"];
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        baseUrl = AppSettingsService.GetBaseUrl();
        SijJoKnmData = BusBookingDataService.GetSijJoKnm("001", Common.TenantID);
        await LoadAllDataCombobox();

        //create mode
        if (id == "0" || id == null)
        {
            SetDefaultValueReservationTab(BookingData);
        }
        // edit mode
        else
        {
            await SetupJourneyTabAsync();
            await SetupCancelTabAsync(BookingData);
            SetupCOnfirmationTab(BookingData);

            await Load(BookingData);
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task Load(BookingFormData booking)
    {
        viewBooking = (int)ViewBookingInput.Futai;

        if (supplierDataList != null)
        {
            if (booking.SupervisorTabData.Supplier != null)
            {
                int sirCdSeq = booking.SupervisorTabData.Supplier.SirCdSeq;
                int sirSitenCdSeq = booking.SupervisorTabData.Supplier.SirSitenCdSeq;
                var supplier = supplierDataList.SingleOrDefault(s => s.SirCdSeq == sirCdSeq && s.SirSitenCdSeq == sirSitenCdSeq);
                if (supplier != null) booking.SupervisorTabData.Supplier = supplier;
            }
        }
        //------------
        if (booking.ReservationTabData.Destination != null && destinationDataList != null)
        {
            int basyoMapCdSeq = booking.ReservationTabData.Destination.BasyoMapCdSeq;
            booking.ReservationTabData.Destination = destinationDataList.FirstOrDefault(d => d.BasyoMapCdSeq == basyoMapCdSeq);
        }
        if (booking.ReservationTabData.DespatchingPlace != null && placeDataList != null)
        {
            int haiSCdSeq = booking.ReservationTabData.DespatchingPlace.HaiSCdSeq;
            booking.ReservationTabData.DespatchingPlace = placeDataList.FirstOrDefault(d => d.HaiSCdSeq == haiSCdSeq);
        }
        if (booking.ReservationTabData.ArrivePlace != null && placeDataList != null)
        {
            int haiSCdSeq = booking.ReservationTabData.ArrivePlace.HaiSCdSeq;
            booking.ReservationTabData.ArrivePlace = placeDataList.FirstOrDefault(d => d.HaiSCdSeq == haiSCdSeq);
        }
        // data in Unkobi is tinyInt but in CodeSyu is nvarchar => 1 != 01 => convert to byte
        if (booking.ReservationTabData.MovementStatus != null && movementStatusList != null)
        {
            byte codeKbn = Byte.Parse(booking.ReservationTabData.MovementStatus.CodeKbn);
            booking.ReservationTabData.MovementStatus = movementStatusList.FirstOrDefault(d => Byte.Parse(d.CodeKbn) == codeKbn);
        }
        if (booking.ReservationTabData.AcceptanceConditions != null && acceptanceConditionList != null)
        {
            byte codeKbn = Byte.Parse(booking.ReservationTabData.AcceptanceConditions.CodeKbn);
            booking.ReservationTabData.AcceptanceConditions = acceptanceConditionList.FirstOrDefault(d => Byte.Parse(d.CodeKbn) == codeKbn);
        }
        if (booking.ReservationTabData.RainyMeasure != null && rainyMeasureList != null)
        {
            byte codeKbn = Byte.Parse(booking.ReservationTabData.RainyMeasure.CodeKbn);
            booking.ReservationTabData.RainyMeasure = rainyMeasureList.FirstOrDefault(d => Byte.Parse(d.CodeKbn) == codeKbn);
        }
        if (booking.ReservationTabData.PaymentMethod != null && paymentMethodList != null)
        {
            byte codeKbn = Byte.Parse(booking.ReservationTabData.PaymentMethod.CodeKbn);
            booking.ReservationTabData.PaymentMethod = paymentMethodList.FirstOrDefault(d => Byte.Parse(d.CodeKbn) == codeKbn);
        }
        if (booking.ReservationTabData.MovementForm != null && movementFormList != null)
        {
            byte codeKbn = Byte.Parse(booking.ReservationTabData.MovementForm.CodeKbn);
            booking.ReservationTabData.MovementForm = movementFormList.FirstOrDefault(d => Byte.Parse(d.CodeKbn) == codeKbn);
        }
        if (booking.ReservationTabData.GuiderSetting != null && guiderSettingList != null)
        {
            byte codeKbn = Byte.Parse(booking.ReservationTabData.GuiderSetting.CodeKbn);
            booking.ReservationTabData.GuiderSetting = guiderSettingList.FirstOrDefault(d => Byte.Parse(d.CodeKbn) == codeKbn);
        }
        if (booking.ReservationTabData.EstimateSetting != null && estimateSettingList != null)
        {
            byte codeKbn = Byte.Parse(booking.ReservationTabData.EstimateSetting.CodeKbn);
            booking.ReservationTabData.EstimateSetting = estimateSettingList.FirstOrDefault(d => Byte.Parse(d.CodeKbn) == codeKbn);
        }
        // ----------
        if (booking.PassengerTypeData != null && passengerTypeList != null)
        {
            int jyoKyakuCdSeq = booking.PassengerTypeData.JyoKyakuCdSeq;
            booking.PassengerTypeData = passengerTypeList.FirstOrDefault(p => p.JyoKyakuCdSeq == jyoKyakuCdSeq);
        }
        // ----------
        LoadCancelComboboxValue(booking);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    public async Task LoadAllDataCombobox()
    {
        //supplierDataList = await Http.GetJsonAsync<List<SupplierData>>(baseUrl + "/api/BookingInput/Supervisor/Supplier");
        destinationDataList = await Http.GetJsonAsync<List<DestinationData>>(baseUrl + "/api/BookingInput/Reservation/Destination");
        placeDataList = await Http.GetJsonAsync<List<PlaceData>>(baseUrl + "/api/BookingInput/Reservation/Place");
        movementStatusList = await Http.GetJsonAsync<List<TPM_CodeKbCodeSyuData>>(baseUrl + "/api/BookingInput/Reservation/GetCodeKbnByCodeSyu/UNKOJKBN");
        acceptanceConditionList = await Http.GetJsonAsync<List<TPM_CodeKbCodeSyuData>>(baseUrl + "/api/BookingInput/Reservation/GetCodeKbnByCodeSyu/UKEJYKBNCD");
        rainyMeasureList = await Http.GetJsonAsync<List<TPM_CodeKbCodeSyuData>>(baseUrl + "/api/BookingInput/Reservation/GetCodeKbnByCodeSyu/SIJJOKBN1");
        paymentMethodList = await Http.GetJsonAsync<List<TPM_CodeKbCodeSyuData>>(baseUrl + "/api/BookingInput/Reservation/GetCodeKbnByCodeSyu/SIJJOKBN2");
        movementFormList = await Http.GetJsonAsync<List<TPM_CodeKbCodeSyuData>>(baseUrl + "/api/BookingInput/Reservation/GetCodeKbnByCodeSyu/SIJJOKBN3");
        guiderSettingList = await Http.GetJsonAsync<List<TPM_CodeKbCodeSyuData>>(baseUrl + "/api/BookingInput/Reservation/GetCodeKbnByCodeSyu/SIJJOKBN4");
        estimateSettingList = await Http.GetJsonAsync<List<TPM_CodeKbCodeSyuData>>(baseUrl + "/api/BookingInput/Reservation/GetCodeKbnByCodeSyu/SIJJOKBN5");
        passengerTypeList = await Http.GetJsonAsync<List<PassengerType>>(baseUrl + "/api/BookingInput/PassengerType");
    }

    public void SetSelectedSupplier(int sirCdSeq, int sirSitenCdSeq)
    {
        if (supplierDataList != null)
        {
            var supplier = supplierDataList.SingleOrDefault(s => s.SirCdSeq == sirCdSeq && s.SirSitenCdSeq == sirSitenCdSeq);
            if (supplier != null) BookingData.SupervisorTabData.Supplier = supplier;
            formContext.NotifyFieldChanged(FieldIdentifier.Create(() => BookingData.SupervisorTabData.Supplier));
            InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeVoidAsync("setEventforTimeInput");
        JSRuntime.InvokeVoidAsync("setEventForTelAndFaxInput");
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 50);
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 3);
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 8);
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 4);
        JSRuntime.InvokeVoidAsync("zoomTabBooking");
        JSRuntime.InvokeAsync<string>("addtabindex", "notabindex");

        if (firstRender == false)
        {
            if (formContext.IsModified())
            {
                if (!isEnableSubmitCancel)
                {
                    isEnableSubmitCancel = true;
                    StateHasChanged();
                }
                if (!isEnableSubmitConfirm)
                {
                    isEnableSubmitConfirm = true;
                    StateHasChanged();
                }
            }
        }
    }

    #region Booking Tab Supervisor value changed methods

    protected void OnKanJNmChanged(string newValue)
    {
        BookingData.SupervisorTabData.KanJNm = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnKanjTelChanged(string newValue)
    {
        BookingData.SupervisorTabData.KanjTel = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnKanjFaxChanged(string newValue)
    {
        BookingData.SupervisorTabData.KanjFax = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnKanjJyus1Changed(string newValue)
    {
        BookingData.SupervisorTabData.KanjJyus1 = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnKanjKeiNoChanged(string newValue)
    {
        BookingData.SupervisorTabData.KanjKeiNo = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnKanjMailChanged(string newValue)
    {
        BookingData.SupervisorTabData.KanjMail = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnKanDMHFlgChanged(bool newValue)
    {
        BookingData.SupervisorTabData.KanDMHFlg = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnPlusJinChanged(string newValue)
    {
        if (string.IsNullOrWhiteSpace(newValue) == false)
        {
            if (int.TryParse(newValue, out int newValueInt) && newValueInt >= 0 && newValueInt <= 9999)
            {
                BookingData.SupervisorTabData.PlusJin = newValueInt.ToString();
            }
        }
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnTokuiTanNmChanged(string newValue)
    {
        BookingData.SupervisorTabData.TokuiTanNm = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnTokuiTelChanged(string newValue)
    {
        BookingData.SupervisorTabData.TokuiTel = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnTokuiFaxChanged(string newValue)
    {
        BookingData.SupervisorTabData.TokuiFax = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnTokuiMailChanged(string newValue)
    {
        BookingData.SupervisorTabData.TokuiMail = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void OnJyoSyaJinChanged(string newValue)
    {
        if (string.IsNullOrWhiteSpace(newValue) == false)
        {
            if (int.TryParse(newValue, out int newValueInt) && newValueInt >= 0 && newValueInt <= 9999)
            {
                BookingData.SupervisorTabData.JyoSyaJin = newValueInt.ToString();
            }
        }
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedSupplierChanged(SupplierData supplierData)
    {
        if (supplierData != null)
        {
            BookingData.SupervisorTabData.Supplier = supplierData;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected async Task<IEnumerable<SupplierData>> GetSupplierListAsync(CancellationToken ct = default)
    {
        supplierDataList = await Http.GetJsonAsync<List<SupplierData>>(baseUrl + "/api/BookingInput/Supervisor/Supplier");
        if (id != "0" && id != null)
        {
            if (BookingData.SupervisorTabData.Supplier != null && supplierDataList != null)
            {
                int sirCdSeq = BookingData.SupervisorTabData.Supplier.SirCdSeq;
                int sirSitenCdSeq = BookingData.SupervisorTabData.Supplier.SirSitenCdSeq;
                var supplier = supplierDataList.SingleOrDefault(s => s.SirCdSeq == sirCdSeq && s.SirSitenCdSeq == sirSitenCdSeq);
                if (supplier != null) BookingData.SupervisorTabData.Supplier = supplier;
                await InvokeAsync(StateHasChanged);
            }
        }
        return supplierDataList;
    }

    #endregion

    #region Booking tab Reservation value changed methods

    protected void GarageLeaveTimeChanged(object newTime)
    {
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void DepartureStartTimeChanged(string newTime)
    {
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void GarageReturnTimeChanged(string newTime)
    {
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedDestinationChanged(DestinationData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.Destination = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
            BookingData.ReservationTabData.IkNm = BookingData.ReservationTabData.Destination.VpmBasyoRyakuNm;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void DestinationNameChanged(string newName)
    {
        BookingData.ReservationTabData.IkNm = newName;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedDespatchingPlaceChanged(PlaceData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.DespatchingPlace = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
            BookingData.ReservationTabData.HaiSNm = BookingData.ReservationTabData.DespatchingPlace.VpmHaichiRyakuNm;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void DespatchingPlaceNameChanged(string newName)
    {
        BookingData.ReservationTabData.HaiSNm = newName;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedArrivePlaceChanged(PlaceData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.ArrivePlace = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
            BookingData.ReservationTabData.TouNm = BookingData.ReservationTabData.ArrivePlace.VpmHaichiRyakuNm;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void ArrivePlaceNameChanged(string newName)
    {
        BookingData.ReservationTabData.TouNm = newName;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedMovementStatusChanged(TPM_CodeKbCodeSyuData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.MovementStatus = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedAcceptanceConditionsChanged(TPM_CodeKbCodeSyuData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.AcceptanceConditions = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedRainyMeasureChanged(TPM_CodeKbCodeSyuData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.RainyMeasure = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedPaymentMethodChanged(TPM_CodeKbCodeSyuData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.PaymentMethod = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedMovementFormChanged(TPM_CodeKbCodeSyuData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.MovementForm = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedGuiderSettingChanged(TPM_CodeKbCodeSyuData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.GuiderSetting = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedEstimateSettingChanged(TPM_CodeKbCodeSyuData newData)
    {
        if (newData != null)
        {
            BookingData.ReservationTabData.EstimateSetting = newData;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    #endregion

    #region Booking Tab3

    public void SetDefaultValueReservationTab(BookingFormData data)
    {
        data.ReservationTabData.MovementStatus = movementStatusList.FirstOrDefault(m => m.CodeKbn == "5");
        data.ReservationTabData.AcceptanceConditions = acceptanceConditionList.FirstOrDefault(m => m.CodeKbn == "99");
        data.ReservationTabData.RainyMeasure = rainyMeasureList.FirstOrDefault(m => m.CodeKbn == "99");
        data.ReservationTabData.PaymentMethod = paymentMethodList.FirstOrDefault(m => m.CodeKbn == "99");
        data.ReservationTabData.MovementForm = movementFormList.FirstOrDefault(m => m.CodeKbn == "99");
        data.ReservationTabData.GuiderSetting = guiderSettingList.FirstOrDefault(m => m.CodeKbn == "99");
        data.ReservationTabData.EstimateSetting = estimateSettingList.FirstOrDefault(m => m.CodeKbn == "99");

        data.ReservationTabData.SyuKoTime.Str = data.BusStartTime.Str;
        data.ReservationTabData.SyuPatime.Str = data.BusStartTime.Str;
        data.ReservationTabData.KikTime.Str = data.BusEndTime.Str;

        data.ReservationTabData.GarageLeaveDate = data.BusStartDate;
        data.ReservationTabData.GarageReturnDate = data.BusEndDate;
    }

    protected void BikoNmChanged(string newValue)
    {
        BookingData.BikoNm = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    public void OnPreDayChecked(bool isChecked)
    {
        if (isChecked)
        {
            BookingData.ReservationTabData.GarageLeaveDate = BookingData.ReservationTabData.GarageLeaveDate.AddDays(-1);
        }
        else
        {
            BookingData.ReservationTabData.GarageLeaveDate = BookingData.BusStartDate;
        }
        StateHasChanged();
    }

    public void OnAfterDayChecked(bool isChecked)
    {
        if (isChecked)
        {
            BookingData.ReservationTabData.GarageReturnDate = BookingData.ReservationTabData.GarageReturnDate.AddDays(1);
        }
        else
        {
            BookingData.ReservationTabData.GarageReturnDate = BookingData.BusEndDate;
        }
        StateHasChanged();
    }

    #endregion

    #region Booking Tab7

    public void SetupCOnfirmationTab(BookingFormData booking)
    {
        if (booking != null)
        {
            if (string.IsNullOrEmpty(booking.KaktYmd?.Trim()) == false)
            {
                confirmStatus = ConfirmStatus.Fixed;
            }
            else
            {
                if (booking.ConfirmationTabDataList?.Count == 0)
                {
                    confirmStatus = ConfirmStatus.NotFixed;
                }
                else
                {
                    confirmStatus = ConfirmStatus.Confirm;
                }
            }
        }
    }

    protected void HandleAddConfirmationTab()
    {
        if (confirmStatus != ConfirmStatus.Fixed)
        {
            if (BookingData.ConfirmationTabDataList.Count == 0)
            {
                BookingData.ConfirmationTabDataList.Add(new ConfirmationTabData() { FixDataNo = 1 });
                isEnableSubmitConfirm = true;
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => BookingData.ConfirmationTabDataList));
            }
            else
            {
                if (BookingData.ConfirmationTabDataList.Count < maxRowTab7)
                {
                    int max = BookingData.ConfirmationTabDataList.Max(t => t.FixDataNo);
                    BookingData.ConfirmationTabDataList.Add(new ConfirmationTabData() { FixDataNo = max + 1 });
                    formContext.NotifyFieldChanged(FieldIdentifier.Create(() => BookingData.ConfirmationTabDataList));
                }
            }
            CallBackIndexCommand = CallBackTabBookingState.False;
            OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
        }
    }

    protected void HandleChangeKaknYmd(DateTime dateTime, int rowId)
    {
        BookingData.ConfirmationTabDataList.Single(t => t.FixDataNo == rowId).KaknYmd = dateTime;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void HandleChangedKaknAit(string newValue, int rowId)
    {
        BookingData.ConfirmationTabDataList.Single(t => t.FixDataNo == rowId).KaknAit = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void HandleChangedKaknNin(string newValue, int rowId)
    {
        BookingData.ConfirmationTabDataList.Single(t => t.FixDataNo == rowId).KaknNin = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void HandleSaikFlgChanged(bool newValue, int rowId)
    {
        BookingData.ConfirmationTabDataList.Single(t => t.FixDataNo == rowId).SaikFlg = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void HandleDaiSuFlgChanged(bool newValue, int rowId)
    {
        BookingData.ConfirmationTabDataList.Single(t => t.FixDataNo == rowId).DaiSuFlg = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void HandleKingFlgChanged(bool newValue, int rowId)
    {
        BookingData.ConfirmationTabDataList.Single(t => t.FixDataNo == rowId).KingFlg = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void HandleNitteChanged(bool newValue, int rowId)
    {
        BookingData.ConfirmationTabDataList.Single(t => t.FixDataNo == rowId).NitteFlag = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected async Task HandleConfirmSubmit()
    {
        if (id != null && id != "0")
        {
            if (confirmStatus != ConfirmStatus.Fixed)
            {
                try
                {
                    string date = DateTime.Now.ToString("yyyyMMdd");
                    await ConfirmationTabService.UpdateConfirmStatus(ConfirmStatus.Fixed, id, date);
                    isConfirmSuccess = true;
                    BookingData.KaktYmd = date;
                    popupTitle = popupTitleInfo;
                    popupContent = bookingFixedSuccess;
                    confirmStatus = ConfirmStatus.Fixed;
                }
                catch (Exception)
                {
                    popupTitle = popupTitleError;
                    popupContent = commonError;
                    isConfirmSuccess = true;
                }
            }
            else
            {
                try
                {
                    var newStatus = BookingData.ConfirmationTabDataList?.Count == 0 ? ConfirmStatus.NotFixed : ConfirmStatus.Confirm;
                    await ConfirmationTabService.UpdateConfirmStatus(newStatus, id, null);
                    isConfirmSuccess = true;
                    BookingData.KaktYmd = string.Empty;
                    popupTitle = popupTitleInfo;
                    // change this message
                    popupContent = bookingUnFixedSuccess;
                    confirmStatus = newStatus;
                }
                catch (Exception)
                {
                    popupTitle = popupTitleError;
                    popupContent = commonError;
                    isConfirmSuccess = true;
                }
            }
            //CallBackIndexCommand = CallBackTabBookingState.FixedConfirm;
            await OnChangeCommandState.InvokeAsync(CallBackTabBookingState.FixedConfirm);
        }
    }

    protected void HandleConfirmDelete(int rowId)
    {
        if (confirmStatus != ConfirmStatus.Fixed)
        {
            BookingData.ConfirmationTabDataList.RemoveAll(c => c.FixDataNo == rowId);
            formContext.NotifyFieldChanged(FieldIdentifier.Create(() => BookingData.ConfirmationTabDataList));
            CallBackIndexCommand = CallBackTabBookingState.False;
            OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
        }
    }

    #endregion

    #region BookingInput tab 5

    public async Task SetupJourneyTabAsync()
    {
        noteViewList.Clear();
        bool isZenHaFlg = false;
        bool isKhakFlg = false;
        carListData = await BusBookingDataService.GetJourneysData(id);
        carListData.Insert(0, new JourneysData());
        selectedCar = carListData.First();
        carListData.First().Unkobi_TouChTime = carListData.Skip(1).Take(1).First().Unkobi_TouChTime;
        carListData.First().Unkobi_SyuPaTime = carListData.Skip(1).Take(1).First().Unkobi_SyuPaTime;
        var fromdatemin = DateTime.ParseExact(carListData.Skip(1).Take(1).First().Unkobi_HaiSYmd, "yyyyMMdd", null);
        var fromdate = DateTime.ParseExact(carListData.Skip(1).Take(1).First().Haisha_HaiSYmd, "yyyyMMdd", null);
        var todate = DateTime.ParseExact(carListData.Skip(1).Take(1).First().Haisha_TouYmd, "yyyyMMdd", null);
        var todatemax = DateTime.ParseExact(carListData.Skip(1).Take(1).First().Unkobi_TouYmd, "yyyyMMdd", null);
        if (carListData.Skip(1).Take(1).First().Unkobi_ZenHaFlg == 1)
        {
            isZenHaFlg = true;
        }
        if (carListData.Skip(1).Take(1).First().Unkobi_KhakFlg == 1)
        {
            isKhakFlg = true;
        }
        string ukeno = carListData.Skip(1).Take(1).First().Haisha_UkeNo;
        short unkRen = carListData.Skip(1).Take(1).First().Haisha_UnkRen;
        var dateList = GetDateData(fromdate, todate, fromdatemin, todatemax, true, isZenHaFlg, isKhakFlg, ukeno,
                    carListData.First().Haisha_BunkRen, carListData.First().Haisha_TeiDanNo, unkRen, carListData.First());

        foreach (var dateItem in dateList)
        {
            var journeyNote = new JourneyNoteView() { DateView = dateItem.Text };
            List<TKD_KoteiData> noteList = await TKD_KoteiDataService.GetDataKotei(dateItem.isCommom, ukeno, dateItem.isZenHaFlg, dateItem.isKhakFlg,
                                                            dateItem.teiDanNo, unkRen, dateItem.bunkRen, dateItem.nittei);
            foreach (var items in noteList.OrderBy(e => e.Kotei_TeiDanNo).ThenBy(e => e.Kotei_KouRen))
            {
                journeyNote.NoteViewList.Add(items.Kotei_Koutei);
            }
            if (noteList.Count == 0)
            {
                journeyNote.NoteViewList.Add(string.Empty);
            }
            noteViewList.Add(journeyNote);
        }
    }

    protected async Task CarItemChanged(JourneysData newValue)
    {
        if (newValue != null)
        {
            noteViewList.Clear();
            selectedCar = newValue;
            bool isCommon = selectedCar.Haisha_GoSya == null;
            bool isZenHaFlg, isKhakFlg;
            DateTime fromdatemin, fromdate, todate, todatemax;
            string ukeno;
            short unkRen;
            if (isCommon)
            {
                isZenHaFlg = false;
                isKhakFlg = false;
                fromdatemin = DateTime.ParseExact(carListData.Skip(1).Take(1).First().Unkobi_HaiSYmd, "yyyyMMdd", null);
                fromdate = DateTime.ParseExact(carListData.Skip(1).Take(1).First().Unkobi_HaiSYmd, "yyyyMMdd", null);
                todate = DateTime.ParseExact(carListData.Skip(1).Take(1).First().Unkobi_TouYmd, "yyyyMMdd", null);
                todatemax = DateTime.ParseExact(carListData.Skip(1).Take(1).First().Unkobi_TouYmd, "yyyyMMdd", null);
                if (carListData.Skip(1).Take(1).First().Unkobi_ZenHaFlg == 1)
                {
                    isZenHaFlg = true;
                }
                if (carListData.Skip(1).Take(1).First().Unkobi_KhakFlg == 1)
                {
                    isKhakFlg = true;
                }
                ukeno = carListData.Skip(1).Take(1).First().Haisha_UkeNo;
                unkRen = carListData.Skip(1).Take(1).First().Haisha_UnkRen;
            }
            else
            {
                isZenHaFlg = false;
                isKhakFlg = false;
                fromdatemin = DateTime.ParseExact(selectedCar.Unkobi_HaiSYmd, "yyyyMMdd", null);
                fromdate = DateTime.ParseExact(selectedCar.Haisha_HaiSYmd, "yyyyMMdd", null);
                todate = DateTime.ParseExact(selectedCar.Haisha_TouYmd, "yyyyMMdd", null);
                todatemax = DateTime.ParseExact(selectedCar.Unkobi_TouYmd, "yyyyMMdd", null);
                if (selectedCar.Unkobi_ZenHaFlg == 1)
                {
                    isZenHaFlg = true;
                }
                if (selectedCar.Unkobi_KhakFlg == 1)
                {
                    isKhakFlg = true;
                }
                ukeno = selectedCar.Haisha_UkeNo;
                unkRen = selectedCar.Haisha_UnkRen;
            }
            var dateList = GetDateData(fromdate, todate, fromdatemin, todatemax, isCommon, isZenHaFlg, isKhakFlg, ukeno,
                        selectedCar.Haisha_BunkRen, selectedCar.Haisha_TeiDanNo, unkRen, selectedCar);

            foreach (var dateItem in dateList)
            {
                var journeyNote = new JourneyNoteView() { DateView = dateItem.Text };
                List<TKD_KoteiData> noteList = await TKD_KoteiDataService.GetDataKotei(dateItem.isCommom, ukeno, dateItem.isZenHaFlg, dateItem.isKhakFlg,
                                                                dateItem.teiDanNo, unkRen, dateItem.bunkRen, dateItem.nittei);
                foreach (var items in noteList.OrderBy(e => e.Kotei_TeiDanNo).ThenBy(e => e.Kotei_KouRen))
                {
                    journeyNote.NoteViewList.Add(items.Kotei_Koutei);
                }
                if (noteList.Count == 0)
                {
                    journeyNote.NoteViewList.Add(string.Empty);
                }
                noteViewList.Add(journeyNote);
            }
            StateHasChanged();
        }
    }

    public List<JourneyDataDate> GetDateData(DateTime fromdate, DateTime todate, DateTime fromdatemin, DateTime todatemax, bool isCommom,
        bool isZenHaFlg, bool isKhakFlg, string ukeno, short bunkRen, short teiDanNo, short unkRen, JourneysData journeyitem)
    {
        List<JourneyDataDate> dateList = new List<JourneyDataDate>();
        int i = 0;
        for (DateTime date = fromdate; date <= todate; date = date.AddDays(1))
        {
            JourneyDataDate itemdate = new JourneyDataDate();
            itemdate.isKhakFlg = isKhakFlg;
            if (isKhakFlg == true)
            {
                itemdate.isKhakFlg = !isKhakFlg;
            }
            itemdate.isZenHaFlg = isZenHaFlg;
            if (isZenHaFlg == true)
            {
                itemdate.isZenHaFlg = !isZenHaFlg;
            }
            itemdate.tomKbn = 1;
            i++;
            itemdate.nittei = (byte)i;
            if (!isCommom)
            {
                itemdate.isCommom = isCommom;
            }
            itemdate.date = date;
            itemdate.ukeNo = ukeno;
            itemdate.bunkRen = bunkRen;
            itemdate.unkRen = unkRen;
            itemdate.teiDanNo = teiDanNo;
            //itemdate.form = BusScheduleHelper.ConvertTime("0000");
            //itemdate.to = BusScheduleHelper.ConvertTime("2359");
            dateList.Add(itemdate);

        }
        if (isCommom == true)
        {
            if (isZenHaFlg && fromdate == fromdatemin)
            {
                JourneyDataDate itemdate = new JourneyDataDate();
                itemdate.isKhakFlg = !isKhakFlg;
                itemdate.isZenHaFlg = isZenHaFlg;
                itemdate.nittei = 1;
                itemdate.tomKbn = 2;
                if (!isCommom)
                {
                    itemdate.isCommom = isCommom;
                }
                itemdate.date = fromdate.AddDays(-1);
                itemdate.ukeNo = ukeno;
                itemdate.bunkRen = bunkRen;
                itemdate.unkRen = unkRen;
                itemdate.teiDanNo = teiDanNo;
                //itemdate.form = BusScheduleHelper.ConvertTime("0000");
                //itemdate.to = BusScheduleHelper.ConvertTime("2359");
                dateList.Add(itemdate);
            }
            if (isKhakFlg && todate == todatemax)
            {
                JourneyDataDate itemdate = new JourneyDataDate();
                itemdate.isZenHaFlg = !isZenHaFlg;
                itemdate.isKhakFlg = isKhakFlg;
                itemdate.nittei = 1;
                itemdate.tomKbn = 3;
                if (!isCommom)
                {
                    itemdate.isCommom = isCommom;
                }
                itemdate.date = todate.AddDays(1);
                itemdate.ukeNo = ukeno;
                itemdate.bunkRen = bunkRen;
                itemdate.unkRen = unkRen;
                itemdate.teiDanNo = teiDanNo;
                //itemdate.form = BusScheduleHelper.ConvertTime("0000");
                //itemdate.to = BusScheduleHelper.ConvertTime("2359");
                dateList.Add(itemdate);
            }
        }
        else
        {
            if (isZenHaFlg)
            {
                JourneyDataDate itemdate = new JourneyDataDate();
                itemdate.isKhakFlg = !isKhakFlg;
                itemdate.isZenHaFlg = isZenHaFlg;
                itemdate.nittei = 1;
                itemdate.tomKbn = 2;
                if (!isCommom)
                {
                    itemdate.isCommom = isCommom;
                }
                itemdate.date = fromdate.AddDays(-1);
                itemdate.ukeNo = ukeno;
                itemdate.bunkRen = bunkRen;
                itemdate.unkRen = unkRen;
                itemdate.teiDanNo = teiDanNo;
                //itemdate.form = BusScheduleHelper.ConvertTime("0000");
                //itemdate.to = BusScheduleHelper.ConvertTime("2359");
                dateList.Add(itemdate);
            }
            if (isKhakFlg)
            {
                JourneyDataDate itemdate = new JourneyDataDate();
                itemdate.isZenHaFlg = !isZenHaFlg;
                itemdate.isKhakFlg = isKhakFlg;
                itemdate.nittei = 1;
                itemdate.tomKbn = 3;
                if (!isCommom)
                {
                    itemdate.isCommom = isCommom;
                }
                itemdate.date = todate.AddDays(1);
                itemdate.ukeNo = ukeno;
                itemdate.bunkRen = bunkRen;
                itemdate.unkRen = unkRen;
                itemdate.teiDanNo = teiDanNo;
                //itemdate.form = BusScheduleHelper.ConvertTime("0000");
                //itemdate.to = BusScheduleHelper.ConvertTime("2359");
                dateList.Add(itemdate);
            }
        }
        if (isCommom)
        {
            dateList.OrderBy(t => t.date).First().form = BusScheduleHelper.ConvertTime(journeyitem.Unkobi_SyuPaTime);
            dateList.OrderBy(t => t.date).Last().to = BusScheduleHelper.ConvertTime(journeyitem.Unkobi_TouChTime);
        }
        else
        {
            dateList.OrderBy(t => t.date).First().form = BusScheduleHelper.ConvertTime(journeyitem.Haisha_SyuPaTime);
            dateList.OrderBy(t => t.date).Last().to = BusScheduleHelper.ConvertTime(journeyitem.Haisha_TouChTime);
        }
        return dateList.OrderBy(t => t.date).ToList();
    }

    public void OpenJourneys()
    {
        PopupJourney = true;
        StateHasChanged();
    }

    public void OpenTehai()
    {
        PopupTehai = true;
        StateHasChanged();
    }



    #endregion

    #region BookingInput tab 4

    protected void SelectedPassengerTypeChanged(PassengerType newValue)
    {
        if (newValue != null)
        {
            BookingData.PassengerTypeData = newValue;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    #endregion

    #region Booking Input Tab 8 Cancel

    public async Task SetupCancelTabAsync(BookingFormData booking)
    {
        if (booking.CancelTickedData.CancelTaxType.IdValue == 0)
        {
            booking.CancelTickedData.CancelTaxType.IdValue = Constants.ForeignTax.IdValue;
            booking.CancelTickedData.CancelTaxType.StringValue = Constants.ForeignTax.StringValue;
        }
        settingStaffList = await Http.GetJsonAsync<List<SettingStaff>>(baseUrl + "/api/BookingInput/Cancellation/SettingStaff");

        if (booking.CancelTickedData.IsSetDefaultFee)
        {
            BookingData.CalculateCancelFee();
            BookingData.CalculateCancelTaxFee();
        }
    }

    public void LoadCancelComboboxValue(BookingFormData booking)
    {
        if (booking.CancelTickedData.CanceledSettingStaffData != null && settingStaffList != null)
        {
            int syainCdSeq = booking.CancelTickedData.CanceledSettingStaffData.SyainCdSeq;
            booking.CancelTickedData.CanceledSettingStaffData = settingStaffList.FirstOrDefault(d => d.SyainCdSeq == syainCdSeq);
        }
        if (booking.CancelTickedData.ReusedSettingStaffData != null && settingStaffList != null)
        {
            int syainCdSeq = booking.CancelTickedData.ReusedSettingStaffData.SyainCdSeq;
            booking.CancelTickedData.ReusedSettingStaffData = settingStaffList.FirstOrDefault(d => d.SyainCdSeq == syainCdSeq);
        }
    }

    protected void CheckedCancelChanged(bool value)
    {

        BookingData.CancelTickedData.CancelStatus = value;
        if (value)
        {
            BookingData.CancelTickedData.CanceledSettingStaffData = settingStaffList.Where(s => s.SyainCdSeq == BookingData.SelectedStaff.SyainCdSeq).SingleOrDefault();
            BookingData.CalculateCancelFee();
            BookingData.CalculateCancelTaxFee();
            formContext.NotifyFieldChanged(FieldIdentifier.Create(() => BookingData.CancelTickedData.CancelStatus));
        }
        else
        {
            formContext.MarkAsUnmodified(FieldIdentifier.Create(() => BookingData.CancelTickedData.CancelStatus));
            isEnableSubmitCancel = false;
        }
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
        formContext.Validate();
    }

    protected void ReusedStatusChanged(ChangeEventArgs arg)
    {
        bool value = Boolean.Parse(arg.Value.ToString());
        ChangeReuseStatus(value);
    }

    protected void UnReusedStatusChanged(ChangeEventArgs arg)
    {
        bool value = Boolean.Parse(arg.Value.ToString());
        ChangeReuseStatus(false);
    }

    protected void ChangeReuseStatus(bool value)
    {
        BookingData.CancelTickedData.ReusedStatus = value;
        if (value)
        {
            BookingData.CancelTickedData.ReusedSettingStaffData = settingStaffList.Where(s => s.SyainCdSeq == BookingData.SelectedStaff.SyainCdSeq).SingleOrDefault();
        }
        formContext.NotifyFieldChanged(FieldIdentifier.Create(() => BookingData.CancelTickedData.ReusedStatus));
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedCanceledSettingStaffDataChanged(SettingStaff newValue)
    {
        if (newValue != null)
        {
            BookingData.CancelTickedData.CanceledSettingStaffData = newValue;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void SelectedReusedSettingStaffDataChanged(SettingStaff newValue)
    {
        if (newValue != null)
        {
            BookingData.CancelTickedData.ReusedSettingStaffData = newValue;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void CanceledDateChanged(DateTime newValue)
    {
        if (newValue != null)
        {
            BookingData.CancelTickedData.CancelDate = newValue;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void ReusedDateChanged(DateTime newValue)
    {
        if (newValue != null)
        {
            BookingData.CancelTickedData.ReusedDate = newValue;
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    /// <summary>
    /// When InputRate value of <see cref="CancelTickedData.CancelFeeRate"/> changed.
    /// </summary>
    /// <param name="newRate">New rate value</param>
    protected void CancelFeeRateChanged(string newRate)
    {
        BookingData.CancelTickedData.CancelFeeRate = newRate;

        BookingData.CalculateCancelFee();
        BookingData.CalculateCancelTaxFee();
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void CancelFeeChanged(string newValue)
    {
        if (newValue != null)
        {
            int tmp;
            if (CommonUtil.NumberTryParse(newValue, out tmp))
            {
                if (tmp >= 0)
                {
                    BookingData.CancelTickedData.CancelFee = newValue;
                    BookingData.CalculateCancelTaxFee();
                    CallBackIndexCommand = CallBackTabBookingState.False;
                }
            }
            OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    /// <summary>
    /// When InputRate value of <see cref="CancelTickedData.CancelTaxRate"/> changed.
    /// </summary>
    /// <param name="newRate">New rate value</param>
    protected void CancelTaxRateChanged(string newRate)
    {
        BookingData.CancelTickedData.CancelTaxRate = newRate;
        BookingData.CalculateCancelTaxFee();
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void CancelTaxFeeChanged(string newValue)
    {
        if (newValue != null)
        {
            int tmp;
            if (CommonUtil.NumberTryParse(newValue, out tmp))
            {
                if (tmp >= 0)
                {
                    BookingData.CancelTickedData.CancelTaxFee = newValue;
                    CallBackIndexCommand = CallBackTabBookingState.False;

                }
            }
            OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void CancelTaxTypeChanged(TaxTypeList newValue)
    {
        if (newValue != null)
        {
            BookingData.CancelTickedData.CancelTaxType = newValue;
            BookingData.CalculateCancelTaxFee();
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void CancelReasonChanged(string newValue)
    {
        BookingData.CancelTickedData.CancelReason = newValue;
        CallBackIndexCommand = CallBackTabBookingState.False;
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    protected void ReusedReasonChanged(ChangeEventArgs newValue)
    {
        if (newValue != null)
        {
            BookingData.CancelTickedData.ReusedReason = newValue.Value.ToString();
            CallBackIndexCommand = CallBackTabBookingState.False;
        }
        OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
    }

    #endregion

    private bool isValidBookingForm;
    protected bool IsValidBookingForm()
    {
        isValidBookingForm = formContext.GetValidationMessages().Count() == 0;
        return isValidBookingForm;
    }

    protected async Task ConfirmUpdateBooking(bool isUpdate)
    {
        isPopupAskSaveBooking = false;
        if (isUpdate)
        {
            CallBackIndexCommand = CallBackTabBookingState.UpdateBooking;
            await OnChangeCommandState.InvokeAsync(CallBackIndexCommand);
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            waitingTabIndex = -1;
        }
    }

    public void SetActiveTabIndexToWaitting()
    {
        if (waitingTabIndex != -1)
        {
            ActiveTabIndex = waitingTabIndex;
            waitingTabIndex = -1;
        }
    }

    protected void OnValidSubmit()
    {
    }

    protected async Task HandleSaveConfirmationDataList()
    {
        waitingTabIndex = 6;
        //CallBackIndexCommand = CallBackTabBookingState.UpdateConfirmTab;
        await OnChangeCommandState.InvokeAsync(CallBackTabBookingState.UpdateConfirmTab);
    }

    protected async Task HandleSaveCancelData()
    {
        waitingTabIndex = 7;
        //CallBackIndexCommand = CallBackTabBookingState.UpdateCancelTab;
        await OnChangeCommandState.InvokeAsync(CallBackTabBookingState.UpdateCancelTab);
    }

    void OpenFutai()
    {
        PopupFutai = true;
        StateHasChanged();
    }

    void OpenTsumi()
    {
        PopupTsumi = true;
        StateHasChanged();
    }

    void SelectViewBooking(MouseEventArgs e, int number)
    {
        viewBooking = number;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper BusScheduleHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_KoteiDataListService TKD_KoteiDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusBookingDataListService BusBookingDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfirmationTabService ConfirmationTabService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BookingInputTab> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
