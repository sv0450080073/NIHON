#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\MinMaxSetting.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c0fc06fa09133d08b890df0ef4e45d5385c9a7c8"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\Pages\MinMaxSetting.razor"
using static HassyaAllrightCloud.Commons.Extensions.EditContextExtensionHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\Pages\MinMaxSetting.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
    public partial class MinMaxSetting : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 426 "E:\Project\HassyaAllrightCloud\Pages\MinMaxSetting.razor"
       

    [CascadingParameter] BookingFormData bookingFormData { get; set; }
    [CascadingParameter] string Rowid { get; set; }
    [Parameter] public EventCallback<string> unitPriceCallBack { get; set; }
    [Parameter] public MinMaxSettingState ViewState { get; set; }
    bool PopupVisible { get; set; } = false;
    List<VpmTransportationFeeRule> TranSportationOfficePlaceList;
    public MinMaxSettingFormData myForm;
    EditContext formContext;
    private int numbOfErrors;
    private bool isBusFeeChange = false;
    private bool isMaxMinChange = false;

    string readOnlyText { get; set; }
    string tmpText { get; set; }

    bool isDisabledSubmitBtn { get; set; } = true;

    #region Localization strings
    string TransportationOfficeLabel;
    string BusTypeLabel;
    string GarageLeaveTimeLabel;
    string BusStartTimeLabel;
    string BusArrivalTimeLabel;
    string GarageReturnTimeLabel;
    string TaxRateLabel;
    string DateCol;
    string FareCol;
    MarkupString ActualKmCol;
    string ActualTimeCol;
    string FeeCol;
    MarkupString ClearCol;
    string KmCol;
    string TimeCol;
    MarkupString MidnightMorningCol;
    string ChangeDriverCol;
    string EstimateKmCol;
    string StartTimeCol;
    string EndTimeCol;
    string RestraintTimeCol;
    string YesNoCol;
    string ChangeDriverKmCol;
    string ChangeDriverTimeCol;
    MarkupString ChangeDriverMidnightMorningCol;
    string DateOfSchedulerRow;
    string TotalGridLabel;
    string CalculatedGridKmTimeLabel;
    string DiscountLabel;
    string DiscountNoneLabel;
    string DiscountThirtyLabel;
    string DiscountTwentyLabel;
    string TotalPriceRowLabel;
    string UpperLimitLabel;
    string LowerLimitLabel;
    string TotalFeeRowLabel;
    string TotalPriceFeeRowLabel;
    string AnnualContractLabel;
    string AnnualContractNoneLabel;
    string AnnualContractYesLabel;
    string DetailsOfPriceLabel;
    string UpperLimitPriceLabel;
    string LowerLimitPriceLabel;
    string KmPriceLabel;
    string TimePriceLabel;
    string TotalPriceLabel;
    string SpecialVehicleLabel;
    string SpecialVehicleNoneLabel;
    string SpecialVehicleYesLabel;
    string DetailsOfFee;
    string UpperLimitFeeLabel;
    string LowerLimitFeeLabel;
    string ChangeDriverKmFeeLabel;
    string ChangeDriverHourFeeLabel;
    string MidnightMorningFeeLabel;
    string SpecialVehicleFeeLabel;
    string TotalFeeLabel;
    string ConfigurationButton;

    private void LocalizationInit()
    {
        TransportationOfficeLabel = Lang["TransportationOfficeLabel"];
        BusTypeLabel = Lang["BusTypeLabel"];
        GarageLeaveTimeLabel = Lang["GarageLeaveTimeLabel"];
        BusStartTimeLabel = Lang["BusStartTimeLabel"];
        BusArrivalTimeLabel = Lang["BusArrivalTimeLabel"];
        GarageReturnTimeLabel = Lang["GarageReturnTimeLabel"];
        TaxRateLabel = Lang["TaxRateLabel"];
        DateCol = Lang["DateCol"];
        FareCol = Lang["FareCol"];
        ActualKmCol = (MarkupString)Lang["ActualKmCol"].ToString();
        ActualTimeCol = Lang["ActualTimeCol"];
        FeeCol = Lang["FeeCol"];
        ClearCol = (MarkupString)Lang["ClearCol"].ToString();
        KmCol = Lang["KmCol"];
        TimeCol = Lang["TimeCol"];
        MidnightMorningCol = (MarkupString)Lang["MidnightMorningCol"].ToString();
        ChangeDriverCol = Lang["ChangeDriverCol"];
        EstimateKmCol = Lang["EstimateKmCol"];
        StartTimeCol = Lang["StartTimeCol"];
        EndTimeCol = Lang["EndTimeCol"];
        RestraintTimeCol = Lang["RestraintTimeCol"];
        YesNoCol = Lang["YesNoCol"];
        ChangeDriverKmCol = Lang["ChangeDriverKmCol"];
        ChangeDriverTimeCol = Lang["ChangeDriverTimeCol"];
        ChangeDriverMidnightMorningCol = (MarkupString)Lang["ChangeDriverMidnightMorningCol"].ToString();
        DateOfSchedulerRow = Lang["DateOfSchedulerRow"];
        TotalGridLabel = Lang["TotalGridLabel"];
        CalculatedGridKmTimeLabel = Lang["CalculatedGridKmTimeLabel"];
        DiscountLabel = Lang["DiscountLabel"];
        DiscountNoneLabel = Lang["DiscountNoneLabel"];
        DiscountThirtyLabel = Lang["DiscountThirtyLabel"];
        DiscountTwentyLabel = Lang["DiscountTwentyLabel"];
        TotalPriceRowLabel = Lang["TotalPriceRowLabel"];
        UpperLimitLabel = Lang["UpperLimitLabel"];
        LowerLimitLabel = Lang["LowerLimitLabel"];
        TotalFeeRowLabel = Lang["TotalFeeRowLabel"];
        TotalPriceFeeRowLabel = Lang["TotalPriceFeeRowLabel"];
        AnnualContractLabel = Lang["AnnualContractLabel"];
        AnnualContractNoneLabel = Lang["AnnualContractNoneLabel"];
        AnnualContractYesLabel = Lang["AnnualContractYesLabel"];
        DetailsOfPriceLabel = Lang["DetailsOfPriceLabel"];
        UpperLimitPriceLabel = Lang["UpperLimitPriceLabel"];
        LowerLimitPriceLabel = Lang["LowerLimitPriceLabel"];
        KmPriceLabel = Lang["KmPriceLabel"];
        TimePriceLabel = Lang["TimePriceLabel"];
        TotalPriceLabel = Lang["TotalPriceLabel"];
        SpecialVehicleLabel = Lang["SpecialVehicleLabel"];
        SpecialVehicleNoneLabel = Lang["SpecialVehicleNoneLabel"];
        SpecialVehicleYesLabel = Lang["SpecialVehicleYesLabel"];
        DetailsOfFee = Lang["DetailsOfFee"];
        UpperLimitFeeLabel = Lang["UpperLimitFeeLabel"];
        LowerLimitFeeLabel = Lang["LowerLimitFeeLabel"];
        ChangeDriverKmFeeLabel = Lang["ChangeDriverKmFeeLabel"];
        ChangeDriverHourFeeLabel = Lang["ChangeDriverHourFeeLabel"];
        MidnightMorningFeeLabel = Lang["MidnightMorningFeeLabel"];
        SpecialVehicleFeeLabel = Lang["SpecialVehicleFeeLabel"];
        TotalFeeLabel = Lang["TotalFeeLabel"];
        ConfigurationButton = Lang["ConfigurationButton"];
    }

    #endregion

    private void Clear(int rowid)
    {
        MinMaxGridData minMaxGrid = myForm.minMaxGridData.Where(a => a.rowID == rowid).First();
        minMaxGrid.KmRunning = 0;

        minMaxGrid.BusInspectionStartDate.inpTime = new BookingInputHelper.MyTime(0, 0);
        minMaxGrid.BusInspectionEndDate.inpTime = new BookingInputHelper.MyTime(0, 0);
        minMaxGrid.TimeRunning = new BookingInputHelper.MyTime(0, 0);
        minMaxGrid.ExactKmRunning = 0;
        minMaxGrid.ExactTimeRunning = new BookingInputHelper.MyTime(0, 0);
        minMaxGrid.SpecialTimeRunning = new BookingInputHelper.MyTime(0, 0);
        minMaxGrid.isChangeDriver = false;
        minMaxGrid.BusInspectionStartDate.isPreviousDay = false;

        minMaxGrid.KmRunningwithChgDriver = 0;
        minMaxGrid.TimeRunningwithChgDriver = new BookingInputHelper.MyTime(0, 0);
        minMaxGrid.SpecialTimeRunningwithChgDriver = new BookingInputHelper.MyTime(0, 0);
        isDisabledSubmitBtn = true;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        // Get MinMaxForm; row1 row2, row3
        VehicleGridData vehicleGridData = bookingFormData.VehicleGridDataList.FirstOrDefault(t => t.RowID == Rowid);
        myForm = vehicleGridData.minMaxForm;
        myForm.UnitPrice = vehicleGridData.UnitBusPrice;
        myForm.UnitFee = vehicleGridData.UnitBusFee;
        float rateApplied = 0;
        if (bookingFormData.TaxTypeforBus.IdValue == Constants.InTax.IdValue)
        {
            rateApplied = float.Parse(bookingFormData.TaxRate);
        }
        isMaxMinChange = !vehicleGridData.CheckMinMaxChange(bookingFormData);
        formContext = new EditContext(myForm);
        myForm.TaxType = bookingFormData.TaxTypeforBus;
        myForm.TaxRate = float.Parse(bookingFormData.TaxRate);

        BookingInputHelper.MyDate busStartDay =
            new BookingInputHelper.MyDate(bookingFormData.BusStartDate, new BookingInputHelper.MyTime(bookingFormData.BusStartTime));
        BookingInputHelper.MyDate busEndDay =
            new BookingInputHelper.MyDate(bookingFormData.BusEndDate, new BookingInputHelper.MyTime(bookingFormData.BusEndTime));

        myForm.BusStartTime = busStartDay;
        myForm.GarageLeaveTime =
            new BookingInputHelper.MyDate(bookingFormData.ReservationTabData.GarageLeaveDate, new BookingInputHelper.MyTime(bookingFormData.ReservationTabData.SyuKoTime));
        myForm.BusArrivalTime = busEndDay;
        myForm.GarageReturnTime =
            new BookingInputHelper.MyDate(bookingFormData.ReservationTabData.GarageReturnDate, new BookingInputHelper.MyTime(bookingFormData.ReservationTabData.KikTime));

        // Reset MinMaxGridRow
        List<MinMaxGridData> newMinMaxGrid = new List<MinMaxGridData> { };
        MinMaxGridData newMinMaxRow = null;
        bool isEdited = false;

        BookingInputHelper.Scheduler scheduler = new BookingInputHelper.Scheduler(myForm.GarageLeaveTime, myForm.GarageReturnTime);
        for (int i = 1; i <= scheduler.getRowforGrid(); i++)
        {
            int rowID = i - 1;
            int j = 0;
            bool isExistOldData = false;
            for (j = 0; j < myForm.minMaxGridData.Count; j++)
            {
                if (myForm.GarageLeaveTime.inpDate.AddDays(rowID).Year == myForm.minMaxGridData[j].DateofScheduler.Year &&
                   myForm.GarageLeaveTime.inpDate.AddDays(rowID).Month == myForm.minMaxGridData[j].DateofScheduler.Month &&
                   myForm.GarageLeaveTime.inpDate.AddDays(rowID).Day == myForm.minMaxGridData[j].DateofScheduler.Day)
                {
                    newMinMaxRow = new MinMaxGridData(myForm.minMaxGridData[j]);
                    newMinMaxRow.rowID = rowID; // update RowID
                    isExistOldData = true;
                    isEdited = true;
                    break;
                }
            }

            if (isExistOldData == false)
            {
                newMinMaxRow = new MinMaxGridData(rowID, myForm.GarageLeaveTime.inpDate.AddDays(rowID));
            }


            newMinMaxGrid.Add(newMinMaxRow);
        }
        myForm.minMaxGridData = newMinMaxGrid;

        if (isEdited == false)
        {
            myForm.minMaxGridData[0].BusInspectionStartDate = new BookingInputHelper.MyDate(myForm.GarageLeaveTime, -Common.BusLeaveOrReturnGaraDuration); // tenkenstart = before 1h from garaleave
            myForm.minMaxGridData[myForm.minMaxGridData.Count - 1].BusInspectionEndDate = new BookingInputHelper.MyDate(myForm.GarageReturnTime, Common.BusLeaveOrReturnGaraDuration); // tenkenend = after 1h from garareturn
        }
        if (scheduler.getRowforGrid() == 1 && myForm.typeBus == -1)
        {
            myForm.minMaxGridData[0].update();
            myForm.minMaxGridData[0].ExactTimeRunning = myForm.getExactTimeRunning();
        }
        myForm.typeBus = int.Parse(vehicleGridData.busTypeData.Katakbn);
        TranSportationOfficePlaceList = await TranSportationFreeRuleService.Get();
        if (TranSportationOfficePlaceList != null)
        {
            if (myForm.SelectedTranSportationOfficePlace == null)
            {
                myForm.SelectedTranSportationOfficePlace = TranSportationOfficePlaceList
                    .Where(t => t.TransportationPlaceCodeSeq == bookingFormData.SelectedSaleBranch.TransportationPlaceCodeSeq).First();
            }
            else
            {
                myForm.SelectedTranSportationOfficePlace = TranSportationOfficePlaceList
                    .Where(t => t.TransportationPlaceCodeSeq == vehicleGridData.minMaxForm.SelectedTranSportationOfficePlace.TransportationPlaceCodeSeq).FirstOrDefault();
            }
        }
        formContext = new EditContext(myForm);
        
        formContext.OnValidationStateChanged += OnValidated;
    }

    private void OnValidated(object o, ValidationStateChangedEventArgs e)
    {
        try
        {
            if(formContext.IsModified())
            {
                bool isPriceError = formContext.GetValidationMessages(() => myForm.UnitPrice).Count() > 0;
                bool isFeeError = formContext.GetValidationMessages(() => myForm.UnitFee).Count() > 0;
                JSRuntime.InvokeAsync<string>("loadPageScript", "bookingInputPage", "onValidateMinMax", isPriceError, isFeeError);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleUnitPriceKeyDown(KeyboardEventArgs args)
    {
        if(args.Key == "Enter" && formContext.IsModified())
        {
            formContext.NotifyValidationStateChanged();
        }
    }

    private void HandleUnitFeeKeyDown(KeyboardEventArgs args)
    {
        if(args.Key == "Enter" && formContext.IsModified())
        {
            formContext.NotifyValidationStateChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        isDisabledSubmitBtn = false;
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 5);
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 7);
        JSRuntime.InvokeVoidAsync("setEventforTimeInput");
        JSRuntime.InvokeAsync<string>("addtabindex", "notabindex");
        JSRuntime.InvokeAsync<string>("enabletabindex", "withtabindex");
        if (firstRender)
        {
            JSRuntime.InvokeAsync<string>("focusEditor", "forcus");
            if (isMaxMinChange)
            {
                formContext.Validate();
                StateHasChanged();
            }
        }
        if (!(isDisabledSubmitBtn || (numbOfErrors > 0)) && isBusFeeChange)
        {
            JSRuntime.InvokeAsync<string>("focusSubmitButton", "submitBtnMinMaxForm");
        }
        JSRuntime.InvokeAsync<string>("loadPageScript", "bookingInputPage", "minMaxSettingTabKey");
        isBusFeeChange = false;
        numbOfErrors = 0;
    }

    private void OnRadioOptionChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args, string type)
    {
        int option = int.Parse(args.Value.ToString());
        switch (type)
        {
            case "DiscountOption":
                myForm.DiscountOption = option;
                break;
            case "SpecialVehicleOption":
                myForm.SpecialVehicleOption = option;
                break;
            case "AnnualContractOption":
                myForm.AnnualContractOption = option;
                break;
        }
        formContext.Validate();
        StateHasChanged();
    }

    public void OnCheckboxOfGridChanged(bool value, MinMaxGridData gridRow, string objName)
    {
        switch (objName)
        {
            case "ChangeDriver":
                if (value)
                {
                    gridRow.KmRunningwithChgDriver = gridRow.KmRunning;
                    gridRow.TimeRunningwithChgDriver.SetNewValue(gridRow.TimeRunning);
                    gridRow.SpecialTimeRunningwithChgDriver.SetNewValue(gridRow.SpecialTimeRunning);
                }
                else
                {
                    gridRow.KmRunningwithChgDriver = 0;
                    gridRow.TimeRunningwithChgDriver.SetNewValue(new BookingInputHelper.MyTime(0, 0));
                    gridRow.SpecialTimeRunningwithChgDriver.SetNewValue(new BookingInputHelper.MyTime(0, 0));
                    formContext.MarkAsUnmodified(() => gridRow.KmRunningwithChgDriverStr,
                                                () => gridRow.TimeRunningwithChgDriver.Str,
                                                () => gridRow.SpecialTimeRunningwithChgDriver.Str);
                }
                gridRow.isChangeDriver = value;
                break;
            case "PreviouDay":
                gridRow.BusInspectionStartDate.isPreviousDay = value;
                gridRow.Update(value);
                break;
        }
        formContext.Validate();
        StateHasChanged();
    }

    public void OnCheckedChangedInspectionStartDate(bool value, BookingInputHelper.MyDate BusInspectionStartDate)
    {
        BusInspectionStartDate.isPreviousDay = value;
        StateHasChanged();
    }

    // In this function if gridObj is Null => can not recalculation in grid
    public void OnTimeOfGridChanged(object newvalue, MinMaxGridData gridObj, BookingInputHelper.MyTime timeObj)
    {
        if (gridObj != null)
        {
            gridObj.update();
        }
        StateHasChanged();
    }

    public void OnKmOfGridChanged(string newvalue, MinMaxGridData gridObj, string columName)
    {
        int tmp;
        if (int.TryParse(newvalue.ToString(), out tmp) ||
            int.TryParse(newvalue.ToString().Normalize(System.Text.NormalizationForm.FormKC), out tmp))
        { // Convert from Full-width to Haft-width
            switch (columName)
            {
                case "KmRunning":
                    gridObj.KmRunning = tmp;
                    gridObj.update();
                    break;
                case "ExactKmRunning":
                    gridObj.ExactKmRunning = tmp;
                    break;
                case "KmRunningwithChgDriver":
                    gridObj.KmRunningwithChgDriver = tmp;
                    break;
            }
        }
        StateHasChanged();
    }

    void formatCustomTime(string str, string obj)
    {
        obj = CommonUtil.MyTimeFormat(str);
        InvokeAsync(StateHasChanged);
    }

    string CurencyFormat(int previousValue)
    {
        return string.Format("{0:#,0}", previousValue);
    }

    void OnUnitBusPriceChanged(String value, string RowID)
    {
        value = value.Replace(",", "");
        int tmp;
        if (int.TryParse(value.ToString(), out tmp) ||
            int.TryParse(value.ToString().Normalize(System.Text.NormalizationForm.FormKC), out tmp))
        { // Convert from Full-width to Haft-width
            myForm.UnitPrice = tmp.ToString();

        }
        InvokeAsync(StateHasChanged);
    }

    void OnUnitBusFeeChanged(string value, string RowID)
    {
        value = value.Replace(",", "");
        int tmp;
        if (int.TryParse(value.ToString(), out tmp) ||
            int.TryParse(value.ToString().Normalize(System.Text.NormalizationForm.FormKC), out tmp))
        { // Convert from Full-width to Haft-width
            myForm.UnitFee = tmp.ToString();

        }
        isBusFeeChange = true;
        InvokeAsync(StateHasChanged);
    }

    private async void HandleValidSubmit()
    {
        if (/*formContext.IsModified() && */formContext.Validate())
        {
            VehicleGridData vehicleGridData = bookingFormData.VehicleGridDataList.FirstOrDefault(t => t.RowID == Rowid);
            vehicleGridData.UnitBusPrice = myForm.UnitPrice.ToString();
            vehicleGridData.UnitBusFee = myForm.UnitFee.ToString();
            await unitPriceCallBack.InvokeAsync(Rowid);
        }
    }

    private void HandleInvalidSubmit()
    {
    }

    void OnSelectedTranSportationOfficePlaceChanged(VpmTransportationFeeRule e)
    {
        myForm.SelectedTranSportationOfficePlace = e;
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<MinMaxSetting> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITranSportationFreeRuleService TranSportationFreeRuleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusTypeListService BusTypeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BookingInputHelper BookingInputHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
