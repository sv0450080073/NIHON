#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\BusAllocation.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a01f7aa5ba9c182226ff09884b0e422b95edc6fc"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/busallocation")]
    public partial class BusAllocation : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 826 "E:\Project\HassyaAllrightCloud\Pages\BusAllocation.razor"
      
    [Parameter]
    public string date { get; set; }
    [Parameter]
    public string bookingid { get; set; }
    public string dateformat = "yyyyMMdd";
    List<ReservationData> reservationlst;
    List<BranchChartData> branchchartlst;
    List<BranchChartData> branchchartlstbycurrentcpn;
    List<CompanyChartData> companychartlst;
    List<TPM_SyokumData> driverchartlst = new List<TPM_SyokumData>();
    List<BusBookingDataAllocation> busBookingDataAllocations = new List<BusBookingDataAllocation>();
    BusBookingDataAllocation busBookingDataAllocationItem = new BusBookingDataAllocation();
    BusAllocationData.BusAllocationSearch busAllocationSearchItem = new BusAllocationData.BusAllocationSearch();
    List<Driverlst> driverlst = new List<Driverlst>();
    List<Cartypelst> cartypelsts = new List<Cartypelst>();
    IEnumerable<BusInfoData> busname = new List<BusInfoData>();
    List<TPM_CodeKbDataKenCD> codeKbDataKenCDlst;
    List<TPM_CodeKbDataBunruiCD> depotNamelst;
    List<TPM_CodeKbDataDepot> depotConnectionlst;
    IEnumerable<TPM_CodeKbDataOTHJINKBN> codeKbDataOTHJINKBNlst;
    string DateSpecified = "配車年月日";
    ReservationData ReservationClassification1 = new ReservationData();
    ReservationData ReservationClassification2 = new ReservationData();
    CompanyChartData VehicleAffiliation1 = new CompanyChartData();
    BranchChartData VehicleAffiliation2 = new BranchChartData();
    string UnprovisionedVehicle1 = "有";
    string defaultid = "0";
    BusAllocationData.OutputOrderData UnprovisionedVehicle2 = new BusAllocationData.OutputOrderData();
    EditContext formContext;
    EditContext formContextedit;
    DateTime departuredate;
    DateTime returndate;
    DateTime deliverydate;
    DateTime arrivaldate;
    DateTime operatingdaystart;
    DateTime operatingdayend;
    DateTime pickupDate;
    TimeSpan startTime;
    TimeSpan endTime;
    bool Popup = false;
    bool popupdisable = false;
    //Popupwhenclick check click change row in gird
    bool Popupwhenclick = false;
    bool submit = false;
    int bookingfrom { get; set; } = 0;
    int indexitem { get; set; } = 0;
    int bookingto { get; set; } = 2147483647;
    int activeTabIndex = 0;
    int rowid = -1;
    int rowidPre = -1;
    string validatestring = "";
    string readOnlyText { get; set; }
    string message;
    bool popupsave;
    bool popupsaveSuccess;
    bool popupsaveFail;
    bool checkClickSubmitOnly = false;
    bool checkDeleteDriver = false;
    BusBookingDataAllocation busBookingDataAllocationItemTMP = new BusBookingDataAllocation();
    /// <summary>
    /// Load javascript of page
    /// </summary>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "busAllocationPage");
        base.OnParametersSet();
    }

    private async void HandleValidSubmit()
    {
    }
    int ActiveTabIndex
    {
        get => activeTabIndex;
        set
        {
            activeTabIndex = value;
            StateHasChanged();
        }
    }
    protected async Task TrClickedAtIndex(int index)
    {
        // rowid = -1;
        rowidPre = rowid;
        if (index != rowid)
        {
            rowid = index;

            Popupwhenclick = true;
        }
        else
        {
            getdatabyid(index);
        }
    }
    private async void getdatabyid(int index)
    {
        indexitem = 0;
        submit = true;
        driverlst = new List<Driverlst>();
        cartypelsts = new List<Cartypelst>();
        busBookingDataAllocationItem = new BusBookingDataAllocation();
        indexitem = index;
        busBookingDataAllocationItem = await BusBookingDataService.GetBusBookingDataAllocationItem(DateSpecified, pickupDate, startTime.ToString(@"hhmm"), endTime.ToString(@"hhmm"), bookingfrom, bookingto, busAllocationSearchItem.ReservationClassification1 == null ? 0 : busAllocationSearchItem.ReservationClassification1.YoyaKbnSeq, busAllocationSearchItem.ReservationClassification2 == null ? 0 : busAllocationSearchItem.ReservationClassification2.YoyaKbnSeq, busAllocationSearchItem.VehicleAffiliation1 == null ? 0 : busAllocationSearchItem.VehicleAffiliation1.CompanyCdSeq, busAllocationSearchItem.VehicleAffiliation2 == null ? 0 : busAllocationSearchItem.VehicleAffiliation2.EigyoCdSeq, busAllocationSearchItem.UnprovisionedVehicle1, busAllocationSearchItem.UnprovisionedVehicle2.IdValue, Common.TenantID, busBookingDataAllocations.Where(t => t.row == index).First().Yyksho_UkeCd, busBookingDataAllocations.Where(t => t.row == index).First().Haisha_TeiDanNo, busBookingDataAllocations.Where(t => t.row == index).First().Haisha_UnkRen, busBookingDataAllocations.Where(t => t.row == index).First().Haisha_BunkRen);
        checkDeleteDriver = false;

        var cartype = busBookingDataAllocations.Where(t => t.Haisha_UkeNo == busBookingDataAllocationItem.Haisha_UkeNo).ToList();
        var cartypebycar = cartype.Select(t => t.SyaSyu_SyaSyuNm_YykSyu).Distinct().ToList();
        var cartypebycarno = cartype.Where(t => t.YykSyu_SyaSyuCdSeq_YykSyu == 0).Select(t => t.CodeKb_YykSyu_RyakuNm).Distinct().ToList();
        int i = 1;
        cartypelsts = new List<Cartypelst>();
        foreach (var item in cartypebycar)
        {
            if (item != null)
            {
                Cartypelst caritem = new Cartypelst();
                caritem.No = i;
                caritem.Cartype = item.Trim();
                caritem.Numberofunits = cartype.Where(t => t.SyaSyu_SyaSyuNm_YykSyu == item.Trim()).Count();
                caritem.Type = cartype.Where(t => t.SyaSyu_SyaSyuNm_YykSyu == item.Trim()).First().CodeKb_YykSyu_RyakuNm;
                cartypelsts.Add(caritem);
                i++;
            }
        }
        foreach (var item in cartypebycarno)
        {
            if (item != null)
            {
                Cartypelst caritem = new Cartypelst();
                caritem.No = i;
                caritem.Cartype = "指定なし";
                caritem.Numberofunits = cartype.Where(t => t.CodeKb_YykSyu_RyakuNm == item.Trim() && t.YykSyu_SyaSyuCdSeq_YykSyu == 0).Count();
                caritem.Type = item.Trim();
                cartypelsts.Add(caritem);
                i++;
            }
        }
        driverlst = new List<Driverlst>();
        driverlst = await BusBookingDataService.Getbusdriver(busBookingDataAllocationItem.Haisha_UkeNo, busBookingDataAllocationItem.Haisha_UnkRen, busBookingDataAllocationItem.Haisha_TeiDanNo, busBookingDataAllocationItem.Haisha_BunkRen);
        int j = 1;
        foreach (var item in driverlst)
        {
            item.index = j;
            var olditem = await TPM_SyokumDataService.GetDriverbyid(item.SyainCdSeq, Common.TenantID);
            driverchartlst.Skip(1).Where(t => t.KyoSHe_SyainCdSeq == olditem.KyoSHe_SyainCdSeq).First().isView = false;
            item.DriverName = driverchartlst.Skip(1).Where(t => t.KyoSHe_SyainCdSeq == olditem.KyoSHe_SyainCdSeq).First().Syain_SyainNm;
            if (item.StartTimestr.Trim() == "")
            {
                item.StartTime = busBookingDataAllocationItem.DepartureTime;
            }
            if (item.EndTimestr.Trim() == "")
            {
                item.EndTime = busBookingDataAllocationItem.ReturnTime;
            }
            j++;
        }
        if (driverlst.Count >= 2)
        {
            popupdisable = true;
        }
        else
        {
            popupdisable = false;
        }
        formContextedit = new EditContext(busBookingDataAllocationItem);
        StateHasChanged();
    }
    void codeKbDataKenCDChanged(TPM_CodeKbDataKenCD e)
    {
        busBookingDataAllocationItem.Haisha_IkMapCdSeq = e.Basyo_BasyoMapCdSeq;
        busBookingDataAllocationItem.Haisha_IkNm = e.Basyo_BasyoNm;
        InvokeAsync(StateHasChanged);
    }
    void CodeKbDataDepotChanged(TPM_CodeKbDataDepot e)
    {
        busBookingDataAllocationItem.Haisha_HaiSBinCdSeq = e.Bin_BinCdSeq;
        busBookingDataAllocationItem.Haisha_HaiSKouKCdSeq = e.Koutu_KoukCdSeq;
        busBookingDataAllocationItem.HaishaExp_HaiSKouKNm = e.Koutu_RyakuNm;
        busBookingDataAllocationItem.HaishaExp_HaisBinNm = e.Bin_BinNm;
        InvokeAsync(StateHasChanged);
    }
    void CodeKbDataDepottouChanged(TPM_CodeKbDataDepot e)
    {
        busBookingDataAllocationItem.Haisha_TouBinCdSeq = e.Bin_BinCdSeq;
        busBookingDataAllocationItem.Haisha_TouKouKCdSeq = e.Koutu_KoukCdSeq;
        busBookingDataAllocationItem.HaishaExp_TouSKouKNm = e.Koutu_RyakuNm;
        busBookingDataAllocationItem.HaishaExp_TouSBinNm = e.Bin_BinNm;
        InvokeAsync(StateHasChanged);
    }
    void depotNameChanged(TPM_CodeKbDataBunruiCD e)
    {
        busBookingDataAllocationItem.Haisha_HaiSCdSeq = e.HaiChi_HaiSCdSeq;
        busBookingDataAllocationItem.Haisha_HaiSNm = e.HaiChi_HaiSNm;
        InvokeAsync(StateHasChanged);
    }
    void depottouNameChanged(TPM_CodeKbDataBunruiCD e)
    {
        busBookingDataAllocationItem.Haisha_TouCdSeq = e.HaiChi_HaiSCdSeq;
        busBookingDataAllocationItem.Haisha_TouNm = e.HaiChi_HaiSNm;
        InvokeAsync(StateHasChanged);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 4);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 10);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 100);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 50);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 30);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 6);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 20);
        await JSRuntime.InvokeVoidAsync("setEventforTimeInput");
        await JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        await JSRuntime.InvokeVoidAsync("setEventforIsNumberField");
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busAllocationPage", "scrollToTop");
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scroll");
            await JSRuntime.InvokeVoidAsync("loadPageScript", "busAllocationPage", "busAllocationPageTabKey");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        defaultid = "0";
        busAllocationSearchItem = new BusAllocationData.BusAllocationSearch();
        formContext = new EditContext(busAllocationSearchItem);
        formContextedit = new EditContext(busBookingDataAllocationItem);
        pickupDate = DateTime.Today;
        //if (date == "" || date == null)
        //{
        //    pickupDate = DateTime.Today;
        //}
        //else
        //{
        //    DateTime.TryParseExact(date, "yyyy/MM/dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out pickupDate);
        //}
        //if (bookingid != null)
        //{
        //    bookingfrom = int.Parse(bookingid);
        //    bookingto = int.Parse(bookingid);
        //}
        busAllocationSearchItem.pickupDate = pickupDate;
        /*Load Reservation*/
        reservationlst = new List<ReservationData>();
        reservationlst = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
        reservationlst.Insert(0, null);
        busAllocationSearchItem.ReservationClassification1 = reservationlst.First();
        busAllocationSearchItem.ReservationClassification2 = reservationlst.First();

        /*Load Company*/
        companychartlst = new List<CompanyChartData>();
        companychartlst = await TPM_CompnyDataService.GetCompany(Common.TenantID);
        companychartlst.Insert(0, null);
        busAllocationSearchItem.VehicleAffiliation1 = companychartlst.First();

        /*Load Branch*/
        branchchartlst = new List<BranchChartData>();
        if (VehicleAffiliation1 != null)
        {
            branchchartlst = TPM_EigyosDataService.GetBranchbyCompany1(VehicleAffiliation1.CompanyCd, Common.TenantID);
        }
        branchchartlst.Insert(0, null);
        busAllocationSearchItem.VehicleAffiliation2 = branchchartlst.First();

        /*Load Output Data*/
        UnprovisionedVehicle2 = BusAllocationData.OutputOrderListData.outputOrderlst.First();
        busname = await BusDataService.Getallbus(Common.TenantID);
        codeKbDataKenCDlst = await TPM_CodeKbnService.GetdataKenCD(Common.TenantID);
        codeKbDataKenCDlst.Insert(0, new TPM_CodeKbDataKenCD());
        depotNamelst = await TPM_CodeKbnService.GetdataBunruiCD(Common.TenantID);
        depotNamelst.Insert(0, new TPM_CodeKbDataBunruiCD());
        depotConnectionlst = await TPM_CodeKbnService.GetdataDepot(DateTime.Today, Common.TenantID);
        depotConnectionlst.Insert(0, new TPM_CodeKbDataDepot());
        branchchartlstbycurrentcpn = TPM_EigyosDataService.GetBranchbyTenantCdSeq(Common.TenantID);
        codeKbDataOTHJINKBNlst = await TPM_CodeKbnService.GetdataOTHJINKBN(Common.TenantID);
        driverchartlst = await TPM_SyokumDataService.GetDriver(DateTime.Today, 1, Common.TenantID);
        driverchartlst.Insert(0, new TPM_SyokumData());
        /*Setting*/
        TimeSpan.TryParseExact("000000", "hhmmss", CultureInfo.InvariantCulture, out startTime);
        busAllocationSearchItem.startTime = startTime.ToString("hhmm");
        TimeSpan.TryParseExact("235900", "hhmmss", CultureInfo.InvariantCulture, out endTime);
        busAllocationSearchItem.endTime = endTime.ToString("hhmm");

    }

    #region InputTime changed event

    private void OnStartTimeChanged(BookingInputHelper.MyTime newTime)
    {
        checkClickSubmitOnly = false;
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out startTime);
            busAllocationSearchItem.startTime = startTime.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out startTime);
            busAllocationSearchItem.startTime = startTime.ToString("hhmm");
        }
        InvokeAsync(StateHasChanged);
    }

    private void OnEndTimeChanged(BookingInputHelper.MyTime newTime)
    {
        checkClickSubmitOnly = false;
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        string date = int.Parse(timeValue).ToString("D4");

        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out endTime);
            busAllocationSearchItem.endTime = endTime.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("235900", "hhmmss", CultureInfo.InvariantCulture, out endTime);
            busAllocationSearchItem.endTime = endTime.ToString("hhmm");

        }
        InvokeAsync(StateHasChanged);
    }

    private void OnHaisha_SyuKoTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        busBookingDataAllocationItem.Haisha_SyuKoTime = int.Parse(timeValue).ToString("D4");
        busBookingDataAllocationItem.DepartureTime = BusScheduleHelper.ConvertTime(busBookingDataAllocationItem.Haisha_SyuKoTime);
        StateHasChanged();
    }

    private void OnHaisha_HaiSTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        busBookingDataAllocationItem.Haisha_HaiSTime = int.Parse(timeValue).ToString("D4");
        busBookingDataAllocationItem.DeliveryTime = BusScheduleHelper.ConvertTime(busBookingDataAllocationItem.Haisha_HaiSTime);
        StateHasChanged();
    }

    private void OnHaisha_SyuPaTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        busBookingDataAllocationItem.Haisha_SyuPaTime = int.Parse(timeValue).ToString("D4");
        busBookingDataAllocationItem.StartTime = BusScheduleHelper.ConvertTime(busBookingDataAllocationItem.Haisha_SyuPaTime);
        StateHasChanged();
    }

    private void OnHaisha_TouChTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        busBookingDataAllocationItem.Haisha_TouChTime = int.Parse(timeValue).ToString("D4");
        busBookingDataAllocationItem.ArrivalTime = BusScheduleHelper.ConvertTime(busBookingDataAllocationItem.Haisha_TouChTime);
        StateHasChanged();
    }

    private void OnHaisha_KikTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        busBookingDataAllocationItem.Haisha_KikTime = int.Parse(timeValue).ToString("D4");
        busBookingDataAllocationItem.ReturnTime = BusScheduleHelper.ConvertTime(busBookingDataAllocationItem.Haisha_KikTime);
        StateHasChanged();
    }

    private void OnStartTimeTextChanged(BookingInputHelper.MyTime newTime, int index)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        var updateitem = driverlst.Where(t => t.index == index).First();

        updateitem.StartTime = BusScheduleHelper.ConvertTime(timeValue);
        busBookingDataAllocationItem.Driverlstitem = driverlst;
        StateHasChanged();
    }

    private void EndTimeTextChange(BookingInputHelper.MyTime newTime, int index)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        var updateitem = driverlst.Where(t => t.index == index).First();

        updateitem.EndTime = BusScheduleHelper.ConvertTime(timeValue);
        busBookingDataAllocationItem.Driverlstitem = driverlst;
        StateHasChanged();
    }

    private void OnHaisha_HaiSSetTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        busBookingDataAllocationItem.Haisha_HaiSSetTime = BusScheduleHelper.ConvertTime(timeValue);
        StateHasChanged();
    }

    private void OnHaisha_TouSetTimeChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        busBookingDataAllocationItem.Haisha_TouSetTime = BusScheduleHelper.ConvertTime(timeValue);
        StateHasChanged();
    }


    #endregion


    void ReservationStartChanged(ReservationData reservation)
    {
        checkClickSubmitOnly = false;
        busAllocationSearchItem.ReservationClassification1 = reservation;
        InvokeAsync(StateHasChanged);
    }
    void ReservationEndChanged(ReservationData reservation)
    {
        checkClickSubmitOnly = false;
        busAllocationSearchItem.ReservationClassification2 = reservation;
        InvokeAsync(StateHasChanged);
    }

    void CompanyChanged(CompanyChartData companyChart)
    {
        checkClickSubmitOnly = false;
        busAllocationSearchItem.VehicleAffiliation1 = companyChart;
        branchchartlst = new List<BranchChartData>();
        if (busAllocationSearchItem.VehicleAffiliation1 != null)
        {
            branchchartlst = TPM_EigyosDataService.GetBranchbyCompany1(companyChart.CompanyCd, Common.TenantID);
        }
        branchchartlst.Insert(0, null);
        busAllocationSearchItem.VehicleAffiliation2 = branchchartlst.First();
        InvokeAsync(StateHasChanged);
    }

    void BranchChaned(BranchChartData branchChart)
    {
        checkClickSubmitOnly = false;
        busAllocationSearchItem.VehicleAffiliation2 = branchChart;
        InvokeAsync(StateHasChanged);
    }
    void OrderbyChange(BusAllocationData.OutputOrderData order)
    {
        checkClickSubmitOnly = false;
        busAllocationSearchItem.UnprovisionedVehicle2 = order;
        InvokeAsync(StateHasChanged);
    }
    void onBookingfromChange(string newValue)
    {
        checkClickSubmitOnly = false;
        int bookingfromParse;
        bool checkParse = Int32.TryParse(newValue, out bookingfromParse);
        if (checkParse)
        {
            bookingfrom = int.Parse(newValue);
            busAllocationSearchItem.bookingfrom = newValue;
        }
        else
        {
            bookingfrom = 0;
            busAllocationSearchItem.bookingfrom = "0";
        }
        InvokeAsync(StateHasChanged);
    }

    void onBookingtoChange(string newValue)
    {
        checkClickSubmitOnly = false;
        int bookingtoParse;
        bool checkParse = Int32.TryParse(newValue, out bookingtoParse);
        if (checkParse)
        {
            bookingto = int.Parse(newValue);
            busAllocationSearchItem.bookingto = newValue;
        }
        else
        {
            bookingto = 2147483647;
            busAllocationSearchItem.bookingto = "2147483647";
        }
        InvokeAsync(StateHasChanged);
    }

    void DateSpecifiedChanged(string newValue)
    {
        checkClickSubmitOnly = false;
        if (newValue == "配車年月日")
        {
            busAllocationSearchItem.pickupTime = true;
        }
        else
        {
            busAllocationSearchItem.pickupTime = false;
        }
        busAllocationSearchItem.DateSpecified = newValue;
        DateSpecified = busAllocationSearchItem.DateSpecified;
        InvokeAsync(StateHasChanged);
    }
    void OnPickupDateChanged(DateTime newDate)
    {
        checkClickSubmitOnly = false;
        pickupDate = newDate;
        busAllocationSearchItem.pickupDate = newDate;
        InvokeAsync(StateHasChanged);
    }
    void UnprovisionedVehicleChanged(string newValue)
    {
        checkClickSubmitOnly = false;
        if (newValue == "有")
        {
            busAllocationSearchItem.isgray = true;
        }
        else
        {
            busAllocationSearchItem.isgray = false;
        }
        busAllocationSearchItem.UnprovisionedVehicle1 = newValue;
        InvokeAsync(StateHasChanged);
    }
    protected async Task Loaddata()
    {
        busBookingDataAllocations = await BusBookingDataService.GetBusBookingDataAllocation(DateSpecified, pickupDate, startTime.ToString(@"hhmm"), endTime.ToString(@"hhmm"), bookingfrom, bookingto, busAllocationSearchItem.ReservationClassification1 == null ? 0 : busAllocationSearchItem.ReservationClassification1.YoyaKbnSeq, busAllocationSearchItem.ReservationClassification2 == null ? 0 : busAllocationSearchItem.ReservationClassification2.YoyaKbnSeq, busAllocationSearchItem.VehicleAffiliation1 == null ? 0 : busAllocationSearchItem.VehicleAffiliation1.CompanyCdSeq, busAllocationSearchItem.VehicleAffiliation2 == null ? 0 : busAllocationSearchItem.VehicleAffiliation2.EigyoCdSeq, busAllocationSearchItem.UnprovisionedVehicle1, busAllocationSearchItem.UnprovisionedVehicle2.IdValue, Common.TenantID);
         var jsonString = Newtonsoft.Json.JsonConvert.SerializeObject(busBookingDataAllocations);
        if (busAllocationSearchItem.UnprovisionedVehicle2.IdValue == 1)
        {
            busBookingDataAllocations = busBookingDataAllocations.OrderBy(t => t.Haisha_SyuEigCdSeq).ThenBy(t => t.Haisha_HaiSSryCdSeq).ToList();
        }
        else if (busAllocationSearchItem.UnprovisionedVehicle2.IdValue == 2)
        {
            busBookingDataAllocations = busBookingDataAllocations.OrderBy(t => t.Haisha_SyuEigCdSeq).ThenBy(t => t.Haisha_TeiDanNo).ToList();
        }
        else if (busAllocationSearchItem.UnprovisionedVehicle2.IdValue == 3)
        {
            busBookingDataAllocations = busBookingDataAllocations.OrderBy(t => t.Haisha_HaiSSryCdSeq).ToList();
        }
        else if (busAllocationSearchItem.UnprovisionedVehicle2.IdValue == 4)
        {
            busBookingDataAllocations = busBookingDataAllocations.OrderBy(t => t.HenSya_TenkoNo).ToList();
        }
    }
    protected async Task btnSearchClick(MouseEventArgs e)
    {
        checkClickSubmitOnly = true;
        await Task.Run(() =>
        {
            Loaddata().Wait();
        });
        if (busBookingDataAllocations.Count() > 0)
        {
            busBookingDataAllocationItem = new BusBookingDataAllocation();
            busBookingDataAllocationItem = await BusBookingDataService.GetBusBookingDataAllocationItem(DateSpecified, pickupDate, startTime.ToString(@"hhmm"), endTime.ToString(@"hhmm"), bookingfrom, bookingto, busAllocationSearchItem.ReservationClassification1 == null ? 0 : busAllocationSearchItem.ReservationClassification1.YoyaKbnSeq, busAllocationSearchItem.ReservationClassification2 == null ? 0 : busAllocationSearchItem.ReservationClassification2.YoyaKbnSeq, busAllocationSearchItem.VehicleAffiliation1 == null ? 0 : busAllocationSearchItem.VehicleAffiliation1.CompanyCdSeq, busAllocationSearchItem.VehicleAffiliation2 == null ? 0 : busAllocationSearchItem.VehicleAffiliation2.EigyoCdSeq, busAllocationSearchItem.UnprovisionedVehicle1, busAllocationSearchItem.UnprovisionedVehicle2.IdValue, Common.TenantID, busBookingDataAllocations.Where(t => t.row == 0).First().Yyksho_UkeCd, busBookingDataAllocations.Where(t => t.row == 0).First().Haisha_TeiDanNo, busBookingDataAllocations.Where(t => t.row == 0).First().Haisha_UnkRen, busBookingDataAllocations.Where(t => t.row == 0).First().Haisha_BunkRen);

            submit = true;
            var cartype = busBookingDataAllocations.Where(t => t.Haisha_UkeNo == busBookingDataAllocationItem.Haisha_UkeNo).ToList();
            var cartypebycar = cartype.Select(t => t.SyaSyu_SyaSyuNm_YykSyu).Distinct().ToList();
            var cartypebycarno = cartype.Where(t => t.YykSyu_SyaSyuCdSeq_YykSyu == 0).Select(t => t.CodeKb_YykSyu_RyakuNm).Distinct().ToList();
            int i = 1;
            cartypelsts = new List<Cartypelst>();
            foreach (var item in cartypebycar)
            {
                if (item != null)
                {
                    Cartypelst caritem = new Cartypelst();
                    caritem.No = i;
                    caritem.Cartype = item.Trim();
                    caritem.Numberofunits = cartype.Where(t => t.SyaSyu_SyaSyuNm_YykSyu == item.Trim()).Count();
                    caritem.Type = cartype.Where(t => t.SyaSyu_SyaSyuNm_YykSyu == item.Trim()).First().CodeKb_YykSyu_RyakuNm;
                    cartypelsts.Add(caritem);
                    i++;
                }
            }
            foreach (var item in cartypebycarno)
            {
                if (item != null)
                {
                    Cartypelst caritem = new Cartypelst();
                    caritem.No = i;
                    caritem.Cartype = "指定なし";
                    caritem.Numberofunits = cartype.Where(t => t.CodeKb_YykSyu_RyakuNm == item.Trim() && t.YykSyu_SyaSyuCdSeq_YykSyu == 0).Count();
                    caritem.Type = item.Trim();
                    cartypelsts.Add(caritem);
                    i++;
                }
            }
            driverlst = new List<Driverlst>();
            driverlst = await BusBookingDataService.Getbusdriver(busBookingDataAllocationItem.Haisha_UkeNo, busBookingDataAllocationItem.Haisha_UnkRen, busBookingDataAllocationItem.Haisha_TeiDanNo, busBookingDataAllocationItem.Haisha_BunkRen);
            int j = 1;
            foreach (var item in driverlst)
            {
                item.index = j;
                var olditem = await TPM_SyokumDataService.GetDriverbyid(item.SyainCdSeq, Common.TenantID);
                driverchartlst.Skip(1).Where(t => t.KyoSHe_SyainCdSeq == olditem.KyoSHe_SyainCdSeq).First().isView = false;
                item.DriverName = driverchartlst.Skip(1).Where(t => t.KyoSHe_SyainCdSeq == olditem.KyoSHe_SyainCdSeq).First().Syain_SyainNm;
                if (item.StartTimestr.Trim() == "")
                {
                    item.StartTime = busBookingDataAllocationItem.DepartureTime;
                }
                if (item.EndTimestr.Trim() == "")
                {
                    item.EndTime = busBookingDataAllocationItem.ReturnTime;
                }
                j++;
            }
            if (driverlst.Count >= 2)
            {
                popupdisable = true;
            }
            else
            {
                popupdisable = false;
            }
        }
        formContextedit = new EditContext(busBookingDataAllocationItem);
        StateHasChanged();
    }
    void OnHaisha_GoSyaChanged(string newValue)
    {
        busBookingDataAllocationItem.Haisha_GoSya = int.Parse(newValue);
        InvokeAsync(StateHasChanged);
    }
    void OnHaisha_DanTaNm2Changed(string newValue)
    {
        busBookingDataAllocationItem.Haisha_DanTaNm2 = newValue;
        InvokeAsync(StateHasChanged);
    }
    void OnHaisha_IkNmChanged(string newValue)
    {
        busBookingDataAllocationItem.Haisha_IkNm = newValue;
        InvokeAsync(StateHasChanged);
    }


    void OnHaisha_HaiSNmChanged(string newValue)
    {
        busBookingDataAllocationItem.Haisha_HaiSNm = int.Parse(newValue).ToString("D4");
        StateHasChanged();
    }
    void OnHaisha_HaiSJyus1Changed(string newValue)
    {
        busBookingDataAllocationItem.Haisha_HaiSJyus1 = newValue;
        StateHasChanged();
    }

    void OnHaisha_HaiSJyus2Changed(string newValue)
    {
        busBookingDataAllocationItem.Haisha_HaiSJyus2 = newValue;
        StateHasChanged();
    }
    void OnHaisha_HaiSKigouChanged(string newValue)
    {
        busBookingDataAllocationItem.Haisha_HaiSKigou = newValue;
        StateHasChanged();
    }

    void OnHaisha_TouNmChanged(string newValue)
    {
        busBookingDataAllocationItem.Haisha_TouNm = newValue;
        StateHasChanged();
    }

    void OnSelectedbusnameChanged(BusInfoData e)
    {
        busBookingDataAllocationItem.Haisha_HaiSSryCdSeq = e.SyaRyoCdSeq;
        StateHasChanged();
    }

    void OnHaisha_TouJyusyo1Changed(string newValue)
    {
        busBookingDataAllocationItem.Haisha_TouJyusyo1 = newValue;
        StateHasChanged();
    }

    void OnHaisha_TouJyusyo2Changed(string newValue)
    {
        busBookingDataAllocationItem.Haisha_TouJyusyo2 = newValue;
        StateHasChanged();
    }
    void OnHaisha_TouKigouChanged(string newValue)
    {
        busBookingDataAllocationItem.Haisha_TouKigou = newValue;
        StateHasChanged();
    }
    void OnHaisha_JyoSyaJinChanged(string newValue)
    {

        try
        {
            busBookingDataAllocationItem.Haisha_JyoSyaJin = short.Parse(newValue);
        }
        catch
        {
            busBookingDataAllocationItem.Haisha_JyoSyaJin = busBookingDataAllocationItem.Haisha_JyoSyaJin;
        }
        StateHasChanged();
    }
    void OnHaisha_PlusJinChanged(string newValue)
    {

        try
        {
            busBookingDataAllocationItem.Haisha_PlusJin = short.Parse(newValue);
        }
        catch
        {
            busBookingDataAllocationItem.Haisha_PlusJin = busBookingDataAllocationItem.Haisha_PlusJin;
        }
        StateHasChanged();
    }
    void OnHaisha_DrvJinChanged(string newValue)
    {
        try
        {
            busBookingDataAllocationItem.Haisha_DrvJin = short.Parse(newValue);
        }
        catch
        {
            busBookingDataAllocationItem.Haisha_DrvJin = busBookingDataAllocationItem.Haisha_DrvJin;
        }
        StateHasChanged();
    }
    void OnHaisha_GuiSuChanged(string newValue)
    {
        try
        {
            busBookingDataAllocationItem.Haisha_GuiSu = short.Parse(newValue);
        }
        catch
        {
            busBookingDataAllocationItem.Haisha_GuiSu = busBookingDataAllocationItem.Haisha_GuiSu;
        }
        StateHasChanged();
    }
    void OnHaisha_PlatNoChanged(string newValue)
    {
        busBookingDataAllocationItem.Haisha_PlatNo = newValue;
        StateHasChanged();
    }
    void branchchartlstbycurrentcpnChanged(BranchChartData e)
    {
        busBookingDataAllocationItem.Haisha_SyuEigCdSeq = e.EigyoCdSeq;
        StateHasChanged();
    }
    void branchchartlstbycurrentcpntouChanged(BranchChartData e)
    {
        busBookingDataAllocationItem.Haisha_KikEigSeq = e.EigyoCdSeq;
        StateHasChanged();
    }
    void TPM_CodeKbDataOTHJINKBNChanged(TPM_CodeKbDataOTHJINKBN e)
    {
        busBookingDataAllocationItem.Haisha_OthJinKbn1 = (byte)(int.Parse(e.CodeKb_CodeKbn));
        StateHasChanged();
    }
    void TPM_CodeKbDataOTHJINKBNtouChanged(TPM_CodeKbDataOTHJINKBN e)
    {
        busBookingDataAllocationItem.Haisha_OthJinKbn2 = (byte)(int.Parse(e.CodeKb_CodeKbn));
        StateHasChanged();
    }
    void OnHaisha_OthJin1Changed(string newValue)
    {
        busBookingDataAllocationItem.Haisha_OthJin1 = short.Parse(newValue);
        StateHasChanged();
    }
    void OnHaisha_OthJin2Changed(string newValue)
    {
        busBookingDataAllocationItem.Haisha_OthJin2 = short.Parse(newValue);
        StateHasChanged();
    }
    void OnHaishaExp_TouSBinNmChanged(string newValue)
    {
        busBookingDataAllocationItem.HaishaExp_TouSBinNm = newValue;
        StateHasChanged();
    }
    void OnHaishaExp_HaisBinNmChanged(string newValue)
    {
        busBookingDataAllocationItem.HaishaExp_HaisBinNm = newValue;
        StateHasChanged();
    }

    void StartdepotNameChanged(TPM_CodeKbDataBunruiCD e, int index)
    {
        var updateitem = driverlst.Where(t => t.index == index).First();
        updateitem.StartComment = e.HaiChi_HaiSNm;
        busBookingDataAllocationItem.Driverlstitem = driverlst;
        InvokeAsync(StateHasChanged);
    }
    void EnddepotNameChanged(TPM_CodeKbDataBunruiCD e, int index)
    {
        var updateitem = driverlst.Where(t => t.index == index).First();
        updateitem.EndComment = e.HaiChi_HaiSNm;
        busBookingDataAllocationItem.Driverlstitem = driverlst;
        InvokeAsync(StateHasChanged);
    }
    void StartCommentTextChange(string newValue, int index)
    {
        var updateitem = driverlst.Where(t => t.index == index).First();
        updateitem.StartComment = newValue;
        busBookingDataAllocationItem.Driverlstitem = driverlst;
        StateHasChanged();
    }
    void EndCommentTextChange(string newValue, int index)
    {
        var updateitem = driverlst.Where(t => t.index == index).First();
        updateitem.EndComment = newValue;
        busBookingDataAllocationItem.Driverlstitem = driverlst;
        StateHasChanged();
    }

    async Task UpdateHaisha(MouseEventArgs e)
    {

        bool update = TKD_HaishaDataService.UpdateHaishadata(busBookingDataAllocationItem, 1, checkDeleteDriver);
        if (update)
        {
            submit = false;
            popupdisable = false;
            message = Lang["savesuccess"];
            popupsaveSuccess = true;
        }
        else
        {
            message = Lang["saveunsuccess"];
            popupsaveFail = true;
        }
        await Task.Run(() =>
        {
            Loaddata().Wait();
        });
        StateHasChanged();
        if (busBookingDataAllocationItemTMP == null) busBookingDataAllocationItemTMP = busBookingDataAllocationItem;
    }
    void OpenPopup(MouseEventArgs e)
    {
        Popup = true;

        StateHasChanged();
    }
    void ClosePopup(MouseEventArgs e)
    {
        Popup = false;
        StateHasChanged();
    }
    void OnHaisha_SyuKoYmdChanged(DateTime newValue)
    {
        busBookingDataAllocationItem.Haisha_SyuKoYmd = newValue.ToString("yyyyMMdd");
        busBookingDataAllocationItem.DepartureDate = newValue;
        StateHasChanged();
    }
    void OnHaisha_HaiSYmdChanged(DateTime newValue)
    {
        busBookingDataAllocationItem.Haisha_HaiSYmd = newValue.ToString("yyyyMMdd");
        busBookingDataAllocationItem.DeliveryDate = newValue;
        StateHasChanged();
    }
    void OnHaisha_TouYmdChanged(DateTime newValue)
    {
        busBookingDataAllocationItem.Haisha_TouYmd = newValue.ToString("yyyyMMdd");
        StateHasChanged();
    }

    void OnHaisha_KikYmdChanged(DateTime newValue)
    {
        busBookingDataAllocationItem.Haisha_KikYmd = newValue.ToString("yyyyMMdd");
        StateHasChanged();
    }
    protected async Task driverchartlstChanged(TPM_SyokumData e, int index)
    {

        if (driverlst.Where(t => t.index == index).Any())
        {
            var updateitemdiver = driverlst.Where(t => t.index == index).First();
            int oldSyainCdSeq = driverlst.Where(t => t.index == index).First().SyainCdSeq;
            var olditem = await TPM_SyokumDataService.GetDriverbyid(oldSyainCdSeq, Common.TenantID);
            driverchartlst.Skip(1).Where(t => t.KyoSHe_SyainCdSeq == olditem.KyoSHe_SyainCdSeq).First().isView = true;
            if (e.KyoSHe_SyainCdSeq == 0)
            {
                driverlst.Remove(updateitemdiver);
            }
            else
            {
                updateitemdiver.index = index;
                updateitemdiver.SyainCdSeq = e.KyoSHe_SyainCdSeq;
                updateitemdiver.DriverName = e.Syain_SyainNm;
                updateitemdiver.StartTime = busBookingDataAllocationItem.DepartureTime;
                updateitemdiver.EndTime = busBookingDataAllocationItem.ReturnTime;
                updateitemdiver.Syokum_SyokumuCdSeq = e.Syokum_SyokumuCdSeq;
                driverchartlst.Skip(1).Where(t => t.KyoSHe_SyainCdSeq == e.KyoSHe_SyainCdSeq).First().isView = false;
            }
        }
        else
        {
            Driverlst item = new Driverlst();
            item.index = index;
            item.SyainCdSeq = e.KyoSHe_SyainCdSeq;
            item.DriverName = e.Syain_SyainNm;
            item.StartTime = busBookingDataAllocationItem.DepartureTime;
            item.EndTime = busBookingDataAllocationItem.ReturnTime;
            item.Syokum_SyokumuCdSeq = e.Syokum_SyokumuCdSeq;
            driverlst.Add(item);
            driverchartlst.Skip(1).Where(t => t.KyoSHe_SyainCdSeq == e.KyoSHe_SyainCdSeq).First().isView = false;
        }
        driverchartlst = driverchartlst.Skip(1).OrderBy(t => t.Eigyos_EigyoCdSeq).ThenBy(t => t.KyoSHe_SyainCdSeq).ToList();
        driverchartlst.Insert(0, new TPM_SyokumData());
        busBookingDataAllocationItem.Driverlstitem = driverlst;
        int j = 1;
        foreach (var item in driverlst)
        {
            item.index = j;
            var olditem = await TPM_SyokumDataService.GetDriverbyid(item.SyainCdSeq, Common.TenantID);
            j++;
        }
        if (driverlst.Count >= 2)
        {
            popupdisable = true;
        }
        else
        {
            popupdisable = false;
        }
        checkDeleteDriver = true;
        StateHasChanged();
    }
    private async Task CancelSave(MouseEventArgs e)
    {
        popupsaveSuccess = false;
        message = "";
        StateHasChanged();
    }
    private async Task CancelSaveFail(MouseEventArgs e)
    {
        popupsaveFail = false;
        message = "";
        StateHasChanged();
    }
    private async Task UpdateBus(MouseEventArgs e)
    {
        Popupwhenclick = false;
        getdatabyid(rowid);
        StateHasChanged();
    }
    private async Task CancelUpdateBus(MouseEventArgs e)
    {
        rowid = rowidPre;
        Popupwhenclick = false;
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BusAllocation> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper BusScheduleHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_SyokumDataListService TPM_SyokumDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CodeKbListService TPM_CodeKbnService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusDataListService BusDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITKD_HaishaDataListService TKD_HaishaDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusBookingDataListService BusBookingDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
    }
}
#pragma warning restore 1591
