#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "902b7483ca867bd31f01125143cfa441e07c18b3"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
using DevExpress.XtraPrinting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/operatinginstructionreport")]
    public partial class OperatingInstructionReport : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 155 "E:\Project\HassyaAllrightCloud\Pages\OperatingInstructionReport.razor"
           
    [Parameter]
    public string Option { get; set; }
    [Parameter]
    public string Date { get; set; }
    [Parameter]
    public string Mode { get; set; }
    [Parameter]
    public string BookingID { get; set; }
    [Parameter]
    public string TeiDanNo { get; set; }
    [Parameter]
    public string UnkRen { get; set; }
    [Parameter]
    public string BunkRen { get; set; }
    public OperatingInstructionReportData reportData = new OperatingInstructionReportData();
    EditContext formContext;
    bool Checkedforop { get; set; } = true;
    bool Checkedfordri { get; set; } = true;
    int ReceiptNumberFrom { get; set; } = 1;
    int ReceiptNumberTo { get; set; } = 2147483647;
    enum OutputType
    {
        運行指示書,
        乗務記録簿,
    }
    DateTime deliveryDate = DateTime.Today;
    List<ReservationData> reservationlst;
    List<DepartureOfficeData> departureofficelst;
    List<CompanyChartData> companychartlst;
    List<BranchChartData> branchchartlst;
    List<OutputOrderData> outputorderlst;
    bool PopupVisible { get; set; } = false;
    bool PopupCheckData { get; set; } = false;
    bool OpenPopPreview = false;
    bool checkNullItem = false;

    #region string LocalizationInit
    List<string> emptyItemMessage = new List<string>();
    string PageTitleReport;
    string ReceiptNumber;
    string ReservationCategory;
    string DateOfDelivery;
    string DepartureOffice;
    string ReportOutput;
    string OutputOrder;
    string Preview;
    string Export;
    string Message;
    string TitlePopupViewer;
    string TitlePopupConfirm;
    string TitlePopupWarning;
    string TitlePopupInfo;
    string MessageCheckDataExist = "";

    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        PageTitleReport = Lang["PageTitle"];
        ReceiptNumber = Lang["ReceiptNumber"];
        ReservationCategory = Lang["ReservationCategory"];
        DateOfDelivery = Lang["DateOfDelivery"];
        DepartureOffice = Lang["DepartureOffice"];
        ReportOutput = Lang["ReportOutput"];
        OutputOrder = Lang["OutputOrder"];
        Preview = Lang["PreviewButton"];
        Export = Lang["ExportButton"];
        MessageCheckDataExist = Lang["BI_T004"];
        TitlePopupViewer = Lang["TitlePopupViewer"];
        TitlePopupConfirm = Lang["TitlePopupConfirm"];
        TitlePopupWarning = Lang["TitlePopupWarning"];
        TitlePopupInfo = Lang["TitlePopupInfo"];
    }
    #endregion

    #region Component Lifecycle
    /// <summary>
    /// Invoked once, after OnInit is finished.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        formContext = new EditContext(reportData);
        /*Load Reservation*/
        reservationlst = new List<ReservationData>();
        reservationlst = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
        reservationlst.Insert(0,new ReservationData());
        reportData.ReservationStart = reservationlst.First();
        reportData.ReservationEnd = reservationlst.First();
        reportData.DeliveryDate = DateTime.Today;
        reportData.ReceiptNumberFrom = "0";
        reportData.ReceiptNumberTo = "2147483647";
        /*Load Departure Office*/
        departureofficelst = new List<DepartureOfficeData>();
        departureofficelst= await TPM_EigyosDataService.GetAllBranchData(Common.TenantID);
        departureofficelst.Insert(0,new DepartureOfficeData());
        reportData.DepartureOffice = departureofficelst.First();
        /*Load Output Data*/
        outputorderlst = new List<OutputOrderData>();
        outputorderlst = OutputOrderListData.OutputOrderlst;
        reportData.OutputOrder = OutputOrderListData.OutputOrderlst.First();
        await Load();
    }
    #endregion

    async Task Load()
    {
        if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(Date) &&!string.IsNullOrEmpty(Mode) && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()))
        {
            DateTime dateTimeConvert;
            try
            {
                dateTimeConvert = DateTime.ParseExact(Date, "yyyyMMdd", new CultureInfo("ja-JP"));
                reportData.DeliveryDate = dateTimeConvert;
                deliveryDate = dateTimeConvert;
                if(Mode=="1")
                {
                    reportData.OperationInstructions = true;
                    Checkedforop = true;
                    Checkedfordri = false;
                    reportData.CrewRecordBook = false;
                }
                else if(Mode=="2")
                {
                    reportData.OperationInstructions = false;
                    reportData.CrewRecordBook = true;
                    Checkedforop = false;
                    Checkedfordri = true;
                }
                else
                {

                }
                NavManager.NavigateTo("/OperatingInstructionReport",false);
                bool checkDataExist = false;
                checkDataExist = await checkDataExistInDb(reportData);
                if (checkDataExist)
                {
                    if (Option == OptionReport.Preview.ToString())//preview
                    {
                        OpenPopPreview = true;
                    }
                    else //download
                    {
                        if(Mode=="1")
                        {
                            await ExportReportAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportUnkoushijisho)}?" + reportData.Uri);
                        }
                        else if(Mode=="2")
                        {
                            await ExportReportdriAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokubo)}?" + reportData.Uri);
                        }
                        else
                        {

                        }

                    }
                }
                else
                {
                    PopupCheckData = true;
                }
            }
            catch
            {
                PopupCheckData = true;
            }
        }
        else if(!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(BookingID) && !string.IsNullOrEmpty(TeiDanNo)  && !string.IsNullOrEmpty(UnkRen)  && !string.IsNullOrEmpty(BunkRen) && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()))
        {
            try
            {
                reportData.DeliveryDate = new DateTime();
                reportData.ReceiptNumberFrom = BookingID.Substring(5,10);
                ReceiptNumberFrom=int.Parse(BookingID.Substring(5,10));
                reportData.ReceiptNumberTo = BookingID.Substring(5,10);
                ReceiptNumberTo=int.Parse(BookingID.Substring(5,10));
                reportData.TeiDanNo = int.Parse(TeiDanNo);
                reportData.UnkRen = int.Parse(UnkRen);
                reportData.BunkRen = int.Parse(BunkRen);
                if(Mode=="1")
                {
                    reportData.OperationInstructions = true;
                    Checkedforop = true;
                    Checkedfordri = false;
                    reportData.CrewRecordBook = false;
                }
                else if(Mode=="2")
                {
                    reportData.OperationInstructions = false;
                    reportData.CrewRecordBook = true;
                    Checkedforop = false;
                    Checkedfordri = true;
                }
                else
                {

                }
                NavManager.NavigateTo("/OperatingInstructionReport",false);
                bool checkDataExist = false;
                checkDataExist = await checkDataExistInDb(reportData);
                if (checkDataExist)
                {
                    if (Option == OptionReport.Preview.ToString())//preview
                    {
                        OpenPopPreview = true;
                    }
                    else //download
                    {
                        if(Mode=="1")
                        {
                            await ExportReportAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportUnkoushijisho)}?" + reportData.Uri);
                        }
                        else if(Mode=="2")
                        {
                            await ExportReportdriAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokubo)}?" + reportData.Uri);
                        }
                        else
                        {

                        }

                    }
                }
                else
                {
                    PopupCheckData = true;
                }
            }
            catch
            {
                PopupCheckData = true;
            }
        }
        else
        {

        }
    }
    #region Value changed methods
    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnReceiptNumberFromChange(string newValue)
    {
        int bookingfromParse;
        bool checkParse = Int32.TryParse(newValue, out bookingfromParse);
        if (checkParse)
        {
            ReceiptNumberFrom = int.Parse(newValue);
            reportData.ReceiptNumberFrom = newValue;
        }
        else
        {
            ReceiptNumberFrom = 0;
            reportData.ReceiptNumberFrom = "0";
        }

        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnReceiptNumberToChange(string newValue)
    {
        int bookingtoParse;
        bool checkParse = Int32.TryParse(newValue, out bookingtoParse);
        if (checkParse)
        {
            ReceiptNumberTo = int.Parse(newValue);
            reportData.ReceiptNumberTo = newValue;
        }
        else
        {
            ReceiptNumberTo = 2147483647;
            reportData.ReceiptNumberTo = "2147483647";
        }

        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="reservation"></param>
    void OnReservationStartChanged(ReservationData reservation)
    {
        reportData.ReservationStart = reservation;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="reservation"></param>
    void OnReservationEndChanged(ReservationData reservation)
    {
        reportData.ReservationEnd = reservation;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    void OnDeliveryDateChanged(DateTime newDate)
    {
        deliveryDate = newDate;
        reportData.DeliveryDate = newDate;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="departureOffice"></param>
    void OnDepartureOfficeChanged(DepartureOfficeData departureOffice)
    {
        reportData.DepartureOffice = departureOffice;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="order"></param>
    void OnOutputOrderChanged(OutputOrderData order)
    {
        reportData.OutputOrder = order;
        InvokeAsync(StateHasChanged);
    }
    #endregion


    void CheckedopChanged(bool value)
    {
        reportData.OperationInstructions = value;
        Checkedforop = value;
        InvokeAsync(StateHasChanged);
    }
    void CheckedCrewChanged(bool value)
    {
        reportData.CrewRecordBook = value;
        Checkedfordri = value;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    private void HandleValidSubmit()
    {
        // To do
    }

    async Task ExportReportAsPdf( string uri)
    {

        var report = new HassyaAllrightCloud.Reports.ReportFactory.ReportUnkoushijishoCreator("ReportUnkoushijisho", "Report Unkoushijisho").GetReport().
            CreateByUrl(uri);
        await new System.Threading.Tasks.TaskFactory().StartNew(() =>
        {
            string fileType = "";
            report.CreateDocument();
            using (MemoryStream ms = new MemoryStream())
            {

                fileType = "pdf";
                report.ExportToPdf(ms);
                byte[] exportedFileBytes = ms.ToArray();
                string myExportString = Convert.ToBase64String(exportedFileBytes);
                JSRuntime.InvokeVoidAsync("loadPageScript", "OperatingInstructionReport", "downloadFileOperatingInstructionReport", myExportString, fileType);
            }

        });
    }
    async Task ExportReportdriAsPdf( string uri)
    {

        var report = new HassyaAllrightCloud.Reports.ReportFactory.ReportJomukirokuboCreator("ReportJomukirokubo", "Report Jomukirokubo").GetReport().
            CreateByUrl(uri);
        await new System.Threading.Tasks.TaskFactory().StartNew(() =>
        {
            string fileType = "";
            report.CreateDocument();
            using (MemoryStream ms = new MemoryStream())
            {

                fileType = "pdf";
                report.ExportToPdf(ms);
                byte[] exportedFileBytes = ms.ToArray();
                string myExportString = Convert.ToBase64String(exportedFileBytes);
                JSRuntime.InvokeVoidAsync("loadPageScript", "JomukirokuboReport", "downloadFileOperatingInstructionReport", myExportString, fileType);
            }

        });
    }
    async void DownLoadReport()
    {
        bool checkDataExist = false;
        checkDataExist = await checkDataExistInDb(reportData);
        if (checkDataExist)
        {
            if(reportData.OperationInstructions==true && reportData.CrewRecordBook==false)
            {
                await ExportReportAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportUnkoushijisho)}?" + reportData.Uri);
            }
            else if(reportData.OperationInstructions==false && reportData.CrewRecordBook==true)
            {
                await ExportReportdriAsPdf($"{nameof(HassyaAllrightCloud.Reports.ReportFactory.ReportTenkokiroku)}?" + reportData.Uri);
            }
            else
            {

            }

        }
        else
        {
            PopupCheckData = true;
        }
    }
    async Task<bool> checkDataExistInDb(OperatingInstructionReportData operatingInstructionReportData)
    {
        int count = await UnkoushijishoReportService.GetInfoMainReport(operatingInstructionReportData);
        if (count==0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    async void OpenPopupPreview()
    {

        bool checkDataExist = false;
        checkDataExist = await checkDataExistInDb(reportData);
        if (checkDataExist)
        {
            OpenPopPreview = true;
        }
        else
        {
            PopupCheckData = true;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUnkoushijishoReportService UnkoushijishoReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<OperatingInstructionReport> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
