#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "108179aaf3e3a6f0b64f6a246958b636e25f7938"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
using DevExpress.XtraPrinting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/buscoordination")]
    public partial class BusCoordination : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 212 "E:\Project\HassyaAllrightCloud\Pages\BusCoordination.razor"
       
    [Parameter]
    public string Option { get; set; }
    [Parameter]
    public string UnkobiDate { get; set; }
    [Parameter]
    public string Ukeno { get; set; }

    EditContext formContext;
    BusCoordinationSearchParam report = new BusCoordinationSearchParam();
    DateTime startdate = DateTime.Today;
    DateTime enddate = DateTime.Today;
    List<ReservationData> reservationlst = new List<ReservationData>();
    List<LoadCustomerList> customerlst = new List<LoadCustomerList>();
    List<SupplierData> supplierlst = new List<SupplierData>();
    List<LoadServiceOffice> salebranchlst = new List<LoadServiceOffice>();
    List<LoadStaffList> stafflst = new List<LoadStaffList>();
    ReservationData allreservation = new ReservationData();
    LoadCustomerList allCustomer = new LoadCustomerList();
    LoadServiceOffice allBranch = new LoadServiceOffice();
    LoadStaffList allStaff = new LoadStaffList();

    bool CheckSelectedReservationEndAll = true;
    bool CheckSelectedCustomerEndAll = true;
    bool CheckSelectedSupplierEndAll = true;
    bool CheckSelectedCustomer01EndAll = true;
    bool checkNullItem = false;
    int datetype { get; set; }
    int bookingFrom { get; set; } = 0;
    int bookingTo { get; set; } = 2147483647;
    string baseUrl;
    List<string> emptyItemMessage = new List<string>();
    string EmptyBookingTypeMessage = "";
    string EmptyCustomerMessage = "";
    string EmptySaleBranchMessage = "";
    string EmptyStaffMessage = "";
    string TitlePopupInfo = "";
    string TitlePopupViewer = "";
    string MessageCheckDataExist = "";
    bool PopupCheckData { get; set; } = false;
    bool OpenPopPreview = false;
    string searchString = "";

    #region string LocalizationInit
    string PageTitleReport;
    string DateType;
    string DispatchDate;
    string ArrivalDate;
    string ReceptionDate;
    string Date;
    string BookingCategory;
    string Customer;
    string Supplier;
    string ReceptionOffice;
    string ReceiptNumber;
    string SalesRepresentative;
    string PersonInput;
    string Preview;
    string Export;
    private void LocalizationInit()
    {
        PageTitleReport = Lang["PageTitleReport"];
        DateType = Lang["date_setting"];
        DispatchDate = Lang["dispatch_date"];
        ArrivalDate = Lang["arrival_date"];
        ReceptionDate = Lang["reception_date"];
        Date = Lang["date"];
        BookingCategory = Lang["booking_category"];
        Customer = Lang["customer"];
        Supplier = Lang["supplier"];
        ReceptionOffice = Lang["reception_office"];
        ReceiptNumber = Lang["receipt_number"];
        SalesRepresentative = Lang["sales_representative"];
        PersonInput = Lang["person_input"];
        Preview = Lang["btn_preview"];
        Export = Lang["btn_export"];
        EmptyBookingTypeMessage = Lang["BI_T006"];
        EmptyCustomerMessage = Lang["BI_T007"];
        EmptySaleBranchMessage = Lang["BI_T008"];
        EmptyStaffMessage = Lang["BI_T008"];
        MessageCheckDataExist = Lang["BI_T007"];
        TitlePopupInfo = Lang["TitlePopupInfo"];
        TitlePopupViewer = Lang["TitlePopupViewer"];
    }
    #endregion

    #region Component Lifecycle
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        formContext = new EditContext(report);
        datetype = (int)DateTypeContract.Dispatch;
        reservationlst = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
        if (reservationlst == null)
        {
            reservationlst = new List<ReservationData>();
            //reservationlst.Add(new ReservationData {YoyaKbnSeq=-1 });
        }
        else
        {
            reservationlst.Insert(0, allreservation);
        }
        customerlst = CustomerListService.GetCustomerByDateReport(Commons.Constants.Common.TenantID, startdate.ToString("yyMMdd"));
        if (customerlst == null)
        {
            customerlst = new List<LoadCustomerList>();
        }
        else
        {
            customerlst.Insert(0, allCustomer);
        }
        salebranchlst = await ServiceOfficeService.GetBranchReport(Common.TenantID);
        if (salebranchlst == null)
        {
            salebranchlst = new List<LoadServiceOffice>();
        }
        else
        {
            salebranchlst.Insert(0, allBranch);
        }
        stafflst = await StaffListService.GetStaffReport(Common.TenantID, startdate.ToString("yyMMdd"));
        if (stafflst == null)
        {
            stafflst = new List<LoadStaffList>();
        }
        else
        {
            stafflst.Insert(0, allStaff);
        }
        CheckDataNullFromService();
        await Load();
    }
    async Task Load()
    {
        if (emptyItemMessage.Count > 0) checkNullItem = true;
        report.DateType = datetype;
        report.StartDate = startdate;
        report.EndDate = enddate;
        if (reservationlst.Count >= 1)
        {
            report.ReservationStart = reservationlst.First();
            report.ReservationEnd = reservationlst.First();
        }
        if (customerlst.Count >= 1)
        {
            report.CustomerStart = customerlst.First();
            report.CustomerEnd = customerlst.First();
            report.CustomerStart01 = customerlst.First();
            report.CustomerEnd01 = customerlst.First();
        }
        if (salebranchlst.Count >= 1)
        {
            report.SaleBranch = salebranchlst.First();
        }
        if (stafflst.Count >= 1)
        {
            report.Staff = stafflst.First();
            report.PersonInput = stafflst.First();
        }
        if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(UnkobiDate) && !string.IsNullOrEmpty(Ukeno)
            && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()))
        {
            DateTime dateTimeConvert;
            try
            {
                dateTimeConvert = DateTime.ParseExact(UnkobiDate, "yyyyMMdd", new CultureInfo("ja-JP"));
                report.StartDate = dateTimeConvert;
                report.EndDate = dateTimeConvert;
                report.BookingFrom = Ukeno;
                report.BookingTo = Ukeno;
                startdate = dateTimeConvert;
                enddate = dateTimeConvert;
                bookingFrom = int.Parse(Ukeno);
                bookingTo = int.Parse(Ukeno);
                NavManager.NavigateTo("/buscoordination", false);
                bool checkDataExist = false;
                checkDataExist = await BusCoordinationReportService.CheckExistDataReport(report);
                if (checkDataExist)
                {
                    if (Option == OptionReport.Preview.ToString())//preview
                    {
                        OnExportPdf(0);
                    }
                    else //download
                    {
                        OnExportPdf(1);
                    }
                }
                else
                {
                    PopupCheckData = true;
                }
            }
            catch
            {
                PopupCheckData = true;
            }
        }
        else
        {

        }
    }
    #endregion
    //check data null
    void CheckDataNullFromService()
    {
        if (reservationlst.Count == 0 || reservationlst == null)
        {
            emptyItemMessage.Add(EmptyBookingTypeMessage);
        }
        if (customerlst.Count == 0 || customerlst == null)
        {
            emptyItemMessage.Add(EmptyCustomerMessage);
        }
        if (salebranchlst.Count == 0 || salebranchlst == null)
        {
            emptyItemMessage.Add(EmptySaleBranchMessage);
        }
        if (stafflst.Count == 0 || stafflst == null)
        {
            emptyItemMessage.Add(EmptyStaffMessage);
        }
    }
    #region value changed method
    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    async void OnStartDateChanged(DateTime newDate)
    {
        startdate = newDate;
        report.StartDate = newDate;
        customerlst.Insert(0, allCustomer);
        report.CustomerStart = customerlst.First();
        report.CustomerEnd = customerlst.First();
        report.CustomerStart01 = customerlst.First();
        report.CustomerEnd01 = customerlst.First();
        report.Staff = stafflst.First();
        report.PersonInput = stafflst.First();
        formContext.Validate();
        customerlst = CustomerListService.GetCustomerByDateReport(Commons.Constants.Common.TenantID, report.StartDate.ToString("yyMMdd"));
        stafflst = await StaffListService.GetStaffReport(Common.TenantID, report.StartDate.ToString("yyMMdd"));
        customerlst.Insert(0, allCustomer);
        stafflst.Insert(0, allStaff);
        CheckSelectedCustomer01EndAll = true;
        CheckSelectedCustomerEndAll = true;
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    void OnEndDateChanged(DateTime newDate)
    {
        enddate = newDate;
        report.EndDate = newDate;
        formContext.Validate();
        StateHasChanged();
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="reservation"></param>
    void OnReservationStartChanged(ReservationData reservation)
    {
        if (reservation.YoyaKbnSeq == 0)
        {
            report.ReservationStart = reservation ?? new ReservationData();
            report.ReservationEnd = reservation ?? new ReservationData();
            CheckSelectedReservationEndAll = true;
        }
        else
        {
            CheckSelectedReservationEndAll = false;
            report.ReservationStart = reservation ?? new ReservationData();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="reservation"></param>
    void OnReservationEndChanged(ReservationData reservation)
    {
        if (reservation.YoyaKbnSeq == 0)
        {
            report.ReservationStart = reservation ?? new ReservationData();
            report.ReservationEnd = reservation ?? new ReservationData();
            CheckSelectedReservationEndAll = true;
        }
        else
        {
            CheckSelectedReservationEndAll = false;
            report.ReservationEnd = reservation ?? new ReservationData();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnCustomerStartChanged(LoadCustomerList e)
    {
        if (e.TokuiSeq == -1)
        {
            report.CustomerStart = e ?? new LoadCustomerList();
            report.CustomerEnd = e ?? new LoadCustomerList();
            CheckSelectedCustomerEndAll = true;
        }
        else
        {
            CheckSelectedCustomerEndAll = false;
            report.CustomerStart = e ?? new LoadCustomerList();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnCustomerEndChanged(LoadCustomerList e)
    {
        if (e.TokuiSeq == -1)
        {
            report.CustomerStart = e ?? new LoadCustomerList();
            report.CustomerEnd = e ?? new LoadCustomerList();
            CheckSelectedCustomerEndAll = true;
        }
        else
        {
            CheckSelectedCustomerEndAll = false;
            report.CustomerEnd = e ?? new LoadCustomerList();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }

    ///01
    void OnCustomerStartChanged01(LoadCustomerList e)
    {

        if (e.TokuiSeq == -1)
        {
            report.CustomerStart01 = e ?? new LoadCustomerList();
            report.CustomerEnd01 = e ?? new LoadCustomerList();
            CheckSelectedCustomer01EndAll = true;
        }
        else
        {
            CheckSelectedCustomer01EndAll = false;
            report.CustomerStart01 = e ?? new LoadCustomerList();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnCustomerEndChanged01(LoadCustomerList e)
    {

        if (e.TokuiSeq == -1)
        {
            report.CustomerStart01 = e ?? new LoadCustomerList();
            report.CustomerEnd01 = e ?? new LoadCustomerList();
            CheckSelectedCustomer01EndAll = true;
        }
        else
        {
            CheckSelectedCustomer01EndAll = false;
            report.CustomerEnd01 = e ?? new LoadCustomerList();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnBookingFromChange(string newValue)
    {
        int bookingfromParse;
        bool checkParse = Int32.TryParse(newValue, out bookingfromParse);
        if (checkParse)
        {
            bookingFrom = int.Parse(newValue);
            report.BookingFrom = newValue;
        }
        else
        {
            bookingFrom = 0;
            report.BookingFrom = "0";
        }
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnBookingToChange(string newValue)
    {
        int bookingToParse;
        bool checkParse = Int32.TryParse(newValue, out bookingToParse);
        if (checkParse)
        {
            bookingTo = int.Parse(newValue);
            report.BookingTo = newValue;
        }
        else
        {
            bookingTo = 2147483647;
            report.BookingTo = "2147483647";
        }
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickDateType(MouseEventArgs e, int number)
    {
        datetype = number;
        report.DateType = number;
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnSaleBranchChanged(LoadServiceOffice e)
    {
        report.SaleBranch = e ?? new LoadServiceOffice();
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnStaffChanged(LoadStaffList e)
    {
        report.Staff = e ?? new LoadStaffList();
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnPersonInputChanged(LoadStaffList e)
    {
        report.PersonInput = e ?? new LoadStaffList();
        formContext.Validate();
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    private void OnHandleValidSubmit()
    {
        bool isValid = formContext.Validate();
        if (isValid)
        {
            try
            {
                var client = new HttpClient();
            }
            catch
            {
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    async void OpenPopupPreview()
    {
        if (formContext.Validate())
        {
           
            bool checkDataExistInDB = await BusCoordinationReportService.CheckExistDataReport(report);
            if (checkDataExistInDB)
            {

                OnExportPdf(0);
            }
            else
            {
                PopupCheckData = true;
            }
        }
    }
    /// <summary>
    ///
    /// </summary>
    async void DownLoadReport()
    {
        if (formContext.Validate())
        {
            bool checkDataExistInDB = await BusCoordinationReportService.CheckExistDataReport(report);
            if (checkDataExistInDB)
            {
                OnExportPdf(1);
            }
            else
            {
                PopupCheckData = true;
            }
        }
    }
    private async Task OnExportPdf(byte type)
    {
        if (type == 0)
        {
            searchString = EncryptHelper.Encrypt(report);
            OpenPopPreview = true;
        }
        else
        {
            var data = await BusCoordinationReportService.GetPDFData(report);
            if (data.Count > 0)
            {
                var report = new Reports.ReportTemplate.Busutehaisyo.Busutehaisyo();
                report.DataSource = data;
                await new System.Threading.Tasks.TaskFactory().StartNew(() =>
                {
                    report.CreateDocument();
                    using (MemoryStream ms = new MemoryStream())
                    {
                        /*if (type == 1)
                        {
                            PrintToolBase tool = new PrintToolBase(report.PrintingSystem);
                            tool.Print();
                            return;
                        }*/
                        report.ExportToPdf(ms);
                        byte[] exportedFileBytes = ms.ToArray();
                        string myExportString = Convert.ToBase64String(exportedFileBytes);
                        JSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", "Busutehaisyo");
                    }
                });
            }
        }
    }

    #endregion
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 10);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusCoordinationReportService BusCoordinationReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStaffListService StaffListService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IServiceOfficeService ServiceOfficeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerListService CustomerListService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BusCoordination> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
