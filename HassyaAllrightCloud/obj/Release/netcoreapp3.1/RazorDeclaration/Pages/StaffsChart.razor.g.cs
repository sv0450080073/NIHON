#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\StaffsChart.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e77065499471f17ca181270c3227ed733a20ca67"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\Pages\StaffsChart.razor"
using HassyaAllrightCloud.Pages.Components.StaffsChart;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\Pages\StaffsChart.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
    public partial class StaffsChart : OwningComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 585 "E:\Project\HassyaAllrightCloud\Pages\StaffsChart.razor"
       
    public ConfigStaffsChart Param;
    DateTime Date { get; set; } = DateTime.Today.AddDays(-2);
    bool isLoading { get; set; } = true;
    bool checkCompanyAll { get; set; } = true;
    bool checkBranchAll { get; set; } = true;
    bool DriverChecked { get; set; } = true;
    bool GuideChecked { get; set; } = true;
    bool flagShowClass = false;
    bool PopupCommentDate { get; set; } = false;
    bool Ischecktext { get; set; } = false;
    public double w { get; set; }
    public double Width { get; set; }
    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    string showSelectedCompanies { get; set; }
    string showSelectedBranches { get; set; }
    string commentdate { get; set; }
    string datecommentpopup { get; set; }
    string showClass => flagShowClass ? null : "d-none";
    string disableClass => flagShowClass ? "disabled" : null;

    private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
    private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
    private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
    private ITPM_CalendDataListService TPM_CalendDataService { get; set; }

    TimeSpan departureTimeStart;
    TimeSpan departureTimeEnd;
    TimeSpan arrivalTimeStart;
    TimeSpan arrivalTimeEnd;
    TimeSpan deliveryTimeStart;
    TimeSpan deliveryTimeEnd;
    TimeSpan returnTimeStart;
    TimeSpan returnTimeEnd;
    List<StaffData> lstStaffsNames = new List<StaffData>();
    List<StaffData> lstStaffsNamesUnassigned = new List<StaffData>();
    List<ItemStaff> lstStaffsLines = new List<ItemStaff>();
    List<BranchChartData> tmpbranchchart = new List<BranchChartData>();
    List<CompanyChartData> tmpcompanychart = new List<CompanyChartData>();
    List<BranchChartData> branchchart;
    List<CompanyChartData> companychart;
    List<ReservationData> reservation;
    List<int> comlst = new List<int>();
    List<int> branchlst = new List<int>();
    List<TkdCalend> listdatecomment = new List<TkdCalend>();
    IEnumerable<CompanyChartData> lstStaffCompany = new List<CompanyChartData>();
    IEnumerable<BranchChartData> lstStaffsBranch = new List<BranchChartData>();
    IEnumerable<CompanyChartData> SelectedCompanyItems { get; set; }
    IEnumerable<BranchChartData> SelectedBranchItems { get; set; }
    BranchChartData allbranch = new BranchChartData();
    BranchChartData currentbranchto = new BranchChartData();
    BranchChartData currentbranchfrom = new BranchChartData();
    CompanyChartData allcompany = new CompanyChartData();
    ReservationData currentReservation = new ReservationData();
    StaffsChartData.SearchData searchData = new StaffsChartData.SearchData();

    #region Component Lifecycle
    /// <summary>
    /// Invoked once, after OnInit is finished.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        TPM_YoyKbnDataService = ScopedServices.GetRequiredService<ITPM_YoyKbnDataListService>();
        TPM_CompnyDataService = ScopedServices.GetRequiredService<ITPM_CompnyDataListService>();
        TPM_EigyosDataService = ScopedServices.GetRequiredService<ITPM_EigyosDataListService>();

        isLoading = true;

        Param = new ConfigStaffsChart();
        Param.Type = (int)Staffs_Type.Normal;
        Param.Grouping = (int)GroupMode.All;
        Param.DisplayRange = (int)DayMode.ThreeDays;
        Param.TimeRange = (int)TimeMode.ThreeHours;
        Param.OrderbyList = (int)Staffs_OrderbyList.DutyEmployee;
        Param.OrderbyName = (int)Staffs_OrderbyName.DutyEmployee;
        Param.DisplayedCharacters = (int)DisplayLineMode.Custom;
        Param.DisplayedLineHeight = (int)ViewMode.Large;
        Param.BookingCategory = 0;
        Param.Duties = (int)Staffs_Duties.All;
        Param.Mode = (int)BusLineMode.View;
        Param.Number_of_days = 3;

        reservation = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
        reservation.Insert(0, new ReservationData() { YoyaKbnNm = "すべて" });
        companychart = await TPM_CompnyDataService.GetCompany(Common.TenantID);
        branchchart = new List<BranchChartData>();
        tmpcompanychart.Add(allcompany);
        tmpbranchchart.Add(allbranch);
        foreach (var i in companychart)
        {
            tmpcompanychart.Add(i);
            comlst.Add(i.CompanyCdSeq);
            List<BranchChartData> branchchartlst = new List<BranchChartData>();
            branchchartlst = await TPM_EigyosDataService.GetBranchbyCompany(i.CompanyCdSeq, Common.TenantID);
            branchchart.AddRange(branchchartlst);
        }
        foreach (var i in branchchart)
        {
            tmpbranchchart.Add(i);
            if (!branchlst.Contains(i.EigyoCdSeq))
            {
                branchlst.Add(i.EigyoCdSeq);
            }
        }
        SelectedCompanyItems = tmpcompanychart;
        SelectedBranchItems = tmpbranchchart;

        OnDisplayLstSelectedCompany();
        OnDisplayLstSelectedBranch();

        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Invoked after each render of the component.
    /// Called for the first time when the component is initialized - firstRender = true
    /// and then after every re-render - firstRender = false.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "setHeightTopbar");
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 4);
        if (firstRender)
        {
            w = (double)await BrowserResizeService.GetInnerWidth();
            setWidth();
            BrowserResizeService.OnResize += BrowserHasResized;
            await JSRuntime.InvokeAsync<object>("browserResize.registerResizeCallback");
            BrowserResizeService.OnCallbackWidth += BrowserHasCallbackWidth;
            await JSRuntime.InvokeAsync<object>("browserResize.registerWidthCallback");
        }
    }

    /// <summary>
    /// Load javascript of page
    /// </summary>
    /// <returns></returns>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage");
    }
    #endregion

    #region Date value changed methods
    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnDateChanged(DateTime newValue)
    {
        Date = newValue;
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnClick Button Today
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task TodayClick(MouseEventArgs e)
    {
        Date = DateTime.Today;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Previous Date
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task onPrevious(MouseEventArgs e)
    {
        Date = Date.AddDays(-1);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Next Date
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task onNext(MouseEventArgs e)
    {
        Date = Date.AddDays(1);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }
    #endregion

    #region Search Condition value changed methods
    /// <summary>
    /// Click select option display line
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickType(MouseEventArgs e, int number)
    {
        Param.Type = number;
    }

    /// <summary>
    /// Click select option grouping
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickGroup(MouseEventArgs e, int number)
    {
        Param.Grouping = number;
    }

    /// <summary>
    /// Click select option display range
    /// value 1 : 1day
    /// value 2 : 3days
    /// value 3 : 1week
    /// value 4 : 1month
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async Task OnClickDisplayRange(MouseEventArgs e, int number)
    {
        Param.DisplayRange = number;
        // default click 1day will choose 1hour
        if (number == (int)DayMode.OneDay)
        {
            Param.TimeRange = (int)TimeMode.OneHour;
            Param.Number_of_days = 1;
        }
        // default click 3days will choose 3hours
        if (number == (int)DayMode.ThreeDays)
        {
            Param.TimeRange = (int)TimeMode.ThreeHours;
            Param.Number_of_days = 3;
        }
        // default click 1week will choose 1day
        if (number == (int)DayMode.Week)
        {
            Param.TimeRange = (int)TimeMode.Day;
            Param.Number_of_days = 7;
        }
        // default click 1month will choose 1day
        if (number == (int)DayMode.Month)
        {
            Param.TimeRange = (int)TimeMode.Day;
            Param.Number_of_days = 31;
        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option time range
    /// value 0 : 15minute
    /// value 1 : 1hour
    /// value 2 : 3hours
    /// value 3 : 6hours
    /// value 4 : 1day
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async Task OnClickTimeRange(MouseEventArgs e, int number)
    {
        Param.TimeRange = number;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option order by List of Crew Member
    /// value 1 : order by duty-employee
    /// value 2 : order by branch-employee
    /// value 3 : order by branch-job
    /// value 4 : order by rolling
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickOrderByList(MouseEventArgs e, int number)
    {
        Param.OrderbyList = number;
    }

    /// <summary>
    /// Click select option order by Name Crew Members
    /// value 1 : order by duty-employee
    /// value 2 : order by branch-duty
    /// value 3 : order by branch-employee
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickOrderByName(MouseEventArgs e, int number)
    {
        Param.OrderbyName = number;
    }

    /// <summary>
    /// Click select option displayed characters
    /// value 1 : switch to Custom
    /// value 2 : switch to Organization Name
    /// value 4 : switch to Customer
    /// value 5 : switch to None
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickDisplayedCharacters(MouseEventArgs e, int number)
    {
        Param.DisplayedCharacters = number;
    }

    /// <summary>
    /// Click select option duties
    /// value 1 : all
    /// value 2 : driver
    /// value 3 : guide
    /// value 4 : office work
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickDuties(MouseEventArgs e, int number)
    {
        Param.Duties = number;
    }

    /// <summary>
    /// Click select option displayed line height
    /// value 1 : switch to Large
    /// value 2 : switch to Medium
    /// value 3 : switch to Small
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    void OnClickDisplayedLineHeight(MouseEventArgs e, int number)
    {
        Param.DisplayedLineHeight = number;
    }

    /// <summary>
    /// Click select booking category
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async Task OnClickBookingCategory(MouseEventArgs e, int number)
    {
        Param.BookingCategory = number;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Select Option Company Item
    /// </summary>
    /// <param name="selectedCompanyItems"></param>
    void OnSelectedCompanyItemsChanged(IEnumerable<CompanyChartData> selectedCompanyItems)
    {
        SelectedCompanyItems = selectedCompanyItems;
        if (checkCompanyAll == true && !SelectedCompanyItems.Contains(allcompany))
        {
            SelectedCompanyItems = SelectedCompanyItems.Take(0);
            checkCompanyAll = false;
        }
        if (checkCompanyAll == false && SelectedCompanyItems.Contains(allcompany))
        {
            SelectedCompanyItems = tmpcompanychart;
            checkCompanyAll = true;
        }
        if (checkCompanyAll == true && SelectedCompanyItems.Contains(allcompany) && SelectedCompanyItems.Count() < tmpcompanychart.Count())
        {
            SelectedCompanyItems = SelectedCompanyItems.Where(t => t.CompanyCdSeq != allcompany.CompanyCdSeq);
            checkCompanyAll = false;
        }
        if (checkCompanyAll == false && !SelectedCompanyItems.Contains(allcompany) && SelectedCompanyItems.Count() == tmpcompanychart.Count() - 1)
        {
            SelectedCompanyItems = tmpcompanychart;
            checkCompanyAll = true;
        }
        List<BranchChartData> tmp = new List<BranchChartData>();
        List<BranchChartData> branch = new List<BranchChartData>();
        tmp.Clear();
        foreach (var i in SelectedCompanyItems)
        {
            branch = tmpbranchchart.Where(t => t.CompanyCdSeq == i.CompanyCdSeq).ToList();
            foreach (var item in branch)
            {
                tmp.Add(item);
            }
        }
        if (checkBranchAll == false && !SelectedBranchItems.Contains(allbranch) && tmp.Count() == tmpbranchchart.Count() - 1)
        {
            SelectedBranchItems = tmpbranchchart;
            checkBranchAll = true;
        }
        else
        {
            SelectedBranchItems = tmp.Take(tmp.Count());
        }
        OnDisplayLstSelectedCompany();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Select Option Branch Item
    /// </summary>
    /// <param name="selectedBranchItems"></param>
    void OnSelectedBranchItemsChanged(IEnumerable<BranchChartData> selectedBranchItems)
    {
        SelectedBranchItems = selectedBranchItems;
        if (checkBranchAll == true && !SelectedBranchItems.Contains(allbranch))
        {
            SelectedBranchItems = SelectedBranchItems.Take(0);
            checkBranchAll = false;
        }
        if (checkBranchAll == false && SelectedBranchItems.Contains(allbranch))
        {
            SelectedBranchItems = tmpbranchchart;
            SelectedCompanyItems = tmpcompanychart;
            checkCompanyAll = true;
            checkBranchAll = true;
        }
        if (checkBranchAll == true && SelectedBranchItems.Contains(allbranch) && SelectedBranchItems.Count() < tmpbranchchart.Count())
        {
            SelectedBranchItems = SelectedBranchItems.Where(t => t.EigyoCdSeq != allbranch.EigyoCdSeq);
            checkBranchAll = false;
        }
        if (checkBranchAll == false && !SelectedBranchItems.Contains(allbranch) && SelectedBranchItems.Count() == tmpbranchchart.Count() - 1)
        {
            SelectedBranchItems = tmpbranchchart;
            checkBranchAll = true;
        }
        OnDisplayLstSelectedBranch();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Display text when click select item in company combobox
    /// No selected item : display 選択項目：0
    /// Selected 1 item: display CompanyNm
    /// Selected more than 1 item: display 選択項目：{number_item}
    /// Selected all: display すべて
    /// </summary>
    void OnDisplayLstSelectedCompany()
    {
        if (SelectedCompanyItems.Count() == 0)
        {
            showSelectedCompanies = "選択項目：0";
        }
        else if (SelectedCompanyItems.Count() == 1)
        {
            foreach (var item in SelectedCompanyItems)
            {
                showSelectedCompanies = item.RyakuNm;
            }
        }
        else if (SelectedCompanyItems.Count() > 1 && SelectedCompanyItems.Count() < tmpcompanychart.Count())
        {
            showSelectedCompanies = "選択項目：" + SelectedCompanyItems.Count().ToString();
        }
        else if (SelectedCompanyItems.Count() == tmpcompanychart.Count())
        {
            showSelectedCompanies = "すべて";
        }
    }

    /// <summary>
    /// Display text when click select item in company combobox
    /// No selected item : display 選択項目：0
    /// Selected 1 item: display RyakuNm
    /// Selected more than 1 item: display 選択項目：{number_item}
    /// Selected all: display すべて
    /// </summary>
    void OnDisplayLstSelectedBranch()
    {
        if (SelectedBranchItems.Count() == 0)
        {
            showSelectedBranches = "選択項目：0";
        }
        else if (SelectedBranchItems.Count() == 1)
        {
            foreach (var item in SelectedBranchItems)
            {
                showSelectedBranches = item.RyakuNm;
            }
        }
        else if (SelectedBranchItems.Count() < tmpbranchchart.Count())
        {
            showSelectedBranches = "選択項目：" + SelectedBranchItems.Count().ToString();
        }
        else if (SelectedBranchItems.Count() == tmpbranchchart.Count())
        {
            showSelectedBranches = "すべて";
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItem"></param>
    void OnSelectedReservationChanged(ReservationData selectedItem)
    {
        currentReservation = selectedItem;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItem"></param>
    void OnSelectedOfficeFromChanged(BranchChartData selectedItem)
    {
        currentbranchfrom = selectedItem;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItem"></param>
    void OnSelectedOfficeToChanged(BranchChartData selectedItem)
    {
        currentbranchto = selectedItem;
        StateHasChanged();
    }

    /// <summary>
    /// On Change Departure Time Start
    /// </summary>
    /// <param name="time"></param>
    void OnDepartureTimeStartChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out departureTimeStart);
            searchData.DepartureTimeStart = departureTimeStart.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out departureTimeStart);
            searchData.DepartureTimeStart = departureTimeStart.ToString("hhmm");
        }
        StateHasChanged();
    }

    /// <summary>
    /// On Change Departure Time End
    /// </summary>
    /// <param name="time"></param>
    void OnDepartureTimeEndChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out departureTimeEnd);
            searchData.DepartureTimeEnd = departureTimeEnd.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out departureTimeStart);
            searchData.DepartureTimeEnd = departureTimeEnd.ToString("hhmm");
        }
        StateHasChanged();
    }

    /// <summary>
    /// On Change Arrival Time Start
    /// </summary>
    /// <param name="time"></param>
    void OnArrivalTimeStartChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out arrivalTimeStart);
            searchData.ArrivalTimeStart = arrivalTimeStart.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out arrivalTimeStart);
            searchData.ArrivalTimeStart = arrivalTimeStart.ToString("hhmm");
        }
        StateHasChanged();
    }

    /// <summary>
    /// On Change Arrival Time End
    /// </summary>
    /// <param name="time"></param>
    void OnArrivalTimeEndChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out arrivalTimeEnd);
            searchData.ArrivalTimeEnd = arrivalTimeEnd.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out arrivalTimeEnd);
            searchData.ArrivalTimeEnd = arrivalTimeEnd.ToString("hhmm");
        }
        StateHasChanged();
    }

    /// <summary>
    /// On Change Delivery Time Start
    /// </summary>
    /// <param name="time"></param>
    void OnDeliveryTimeStartChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out deliveryTimeStart);
            searchData.DeliveryTimeStart = deliveryTimeStart.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out deliveryTimeStart);
            searchData.DeliveryTimeStart = deliveryTimeStart.ToString("hhmm");
        }
        StateHasChanged();
    }

    /// <summary>
    /// On Change Delivery Time End
    /// </summary>
    /// <param name="time"></param>
    void OnDeliveryTimeEndChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out deliveryTimeEnd);
            searchData.DeliveryTimeEnd = deliveryTimeEnd.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out deliveryTimeEnd);
            searchData.DeliveryTimeEnd = deliveryTimeEnd.ToString("hhmm");
        }
        StateHasChanged();
    }

    /// <summary>
    /// On Change Return Time Start
    /// </summary>
    /// <param name="time"></param>
    void OnReturnTimeStartChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out returnTimeStart);
            searchData.ReturnTimeStart = returnTimeStart.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out returnTimeStart);
            searchData.ReturnTimeStart = returnTimeStart.ToString("hhmm");
        }
        StateHasChanged();
    }

    /// <summary>
    /// On Change Return Time End
    /// </summary>
    /// <param name="time"></param>
    void OnReturnTimeEndChanged(BookingInputHelper.MyTime newTime)
    {
        string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
        string date = int.Parse(timeValue).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out returnTimeEnd);
            searchData.ReturnTimeEnd = returnTimeEnd.ToString("hhmm");
        }
        else
        {
            TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out returnTimeEnd);
            searchData.ReturnTimeEnd = returnTimeEnd.ToString("hhmm");
        }
        StateHasChanged();
    }
    #endregion

    #region General
    /// <summary>
    /// set width chart
    /// </summary>
    public void setWidth()
    {
        if (Param.DisplayRange != (int)DayMode.OneDay && Param.TimeRange == (int)TimeMode.Minute ||
            Param.DisplayRange < (int)DayMode.Week && Param.TimeRange == (int)TimeMode.Day)
        {
            Param.TimeRange = (int)TimeMode.OneHour;
        }
        if (Param.DisplayRange == (int)DayMode.OneDay && Param.TimeRange == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.DisplayRange == (int)DayMode.OneDay && Param.TimeRange != (int)TimeMode.Minute ||
            Param.DisplayRange == (int)DayMode.ThreeDays && Param.TimeRange > (int)TimeMode.OneHour ||
            Param.DisplayRange == (int)DayMode.Week && Param.TimeRange == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.DisplayRange == (int)DayMode.ThreeDays && Param.TimeRange == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.DisplayRange == (int)DayMode.Week && Param.TimeRange == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.DisplayRange == (int)DayMode.Week && Param.TimeRange == (int)TimeMode.ThreeHours ||
            Param.DisplayRange == (int)DayMode.Week && Param.TimeRange == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.DisplayRange == (int)DayMode.Month && Param.TimeRange == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.DisplayRange == (int)DayMode.Month && Param.TimeRange == (int)TimeMode.ThreeHours ||
            Param.DisplayRange == (int)DayMode.Month && Param.TimeRange == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.DisplayRange == (int)DayMode.Month && Param.TimeRange == (int)TimeMode.Day)
        {
            Width = Math.Round(w / 7 * 31);
        }
    }

    /// <summary>
    /// set number of date when selected display range
    /// </summary>
    public void setNumberOfDate()
    {
        if (Param.DisplayRange == (int)DayMode.OneDay)
        {
            Param.Number_of_days = 1;
        }
        else if (Param.DisplayRange == (int)DayMode.ThreeDays)
        {
            Param.Number_of_days = 3;
        }
        else if (Param.DisplayRange == (int)DayMode.Week)
        {
            Param.Number_of_days = 7;
        }
        else if (Param.DisplayRange == (int)DayMode.Month)
        {
            Param.Number_of_days = 31;
        }
    }

    /// <summary>
    /// Call when Browser Has Resized
    /// </summary>
    /// <returns></returns>
    private async Task BrowserHasResized()
    {
        w = (double)await BrowserResizeService.GetInnerWidth();
        setWidth();
        StateHasChanged();
    }

    /// <summary>
    /// Call when Browser Has Callback Width
    /// </summary>
    /// <returns></returns>
    private async Task BrowserHasCallbackWidth()
    {
        w = (double)await BrowserResizeService.GetCallbackInnerWidth();
        setWidth();
        StateHasChanged();
    }

    /// <summary>
    /// Dispose
    /// </summary>
    public void Dispose()
    {
        BrowserResizeService.OnResize -= BrowserHasResized;
        BrowserResizeService.OnCallbackWidth -= BrowserHasCallbackWidth;
    }

    /// <summary>
    /// reRender Chart
    /// </summary>
    /// <returns></returns>
    public async Task Loadpage()
    {
        try
        {
            await renderlstStaffsLines();
            await renderlstStaffsNames();
        }
        catch
        {
            //TODO use logger to log down exception ex.message
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task renderlstStaffsNames()
    {
        lstStaffsNames = new List<StaffData>() {
            new StaffData {
                StaffID = "17",
                SyainCdSeq = 2,
                SyokumuCdSeq = 1,
                SyokumuNm = "運転手",
                SyokumuKbn = 1,
                CodeKbnNm = null,
                TenkoNo = "0000000000",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "掛田携帯",
                SyainNm = "掛田携帯",
                StaYmd = "19930316",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "2",
                SyainCdSeq = 80,
                SyokumuCdSeq = 2,
                SyokumuNm = "契約運転手",
                SyokumuKbn = 2,
                CodeKbnNm = null,
                TenkoNo = "0000000071",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0000020001",
                SyainNm = "森本レオ",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "3",
                SyainCdSeq = 98,
                SyokumuCdSeq = 3,
                SyokumuNm = "ガイド",
                SyokumuKbn = 3,
                CodeKbnNm = null,
                TenkoNo = "0000000100",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0000030001",
                SyainNm = "鶴田真由",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "4",
                SyainCdSeq = 158,
                SyokumuCdSeq = 4,
                SyokumuNm = "契約ガイド",
                SyokumuKbn = 4,
                CodeKbnNm = null,
                TenkoNo = "0000000000",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0000040001",
                SyainNm = "石川さゆり",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "138",
                SyainCdSeq = 1,
                SyokumuCdSeq = 5,
                SyokumuNm = "内勤１",
                SyokumuKbn = 5,
                CodeKbnNm = null,
                TenkoNo = "0000000000",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0000000001",
                SyainNm = "工房太郎",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "1210",
                SyainCdSeq = 1210,
                SyokumuCdSeq = 6,
                SyokumuNm = "内勤２",
                SyokumuKbn = 5,
                CodeKbnNm = null,
                TenkoNo = "0000000000",
                EigyoCdSeq = 3,
                EigyoCd  = 3,
                RyakuNm = "予ｾﾝﾀｰ",
                SyainCd = "0000062129",
                SyainNm = "佐藤　智",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "184",
                SyainCdSeq = 186,
                SyokumuCdSeq = 7,
                SyokumuNm = "内勤３",
                SyokumuKbn = 5,
                CodeKbnNm = null,
                TenkoNo = "0000000000",
                EigyoCdSeq = 2,
                EigyoCd  = 2,
                RyakuNm = "関西",
                SyainCd = "0000070001",
                SyainNm = "坂本勝彦",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "147",
                SyainCdSeq = 194,
                SyokumuCdSeq = 8,
                SyokumuNm = "内勤４",
                SyokumuKbn = 5,
                CodeKbnNm = null,
                TenkoNo = "0000000000",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0000080001",
                SyainNm = "添乗員",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "191",
                SyainCdSeq = 196,
                SyokumuCdSeq = 9,
                SyokumuNm = "内勤５",
                SyokumuKbn = 5,
                CodeKbnNm = null,
                TenkoNo = "0000000000",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0000099998",
                SyainNm = "車掌",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
        };
        lstStaffsBranch = lstStaffsNames.GroupBy(n => new { n.EigyoCdSeq, n.RyakuNm }).Select(t => new BranchChartData { EigyoCdSeq = t.Key.EigyoCdSeq, RyakuNm = t.Key.RyakuNm });
        lstStaffCompany = lstStaffsNames.GroupBy(n => new { n.CompanyCdSeq, n.CompanyNm }).Select(t => new CompanyChartData { CompanyCdSeq = t.Key.CompanyCdSeq, CompanyNm = t.Key.CompanyNm });
        lstStaffsNamesUnassigned = new List<StaffData>()
        {
            new StaffData {
                StaffID = "5",
                SyainCdSeq = 5,
                SyokumuCdSeq = 1,
                SyokumuNm = "運転手",
                SyokumuKbn = 1,
                CodeKbnNm = null,
                TenkoNo = "0000000004",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0000010004",
                SyainNm = "田原俊彦",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "184",
                SyainCdSeq = 6,
                SyokumuCdSeq = 1,
                SyokumuNm = "運転手",
                SyokumuKbn = 1,
                CodeKbnNm = null,
                TenkoNo = "0000000005",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0000010005",
                SyainNm = "近藤真彦",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
            new StaffData {
                StaffID = "1220",
                SyainCdSeq = 1220,
                SyokumuCdSeq = 1,
                SyokumuNm = "運転手",
                SyokumuKbn = 1,
                CodeKbnNm = null,
                TenkoNo = "0000000000",
                EigyoCdSeq = 1,
                EigyoCd  = 1,
                RyakuNm = "工房",
                SyainCd = "0100000007",
                SyainNm = "工房　七郎",
                StaYmd = "19800101",
                EndYmd = "20791231",
                CompanyCdSeq = 1,
                CompanyCd = 1,
                CompanyNm = "株式会社工房",
            },
        };
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task renderlstStaffsLines()
    {
        lstStaffsLines = new List<ItemStaff>() {
            new ItemStaff{
                BookingId = "000010000008096",
                HaUnkRen = 1,
                TeiDanNo = 1,
                BunkRen = 1,
                HenKai = 1,
                Id = "01  ",
                UkeCd = 8096,
                BusLine = "17",
                StartDate = "20200819",
                TimeStart = int.Parse("0000"),
                EndDate = "20200821",
                TimeEnd = int.Parse("2359"),
                StartDateDefault = "20200819",
                EndDateDefault = "20200821",
                TimeStartDefault = int.Parse("0000"),
                TimeEndDefault = int.Parse("2359"),
                JyoSyaJin = 0,
                AllowEdit = true,
                ColorLine = "color-2",
                Status = 1,
                CCSStyle = "",
                Top = 0.3125,
                Height = 2,
                Name = "",
                Width = BusScheduleHelper.calwidth(Width, "20200819", "0000", "20200821", "2359", Param.Number_of_days),
                Left = BusScheduleHelper.calleft(Width, "20200819", "0000", Param.Number_of_days, Date),
                WidthDefault = BusScheduleHelper.calwidth(Width, "20200819", "0000", "20200821", "0000", Param.Number_of_days),
                LeftDefault = BusScheduleHelper.calleft(Width, "20200819", "0000", Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, "20200819", "0000", Param.Number_of_days, Date),
                DanTaNm = "",
                IkNm = "",
                TokuiNm = "三共戸田",
                NumberDriver = 1,
                NumberGuider = 0,
                Text = "<span style=\"color:Black\">ス０１１</span>　<span style=\"color:Black\"></span>　<span style=\"color:Red\">1</span>　<span style=\"color:Black\">関西</span>　<span style=\"color:Blue\">￥0</span>",
                MinDate = "20200819",
                MinTime = int.Parse("0000"),
                Maxdate = "20200821",
                MaxTime = int.Parse("2359"),
                HasYmd = "20200819",
                Zeiritsu = 10.0M,
                BookingType = 1,
                CodeKb_CodeKbn = "大型",
                KSKbn = 2,
                YouTblSeq = 0,
                SyaSyu_SyaSyuNm = "ｽｰﾊﾟｰﾊｲﾃﾞｯｶｰ",
                SyaSyu_SyaSyuNm_Haisha = "ｽｰﾊﾟｰﾊｲﾃﾞｯｶｰ",
                BusLineType = "0000100000080961",
                BusName = "ｽｰﾊﾟｰﾊｲﾃﾞｯｶｰ/大型",
                Tokisk_YouSRyakuNm = null,
                Tokisk_SitenCdSeq = 0,
                Tooltip = "<span style=\"color:Green\">指示書番号：0000008096-001-001-001</span><span style=\"color:Black\">号車：01  </span><span style=\"color:Black\">車種名：ｽｰﾊﾟｰﾊｲﾃﾞｯｶｰ</span><span style=\"color:Red\">配車時間（配車地名）：00:00（）</span><span style=\"color:Blue\">到着時間（到着地名）：23:59（）</span><span style=\"color:Black\">団体名 ：</span><span style=\"color:Black\">行き先名 ：</span><span style=\"color:Black\">車輌定員：50</span><span style=\"color:DarkSalmon\">金額(税抜)：￥0</span>",
                TokiSk_RyakuNm = "三共戸田",
                TokiSt_RyakuNm = "三共戸田",
                Shuri_ShuriTblSeq = 0,
                AllowDrop = true,
                SyaSyuRen = 1,
                BranchId = 0,
                CompanyId = 0,
                BunKSyuJyn = 1,
                CanBeDeleted = false,
                CanSimpledispatch = true,
            },
        };
    }
    #endregion

    #region Context Menu
    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public void ItemOnAppearingHandler(ItemAppearingEventArgs e)
    {
        // ToDo
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public void ItemClick(ItemClickEventArgs e)
    {
        // ToDo
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public async void ItemClickReport(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = baseUrl + "/attendanceconfirmreport";
        switch (e.MenuItem.Id)
        {
            case "previewReportTenkokiroku":
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Preview, Date);
                await JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadReportTenkokiroku":
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Download, Date);
                await JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    #endregion

    #region Button Action
    /// <summary>
    /// Change to mode Zoom
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnZoom(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.Zoom;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode Split
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnSplit(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.Cut;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode View
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnView(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode Edit
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnEdit(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.Edit;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode Reset
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnReset(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode Repair
    /// </summary>
    /// <param name="e"></param>
    private async Task OnRepair(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.Repair;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Open Popup Delete Staff Repair
    /// </summary>
    private void OpenPopupDeleteStaffRepair()
    {
    }

    /// <summary>
    /// Open Popup Update Staff Repair
    /// </summary>
    /// <returns></returns>
    private void OpenPopupUpdateStaffRepair()
    {
    }

    /// <summary>
    /// Open Zoom
    /// </summary>
    void OnCallBackZoom()
    {
    }

    /// <summary>
    /// Open Repair
    /// </summary>
    void OnCallBackRepair()
    {
    }

    /// <summary>
    /// Filter Company & Branch
    /// </summary>
    void OnFilterOffice()
    {
    }

    /// <summary>
    /// Show popup date comment
    /// </summary>
    /// <param name="newMessage"></param>
    void OpenPopupDateComment(string newMessage)
    {
        //datecommentpopup = newMessage;
        //commentdate = TPM_CalendDataService.Getdatabydate(1, 1, datecommentpopup) == null ? "" : TPM_CalendDataService.Getdatabydate(1, 1, datecommentpopup).CalenCom;
        //if (commentdate.Length > 100)
        //{
        //    commentdate = "";
        //}
        PopupCommentDate = true;
        StateHasChanged();
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>    
    private async Task UpdateDateComment(MouseEventArgs e)
    {
        bool check = TPM_CalendDataService.UpdateCommentDate(datecommentpopup, commentdate, 1, 1, 1);
        if (!check)
        {
            Ischecktext = true;
            StateHasChanged();
        }
        else
        {
            PopupCommentDate = false;
            Ischecktext = false;
            datecommentpopup = "";
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task CancelDateComment(MouseEventArgs e)
    {
        commentdate = "";
        PopupCommentDate = false;
        isLoading = true;
        Ischecktext = false;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BrowserResizeService BrowserResizeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper BusScheduleHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<StaffsChart> Lang { get; set; }
    }
}
#pragma warning restore 1591
