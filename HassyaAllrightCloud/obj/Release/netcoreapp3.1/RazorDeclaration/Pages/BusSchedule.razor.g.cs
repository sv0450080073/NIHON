#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\BusSchedule.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "00cd35c9dd92b4423993431b8af8cd46d354e2a1"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\Pages\BusSchedule.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
    public partial class BusSchedule : OwningComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 782 "E:\Project\HassyaAllrightCloud\Pages\BusSchedule.razor"
       
    public OperatingInstructionReportData reportData = new OperatingInstructionReportData();
    List<ReservationData> reservation;
    List<BranchChartData> branchchart;
    List<CompanyChartData> companychart;
    List<BranchChartData> tmpbranchchart = new List<BranchChartData>();
    BranchChartData allbranch = new BranchChartData() { EigyoCdSeq = -1, RyakuNm = "すべて", CompanyCdSeq = -1 };
    List<CompanyChartData> tmpcompanychart = new List<CompanyChartData>();
    CompanyChartData allcompany = new CompanyChartData() { CompanyCdSeq = -1, CompanyNm = "すべて" };
    List<BusDataType> Busnames = new List<BusDataType>();
    List<BusDataType> Busgreen = new List<BusDataType>();
    List<BusDataType> Busgray = new List<BusDataType>();
    List<BusInfoData> bus = new List<BusInfoData>();
    List<ItemBus> Buslines = new List<ItemBus>();
    IEnumerable<BusInfoData> busname = new List<BusInfoData>();
    List<TKD_ShuriData> Busrepair = new List<TKD_ShuriData>();
    List<TokiskChartData> Tokisk = new List<TokiskChartData>();
    List<BusBookingData> buslines = new List<BusBookingData>();
    List<TKD_ShuriData> busrepair = new List<TKD_ShuriData>();
    List<LoadCustomerList> CustomerList = new List<LoadCustomerList>();
    List<TkdKaknin> KakninLst = new List<TkdKaknin>();
    List<KyoSHeDatabyDate> KyoSHeDatabyDatelst = new List<KyoSHeDatabyDate>();
    IEnumerable<BusCompanyType> lstBusBranchType = new List<BusCompanyType>();
    IEnumerable<BusCompanyType> lstBusCompanyType = new List<BusCompanyType>();
    IEnumerable<TPM_CodeKbData> CodeKbnlst = new List<TPM_CodeKbData>();
    BusscheduleData BusscheduleInsert = new BusscheduleData();
    IEnumerable<CompanyChartData> SelectedCompanyItems { get; set; }
    IEnumerable<BranchChartData> SelectedBranchItems { get; set; }
    DateTime Date { get; set; } = DateTime.Today;
    public ConfigBusSchedule Param;
    private LoadCustomerList CustomerItem { get; set; }
    public List<int> comlst = new List<int>();
    public List<int> branchlst = new List<int>();
    public List<ItemBus> businsert = new List<ItemBus>();
    public List<TkdCalend> listdatecomment = new List<TkdCalend>();
    public ItemBus itembuschoosemenu { get; set; }
    public BusInfoData BusNameItem { get; set; } = new BusInfoData();
    public TPM_CodeKbData CodeKbnItem { get; set; } = new TPM_CodeKbData();
    public double w { get; set; } = 1920;
    public double Width { get; set; }
    bool PopupUpdateRowVisible { get; set; } = false;
    bool PopupJourney { get; set; } = false;
    bool PopupTehai { get; set; } = false;
    bool PopupVisible { get; set; } = false;
    bool PopupVisiblenew { get; set; } = false;
    bool PopupCommentdate { get; set; } = false;
    private bool flagShowClass = false;
    private string showClass => flagShowClass ? null : "d-none";
    private string disableClass => flagShowClass ? "disabled" : null;
    private ItemBus updatebusgreen { get; set; }
    private ItemBus update { get; set; }
    protected bool IsDisabled { get; set; } = true;
    protected bool IsDisabledinsert { get; set; } = true;
    protected bool PopupDeleteBusrepair { get; set; } = false;
    protected bool Popupupdatebus { get; set; } = false;
    bool Ischecktext { get; set; } = false;
    bool isLoading { get; set; } = true;
    bool showCheckboxes = true;
    bool ShowCheckboxes { get => showCheckboxes; set { showCheckboxes = value; StateHasChanged(); } }
    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    bool isErrorActive { get; set; } = false;
    bool isErrorUpdateBusrp { get; set; } = false;
    bool cbbisnull { get; set; } = false;
    bool nameisnull { get; set; } = false;
    bool drivernumisnull { get; set; } = false;
    bool driverisnotfull { get; set; } = false;
    bool PopupNotCreateline { get; set; } = false;
    string bookingname { get; set; }
    string drivernum { get; set; }
    string guidernum { get; set; }
    public bool checkCompanyAll { get; set; } = true;
    public bool checkBranchAll { get; set; } = true;
    public bool PopupUpdateBusRepair { get; set; }
    public bool Dropunable { get; set; } = false;
    public string dateformat = "yyyyMMdd";
    public string timeformat = "hhmmss";
    public string commentdate = "";
    public TimeSpan startTime;
    public TimeSpan endTime;
    string cssclassdate { get; set; } = "width--130";
    string cssclasstime { get; set; } = "width--75 ml-2 date-sm customTime";
    string datecommentpopup { get; set; } = "";
    int TeiCnt { get; set; } = 0;
    int JyoSyaJin { get; set; } = 0;
    private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
    private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
    private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
    private IBusDataListService BusDataService { get; set; }
    private IBusBookingDataListService BusBookingDataService { get; set; }
    private ILoadBusTooltipListService BusTooltipService { get; set; }
    private ITPM_TokiskDataListService TPM_TokiskDataService { get; set; }
    private ITKD_YoshaDataListService TKD_YoshaDataService { get; set; }
    private ITKD_HaishaDataListService TKD_HaishaDataService { get; set; }
    private ITKD_ShuriDataListService TKD_ShuriDataService { get; set; }
    private ITPM_CodeKbListService TPM_CodeKbnService { get; set; }
    private ITPM_KyoSHeDataListService TPM_KyoSHeDataService { get; set; }
    private ITKD_KakninDataListService TKD_KakninDataService { get; set; }
    private ITPM_CalendDataListService TPM_CalendDataService { get; set; }
    private IVPM_SyaRyoListService TPM_SyaRyoService { get; set; }

    string showSelectedCompanies = "";
    string showSelectedBranches = "";
    /// <summary>
    /// Load javascript of page
    /// </summary>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage");
        base.OnParametersSet();
    }

    void ClickHandler(string newMessage)
    {
        datecommentpopup = newMessage;
        commentdate = TPM_CalendDataService.Getdatabydate(1, 1, datecommentpopup) == null ? "" : TPM_CalendDataService.Getdatabydate(1, 1, datecommentpopup).CalenCom;
        if (commentdate.Length > 100)
        {
            commentdate = "";
        }
        PopupCommentdate = true;
        StateHasChanged();
    }
    private async Task CancelDateComment(MouseEventArgs e)
    {
        commentdate = "";
        PopupCommentdate = false;
        isLoading = true;
        Ischecktext = false;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task UpdateDateComment(MouseEventArgs e)
    {

        bool check = TPM_CalendDataService.UpdateCommentDate(datecommentpopup, commentdate, 1, 1, 1);
        if (!check)
        {
            Ischecktext = true;
            StateHasChanged();
        }
        else
        {
            PopupCommentdate = false;
            Ischecktext = false;
            datecommentpopup = "";
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }

    }

    private void SelectedCustomerItemChanged(LoadCustomerList customer)
    {
        IsDisabled = false;
        CustomerItem = customer;
        StateHasChanged();
    }

    private void SelectedCustomerItemChangedInsert(LoadCustomerList customer)
    {
        CustomerItem = customer;
        BusscheduleInsert.Customerlst = customer;
        cbbisnull = false;
        StateHasChanged();
    }

    private async Task OnUpdateLineGreen(MouseEventArgs e)
    {
        IsDisabled = true;
        var lstcus = await TKD_YoshaDataService.Getdata(CustomerItem.TokuiSeq, CustomerItem.SitenCdSeq, updatebusgreen.BookingId);
        var listgreen = Buslines.Where(t => t.YouTblSeq != 0 && t.BookingId == updatebusgreen.BookingId).ToList();
        if (listgreen.Count == 0)
        {
            TKD_HaishaDataService.Updatebusdatagreen(updatebusgreen, 1, CustomerItem.TokuiSeq, CustomerItem.SitenCdSeq);
            PopupUpdateRowVisible = false;
            isErrorActive = false;
            IsDisabled = true;
        }
        else
        {
            if (lstcus.Count() == 0)
            {
                PopupUpdateRowVisible = false;
                TKD_HaishaDataService.Updatebusdatagreen(updatebusgreen, 1, CustomerItem.TokuiSeq, CustomerItem.SitenCdSeq);
                isErrorActive = false;
                IsDisabled = true;

            }
            else
            {
                List<DatetimeData> datelist = new List<DatetimeData>();
                foreach (var item in listgreen)
                {
                    DateTime startdatene;
                    DateTime.TryParseExact(item.TimeStartString.ToString(),
                                   "yyyyMMddHHmm",
                                   CultureInfo.CurrentCulture,
                                   DateTimeStyles.None,
                                   out startdatene);

                    DateTime enddatene;
                    DateTime.TryParseExact(item.TimeEndString.ToString(),
                                   "yyyyMMddHHmm",
                                   CultureInfo.CurrentCulture,
                                   DateTimeStyles.None,
                                   out enddatene);
                    DatetimeData newdates = new DatetimeData();
                    newdates.DateStart = startdatene;
                    newdates.DateEnd = enddatene;
                    datelist.Add(newdates);
                }
                DateTime startdatetmp;
                DateTime.TryParseExact(updatebusgreen.TimeStartString.ToString(),
                               "yyyyMMddHHmm",
                               CultureInfo.CurrentCulture,
                               DateTimeStyles.None,
                               out startdatetmp);

                DateTime enddatetmp;
                DateTime.TryParseExact(updatebusgreen.TimeEndString.ToString(),
                               "yyyyMMddHHmm",
                               CultureInfo.CurrentCulture,
                               DateTimeStyles.None,
                               out enddatetmp);
                DatetimeData newdate = new DatetimeData();
                newdate.DateStart = startdatetmp;
                newdate.DateEnd = enddatetmp;
                if (BusScheduleHelper.compairdate(datelist.OrderBy(t => t.DateStart).ToList(), newdate))
                {
                    PopupUpdateRowVisible = false;
                    TKD_HaishaDataService.Updatebusdatagreen(updatebusgreen, 1, CustomerItem.TokuiSeq, CustomerItem.SitenCdSeq);
                    isErrorActive = false;
                    IsDisabled = true;
                }
                else
                {
                    isErrorActive = true;
                    IsDisabled = true;
                }
            }

        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task Closepopup(MouseEventArgs e)
    {
        isErrorActive = false;
        IsDisabled = false;
        PopupUpdateRowVisible = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    void BookingNameTextChage(String value)
    {

        BusscheduleInsert.BookingName = value;
        if(!String.IsNullOrEmpty(value))
        {
            nameisnull = false;
        }
        else
        {
            nameisnull = true;
        }
        InvokeAsync(StateHasChanged);
    }

    void DriverNumTextChange(String value)
    {
        short newValue;
        bool checkParse = short.TryParse(value, out newValue);
        if (checkParse)
        {
            BusscheduleInsert.BusdriverNum = newValue;
        }
        else
        {

        }

        if (newValue < BusscheduleInsert.Itembus.Count())
        {
            driverisnotfull = true;
        }
        else
        {
            driverisnotfull = false;
        }
        drivernumisnull = false;
        InvokeAsync(StateHasChanged);
    }

    void GuiderNumTextChange(String value)
    {
        short newValue;
        bool checkParse= short.TryParse(value,out newValue);
        if(checkParse)
        {
            BusscheduleInsert.BusGuideNum = newValue;
        }
        InvokeAsync(StateHasChanged);
    }
    private void SelectBuslineChange(BusInfoData Busline)
    {
        itembuschoosemenu.BusLine = Busline.SyaRyoCdSeq.ToString();
        BusNameItem = busname.Where(t => t.SyaRyoCdSeq.ToString() == itembuschoosemenu.BusLine).First();
        InvokeAsync(StateHasChanged);
    }
    private void SelectTypeChange(TPM_CodeKbData code)
    {
        if (code != null)
        {
            itembuschoosemenu.ShuriCdSeq = code.CodeKb_CodeKbnSeq;
            CodeKbnItem = CodeKbnlst.Where(t => t.CodeKb_CodeKbnSeq == itembuschoosemenu.ShuriCdSeq).First();
            InvokeAsync(StateHasChanged);
        }

    }
    private void TextBusrpChange(string s)
    {
        itembuschoosemenu.BikoNm = s;
        InvokeAsync(StateHasChanged);
    }
    private void OnDateStartChange(DateTime date)
    {
        itembuschoosemenu.StartDate = date.ToString("yyyyMMdd");
        InvokeAsync(StateHasChanged);
    }
    private void OnDateEndChange(DateTime date)
    {
        itembuschoosemenu.EndDate = date.ToString("yyyyMMdd");
        InvokeAsync(StateHasChanged);
    }
    private void onStartimechage(string starttime)
    {
        string date = int.Parse(starttime).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            itembuschoosemenu.TimeStart = int.Parse(starttime.ToString());
        }
        TimeSpan.TryParseExact(itembuschoosemenu.TimeStart.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out startTime);
        InvokeAsync(StateHasChanged);
    }
    private void onEndtimechage(string endtime)
    {
        string date = int.Parse(endtime).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            itembuschoosemenu.TimeEnd = int.Parse(endtime);
        }
        TimeSpan.TryParseExact(itembuschoosemenu.TimeEnd.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out endTime);
        InvokeAsync(StateHasChanged);
    }
    private async Task OpenPopupUpdateBusrp()
    {
        PopupUpdateBusRepair = true;
        CodeKbnlst = new List<TPM_CodeKbData>();
        CodeKbnlst = await TPM_CodeKbnService.Getdatabusrepair(Common.TenantID);
        CodeKbnItem = CodeKbnlst.Where(t => t.CodeKb_CodeKbnSeq == itembuschoosemenu.ShuriCdSeq).First();
        busname = await BusDataService.Getbusrp(Date, 1, comlst.ToArray(), branchlst.ToArray(), Common.TenantID);
        BusNameItem = busname.Where(t => t.SyaRyoCdSeq.ToString() == itembuschoosemenu.BusLine).First();
        TimeSpan.TryParseExact(itembuschoosemenu.TimeStart.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out startTime);
        TimeSpan.TryParseExact(itembuschoosemenu.TimeEnd.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out endTime);
        if (CodeKbnItem == null)
        {
            CodeKbnItem = CodeKbnlst.First();
        }
        StateHasChanged();
    }
    private async Task CancelUpdateBusrp(MouseEventArgs e)
    {
        PopupUpdateBusRepair = false;
        isErrorUpdateBusrp = false;
        isLoading = true;
        cssclassdate = cssclassdate.Replace("error", "");
        cssclasstime = cssclasstime.Replace("error", "");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task UpdateBusrepair(MouseEventArgs e)
    {
        DateTime startdatene;
        DateTime.TryParseExact(itembuschoosemenu.StartDate + itembuschoosemenu.TimeStart.ToString("D4"),
                       "yyyyMMddHHmm",
                       CultureInfo.CurrentCulture,
                       DateTimeStyles.None,
                       out startdatene);

        DateTime enddatene;
        DateTime.TryParseExact(itembuschoosemenu.EndDate + itembuschoosemenu.TimeEnd.ToString("D4"),
                       "yyyyMMddHHmm",
                       CultureInfo.CurrentCulture,
                       DateTimeStyles.None,
                       out enddatene);
        if (startdatene > enddatene)
        {
            isErrorUpdateBusrp = true;
            cssclassdate += " error";
            cssclasstime += " error";
        }
        else
        {
            isErrorUpdateBusrp = false;
            PopupUpdateBusRepair = false;
            cssclassdate = cssclassdate.Replace("error", "");
            cssclasstime = cssclasstime.Replace("error", "");
            TKD_ShuriDataService.UpdateBusRepair(itembuschoosemenu, 1);
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }
    }
    private async Task Openpopupdelete()
    {
        PopupDeleteBusrepair = true;
        await InvokeAsync(StateHasChanged);
    }
    private async Task UpdateStatusBusrepair(MouseEventArgs e)
    {
        PopupDeleteBusrepair = false;
        TKD_ShuriDataService.UpdateStatusBusRepair(itembuschoosemenu.Shuri_ShuriTblSeq, 1);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    private async Task CancelDropunable(MouseEventArgs e)
    {
        Dropunable = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task CancelBusrepair(MouseEventArgs e)
    {
        PopupDeleteBusrepair = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task UpdateBus(MouseEventArgs e)
    {
        Popupupdatebus = false;
        TKD_HaishaDataService.Updatebusdata(updatebusgreen, 1);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task CancelUpdateBus(MouseEventArgs e)
    {
        Popupupdatebus = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task OnSave(MouseEventArgs e)
    {

        if (BusscheduleInsert.Customerlst == null)
        {
            cbbisnull = true;
        }
        if (string.IsNullOrWhiteSpace(BusscheduleInsert.BookingName))
        {
            nameisnull = true;
        }
        if (string.IsNullOrWhiteSpace(BusscheduleInsert.BusdriverNum.ToString()))
        {
            drivernumisnull = true;
        }
        else
        {
            if (BusscheduleInsert.BusdriverNum < BusscheduleInsert.Itembus.Count())
            {
                driverisnotfull = true;
            }
            else
            {
                driverisnotfull = false;
            }
        }
        if (cbbisnull == false && nameisnull == false && drivernumisnull == false && driverisnotfull == false)
        {
            PopupVisible = false;
            var client = new HttpClient();
            string baseUrl = AppSettingsService.GetBaseUrl();
            HttpResponseMessage response = await client.PostAsync($"{baseUrl}/api/Busschedule/", Http.getStringContentFromObject(BusscheduleInsert));
            businsert.Clear();
            Param.Mode = (int)BusLineMode.View;
            flagShowClass = !flagShowClass;
            BusscheduleInsert = new BusscheduleData();
            BusscheduleInsert.BranchID = 1;
            BusscheduleInsert.CompanyID = 1;
            BusscheduleInsert.Loginuser = 1;
            BusscheduleInsert.Itembus = businsert;
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }
    }

    private async Task OnCancel(MouseEventArgs e)
    {
        PopupVisible = false;
        nameisnull = false;
        cbbisnull = false;
        drivernumisnull = false;
        driverisnotfull = false;
        isLoading = true;
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        businsert.Clear();
        BusscheduleInsert = new BusscheduleData();
        BusscheduleInsert.BranchID = 1;
        BusscheduleInsert.CompanyID = 1;
        BusscheduleInsert.Loginuser = 1;
        BusscheduleInsert.Itembus = businsert;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;

        });
        StateHasChanged();
    }

    private async void OnDateChanged(DateTime newValue)
    {
        Date = newValue;
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task onPrevious(MouseEventArgs e)
    {
        Date = Date.AddDays(-1);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task onNext(MouseEventArgs e)
    {
        Date = Date.AddDays(1);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task TodayClick(MouseEventArgs e)
    {
        Date = DateTime.Today;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    void clickV(MouseEventArgs e, int number)
    {
        Param.ActiveV = number;
    }

    void clickL(MouseEventArgs e, int number)
    {
        Param.ActiveL = number;
    }

    void clickG(MouseEventArgs e, int number)
    {
        Param.ActiveG = number;
    }

    void clickS1(MouseEventArgs e, int number)
    {
        Param.ActiveS1 = number;
    }

    void clickS2(MouseEventArgs e, int number)
    {
        Param.ActiveS2 = number;
    }

    void clickS3(MouseEventArgs e, int number)
    {
        Param.ActiveS3 = number;
    }

    private async Task clickR(MouseEventArgs e, int number)
    {
        Param.ActiveR = number;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task clickP(MouseEventArgs e, int number)
    {
        Param.ActiveP = number;
        //        _disable = number;

        if (number == (int)DayMode.OneDay)
        {
            Param.Number_of_days = 1;
        }
        else if (number == (int)DayMode.ThreeDays)
        {
            Param.Number_of_days = 3;
        }
        else if (number == (int)DayMode.Week)
        {
            Param.Number_of_days = 7;
        }
        else if (number == (int)DayMode.Month)
        {
            Param.Number_of_days = 31;
        }

        /*if (number != 1 && Param.ActiveCPT == (int)TimeMode.Minute || number < 3 && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Param.ActiveCPT = (int)TimeMode.OneHour;
        }*/

        // default click 1day will choose 1hour
        if (number == (int)DayMode.OneDay)
        {
            Param.ActiveCPT = (int)TimeMode.OneHour;
        }
        // default click 1week or 1month will choose 1day
        if (number == (int)DayMode.Week || number == (int)DayMode.Month)
        {
            Param.ActiveCPT = (int)TimeMode.Day;
        }
        // default click 3days will choose 3hours
        if (number == (int)DayMode.ThreeDays)
        {
            Param.ActiveCPT = (int)TimeMode.ThreeHours;
        }

        if (number == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (number == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
            number == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
            number == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (number == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (number == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (number == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            number == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (number == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (number == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            number == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (number == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = Math.Round(w / 7 * 31);
        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task clickCPT(MouseEventArgs e, int number)
    {
        Param.ActiveCPT = number;

        if (Param.ActiveP == (int)DayMode.OneDay && number == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && number != (int)TimeMode.Minute ||
            Param.ActiveP == (int)DayMode.ThreeDays && number > (int)TimeMode.OneHour ||
            Param.ActiveP == (int)DayMode.Week && number == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.ActiveP == (int)DayMode.ThreeDays && number == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.ActiveP == (int)DayMode.Week && number == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.ActiveP == (int)DayMode.Week && number == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Week && number == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.ActiveP == (int)DayMode.Month && number == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.ActiveP == (int)DayMode.Month && number == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Month && number == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.ActiveP == (int)DayMode.Month && number == (int)TimeMode.Day)
        {
            Width = Math.Round(w / 7 * 31);
        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    void SelectedCompanyItemsChanged(IEnumerable<CompanyChartData> selectedCompanyItems)
    {
        SelectedCompanyItems = selectedCompanyItems;
        if (checkCompanyAll == true && !SelectedCompanyItems.Contains(allcompany))
        {
            SelectedCompanyItems = SelectedCompanyItems.Take(0);
            checkCompanyAll = false;
        }
        if (checkCompanyAll == false && SelectedCompanyItems.Contains(allcompany))
        {
            SelectedCompanyItems = tmpcompanychart;
            checkCompanyAll = true;
        }
        if (checkCompanyAll == true && SelectedCompanyItems.Contains(allcompany) && SelectedCompanyItems.Count() < tmpcompanychart.Count())
        {
            SelectedCompanyItems = SelectedCompanyItems.Where(t => t.CompanyCdSeq != allcompany.CompanyCdSeq);
            SelectedBranchItems = tmpbranchchart;
            checkCompanyAll = false;
        }
        if (checkCompanyAll == false && !SelectedCompanyItems.Contains(allcompany) && SelectedCompanyItems.Count() == tmpcompanychart.Count() - 1)
        {
            SelectedCompanyItems = tmpcompanychart;
            checkCompanyAll = true;
        }
        List<BranchChartData> tmp = new List<BranchChartData>();
        List<BranchChartData> branch = new List<BranchChartData>();
        tmp.Clear();
        foreach (var i in SelectedCompanyItems)
        {
            branch = tmpbranchchart.Where(t => t.CompanyCdSeq == i.CompanyCdSeq).ToList();
            foreach (var item in branch)
            {
                tmp.Add(item);
            }
        }
        if (checkBranchAll == false && !SelectedBranchItems.Contains(allbranch) && tmp.Count() == tmpbranchchart.Count() - 1)
        {
            SelectedBranchItems = tmpbranchchart;
            checkBranchAll = true;
        }
        else
        {
            SelectedBranchItems = tmp.Take(tmp.Count());
        }
        DisplayLstSelectedCompany();
        InvokeAsync(StateHasChanged);
    }

    void SelectedBranchItemsChanged(IEnumerable<BranchChartData> selectedBranchItems)
    {
        SelectedBranchItems = selectedBranchItems;
        if (checkBranchAll == true && !SelectedBranchItems.Contains(allbranch))
        {
            SelectedBranchItems = SelectedBranchItems.Where(t => t.EigyoCdSeq != allbranch.EigyoCdSeq);
            checkBranchAll = false;

        }
        if (checkBranchAll == false && SelectedBranchItems.Contains(allbranch))
        {
            SelectedBranchItems = tmpbranchchart;
            SelectedCompanyItems = tmpcompanychart;
            checkCompanyAll = true;
            checkBranchAll = true;
        }
        if (checkBranchAll == true && SelectedBranchItems.Contains(allbranch))
        {
            SelectedBranchItems = tmpbranchchart;
            SelectedCompanyItems = tmpcompanychart;
            checkCompanyAll = true;
            checkBranchAll = true;
        }
        if (checkBranchAll == true && SelectedBranchItems.Contains(allbranch) && SelectedBranchItems.Count() < tmpbranchchart.Count())
        {
            SelectedBranchItems = SelectedBranchItems.Where(t => t.EigyoCdSeq != allbranch.EigyoCdSeq);
            checkBranchAll = false;
        }
        if (checkBranchAll == false && !SelectedBranchItems.Contains(allbranch) && SelectedBranchItems.Count() == tmpbranchchart.Count() - 1)
        {
            SelectedBranchItems = tmpbranchchart;
            checkBranchAll = true;
        }
        DisplayLstSelectedBranch();
        InvokeAsync(StateHasChanged);
    }

    private async void getComlist()
    {
        branchlst = new List<int>();
        comlst = new List<int>();
        foreach (var i in SelectedBranchItems)
        {
            branchlst.Add(i.EigyoCdSeq);
        }
        foreach (var i in SelectedCompanyItems)
        {
            comlst.Add(i.CompanyCdSeq);
        }
        if (branchlst.Count() == 0 && comlst.Count() == 0)
        {
            PopupVisiblenew = true;
            StateHasChanged();
        }
        else
        {
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
            StateHasChanged();
        }
    }

    private async Task onDivided(MouseEventArgs e) {
        Param.IsDivided = true;
        Param.ActiveL = (int)LineDrawMode.Normal;
        Param.ActiveG = (int)GroupMode.All;
        Param.ActiveP = (int)DayMode.OneDay;
        Param.ActiveCPT = (int)TimeMode.SixHours;
        Param.ActiveV =(int)ViewMode.Medium;
        Param.Number_of_days = 1;   
        Width = ((w + 320)/4 - 162);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task onCombine(MouseEventArgs e) {
        Param.IsDivided = false;
        Param.ActiveV = (int)ViewMode.Large;
        Param.ActiveP = (int)DayMode.ThreeDays;
        Param.ActiveCPT = (int)TimeMode.ThreeHours;
        Param.Number_of_days = 3;
        Width = w;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }


    private async Task onCreate(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Create;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task OnInsert(MouseEventArgs e)
    {
        if (BusscheduleInsert.Itembus.Count() == 0)
        {
            PopupNotCreateline = true;
        }
        else
        {
            CustomerList = new List<LoadCustomerList>();
            PopupVisible = true;
            string baseUrl = AppSettingsService.GetBaseUrl();
            CustomerList = await Http.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
            CustomerItem = null;
        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        StateHasChanged();
    }

    private async Task OnReset(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        PopupVisible = false;
        businsert.Clear();
        isLoading = true;
        //businsert.Clear();
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        StateHasChanged();
    }

    private async Task onEdit(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Edit;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task onView(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        StateHasChanged();
    }

    private async Task onCut(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Cut;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task onRepair(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Repair;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task onZoom(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Zoom;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task OnRowUpdatedGreen(ItemBus updatebus)
    {

        if (updatebus.BusLine == "-4" || updatebus.BusLine == "-5" || updatebus.BusLine == "-6" || updatebus.BusVehicle == 2)
        {
        }
        else if (updatebus.BusLine == "-1" || updatebus.BusLine == "-2" || updatebus.BusLine == "-3" || updatebus.BusVehicle == 1)
        {
            CustomerList = new List<LoadCustomerList>();
            updatebusgreen = new ItemBus();
            string baseUrl = AppSettingsService.GetBaseUrl();
            CustomerList = await Http.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
            CustomerItem = null;
            PopupUpdateRowVisible = true;
            IsDisabled = true;
            updatebusgreen = updatebus;
        }
        else if (updatebus.BookingId != "0")
        {
            int branchid = TPM_EigyosDataService.GetBranchbyBusId(int.Parse(updatebus.BusLine), updatebus.EndDate);
            if (branchid == 0)
            {
                Dropunable = true;
            }
            DateTime startdate;
            DateTime enddate;
            DateTime.TryParseExact(updatebus.TimeStartString.ToString(), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out startdate);
            DateTime.TryParseExact(updatebus.TimeEndString.ToString(), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out enddate);
            DateTime fromdatemindt;
            DateTime todatemaxdt;
            string fromdatemin = Busnames.Where(t => t.BusID == updatebus.BusLine && t.EndYmd.CompareTo(startdate.ToString("yyyyMMdd")) >= 0).First().StaYmd;
            string todatemax = Busnames.Where(t => t.BusID == updatebus.BusLine && t.EndYmd.CompareTo(startdate.ToString("yyyyMMdd")) >= 0).First().EndYmd;
            DateTime.TryParseExact(fromdatemin != null ? fromdatemin.ToString() : "19700101", "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out fromdatemindt);
            DateTime.TryParseExact(todatemax != null ? todatemax.ToString() : "22223112", "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out todatemaxdt);
            if (enddate > todatemaxdt || startdate < fromdatemindt)
            {
                Dropunable = true;
            }
            else
            {
                JyoSyaJin = updatebus.JyoSyaJin;
                TeiCnt = Busnames.Where(t => t.BusID == updatebus.BusLine).First().TeiCnt;

                if (JyoSyaJin > TeiCnt)
                {
                    updatebusgreen = new ItemBus();
                    Popupupdatebus = true;
                    updatebusgreen = updatebus;
                }
                else
                {
                    TKD_HaishaDataService.Updatebusdata(updatebus, 1);
                    isLoading = true;
                    await Task.Run(() =>
                    {
                        Loadpage().Wait();
                        isLoading = false;
                    });
                }
            }

        }
        else
        {
        }

    }

    private async Task reload(string a)
    {
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        //StateHasChanged();
    }

    void HandleShowContextMenu(ItemBus item)
    {
        itembuschoosemenu = new ItemBus();
        itembuschoosemenu = item;
    }

    public async Task Loadpage()
    {
        try
        {
            await reRenderBusLines();
            await reRenderBusNames();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            //TODO use logger to log down exception ex.message
        }
    }

    private async Task reRenderBusLines()
    {
        Tokisk = await TPM_TokiskDataService.getdata();
        Buslines.Clear();
        buslines.Clear();
        busrepair.Clear();
        Busrepair.Clear();
        DateTime st = Date;
        DateTime end = Date.AddDays(Param.Number_of_days - 1);
        listdatecomment = await TPM_CalendDataService.Getdatabydays(1, 1, st.ToString("yyyyMMdd"), end.ToString("yyyyMMdd"), Common.TenantID);
        buslines = await BusBookingDataService.Getbusdatabooking(st, end, 1, Common.TenantID);

        busrepair = await TKD_ShuriDataService.Getdata(st, end);
        foreach (TKD_ShuriData i in busrepair)
        {
            TKD_ShuriData newBusrepair = new TKD_ShuriData();
            newBusrepair.Shuri_BikoNm = i.Shuri_BikoNm;
            newBusrepair.Shuri_ShuriCdSeq = i.Shuri_ShuriCdSeq;
            newBusrepair.Shuri_ShuriETime = i.Shuri_ShuriETime;
            newBusrepair.Shuri_ShuriEYmd = i.Shuri_ShuriEYmd;
            newBusrepair.Shuri_ShuriSTime = i.Shuri_ShuriSTime;
            newBusrepair.Shuri_ShuriSYmd = i.Shuri_ShuriSYmd;
            newBusrepair.Shuri_ShuriTblSeq = i.Shuri_ShuriTblSeq;
            newBusrepair.Shuri_SyaRyoCdSeq = i.Shuri_SyaRyoCdSeq;
            newBusrepair.Text = BusBookingDataService.Getcodename(i.Shuri_ShuriCdSeq, Common.TenantID);
            newBusrepair.CodeKb_Codekbn = BusBookingDataService.Getcodekbn(i.Shuri_ShuriCdSeq, Common.TenantID);
            DateTime startdatere;
            DateTime.TryParseExact(i.Shuri_ShuriSYmd + i.Shuri_ShuriSTime,
                           "yyyyMMddHHmm",
                           CultureInfo.CurrentCulture,
                           DateTimeStyles.None,
                           out startdatere);

            DateTime enddatere;
            DateTime.TryParseExact(i.Shuri_ShuriEYmd + i.Shuri_ShuriETime,
                           "yyyyMMddHHmm",
                           CultureInfo.CurrentCulture,
                           DateTimeStyles.None,
                           out enddatere);
            object text = new Object();
            text = "<span>修理期間：" + startdatere.ToString("yy/MM/dd (ddd) HH:mm") + "～" + enddatere.ToString("yy/MM/dd (ddd) HH:mm") + "</span>";
            text += "<span>修理内容：" + BusBookingDataService.Getcodekbn(i.Shuri_ShuriCdSeq, Common.TenantID) + "　" + BusBookingDataService.Getcodename(i.Shuri_ShuriCdSeq, Common.TenantID) + "</span>";
            text += "<span>備考　　：" + i.Shuri_BikoNm + "</span>";
            newBusrepair.Tooltip = text;
            Busrepair.Add(newBusrepair);
        }
        var settingtext = BusTooltipService.GetBustooltip(1);
        foreach (BusBookingData i in buslines)
        {
            ItemBus newBusbookingdata = new ItemBus();
            newBusbookingdata.BookingId = i.Haisha_UkeNo;
            newBusbookingdata.haUnkRen = i.Haisha_UnkRen;
            newBusbookingdata.TeiDanNo = i.Haisha_TeiDanNo;
            newBusbookingdata.BunkRen = i.Haisha_BunkRen;
            newBusbookingdata.HenKai = i.Haisha_HenKai;
            newBusbookingdata.Id = i.Haisha_GoSya;
            newBusbookingdata.UkeCd = i.Yyksho_UkeCd;
            newBusbookingdata.BusLine = i.Haisha_HaiSSryCdSeq.ToString();
            newBusbookingdata.StartDate = i.Haisha_HaiSYmd;
            newBusbookingdata.TimeStart = int.Parse(i.Haisha_HaiSTime);

            DateTime enddatetime = DateTime.ParseExact(i.Haisha_TouYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            DateTime enddatetimemax = DateTime.ParseExact(i.Unkobi_TouYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            string enddatest = i.Haisha_TouYmd;
            string endtime = i.Haisha_TouChTime;

            if (BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Days >= 1)
            {
                enddatest = enddatetime.AddDays(BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Days).ToString("yyyyMMdd");
                endtime = BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Minutes.ToString("D2");
            }
            else
            {
                enddatest = i.Haisha_TouYmd;
                endtime = i.Haisha_TouChTime;
            }
            newBusbookingdata.EndDate = enddatest;
            newBusbookingdata.TimeEnd = int.Parse(endtime);
            //update line caculation time gray
            DateTime enddatetimegray = DateTime.ParseExact(i.Haisha_KikYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            string enddatestrgray = i.Haisha_KikYmd;
            string endtimegray = i.Haisha_KikTime;
            if (BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Days >= 1)
            {
                enddatestrgray = enddatetimegray.AddDays(BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Days).ToString("yyyyMMdd");
                endtimegray = BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Minutes.ToString("D2");
            }
            else
            {
                enddatestrgray = i.Haisha_KikYmd;
                endtimegray = i.Haisha_KikTime;
            }
            newBusbookingdata.StartDateDefault = i.Haisha_SyuKoYmd;
            newBusbookingdata.EndDateDefault = enddatestrgray;
            newBusbookingdata.TimeStartDefault = int.Parse(i.Haisha_SyuKoTime);
            newBusbookingdata.TimeEndDefault = int.Parse(endtimegray);
            newBusbookingdata.JyoSyaJin = i.Haisha_JyoSyaJin;
            if (i.Haisha_NippoKbn == 2 && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            {
                newBusbookingdata.ColorLine = "color-8";
                newBusbookingdata.AllowDrop = false;
            }
            else if (i.Haisha_HaiIKbn == 2 && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            {
                newBusbookingdata.ColorLine = "color-6";
            }
            else if (i.Haisha_HaiSKbn == 2 && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            {
                newBusbookingdata.ColorLine = "color-5";
            }
            else if (((!string.IsNullOrWhiteSpace(i.Yyksho_KaktYmd) && (i.Haisha_KSKbn != 1 && i.Haisha_YouTblSeq == 0)) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0)) || (KakninLst.Select(t => t.UkeNo).ToArray().Contains(i.Haisha_UkeNo)))
            {
                if (KakninLst.Select(t => t.UkeNo).ToArray().Contains(i.Haisha_UkeNo))
                {
                    newBusbookingdata.ColorLine = "color-greenlight";
                }
                if ((!string.IsNullOrWhiteSpace(i.Yyksho_KaktYmd) && (i.Haisha_KSKbn != 1 && i.Haisha_YouTblSeq == 0)) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
                {
                    newBusbookingdata.ColorLine = "color-4";
                }
            }
            else
            {
                newBusbookingdata.ColorLine = "color-2";
            }
            if (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0)
            {
                newBusbookingdata.AllowEdit = false;
                newBusbookingdata.ColorLine = "color-1";
            }
            if ((i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0))
            {

                newBusbookingdata.ColorLine = "color-green";
                newBusbookingdata.AllowEdit = false;
            }
            if (i.Haisha_DrvJin > 1)
            {
                newBusbookingdata.ColorLine += " border-black";
            }
            newBusbookingdata.Status = 1;
            newBusbookingdata.CCSStyle = "";
            newBusbookingdata.Top = 0.3125;
            newBusbookingdata.Height = 2;
            newBusbookingdata.Name = "";
            newBusbookingdata.Width = BusScheduleHelper.calwidth(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), newBusbookingdata.EndDate, newBusbookingdata.TimeEnd.ToString("D4"), Param.Number_of_days);
            newBusbookingdata.Left = BusScheduleHelper.calleft(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
            newBusbookingdata.WidthDefault = BusScheduleHelper.calwidth(Width, newBusbookingdata.StartDateDefault, newBusbookingdata.TimeStartDefault.ToString("D4"), newBusbookingdata.EndDateDefault, newBusbookingdata.TimeEndDefault.ToString("D4"), Param.Number_of_days);
            newBusbookingdata.LeftDefault = BusScheduleHelper.calleft(Width, newBusbookingdata.StartDateDefault, newBusbookingdata.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
            newBusbookingdata.DanTaNm = i.Unkobi_DanTaNm;
            newBusbookingdata.IkNm = i.Haisha_IkNm;
            newBusbookingdata.TokuiNm = i.TokiSt_RyakuNm;
            newBusbookingdata.NumberDriver = i.Haisha_DrvJin;
            newBusbookingdata.NumberGuider = i.Haisha_GuiSu;
            if (i.Haisha_GuiSu > 0)
            {
                newBusbookingdata.Text = "G　" + "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5) + "</span>";
            }
            else
            {
                newBusbookingdata.Text = "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5) + "</span>";
                //newBusbookingdata.Text = "<p style='color:"+settingtext.SyaSenMjPtnCol1+"'>"+getDisplayValue(i, settingtext.SyaSenMjPtnKbn1)+"</p>" + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5);
            }
            newBusbookingdata.MinDate = i.Unkobi_HaiSYmd;
            newBusbookingdata.MinTime = int.Parse(i.Unkobi_HaiSTime);
            if (BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Days >= 1)
            {
                newBusbookingdata.Maxdate = enddatetimemax.AddDays(BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Days).ToString("yyyyMMdd");
                newBusbookingdata.MaxTime = int.Parse(BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Minutes.ToString("D2"));
            }
            else
            {
                newBusbookingdata.Maxdate = i.Unkobi_TouYmd;
                newBusbookingdata.MaxTime = int.Parse(i.Unkobi_TouChTime);
            }
            //newBusbookingdata.Maxdate = i.Unkobi_TouYmd;
            //newBusbookingdata.MaxTime = int.Parse(i.Unkobi_TouChTime);
            newBusbookingdata.HasYmd = i.Haisha_HaiSYmd;
            newBusbookingdata.Zeiritsu = i.Yyksho_Zeiritsu;
            newBusbookingdata.BookingType = i.Yyksho_YoyaKbnSeq;
            newBusbookingdata.CodeKb_CodeKbn = BusBookingDataService.Getcodename(i.YykSyu_KataKbn, Common.TenantID);
            newBusbookingdata.KSKbn = i.Haisha_KSKbn;
            newBusbookingdata.YouTblSeq = i.Haisha_YouTblSeq;
            newBusbookingdata.SyaSyu_SyaSyuNm = i.SyaSyu_SyaSyuNm;
            newBusbookingdata.SyaSyu_SyaSyuNm_Haisha = await TPM_SyaRyoService.getSyaSyuNm(i.SyaSyu_SyaSyuCdSeq, Common.TenantID);
            i.SyaSyu_SyaSyuNm_Haisha = newBusbookingdata.SyaSyu_SyaSyuNm_Haisha;
            newBusbookingdata.BusLineType = i.Haisha_UkeNo.ToString() + i.Haisha_TeiDanNo.ToString();
            newBusbookingdata.BusName = (i.SyaSyu_SyaSyuNm == null ? "指定なし" : i.SyaSyu_SyaSyuNm) + "/" + BusBookingDataService.Getcodename(i.YykSyu_KataKbn, Common.TenantID);
            if (Tokisk.Where(t => t.Tokisk_TokuiSeq == i.Yousha_YouCdSeq && t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).ToList().Count > 0)
            {
                newBusbookingdata.Tokisk_YouSRyakuNm = Tokisk.First(t => t.Tokisk_TokuiSeq == i.Yousha_YouCdSeq).Tokisk_RyakuNm + " " + Tokisk.First(t => t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).TokiSt_RyakuNm;
                newBusbookingdata.Tokisk_SitenCdSeq = Tokisk.First(t => t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).TokiSt_SitenCdSeq;
            }
            object text = new Object();
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn1) != "")
            {
                text = "<span style=\"color:" + settingtext.SyaSenInfoPtnCol1 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn1) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn1) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn2) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol2 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn2) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn2) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn3) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol3 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn3) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn3) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn4) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol4 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn4) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn4) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn5) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol5 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn5) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn5) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn6) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol6 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn6) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn6) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn7) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol7 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn7) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn7) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn8) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol8 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn8) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn8) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn9) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol9 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn9) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn9) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn10) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol10 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn10) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn10) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn11) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol11 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn11) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn11) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn12) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol12 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn12) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn12) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn13) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol13 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn13) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn13) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn14) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol14 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn14) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn14) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn15) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol15 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn15) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn15) + "</span>";
            }
            newBusbookingdata.Tooltip = text;
            newBusbookingdata.TokiSk_RyakuNm = i.TokiSk_RyakuNm;
            newBusbookingdata.TokiSt_RyakuNm = i.TokiSt_RyakuNm;
            newBusbookingdata.Shuri_ShuriTblSeq = 0;
            //newBusbookingdata.AllowDrop = true;
            newBusbookingdata.SyaSyuRen = i.YykSyu_SyaSyuRen;
            newBusbookingdata.BranchId = 0;
            newBusbookingdata.CompanyId = 0;
            newBusbookingdata.BunKSyuJyn = i.Haisha_BunKSyuJyn;
            if (i.Haisha_BunKSyuJyn == 0)
            {
                newBusbookingdata.CanBeDeleted = false;
            }
            if (i.Haisha_HaiSKbn == 2 || (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) || (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            {
                newBusbookingdata.CanSimpledispatch = false;
            }
            newBusbookingdata.Unkobi_StartYmd = i.Unkobi_HaiSYmd;
            Buslines.Add(newBusbookingdata);
        }
    }

    public string getDisplayText(BusBookingData i, int SyaSenMjPtnKbn1)
    {
        var jsonString = Newtonsoft.Json.JsonConvert.SerializeObject(i);
        var obj = JObject.Parse(jsonString);
        string textcont = "";
        if (LineInfoListData.lineInfoItem.Where(t => t.Id == SyaSenMjPtnKbn1).ToList().Count() > 0)
        {
            textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).text;
        }
        return textcont;
    }

    public string getDisplayValue(BusBookingData i, int SyaSenMjPtnKbn1)
    {
        var jsonString = Newtonsoft.Json.JsonConvert.SerializeObject(i);
        var obj = JObject.Parse(jsonString);
        string text = "";
        if (SyaSenMjPtnKbn1 == 5)
        {
            if (i.Haisha_SyuEigCdSeq != 0)
            {
                text = TPM_EigyosDataService.Getbranchbyid(i.Haisha_SyuEigCdSeq);
            }
            else
            {
                text = TPM_EigyosDataService.Getbranchbyid(i.Yyksho_UkeEigCdSeq);
            }

        }
        else if (SyaSenMjPtnKbn1 == 47)
        {
            text = (i.Yyksho_UkeCd.ToString("D10") + "-" + i.Haisha_UnkRen.ToString("D3") + "-" + i.Haisha_TeiDanNo.ToString("D3") + "-" + i.Haisha_BunkRen.ToString("D3"));
        }
        else if (SyaSenMjPtnKbn1 == 57)
        {
            string somestring = i.Haisha_HaiSTime;
            string newhour = somestring.Substring(0, 2);
            string newmun = somestring.Substring(2, 2);
            text = newhour + ":" + newmun + "（" + i.Haisha_HaiSNm + "）";
        }
        else if (SyaSenMjPtnKbn1 == 58)
        {
            string somestring = i.Haisha_TouChTime;
            string newhour = somestring.Substring(0, 2);
            string newmun = somestring.Substring(2, 2);
            text = newhour + ":" + newmun + "（" + i.Haisha_TouNm + "）";
        }
        else if (SyaSenMjPtnKbn1 == 60)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            text = (string)obj.SelectToken(textcont);
            text = "￥" + string.Format("{0:#,0}", double.Parse(text));
        }
        else
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            text = (string)obj.SelectToken(textcont);
        }
        return text;
    }

    private async Task reRenderBusNames()
    {
        Busnames.Clear();
        bus.Clear();
        bus = await BusDataService.Getbus(Date, 1, comlst.ToArray(), branchlst.ToArray(), Common.TenantID);
        foreach (var i in bus)
        {
            BusDataType busItem = new BusDataType();
            busItem.BusID = i.SyaRyoCdSeq.ToString();
            busItem.SyaSyuNm = i.SyaSyuNm;
            busItem.SyaRyoNm = i.SyaRyoNm;
            busItem.RyakuNm = i.RyakuNm;
            busItem.EigyoNm = i.EigyoNm;
            busItem.KariSyaRyoNm = i.KariSyaRyoNm;
            //busItem.BusHeight = 2;
            busItem.BusVehicle = 0;
            busItem.BusBranchID = i.EigyoCdSeq;
            busItem.BusCompanyID = i.CompanyCdSeq;
            busItem.SyaSyuCd = i.SyaSyuCd;
            busItem.EigyoCd = i.EigyoCd;
            busItem.SyaRyoCd = i.SyaRyoCd;
            busItem.TenkoNo = i.TenkoNo;
            busItem.StaYmd = i.StaYmd;
            busItem.EndYmd = i.EndYmd;
            busItem.NinkaKbn = i.NinkaKbn;
            busItem.TeiCnt = i.TeiCnt;
            Busnames.Add(busItem);
        }
        lstBusBranchType = bus.GroupBy(n => new { n.EigyoCdSeq, n.RyakuNm }).Select(t => new BusCompanyType { BusBranchID = t.Key.EigyoCdSeq, BusBranchName = t.Key.RyakuNm });
        lstBusCompanyType = bus.GroupBy(n => new { n.CompanyCdSeq, n.CompanyNm }).Select(t => new BusCompanyType { BusCompanyID = t.Key.CompanyCdSeq, BusCompanyName = t.Key.CompanyNm });

        Busgreen.Clear();
        foreach (var i in Buslines.Where(t => t.YouTblSeq != 0).OrderBy(t => t.TimeStart).ThenBy(t => t.StartDate).ToList())
        {
            BusDataType busItem = new BusDataType();
            busItem.BusID = i.BookingId + i.TeiDanNo.ToString();
            busItem.BusName = i.Tokisk_YouSRyakuNm;
            busItem.SitenCdSeq = i.Tokisk_SitenCdSeq;
            busItem.BookingID = i.BookingId;
            busItem.BusVehicle = 1;
            if (!Busgreen.Select(t => t.BusName).ToList().Contains(busItem.BusName))
            {
                Busgreen.Add(busItem);
            }
        }
        for (var i = 1; i < 4; i++)
        {
            BusDataType datanull = new BusDataType()
            {
                BusID = (-i).ToString(),
                BusName = "",
                BookingID = (-i).ToString(),
            };
            Busgreen.Add(datanull);
        }

        Busgray.Clear();
        foreach (var i in Buslines.Where(t => t.KSKbn == 1 && t.YouTblSeq == 0).OrderBy(t => t.TimeStart).ThenBy(t => t.StartDate).ToList())
        {
            BusDataType busItem = new BusDataType();
            busItem.BusID = i.BookingId;
            busItem.BusName = (i.SyaSyu_SyaSyuNm == null ? "指定なし" : i.SyaSyu_SyaSyuNm) + "/" + i.CodeKb_CodeKbn;
            busItem.BookingID = i.BookingId;
            busItem.BusVehicle = 2;
            if (!Busgray.Select(t => t.BusName).ToList().Contains(busItem.BusName))
            {
                Busgray.Add(busItem);
            }
        }

        if(Param.IsDivided == true)
        {
            for (var i = 4; i < 10; i++)
            {
                BusDataType datanull = new BusDataType()
                {
                    BusID = (-i).ToString(),
                    BusName = "",
                    BookingID = (-i).ToString(),
                };
                Busgray.Add(datanull);
            }
        }
        else { 
            for (var i = 4; i < 7; i++)
            {
                BusDataType datanull = new BusDataType()
                {
                    BusID = (-i).ToString(),
                    BusName = "",
                    BookingID = (-i).ToString(),
                };
                Busgray.Add(datanull);
            }
        }
        //add busrepair to busline
        if (Busrepair.Count != 0)
        {
            foreach (TKD_ShuriData t in Busrepair)
            {
                ItemBus newBusrepairdata = new ItemBus();
                newBusrepairdata.BookingId = "0";
                newBusrepairdata.haUnkRen = 0;
                newBusrepairdata.TeiDanNo = 0;
                newBusrepairdata.BunkRen = 0;
                newBusrepairdata.HenKai = 0;
                newBusrepairdata.KSKbn = 2;
                newBusrepairdata.Id = "";
                newBusrepairdata.Shuri_ShuriTblSeq = t.Shuri_ShuriTblSeq;
                newBusrepairdata.BusLine = t.Shuri_SyaRyoCdSeq.ToString();
                newBusrepairdata.StartDate = t.Shuri_ShuriSYmd;
                newBusrepairdata.EndDate = t.Shuri_ShuriEYmd;
                newBusrepairdata.TimeStart = int.Parse(t.Shuri_ShuriSTime);
                newBusrepairdata.TimeEnd = int.Parse(t.Shuri_ShuriETime);
                newBusrepairdata.StartDateDefault = t.Shuri_ShuriSYmd; ;
                newBusrepairdata.EndDateDefault = t.Shuri_ShuriEYmd;
                newBusrepairdata.TimeStartDefault = int.Parse(t.Shuri_ShuriSTime);
                newBusrepairdata.TimeEndDefault = int.Parse(t.Shuri_ShuriETime);
                newBusrepairdata.ColorLine = "color-9";
                newBusrepairdata.IsBusRepair = true;
                newBusrepairdata.Status = 1;
                newBusrepairdata.CCSStyle = "";
                newBusrepairdata.Top = 0.3125;
                newBusrepairdata.Height = 2;
                newBusrepairdata.Width = BusScheduleHelper.calwidth(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), newBusrepairdata.EndDate, newBusrepairdata.TimeEnd.ToString("D4"), Param.Number_of_days);
                newBusrepairdata.Left = BusScheduleHelper.calleft(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
                newBusrepairdata.WidthDefault = BusScheduleHelper.calwidth(Width, newBusrepairdata.StartDateDefault, newBusrepairdata.TimeStartDefault.ToString("D4"), newBusrepairdata.EndDateDefault, newBusrepairdata.TimeEndDefault.ToString("D4"), Param.Number_of_days);
                newBusrepairdata.LeftDefault = BusScheduleHelper.calleft(Width, newBusrepairdata.StartDateDefault, newBusrepairdata.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
                newBusrepairdata.DanTaNm = "";
                newBusrepairdata.IkNm = "";
                newBusrepairdata.TokuiNm = "";
                newBusrepairdata.Text = t.Text;
                newBusrepairdata.Tooltip = t.Tooltip;
                newBusrepairdata.AllowDrop = false;
                newBusrepairdata.AllowEdit = false;
                newBusrepairdata.ShuriCdSeq = t.Shuri_ShuriCdSeq;
                newBusrepairdata.BikoNm = t.Shuri_BikoNm;
                int brandid = Busnames.Where(x => x.BusID == t.Shuri_SyaRyoCdSeq.ToString()).First().BusBranchID;
                newBusrepairdata.BranchId = brandid;
                newBusrepairdata.CompanyId = branchchart.Where(a => a.EigyoCdSeq == brandid).First().CompanyCdSeq;
                Buslines.Add(newBusrepairdata);
            }
        }
        if (Buslines.Count != 0)
        {
            foreach (var item in Buslines)
            {
                if (item.BusLine != "0" && item.KSKbn == 2 && Busnames.Where(x => x.BusID == item.BusLine).Count() > 0)
                {
                    int brandid = Busnames.Where(x => x.BusID == item.BusLine).First().BusBranchID;
                    item.BranchId = brandid;
                    item.CompanyId = branchchart.Where(a => a.EigyoCdSeq == brandid).First().CompanyCdSeq;
                }
            }
        }


        KyoSHeDatabyDatelst.Clear();
        int d = Param.Number_of_days;
        for (int i = 1; i <= d; i++)
        {
            KyoSHeDatabyDate KyoSHeDatabyDateitem = new KyoSHeDatabyDate();
            KyoSHeDatabyDateitem.date = Date.AddDays(i - 1);
            List<TPM_KyoSHeData> KyoSHeData = await TPM_KyoSHeDataService.Getdata(Date.AddDays(i - 1), branchlst.ToArray());
            foreach (var item in KyoSHeData)
            {
                KyoSHeData.Where(t => t.SyainCdSeq == item.SyainCdSeq && t.EndYmd == item.EndYmd).First().CompanyCdSeq = branchchart.Where(a => a.EigyoCdSeq == item.EigyoCdSeq).First().CompanyCdSeq;
            }
            KyoSHeDatabyDateitem.KyoSHelst = KyoSHeData;
            int[] iddriver = { 1, 2 };
            int[] idguider = { 3, 4 };
            List<int> SyainCdSeqdriverslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => iddriver.Contains(t.SyokumuCdSeq)).Select(t => t.SyainCdSeq).ToList();
            List<int> SyainCdSeqguiderslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => idguider.Contains(t.SyokumuCdSeq)).Select(t => t.SyainCdSeq).ToList();
            SyainCdSeqdriverslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => iddriver.Contains(t.SyokumuCdSeq)).Select(t => t.SyainCdSeq).ToList();
            SyainCdSeqguiderslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => idguider.Contains(t.SyokumuCdSeq)).Select(t => t.SyainCdSeq).ToList();
            KyoSHeDatabyDateitem.Kikyujdriverlst = await TPM_KyoSHeDataService.Getdataoff(Date.AddDays(i - 1), SyainCdSeqdriverslt.ToArray());
            KyoSHeDatabyDateitem.Kikyujguiderlst = await TPM_KyoSHeDataService.Getdataoff(Date.AddDays(i - 1), SyainCdSeqguiderslt.ToArray());
            KyoSHeDatabyDatelst.Add(KyoSHeDatabyDateitem);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"OnInitializedAsync() Start");
        TPM_YoyKbnDataService = ScopedServices.GetRequiredService<ITPM_YoyKbnDataListService>();
        TPM_CompnyDataService = ScopedServices.GetRequiredService<ITPM_CompnyDataListService>();
        TPM_EigyosDataService = ScopedServices.GetRequiredService<ITPM_EigyosDataListService>();
        BusDataService = ScopedServices.GetRequiredService<IBusDataListService>();
        BusBookingDataService = ScopedServices.GetRequiredService<IBusBookingDataListService>();
        BusTooltipService = ScopedServices.GetRequiredService<ILoadBusTooltipListService>();
        TPM_TokiskDataService = ScopedServices.GetRequiredService<ITPM_TokiskDataListService>();
        TKD_YoshaDataService = ScopedServices.GetRequiredService<ITKD_YoshaDataListService>();
        TKD_HaishaDataService = ScopedServices.GetRequiredService<ITKD_HaishaDataListService>();
        TKD_ShuriDataService = ScopedServices.GetRequiredService<ITKD_ShuriDataListService>();
        TPM_CodeKbnService = ScopedServices.GetRequiredService<ITPM_CodeKbListService>();
        TPM_KyoSHeDataService = ScopedServices.GetRequiredService<ITPM_KyoSHeDataListService>();
        TKD_KakninDataService = ScopedServices.GetRequiredService<ITKD_KakninDataListService>();
        TPM_CalendDataService = ScopedServices.GetRequiredService<ITPM_CalendDataListService>();
        TPM_SyaRyoService = ScopedServices.GetRequiredService<IVPM_SyaRyoListService>();
        branchchart = new List<BranchChartData>();
        Param = new ConfigBusSchedule();
        Param.Mode = (int)BusLineMode.View;
        Param.ActiveV = (int)ViewMode.Large;
        Param.ActiveG = (int)GroupMode.All;
        Param.ActiveP = (int)DayMode.ThreeDays;
        Param.ActiveCPT = (int)TimeMode.ThreeHours;
        Param.ActiveL = (int)LineDrawMode.Normal;
        Param.ActiveS1 = (int)SortVehicleLineMode.Model_Vehicle;
        Param.ActiveS2 = (int)SortVehicleNameMode.Model_Vehicle;
        Param.ActiveS3 = (int)DisplayLineMode.Custom;
        Param.ActiveR = 0;
        if (Param.ActiveP == (int)DayMode.OneDay)
        {
            Param.Number_of_days = 1;
        }
        else if (Param.ActiveP == (int)DayMode.ThreeDays)
        {
            Param.Number_of_days = 3;
        }
        else if (Param.ActiveP == (int)DayMode.Week)
        {
            Param.Number_of_days = 7;
        }
        else if (Param.ActiveP == (int)DayMode.Month)
        {
            Param.Number_of_days = 31;
        }
        BusscheduleInsert.BranchID = 1;
        BusscheduleInsert.CompanyID = 1;
        BusscheduleInsert.Loginuser = 1;
        BusscheduleInsert.Itembus = businsert;
        isLoading = true;
        reservation = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
        companychart = await TPM_CompnyDataService.GetCompany(Common.TenantID);
        KakninLst = await TKD_KakninDataService.GetData();
        tmpcompanychart.Add(allcompany);
        foreach (var i in companychart)
        {
            tmpcompanychart.Add(i);
            comlst.Add(i.CompanyCdSeq);
            List<BranchChartData> branchchartlst = new List<BranchChartData>();
            branchchartlst = await TPM_EigyosDataService.GetBranchbyCompany(i.CompanyCdSeq, Common.TenantID);
            branchchart.AddRange(branchchartlst);
        }
        tmpbranchchart.Add(allbranch);
        foreach (var i in branchchart)
        {
            tmpbranchchart.Add(i);
            if (!branchlst.Contains(i.EigyoCdSeq))
            {
                branchlst.Add(i.EigyoCdSeq);
            }
        }
        SelectedCompanyItems = tmpcompanychart;
        SelectedBranchItems = tmpbranchchart;
        DisplayLstSelectedCompany();
        DisplayLstSelectedBranch();

        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        _action = PressEsc;
        Console.WriteLine($"OnInitializedAsync() Start");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"OnAfterRenderAsync(bool {firstRender}) Start");
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "onInit");
        //await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "drawLineInsert");
        await JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 5);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 2);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 100);
        await JSRuntime.InvokeVoidAsync("setEventforTimeInput");
        if (Param.Mode == (int)BusLineMode.View || Param.Mode == (int)BusLineMode.Zoom)
        {
            await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "Roll", 1);

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "Roll", 2);
        }
        if (firstRender)
        {
            w = (double)await BrowserResizeService.GetInnerWidth();
            if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
            {
                Width = 5760;
            }
            if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
                Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
                Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
            {
                Width = w;
            }
            if (Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
            {
                Width = w * 3;
            }
            if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
            {
                Width = w * 7;
            }
            if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
                Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
            {
                Width = Math.Round(w / 3 * 7);
            }
            if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
            {
                Width = w * 31;
            }
            if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
                Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
            {
                Width = Math.Round(w / 3 * 31);
            }
            if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
            {
                Width = Math.Round(w / 7 * 31);
            }
            BrowserResizeService.OnResize += BrowserHasResized;
            await JSRuntime.InvokeAsync<object>("browserResize.registerResizeCallback");
            BrowserResizeService.OnCallbackWidth += BrowserHasCallbackWidth;
            await JSRuntime.InvokeAsync<object>("browserResize.registerWidthCallback");
            await InvokeAsync(StateHasChanged);
        }
        Console.WriteLine($"OnAfterRenderAsync(bool {firstRender}) End");
    }

    private async Task BrowserHasResized()
    {
        w = (double)await BrowserResizeService.GetInnerWidth();
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
            Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = Math.Round(w / 7 * 31);
        }
        StateHasChanged();
    }

    private async Task BrowserHasCallbackWidth()
    {
        w = (double)await BrowserResizeService.GetCallbackInnerWidth();
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
            Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = Math.Round(w / 7 * 31);
        }
        StateHasChanged();
    }
    public async void ItemClick(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = "";
        switch (e.MenuItem.Id)
        {
            case "menuitem-delete":
                TKD_HaishaDataService.Updatebusdeletedata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, 1);
                break;
            case "menuitem-merge":
                await Task.Run(() =>
                {
                    TKD_HaishaDataService.UpdatebusMergedata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, 1);
                });
                break;
            case "menuitem-simpledispatch":
                TKD_HaishaDataService.UpdatebusSimpledata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, 1);
                break;
            case "menuitem-undo":
                TKD_HaishaDataService.UpdatebusUndodata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, 1);
                break;
            case "menuitem-reservation-correction":
                NavigationManager.NavigateTo(string.Format("/?UkeCd={0}", update.BookingId.Substring(5)));
                break;
            case "menuitem-reservation-copy":
                NavigationManager.NavigateTo("BookingInputMultiCopy");
                break;
            case "menuitem-staff":
                NavigationManager.NavigateTo("Staff", true);
                break;
            case "menuitem-buscoordination":
                NavigationManager.NavigateTo("buscoordination", true);
                break;
            case "download_report_operating_instructions":
                url=baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Download, update.BookingId,update.TeiDanNo, update.haUnkRen,  update.BunkRen,1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "preview_report_operating_instructions":
                url=baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Preview, update.BookingId,update.TeiDanNo, update.haUnkRen,  update.BunkRen,1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
              case "download_report_flight_record_book":
                url=baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Download, update.BookingId,update.TeiDanNo, update.haUnkRen,  update.BunkRen,2);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "preview_report_flight_record_book":
                url=baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Preview, update.BookingId,update.TeiDanNo, update.haUnkRen,  update.BunkRen,2);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    public async void Simpledispatch(ItemClickEventArgs e)
    {
        ItemBus currentBooking = e.Data as ItemBus;
        await Task.Run(() =>
        {
            TKD_HaishaDataService.UpdatebusMergedata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, 1);
        });
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }
    public void Dispose()
    {
        BrowserResizeService.OnResize -= BrowserHasResized;
        BrowserResizeService.OnCallbackWidth -= BrowserHasCallbackWidth;
    }
    void MenuOnAppearingHandler(MenuAppearingEventArgs e)
    {
        if (e.Data != null)
        {
            var currentBookingItem = e.Data as ItemBus;
            e.PreventShow = !currentBookingItem.CanShowMenu;
        }
    }
    void ItemOnAppearingHandler(ItemAppearingEventArgs e)
    {
        try
        {
            var currentBookingItem = e.Data as ItemBus;
            update = new ItemBus();
            update = e.Data as ItemBus;
            switch (e.MenuItem.Id)
            {
                case "menuitem-reservation-copy":
                    e.IsEnabled = false;
                    break;
                case "3":
                    e.IsEnabled = false;
                    break;
                case "10":
                    e.IsEnabled = false;
                    break;
                case "9":
                    e.IsEnabled = false;
                    break;
                case "menuitem-delete":
                    e.IsEnabled = currentBookingItem.CanBeDeleted;
                    break;
                case "menuitem-merge":
                    e.IsEnabled = currentBookingItem.CanBeDeleted;
                    break;
                case "menuitem-simpledispatch":
                    e.IsEnabled = currentBookingItem.CanSimpledispatch;
                    if (currentBookingItem.ColorLine == "color-8")
                    {
                        e.IsEnabled = false;
                    }
                    break;
                case "menuitem-undo":
                    if (currentBookingItem.KSKbn == 1 && currentBookingItem.YouTblSeq == 0 || currentBookingItem.KSKbn == 1 && currentBookingItem.YouTblSeq > 0)
                    {
                        e.IsEnabled = currentBookingItem.CanSimpledispatch;
                    }
                    else
                    {
                        e.IsEnabled = !currentBookingItem.CanSimpledispatch;
                    }
                    if (currentBookingItem.ColorLine == "color-8")
                    {
                        e.IsEnabled = false;
                    }
                    break;
            }
        }
        catch (Exception)
        {
            //TODO logging exception
            e.IsEnabled = false;
        }
    }

    private static Action _action;
    [JSInvokable]
    public static void pressKey()
    {
        _action.Invoke();
    }

    private void PressEsc()
    {
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = false;
        StateHasChanged();
    }

    public void OpenBusAllocation()
    {
        NavigationManager.NavigateTo("busallocation");
    }

    public async Task OnCallBackIdCode(TPM_CodeKbData code)
    {
        CodeKbnItem = code;
        StateHasChanged();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    public async Task HandleUpdateZoom(string text)
    {
        setWidth();
        setNumberOfDate();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    public void setWidth()
    {
        if (Param.ActiveP != (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute || Param.ActiveP < (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Param.ActiveCPT = (int)TimeMode.OneHour;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
            Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = Math.Round(w / 7 * 31);
        }
    }

    public void setNumberOfDate()
    {
        if (Param.ActiveP == (int)DayMode.OneDay)
        {
            Param.Number_of_days = 1;
        }
        else if (Param.ActiveP == (int)DayMode.ThreeDays)
        {
            Param.Number_of_days = 3;
        }
        else if (Param.ActiveP == (int)DayMode.Week)
        {
            Param.Number_of_days = 7;
        }
        else if (Param.ActiveP == (int)DayMode.Month)
        {
            Param.Number_of_days = 31;
        }
    }

    public void OpenJourneys()
    {
        PopupJourney = true;
        StateHasChanged();
    }

    private async Task CancelJourney(MouseEventArgs e)
    {
        PopupJourney = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    public void OpenTehai()
    {
        PopupTehai = true;
        StateHasChanged();
    }

    private void DisplayLstSelectedCompany()
    {
        if (SelectedCompanyItems.Count() == 0)
        {
            showSelectedCompanies = "選択項目：0";
        }
        else if (SelectedCompanyItems.Count() == 1)
        {
            foreach (var item in SelectedCompanyItems)
            {
                showSelectedCompanies = item.CompanyNm;
            }
        }
        else if (SelectedCompanyItems.Count() > 1 && SelectedCompanyItems.Count() < tmpcompanychart.Count())
        {
            showSelectedCompanies = "選択項目：" + SelectedCompanyItems.Count().ToString();
        }
        else if (SelectedCompanyItems.Count() == tmpcompanychart.Count())
        {
            showSelectedCompanies = "すべて";
        }
    }

    private void DisplayLstSelectedBranch()
    {
        if (SelectedBranchItems.Count() == 0)
        {
            showSelectedBranches = "選択項目：0";
        }
        else if (SelectedBranchItems.Count() == 1)
        {
            foreach (var item in SelectedBranchItems)
            {
                showSelectedBranches = item.RyakuNm;
            }
        }
        else if (SelectedBranchItems.Count() < tmpbranchchart.Count())
        {
            showSelectedBranches = "選択項目：" + SelectedBranchItems.Count().ToString();
        }
        else if (SelectedBranchItems.Count() == tmpbranchchart.Count())
        {
            showSelectedBranches = "すべて";
        }
    }

    public async void ItemClickReport(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = ""; 
        switch (e.MenuItem.Id)
        {
            case "previewReportTenkokiroku":
                url=baseUrl + "/attendanceconfirmreport";
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Preview, Date);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadReportTenkokiroku":
                url=baseUrl + "/attendanceconfirmreport";
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Download, Date);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "previewUnkoushijishoReport":
                url=baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Preview, Date,1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadUnkoushijishoReport":
                url=baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Download, Date,1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
                
                 case "previewJomukirokuboReport":
                url=baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Preview, Date,2);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadJomukirokuboReport":
                url=baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Download, Date,2);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    public async void ItemClickBusReport(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = baseUrl + "/busreports";
        switch (e.MenuItem.Id)
        {
            case "previewBusReport":
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Preview, Date);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadBusReport":
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Download, Date);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    public async void ItemClickBusCooradinationReport(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = baseUrl + "/buscoordination";
        switch (e.MenuItem.Id)
        {
            case "BusCoooradination_Preview":
                url = url + string.Format("/?Option={0}&UnkobiDate={1}&Ukeno={2}", OptionReport.Preview,update.Unkobi_StartYmd, update.UkeCd);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "BusCoooradination_Download":
                url = url + string.Format("/?Option={0}&UnkobiDate={1}&Ukeno={2}", OptionReport.Download, update.Unkobi_StartYmd, update.UkeCd);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BusSchedule> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BrowserResizeService BrowserResizeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper BusScheduleHelper { get; set; }
    }
}
#pragma warning restore 1591
