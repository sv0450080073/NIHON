#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\BusReports.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "717586ea8f113585e8ebacaa479302f0a19a8c8b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\Pages\BusReports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/busreports")]
    public partial class BusReports : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 197 "E:\Project\HassyaAllrightCloud\Pages\BusReports.razor"
       
    [Parameter] public string Option { get; set; }
    [Parameter] public string Date { get; set; }
    EditContext formContext;
    BusReportData reportCondition = new BusReportData();
    DateTime operationDate = DateTime.Today;
    List<CompanyChartData> companychartlst = new List<CompanyChartData>();
    IEnumerable<CompanyChartData> SelectedCompanyItems { get; set; } = new List<CompanyChartData>();
    List<DepartureOfficeData> vehicledispatchofficelst = new List<DepartureOfficeData>();
    List<ReservationData> reservationlst = new List<ReservationData>();
    List<OutputOrderData> outputorderlst = new List<OutputOrderData>();
    List<string> emptyItemMessage = new List<string>();
    List<string> undeliveredlst = new List<string>();
    List<string> temporarycarlst = new List<string>();
    List<string> sizeofpaperlst = new List<string>();
    CompanyChartData allcompany = new CompanyChartData();
    DepartureOfficeData allbranch = new DepartureOfficeData();
    ReservationData allreservation = new ReservationData();
    VpmSyain SyainNmItem = new VpmSyain();
    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    string showSelectedCompany = "";
    string EmptyCompanyMessage = "";
    string EmptyBranchMessage = "";
    string EmptyBookingTypeMessage = "";
    string MessageCheckDataExist = "";
    bool checkCompanyAll { get; set; } = true;
    bool CheckSelectedVehicleDispatchToAll = true;
    bool CheckSelectedReservationEndAll = true;
    bool checkNullItem = false;
    bool OpenPopPreview = false;
    bool PopupCheckData { get; set; } = false;
    #region string LocalizationInit
    string PageTitleReport;
    string FormTitle;
    string OperationDate;
    string Company;
    string VehicleDispatchOffice;
    string ReservationCategory;
    string Undelivered;
    string TemporaryCarNumber;
    string OutputOrder;
    string SizeOfPaper;
    string Preview;
    string Export;
    string TitlePopupViewer;
    string TitlePopupInfo;
    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        PageTitleReport = Lang["PageTitle"];
        FormTitle = Lang["FormTitle"];
        OperationDate = Lang["OperationDate"];
        Company = Lang["Company"];
        VehicleDispatchOffice = Lang["VehicleDispatchOffice"];
        ReservationCategory = Lang["ReservationCategory"];
        Undelivered = Lang["Undelivered"];
        TemporaryCarNumber = Lang["TemporaryCarNumber"];
        OutputOrder = Lang["OutputOrder"];
        SizeOfPaper = Lang["SizeOfPaper"];
        Preview = Lang["PreviewButton"];
        Export = Lang["ExportButton"];
        TitlePopupViewer = Lang["TitlePopupViewer"];
        TitlePopupInfo = Lang["TitlePopupInfo"];
        EmptyCompanyMessage = Lang["BI_T001"];
        EmptyBranchMessage = Lang["BI_T006"];
        EmptyBookingTypeMessage = Lang["BI_T007"];
        MessageCheckDataExist = Lang["BI_T005"];
    }
    #endregion

    #region Component Lifecycle
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        formContext = new EditContext(reportCondition);
        companychartlst = await TPM_CompnyDataService.GetCompany(Common.TenantID);
        
        if (companychartlst == null)
        {
            companychartlst = new List<CompanyChartData>();
        }
        else
        {
            companychartlst.Insert(0, allcompany);
            SelectedCompanyItems = companychartlst;
        }
        vehicledispatchofficelst = await TPM_EigyosDataService.GetAllBranchData(Common.TenantID);     
        if (vehicledispatchofficelst == null)
        {
            vehicledispatchofficelst = new List<DepartureOfficeData>();
            //vehicledispatchofficelst.Add(new DepartureOfficeData { EigyoCdSeq = -1 });
        }
        else
        {
            vehicledispatchofficelst.Insert(0, allbranch);
        }
        reservationlst = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
        if (reservationlst == null)
        {
            reservationlst = new List<ReservationData>();
           // reservationlst.Add(new ReservationData {YoyaKbnSeq=-1 });
        }
        else
        {
            reservationlst.Insert(0, allreservation);
        }

        undeliveredlst = new List<string>(){
            "未出力",
            "出力",
        };
        temporarycarlst = new List<string>(){
            "未出力",
            "出力",
        };
        outputorderlst = new List<OutputOrderData>();
        outputorderlst = OutputOrderListData.OutputOrderlst;

        sizeofpaperlst = new List<string>(){
            "A3",
            "A4",
            "B4",
        };
        SyainNmItem = await TPM_CompnyDataService.GetSyainNm(Common.UpdSyainCd);

        CheckDataNullFromService();
        await Load();
    }
    /// <summary>
    /// check data null
    /// </summary>
    void CheckDataNullFromService()
    {
        if (companychartlst == null || companychartlst.Count == 0)
        {
            emptyItemMessage.Add(EmptyCompanyMessage);
        }
        if (vehicledispatchofficelst.Count == 0 || vehicledispatchofficelst == null)
        {
            emptyItemMessage.Add(EmptyBranchMessage);
        }
        if (reservationlst.Count == 0 || reservationlst == null)
        {
            emptyItemMessage.Add(EmptyBookingTypeMessage);
        }
    }
    /// <summary>
    /// Load data
    /// </summary>
    /// <returns></returns>
    async Task Load()
    {
        if (emptyItemMessage.Count > 0) checkNullItem = true;
        reportCondition.OperationDate = DateTime.Today;
        if (companychartlst?.Count >= 1)
        {
            reportCondition.CompanyChartData = SelectedCompanyItems.ToList();
        }
        if (vehicledispatchofficelst.Count >= 1)
        {
            reportCondition.VehicleDispatchOffice1 = vehicledispatchofficelst.First();
            reportCondition.VehicleDispatchOffice2 = vehicledispatchofficelst.First();
        }
        if (reservationlst.Count >= 1)
        {
            reportCondition.ReservationStart = reservationlst.First();
            reportCondition.ReservationEnd = reservationlst.First();
        }
        reportCondition.Undelivered = undeliveredlst.First();
        reportCondition.TemporaryCar = temporarycarlst.First();
        reportCondition.OutputOrder = outputorderlst.First();
        reportCondition.SizeOfPaper = sizeofpaperlst.First();
        reportCondition.TenantCdSeq = Commons.Constants.Common.TenantID;
        reportCondition.SyainNm = SyainNmItem.SyainNm == null ? "" : SyainNmItem.SyainNm;
        reportCondition.SyainCd = SyainNmItem.SyainCd == null ? "" : SyainNmItem.SyainCd;
        /*CHECK PARAM*/
        if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(Date) && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()))
        {
            DateTime dateTimeConvert;
            try
            {
                dateTimeConvert = DateTime.ParseExact(Date, "yyyyMMdd", new CultureInfo("ja-JP"));
                reportCondition.OperationDate = dateTimeConvert;
                operationDate = dateTimeConvert;
                NavManager.NavigateTo("/busreports", false);
                bool checkDataExist = false;
                checkDataExist = await checkDataExistInDb(reportCondition);
                if (checkDataExist)
                {
                    if (Option == OptionReport.Preview.ToString())//preview
                    {
                        OpenPopPreview = true;
                    }
                    else //download
                    {
                        await ExportReportAsPdf(1, $"{nameof(HassyaAllrightCloud.Reports.ReportFactory.BusReport)}?" + reportCondition.Uri);
                    }
                }
                else
                {
                    PopupCheckData = true;
                }
            }
            catch
            {
                PopupCheckData = true;
            }
        }
    }
    /// <summary>
    ///
    /// </summary>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "busReportPage");
    }
    #endregion

    #region method value changed
    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    void OnOperationDateChanged(DateTime newDate)
    {
        operationDate = newDate;
        reportCondition.OperationDate = newDate;
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedCompanyItems"></param>
    void OnSelectedCompanyItemsChanged(IEnumerable<CompanyChartData> selectedCompanyItems)
    {
        SelectedCompanyItems = selectedCompanyItems;
        if (SelectedCompanyItems.Count() == 0)
        {
            showSelectedCompany = "選択項目：0";
        }
        else if (SelectedCompanyItems.Count() == 1)
        {
            foreach (var item in SelectedCompanyItems)
            {
                showSelectedCompany = item.Text;
            }
        }
        else if (SelectedCompanyItems.Count() > 1 && SelectedCompanyItems.Count() < companychartlst.Count())
        {
            showSelectedCompany = "選択項目：" + SelectedCompanyItems.Count().ToString();
        }
        else if (SelectedCompanyItems.Count() == companychartlst.Count())
        {
            showSelectedCompany = "すべて";
        }

        if (checkCompanyAll == true && !SelectedCompanyItems.Contains(allcompany))
        {
            SelectedCompanyItems = SelectedCompanyItems.Take(0);
            checkCompanyAll = false;
        }
        if (checkCompanyAll == false && (SelectedCompanyItems.Contains(allcompany) || (!SelectedCompanyItems.Contains(allcompany)
            && SelectedCompanyItems.Count() == companychartlst.Count() - 1)))
        {
            SelectedCompanyItems = companychartlst;
            checkCompanyAll = true;
        }
        if (checkCompanyAll == true && SelectedCompanyItems.Contains(allcompany)
            && SelectedCompanyItems.Count() < companychartlst.Count())
        {
            SelectedCompanyItems = SelectedCompanyItems.Where(t => t.CompanyCdSeq != allcompany.CompanyCdSeq);
            checkCompanyAll = false;
        }
        reportCondition.CompanyChartData = SelectedCompanyItems.ToList();
        vehicledispatchofficelst.Insert(0, allbranch);
        reportCondition.VehicleDispatchOffice1 = vehicledispatchofficelst.First();
        reportCondition.VehicleDispatchOffice2 = vehicledispatchofficelst.First();
        formContext.Validate();
        vehicledispatchofficelst = TPM_EigyosDataService.GetBranchDataByIdCompany(reportCondition.CompanyChartData, Common.TenantID);
        vehicledispatchofficelst.Insert(0, allbranch);
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="departureOffice"></param>
    void OnVehicleDispatchOffice1Changed(DepartureOfficeData departureOffice)
    {
        if (departureOffice.EigyoCdSeq == 0)
        {
            reportCondition.VehicleDispatchOffice1 = departureOffice ?? new DepartureOfficeData();
            reportCondition.VehicleDispatchOffice2 = departureOffice ?? new DepartureOfficeData();
            CheckSelectedVehicleDispatchToAll = true;
        }
        else
        {
            CheckSelectedVehicleDispatchToAll = false;
            reportCondition.VehicleDispatchOffice1 = departureOffice ?? new DepartureOfficeData();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="departureOffice"></param>
    void OnVehicleDispatchOffice2Changed(DepartureOfficeData departureOffice)
    {
        if (departureOffice.EigyoCdSeq == 0)
        {
            reportCondition.VehicleDispatchOffice1 = departureOffice ?? new DepartureOfficeData();
            reportCondition.VehicleDispatchOffice2 = departureOffice ?? new DepartureOfficeData();
            CheckSelectedVehicleDispatchToAll = true;
        }
        else
        {
            reportCondition.VehicleDispatchOffice2 = departureOffice ?? new DepartureOfficeData();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="reservation"></param>
    void OnReservationStartChanged(ReservationData reservation)
    {
        if (reservation.YoyaKbnSeq == 0)
        {
            reportCondition.ReservationStart = reservation ?? new ReservationData();
            reportCondition.ReservationEnd = reservation ?? new ReservationData();
            CheckSelectedReservationEndAll = true;
        }
        else
        {
            CheckSelectedReservationEndAll = false;
            reportCondition.ReservationStart = reservation ?? new ReservationData();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="reservation"></param>
    void OnReservationEndChanged(ReservationData reservation)
    {
        if (reservation.YoyaKbnSeq == 0)
        {
            reportCondition.ReservationStart = reservation ?? new ReservationData();
            reportCondition.ReservationEnd = reservation ?? new ReservationData();
            CheckSelectedReservationEndAll = true;
        }
        else
        {
            CheckSelectedReservationEndAll = false;
            reportCondition.ReservationEnd = reservation ?? new ReservationData();
        }
        formContext.Validate();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnUndeliveredChanged(string newValue)
    {
        reportCondition.Undelivered = newValue;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnTemporaryCarChanged(string newValue)
    {
        reportCondition.TemporaryCar = newValue;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="order"></param>
    void OnOutputOrderChanged(OutputOrderData order)
    {
        reportCondition.OutputOrder = order;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnSizeOfPaperChanged(string newValue)
    {
        reportCondition.SizeOfPaper = newValue;
        InvokeAsync(StateHasChanged);
    }
    #endregion

    #region Action
    /// <summary>
    ///
    /// </summary>
    private void HandleValidSubmit()
    {
        if (formContext.Validate())
        {
            try
            {
                var client = new HttpClient();
            }
            catch
            {
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    async void OpenPopupPreview()
    {
        bool checkDataExist = false;
        checkDataExist = await checkDataExistInDb(reportCondition);
        if (checkDataExist)
        {
            OpenPopPreview = true;
        }
        else
        {
            PopupCheckData = true;
        }
    }
    /// <summary>
    ///
    /// </summary>
    async void DownLoadReport()
    {
        bool checkDataExist = false;
        checkDataExist = await checkDataExistInDb(reportCondition);
        if (checkDataExist)
        {
            await ExportReportAsPdf(1, $"{nameof(HassyaAllrightCloud.Reports.ReportFactory.BusReport)}?" + reportCondition.Uri);
        }
        else
        {
            PopupCheckData = true;
        }
    }
    /// <summary>
    /// check data
    /// </summary>
    /// <param name="busReportData"></param>
    /// <returns></returns>
    async Task<bool> checkDataExistInDb(BusReportData busReportData)
    {
        List<BusReportData> busReportDataList = new List<BusReportData>();
        busReportDataList = await BusReportService.GetInfoMainReport(busReportData);
        if (busReportDataList.Count == 0 || busReportDataList == null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    async Task ExportReportAsPdf(int printMode, string uri)
    {

        var report = new HassyaAllrightCloud.Reports.ReportFactory.BusReportCreator("BusReport", "Report BusReport").GetReport().
            CreateByUrl(uri);
        await new System.Threading.Tasks.TaskFactory().StartNew(() =>
        {
            string fileType = "";
            report.CreateDocument();
            using (MemoryStream ms = new MemoryStream())
            {
                switch (printMode)
                {
                    case 1:
                        fileType = "pdf";
                        report.ExportToPdf(ms);
                        break;
                        /*case (int)PrintMode.SaveAsExcel:
                            fileType = "xlsx";
                            report.ExportToXlsx(ms);
                            break;
                        case (int)PrintMode.Print:
                            PrintToolBase tool = new PrintToolBase(report.PrintingSystem);
                            tool.Print();
                            return;*/
                }
                byte[] exportedFileBytes = ms.ToArray();
                string myExportString = Convert.ToBase64String(exportedFileBytes);
                JSRuntime.InvokeVoidAsync("loadPageScript", "busReportPage", "downloadFilebusReport", myExportString, fileType);
            }

        });
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusReportService BusReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CodeKbListService TPM_CodeKbnService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BusReports> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
