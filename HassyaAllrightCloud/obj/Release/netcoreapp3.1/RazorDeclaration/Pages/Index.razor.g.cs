#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "80534146ad7eec4d465bc855a3b9bf0d4ae6e946"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System.Collections.Generic;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using DevExtreme.AspNet.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using DevExtreme.AspNet.Data.ResponseModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using System.ComponentModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using static HassyaAllrightCloud.Commons.Extensions.EditContextExtensionHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
    public partial class Index : OwningComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 600 "E:\Project\HassyaAllrightCloud\Pages\Index.razor"
       
    string tempstr;
    bool isUpdateSuccess = false;
    bool PopupSaveDataSucess { get; set; } = false;
    bool PopupSaveDataError { get; set; } = false;
    bool PopupUpdateDataSucess { get; set; } = false;
    string RegisteredResult = "";
    string RegisteredResultContent = "";
    string newUkeCd = string.Empty;

    string Rowid = "1";
    short UriKbn;
    [Parameter] public string action { get; set; }
    [Parameter] public string UkeCd { get; set; }
    string PageTitle = "";
    string SubmitText = "";
    public BookingFormData bookingdata = new BookingFormData();
    public MinMaxSettingFormData tmpMinMaxFormData = null;
    EditContext formContext;
    bool PopupVisible { get; set; } = false;
    bool PopupDeletedata { get; set; } = false;
    bool PopupBooking { get; set; } = false;
    bool SubmitBtnEnabledState { get; set; } = false;
    bool ClearAllBtnDisabledState { get; set; } = true;
    bool shouldRender = true;
    bool isPopupEditWhenConfirmed = false;
    bool isCreate = true;
    bool isCopyMode = false;
    List<string> BookingStatusList { get; set; } // To do
    List<string> BillingCategoryList { get; set; } // To do
    List<BookingTypeData> BookingTypeList;
    List<LoadSaleBranch> SaleBranchList;
    List<LoadStaff> StaffList;
    List<LoadCustomerList> CustomerList;
    IEnumerable<BusTypeData> BusTypeList;
    List<InvoiceType> InvoiceTypeList;
    List<string> emptyItemMessage = new List<string>();
    bool isEmptyItem { get; set; } = false;
    bool isAutoAssignPopup { get; set; } = false;
    bool isDisableDetailBtn { get; set; } = true;
    private HassyaAllrightCloud.Pages.Components.BookingInputTab BookingInputTabChild;
    bool checkBooking = false;
    string dateFormat = "yy/MM/dd";
    string baseUrl;
    string DeleteId;
    int maxRow = 200;
    bool disableAll = true;
    bool isLoading = true;
    MinMaxSettingState minMaxState = MinMaxSettingState.None;

    CultureInfo ci;

    private IBusTypeListService BusTypeService { get; set; }
    public IBookingTypeListService TpmYoyKbnService { get; set; }
    public ITPM_CodeKbListService TpmCodeKbListService { get; set; }

    #region Localization string
    string StatusBooking;
    string StatusChecking;
    string StatusConfirmed;
    string PopupTitleUpdateWhenConfirmed;
    string PopupContentUpdateWhenConfimed;
    string AskForUpdate;
    string Confirmation;
    string PopupTitleInfo;
    string PopupTitleError;
    string PopupTitleWarning;
    string PageTitleCreate;
    string PageTitleEdit;
    string PageTitleCopy;
    string UpperLowerSettingsDeleteConfirmMessage;
    string DeleteConfirmMessage;
    string Yes;
    string No;
    string OK;
    string EraseAll;
    string BookingStatus;
    string BookingTypeLabel;
    string SaleBranchLabel;
    string StaffListLabel;
    string OrganizationLabel;
    string CustomerListLabel;
    string ServiceScheduleLabel;
    string DispatchDateTimeLabel;
    string ArrivalDateTimeLabel;
    string CultureInfoStr;
    string PreDaySettingLabel;
    string AftDaySettingLabel;
    string BusTypeCol;
    string BusNumCol;
    string DriverNumCol;
    string UnitBusPriceCol;
    string UnitBusFeeCol;
    string UnitPriceCol;
    string BusPriceCol;
    string GuiderNumCol;
    string UnitGuiderFeeCol;
    string GuiderFeeCol;
    string MinMaxCol;
    string AddRowButton;
    string MinMaxButton;
    string TotalLabel;
    string InvoiceDateLabel;
    string TaxRateLabel;
    string BillingCategory;
    string InvoiceMonthLabel;
    string BusFeeRateLabel;
    string MonthFormat;
    string CreateButton;
    string UpdateButton;
    string CopyButton;
    string CreateResultSuccessMessage;
    string CreateResultScuccessMessageContent;
    string CreateResultErrorMessage;
    string UpdateResultSuccessMessage;
    string UpdateResultErrorMessage;
    string EmptyStaffMessage;
    string EmptySaleBranchMessage;
    string EmptyBookingTypeMessage;
    string EmptyCustomerMessage;
    string EmptyBusTypeMessage;
    string CancelAndReturnButton;
    string UpdateReservationButton;
    string AutoCancelButton;
    string CancelAndReturnText;
    string UpdateReservationText;
    string AutoCancelText;
    string CreateResultUkenoIsFullErrorMessageContent;

    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        StatusBooking = Lang["StatusBooking"];
        StatusChecking = Lang["StatusChecking"];
        StatusConfirmed = Lang["StatusConfirmed"];
        PopupTitleUpdateWhenConfirmed = Lang["PopupTitleUpdateWhenConfirmed"];
        PopupContentUpdateWhenConfimed = Lang["PopupContentUpdateWhenConfimed"];
        AskForUpdate = Lang["AskForUpdate"];
        Confirmation = Lang["Confirmation"];
        PopupTitleError = Lang["PopupTitleError"];
        PopupTitleInfo = Lang["PopupTitleInfo"];
        PopupTitleWarning = Lang["PopupTitleWarning"];
        PageTitleCreate = Lang["PageTitle"];
        PageTitleEdit = Lang["PageTitleEdit"];
        PageTitleCopy = Lang["PageTitleCopy"];
        UpperLowerSettingsDeleteConfirmMessage = Lang["UpperLowerSettingsDeleteConfirmMessage"];
        DeleteConfirmMessage = Lang["DeleteConfirmMessage"];
        Yes = Lang["Yes"];
        No = Lang["No"];
        OK = Lang["OK"];
        EraseAll = Lang["EraseAll"];
        BookingStatus = Lang["BookingStatus"];
        BookingTypeLabel = Lang["BookingTypeLabel"];
        SaleBranchLabel = Lang["SaleBranchLabel"];
        StaffListLabel = Lang["StaffListLabel"];
        OrganizationLabel = Lang["OrganizationLabel"];
        CustomerListLabel = Lang["CustomerListLabel"];
        ServiceScheduleLabel = Lang["ServiceScheduleLabel"];
        DispatchDateTimeLabel = Lang["DispatchDateTimeLabel"];
        ArrivalDateTimeLabel = Lang["ArrivalDateTimeLabel"];
        CultureInfoStr = Lang["CultureInfo"];
        PreDaySettingLabel = Lang["PreDaySettingLabel"];
        AftDaySettingLabel = Lang["AftDaySettingLabel"];
        BusTypeCol = Lang["BusTypeCol"];
        BusNumCol = Lang["BusNumCol"];
        DriverNumCol = Lang["DriverNumCol"];
        UnitBusPriceCol = Lang["UnitBusPriceCol"];
        UnitBusFeeCol = Lang["UnitBusFeeCol"];
        UnitPriceCol = Lang["UnitPriceCol"];
        BusPriceCol = Lang["BusPriceCol"];
        GuiderNumCol = Lang["GuiderNumCol"];
        UnitGuiderFeeCol = Lang["UnitGuiderFeeCol"];
        GuiderFeeCol = Lang["GuiderFeeCol"];
        MinMaxCol = Lang["MinMaxCol"];
        AddRowButton = Lang["AddRowButton"];
        MinMaxButton = Lang["MinMaxButton"];
        TotalLabel = Lang["TotalLabel"];
        InvoiceDateLabel = Lang["InvoiceDateLabel"];
        TaxRateLabel = Lang["TaxRateLabel"];
        BillingCategory = Lang["BillingCategory"];
        InvoiceMonthLabel = Lang["InvoiceMonthLabel"];
        BusFeeRateLabel = Lang["BusFeeRateLabel"];
        MonthFormat = Lang["MonthFormat"];
        CreateButton = Lang["CreateButton"];
        UpdateButton = Lang["UpdateButton"];
        CopyButton = Lang["CopyButton"];
        CreateResultSuccessMessage = Lang["CreateResultSuccessMessage"];
        CreateResultScuccessMessageContent = Lang["CreateResultScuccessMessageContent"];
        CreateResultErrorMessage = Lang["CreateResultErrorMessage"];
        UpdateResultSuccessMessage = Lang["UpdateResultSuccessMessage"];
        UpdateResultErrorMessage = Lang["UpdateResultErrorMessage"];
        EmptyStaffMessage = Lang["EmptyStaffMessage"];
        EmptySaleBranchMessage = Lang["EmptySaleBranchMessage"];
        EmptyBookingTypeMessage = Lang["EmptyBookingTypeMessage"];
        EmptyCustomerMessage = Lang["EmptyCustomerMessage"];
        EmptyBusTypeMessage = Lang["EmptyBusTypeMessage"];
        CancelAndReturnButton = Lang["CancelAndReturnButton"];
        UpdateReservationButton = Lang["UpdateReservationButton"];
        AutoCancelButton = Lang["AutoCancelButton"];
        CancelAndReturnText = Lang["CancelAndReturnText"];
        UpdateReservationText = Lang["UpdateReservationText"];
        AutoCancelText = Lang["AutoCancelText"];
        CreateResultUkenoIsFullErrorMessageContent = Lang["BI_T020"];
    }
    #endregion

    #region Component Lifecycle
    public override Task SetParametersAsync(ParameterView parameters)
    {
        try
        {
            // doesn't have ukecd to copy
            if(parameters.TryGetValue("UkeCd", out string _) == false && parameters.TryGetValue("action", out string _))
            {
                NavManager.NavigateTo("/");
                return null;
            }
            return base.SetParametersAsync(parameters);
        }
        catch (Exception)
        {
            NavManager.NavigateTo("/");
            return null;
            //await base.SetParametersAsync(parameters);
        }
    }

    /// <summary>
    /// Load javascript of page
    /// </summary>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "bookingInputPage");
        base.OnParametersSet();
    }

    /// <summary>
    /// Invoked once, after OnInit is finished.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        isCopyMode = action == "copy";
        LocalizationInit();
        ci = new CultureInfo(CultureInfoStr);
        formContext = new EditContext(bookingdata);
        baseUrl = AppSettingsService.GetBaseUrl();
        BusTypeService = ScopedServices.GetRequiredService<IBusTypeListService>();
        TpmYoyKbnService = ScopedServices.GetRequiredService<IBookingTypeListService>();
        TpmCodeKbListService = ScopedServices.GetRequiredService<ITPM_CodeKbListService>();
        BusTypeList = await BusTypeService.Get(Common.TenantID);
        BookingStatusList = new List<string>()
        {
            "受注",
            "見積"
        }; // to do
        BookingTypeList = (await LoadBookingTypeListAsync()).ToList();
        CustomerList = (await LoadCustomerListAsync()).ToList();
        InvoiceTypeList = (await LoadBillingCategoryListAsync()).ToList();
        isCreate = true;
        if (UkeCd == null || UkeCd == "0")
        {
            checkBooking = true;
            PageTitle = PageTitleCreate;
            SubmitText = CreateButton;
            int tenantID = Common.TenantID;
            await Load(tenantID, Common.CompanyID);
        }
        else
        {
            BookingFormData putData = new BookingFormData();
            try
            {
                putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", Common.TenantID, UkeCd));
            }
            catch (Exception)
            {
                Console.WriteLine();
            }
            if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
            {
                bookingdata.SetBookingFromData(putData);
                checkBooking = true;

                if (isCopyMode)
                {
                    PageTitle = string.Format(PageTitleCopy, UkeCd);
                    SubmitText = CopyButton;
                }
                else
                {
                    PageTitle = string.Format(PageTitleEdit, UkeCd);
                    SubmitText = UpdateButton;
                }
                await Load(Common.TenantID, Common.CompanyID);
                isCreate = false;
            }
            else
            {
                NavManager.NavigateTo("/");
            }

        }
        await base.OnInitializedAsync().ContinueWith((t) => { isLoading = false; });
    }

    /// <summary>
    /// Check if schedule time correct
    /// </summary>
    /// <returns></returns>
    bool IsDisableDetailBtn()
    {
        if (BookingInputTabChild != null && BookingInputTabChild.ActiveTabIndex >= 4)
        {
            minMaxState = MinMaxSettingState.ViewOnly;
            return false;
        }
        if (disableAll) return true;
        return (formContext.GetValidationMessages(() => bookingdata.BusEndDate).Count() > 0
            || formContext.GetValidationMessages(() => bookingdata.BusEndTime.Str).Count() > 0
            || formContext.GetValidationMessages(() => bookingdata.ReservationTabData.SyuKoTime.Str).Count() > 0
            || formContext.GetValidationMessages(() => bookingdata.ReservationTabData.KikTime.Str).Count() > 0);
    }

    /// <summary>
    /// Invoked after each render of the component.
    /// Called for the first time when the component is initialized - firstRender = true
    /// and then after every re-render - firstRender = false.
    /// </summary>
    /// <returns></returns>
    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 2);
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 7);
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 4);
        //JSRuntime.InvokeVoidAsync("tabindexFix");
        JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        JSRuntime.InvokeVoidAsync("setEventforRateField");
        JSRuntime.InvokeAsync<string>("addtabindex", "notabindex");

        if (UkeCd == null || UkeCd == "0")
        {
            JSRuntime.InvokeAsync<string>("dispplayButton", "btnclear");
        }
        else
        {
            JSRuntime.InvokeAsync<string>("hiddenButton", "btnclear");
        }
        JSRuntime.InvokeVoidAsync("loadPageScript", "bookingInputPage", "setTooltipBookingInput");
        JSRuntime.InvokeAsync<string>("loadPageScript", "bookingInputPage", "bookingInputPageTabKey");

        BookingFormData bookingdatatmp = new BookingFormData();
        if (firstRender)
        {
            // Setting maxlength attribute
            JSRuntime.InvokeAsync<string>("focusEditor", "focus");
            bookingdatatmp = bookingdata;
            if (isCopyMode) SubmitBtnEnabledState = true;
            else SubmitBtnEnabledState = false;
        }
        else
        {
            if (formContext.IsModified() && !SubmitBtnEnabledState)
            {
                SubmitBtnEnabledState = true;
                StateHasChanged();
            }
        }
        if (PopupSaveDataSucess)
        {
            JSRuntime.InvokeAsync<string>("focusSubmitButton", "popupsavedata");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("zoomTabBooking");
    }

    /// <summary>
    /// Invoked right before a component re-render is executed.
    /// Prevent render when keydown event is fired by formContext.
    /// </summary>
    /// <returns></returns>
    protected override bool ShouldRender()
    {
        if (shouldRender)
        {
            return true;
        }
        else
        {
            shouldRender = true;
            return false;
        }
    }
    #endregion

    #region Booking Form value changed methods

    /// <summary>
    /// Event call for enable delete button
    /// </summary>
    /// <param name="e"></param>
    void OnSelectedBookingTypeChanged(BookingTypeData e)
    {
        bookingdata.CurrentBookingType = e ?? new BookingTypeData();
        formContext.Validate();
        AffectClearAllBtn();
    }

    void OnSelectedSaleBranchChanged(LoadSaleBranch e)
    {
        bookingdata.SelectedSaleBranch = e ?? new LoadSaleBranch();
        formContext.Validate();
        AffectClearAllBtn();
    }

    void OnSelectedStaffChanged(LoadStaff e)
    {
        bookingdata.SelectedStaff = e ?? new LoadStaff();
        formContext.Validate();
        AffectClearAllBtn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnTextOrganizationNameChanged(string newValue)
    {
        bookingdata.TextOrganizationName = newValue;
        AffectClearAllBtn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void OnCustomerComboboxChanged(LoadCustomerList e)
    {
        bookingdata.SelectedCustomer = e ?? new LoadCustomerList();
        {
            bookingdata.FeeBusRate = bookingdata.SelectedCustomer.TesuRitu.ToString();
            bookingdata.FeeGuiderRate = bookingdata.SelectedCustomer.TesuRituGui.ToString();
        }
        ChangeInvoiceDate();
        if (e != null) BookingInputTabChild.SetSelectedSupplier(e.TokuiSeq, e.SitenCdSeq);
        ClearAllBtnDisabledState = false;
        formContext.Validate();
        StateHasChanged();
    }

    void ChangeInvoiceDate()
    {
        var expectDate = bookingdata.InvoiceDate;
        var dateNum = bookingdata.SelectedCustomer.SimeD == 0 ? bookingdata.InvoiceDate.Day : bookingdata.SelectedCustomer.SimeD;
        if (expectDate.Day > dateNum)
        {
            expectDate = expectDate.AddMonths(1);
        }
        bookingdata.InvoiceMonth = expectDate.ToString(MonthFormat);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnDateStartChanged(DateTime newValue)
    {
        bookingdata.BusStartDate = newValue;
        //bookingdata.BusEndDate = newValue;
        bookingdata.InvoiceDate = newValue; // 配車日時
        bookingdata.InvoiceMonth = newValue.ToString(MonthFormat);

        bookingdata.ReservationTabData.GarageLeaveDate = newValue;
        if (bookingdata.PreDaySetting)
            bookingdata.ReservationTabData.GarageLeaveDate = bookingdata.ReservationTabData.GarageLeaveDate.AddDays(-1);

        OnDateEndChanged(newValue);
        ClearAllBtnDisabledState = false;

        InvokeAsync(StateHasChanged);
    }

    void OnBusStartTimeChanged(object newTime)
    {
        try
        {
            //bookingdata.BusStartTime.Str = newTime.ToString();
            bookingdata.ReservationTabData.SyuKoTime.Str = newTime.ToString();
            bookingdata.ReservationTabData.SyuPatime.Str = newTime.ToString();
        }
        catch (Exception)
        {

        }
        AffectClearAllBtn();
    }

    void OnBusEndTimeChanged(object newTime)
    {
        try
        {
            //bookingdata.BusEndTime.Str = newTime.ToString();
            bookingdata.ReservationTabData.KikTime.Str = newTime.ToString();
        }
        catch (Exception)
        {

        }
        AffectClearAllBtn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnDateEndChanged(DateTime newValue)
    {
        bookingdata.BusEndDate = newValue;
        ClearAllBtnDisabledState = false;
        if (UriKbn == 2)
        {
            bookingdata.InvoiceDate = newValue; // 終日予定
            bookingdata.InvoiceMonth = newValue.ToString(MonthFormat);
        }
        ChangeInvoiceDate();
        bookingdata.ReservationTabData.GarageReturnDate = newValue;
        if (bookingdata.AftDaySetting)
            bookingdata.ReservationTabData.GarageReturnDate = bookingdata.ReservationTabData.GarageReturnDate.AddDays(1);

        InvokeAsync(StateHasChanged);
    }

    void OnPreDayCheckBoxChanged(bool value)
    {
        bookingdata.PreDaySetting = value;
        BookingInputTabChild.OnPreDayChecked(value);
        AffectClearAllBtn();
    }

    void OnAftDayCheckBoxChanged(bool value)
    {
        bookingdata.AftDaySetting = value;
        BookingInputTabChild.OnAfterDayChecked(value);
        AffectClearAllBtn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnDateChanged(DateTime newValue)
    {
        bookingdata.InvoiceDate = newValue;
        bookingdata.InvoiceMonth = newValue.ToString(MonthFormat);
        ChangeInvoiceDate();
        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    #region InputRate Action

    /// <summary>
    /// Occurs when InputRate value of <see cref="BookingFormData.TaxRate"/> changed.
    /// <para>Default value to 10 - ticked 1729</para>
    /// </summary>
    /// <param name="value">New value of rate</param>
    void OnBusTaxRateChanged(string value)
    {
        bookingdata.TaxRate = value;

        ClearAllBtnDisabledState = false;

        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///  Occurs when InputRate value of <see cref="BookingFormData.FeeBusRate"/> changed.
    /// </summary>
    /// <param name="value">New value of rate</param>
    void OnBusFeeTaxRateChanged(string value)
    {
        bookingdata.FeeBusRate = value;

        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Occurs when InputRate value of <see cref="BookingFormData.FeeGuiderRate"/> changed.
    /// </summary>
    /// <param name="value">New value of rate</param>
    void OnGuiderFeeTaxRateChanged(string value)
    {
        bookingdata.FeeGuiderRate = value;

        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }
    #endregion

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void SelectedTaxTypeForBusChanged(TaxTypeList e)
    {
        if (e != null)
        {
            bookingdata.TaxTypeforBus = e;
        }
        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void SelectedTaxTypeForGuiderChanged(TaxTypeList e)
    {
        if (e != null)
        {
            bookingdata.TaxTypeforGuider = e;
        }
        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Booking Grid value changed methods

    /// <summary>
    ///
    /// </summary>
    void AddNewRow()
    {
        int max = this.bookingdata.VehicleGridDataList.Max(t => int.Parse(t.RowID));
        int count = this.bookingdata.VehicleGridDataList.Count();
        if (count < maxRow)
        {
            bookingdata.VehicleGridDataList.Add(new VehicleGridData { RowID = "" + (max + 1), BusNum = "1", DriverNum = "1", UnitBusPrice = "0", UnitBusFee = "0", UnitPrice = "0", BusPrice = "0", GuiderNum = "0", UnitGuiderFee = "0", GuiderFee = "0", busTypeData = new BusTypeData() });
        }
        formContext.Validate();
        ClearAllBtnDisabledState = false;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="rowID"></param>
    void OnSelectedBusTypeChanged(BusTypeData e, string rowID)
    {
        var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
        gridRow.busTypeData = e ?? new BusTypeData();
        formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.busTypeData));
        AffectClearAllBtn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnNumBusChanged(string value, string rowID)
    {
        var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
        if (string.IsNullOrWhiteSpace(value) == false)
        {
            int newValue;
            if (int.TryParse(value, out newValue) && newValue > 0)
            {
                gridRow.BusNum = newValue.ToString();
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.BusNum));
                ClearAllBtnDisabledState = false;
            }
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnNumDriverChanged(string value, string rowID)
    {
        var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
        if (string.IsNullOrWhiteSpace(value) == false)
        {
            int newValue;
            if (int.TryParse(value, out newValue) && newValue > 0)
            {
                gridRow.DriverNum = newValue.ToString();
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.DriverNum));
                ClearAllBtnDisabledState = false;
            }
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnUnitBusPriceChanged(String value, string rowID)
    {
        int tmp;
        if (CommonUtil.NumberTryParse(value, out tmp))
        {
            if (tmp >= 0)
            {
                var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
                gridRow.UnitBusPrice = value;
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.UnitBusPrice));
            }
        }
        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnUnitBusFareChanged(String value, string rowID)
    {
        int tmp;
        if (CommonUtil.NumberTryParse(value, out tmp))
        {
            if (tmp >= 0)
            {
                var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
                gridRow.UnitBusFee = value;
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.UnitBusFee));
            }
        }

        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnNumGuiderChanged(string value, string rowID)
    {
        var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
        if (string.IsNullOrWhiteSpace(value) == false)
        {
            int newValue;
            if (int.TryParse(value, out newValue) && newValue >= 0)
            {
                gridRow.GuiderNum = newValue.ToString();
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.GuiderNum));
                ClearAllBtnDisabledState = false;
            }
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="rowID"></param>
    void OnUnitGuiderChanged(String value, string rowID)
    {
        int tmp;
        if (CommonUtil.NumberTryParse(value, out tmp))
        {
            if (tmp >= 0)
            {
                var gridRow = bookingdata.VehicleGridDataList.First(d => d.RowID == rowID);
                gridRow.UnitGuiderFee = value;
                formContext.NotifyFieldChanged(FieldIdentifier.Create(() => gridRow.UnitGuiderFee));
            }
        }

        ClearAllBtnDisabledState = false;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    ///     ///
    /// </summary>
    /// <param name="status"></param>
    /// <param name="rowId"></param>
    void OnMinMaxPopupVisibleChanged(Boolean status, string rowId)
    {
        Rowid = rowId;
        PopupBooking = status;
        VehicleGridData vehicleGridData = bookingdata.VehicleGridDataList.FirstOrDefault(t => t.RowID == rowId);
        if (status == false)
        { // when click close popup
          // bookingdata.VehicleGridDataList[int.Parse(Rowid) - 1].minMaxForm = tmpMinMaxFormData;
            vehicleGridData.minMaxForm = tmpMinMaxFormData;
            tmpMinMaxFormData = null;
            JSRuntime.InvokeAsync<string>("focusSubmitButton", "hyper" + rowId);
        }
        else // when show popup
        {
            // tmpMinMaxFormData = new MinMaxSettingFormData(bookingdata.VehicleGridDataList[int.Parse(Rowid) - 1].minMaxForm);
            tmpMinMaxFormData = new MinMaxSettingFormData(vehicleGridData.minMaxForm);
            if (!disableAll)
            {
                minMaxState = MinMaxSettingState.None;
            }
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="id"></param>
    protected void ConfirmDelete(string id)
    {
        var verhicalData = bookingdata.VehicleGridDataList.SingleOrDefault(v => v.RowID == id);
        if (verhicalData == null) return;
        var isMinMaxNull = verhicalData.minMaxForm.typeBus == -1;
        DeleteId = id;
        if (isMinMaxNull == true)
        {
            DeleteHOGrid(DeleteId);
        }
        else
        {
            PopupDeletedata = true;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Delete booking when not set Min-Max Data
    /// </summary>
    /// <param name="rowID"></param>
    void DeleteHOGrid(string rowID)
    {
        var itemToRemove = bookingdata.VehicleGridDataList.Single(r => r.RowID == rowID);
        this.bookingdata.VehicleGridDataList.Remove(itemToRemove);
        formContext.NotifyFieldChanged(FieldIdentifier.Create(() => bookingdata.VehicleGridDataList));
        StateHasChanged();
    }

    /// <summary>
    /// Delete booking when set Min-Max Data
    /// </summary>
    /// <param name="args"></param>
    void DeleteHOGridnotnull(MouseEventArgs args)
    {
        if (DeleteId != "")
        {
            var itemToRemove = bookingdata.VehicleGridDataList.Single(r => r.RowID == DeleteId);
            this.bookingdata.VehicleGridDataList.Remove(itemToRemove);
        }
        PopupDeletedata = false;
        formContext.NotifyFieldChanged(FieldIdentifier.Create(() => bookingdata.VehicleGridDataList));
        StateHasChanged();
    }

    #endregion

    void UnitPriceCallBack(string Rowid)
    {
        if (bookingdata.VehicleGridDataList.Count > 0)
        {
            PopupBooking = false;
            var itemToUpdate = bookingdata.VehicleGridDataList.Single(r => r.RowID == Rowid);
            formContext.NotifyFieldChanged(() => itemToUpdate.UnitBusPrice, () => itemToUpdate.UnitBusFee);
        }
        JSRuntime.InvokeAsync<string>("focusSubmitButton", "hyper" + Rowid);
        formContext.Validate();
        StateHasChanged();
    }

    async Task HandleChangeState(CallBackTabBookingState newState)
    {
        switch (newState)
        {
            case CallBackTabBookingState.FixedConfirm:
                await RefreshConfirmTab();
                formContext.MarkAsUnmodified();
                formContext.Validate();
                BookingInputTabChild.isEnableSubmitConfirm = false;
                SubmitBtnEnabledState = false;
                ClearAllBtnDisabledState = false;
                break;
            case CallBackTabBookingState.UpdateBooking:
                await ConfirmUpdate(true);
                break;
            case CallBackTabBookingState.DisableIndex:
                disableAll = true;
                break;
            case CallBackTabBookingState.EnableIndex:
                disableAll = false;
                minMaxState = MinMaxSettingState.None;
                break;
            case CallBackTabBookingState.UpdateConfirmTab:
                await HandleUpdateConfirmTab();
                break;
            case CallBackTabBookingState.UpdateCancelTab:
                await HandleUpdateCancelTab();
                break;
            case CallBackTabBookingState.True:
            case CallBackTabBookingState.False:
            default:
                ClearAllBtnDisabledState = newState == CallBackTabBookingState.True;
                break;
        }
        await InvokeAsync(StateHasChanged);
    }

    async Task Load(int tenantId, int compnyId)
    {
        TkmKasSet tkmKasSet = await Http.GetJsonAsync<TkmKasSet>(baseUrl + "/api/TkmKasSet/" + compnyId);
        UriKbn = tkmKasSet.UriKbn;
        SaleBranchList = (await LoadSaleBranchListAsync()).ToList();
        StaffList = (await LoadStaffListAsync()).ToList();
        if (UkeCd == null || UkeCd == "0" || bookingdata == null || bookingdata.CurrentBookingType.YoyaKbnSeq == -1) // Add new booking input
        {
            bookingdata.VehicleGridDataList.Add(new VehicleGridData { RowID = "1", BusNum = "1", DriverNum = "1", UnitBusPrice = "0", UnitBusFee = "0", UnitPrice = "0", BusPrice = "0", GuiderNum = "0", UnitGuiderFee = "0", GuiderFee = "0", minMaxForm = new MinMaxSettingFormData() });
            bookingdata.TaxTypeforBus = TaxTypeListData.taxTypeList.First();
            bookingdata.TaxTypeforGuider = TaxTypeListData.taxTypeList.First();
            if (StaffList.Count != 0)
            {
                bookingdata.SelectedStaff = StaffList.ToList().Where(t => t.SyainCd == Common.UserId).First();
                bookingdata.SelectedSaleBranch = SaleBranchList.Where(t => t.EigyoCdSeq == bookingdata.SelectedStaff.EigyoCdSeq).First();
            }
            if (BookingTypeList.Count != 0)
            {
                bookingdata.CurrentBookingType = BookingTypeList.ToList().Where(t => t.YoyaKbnSeq == 1).FirstOrDefault();
                if (bookingdata.CurrentBookingType == null)
                {
                    bookingdata.CurrentBookingType = new BookingTypeData() { YoyaKbnSeq = -1 };
                }
            }
        }
        else // Edit exist booking input
        {
            emptyItemMessage.Clear();
            if (StaffList.Count != 0)
            {
                var selectedStaff = StaffList.ToList().Where(t => t.SyainCdSeq == bookingdata.SelectedStaff.SyainCdSeq).First();
                bookingdata.SelectedStaff = AssignSelectedItem(selectedStaff, new LoadStaff(), EmptyStaffMessage);
                var selectedSaleBranch = SaleBranchList.Where(t => t.EigyoCdSeq == bookingdata.SelectedSaleBranch.EigyoCdSeq).First();
                bookingdata.SelectedSaleBranch = AssignSelectedItem(selectedSaleBranch, new LoadSaleBranch(), EmptySaleBranchMessage);
            }
            if (BookingTypeList.Count != 0)
            {
                var currentBookingType = BookingTypeList.ToList().Where(t => t.YoyaKbnSeq == bookingdata.CurrentBookingType.YoyaKbnSeq).First();
                bookingdata.CurrentBookingType = AssignSelectedItem(currentBookingType, new BookingTypeData(), EmptyBookingTypeMessage);
            }
            var selectedCustomer = CustomerList.FirstOrDefault(e => e.TokuiSeq == bookingdata.SelectedCustomer.TokuiSeq &&
                                                                            e.SitenCdSeq == bookingdata.SelectedCustomer.SitenCdSeq);
            bookingdata.SelectedCustomer = AssignSelectedItem(selectedCustomer, new LoadCustomerList(), EmptyCustomerMessage);
            for (int i = 0; i < bookingdata.VehicleGridDataList.Count; i++)
            {
                var busTypeData = BusTypeList.Where(x => x.Katakbn == bookingdata.VehicleGridDataList[i].busTypeData.Katakbn &&
                                x.SyaSyuCdSeq == bookingdata.VehicleGridDataList[i].busTypeData.SyaSyuCdSeq).FirstOrDefault();
                bookingdata.VehicleGridDataList[i].busTypeData = AssignSelectedItem(busTypeData, new BusTypeData(), EmptyBusTypeMessage);
            }
            isEmptyItem = emptyItemMessage.Count > 0;

            if (InvoiceTypeList != null)
            {
                bookingdata.SelectedInvoiceType = InvoiceTypeList.SingleOrDefault(e => e.CodeKbnSeq == bookingdata.SelectedInvoiceType.CodeKbnSeq);
            }
        }
        disableAll = false;
    }

    /// <summary>
    ///
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="selected"></param>
    /// <param name="selectedItem"></param>
    /// <param name="newItem"></param>
    /// <param name="message"></param>
    T AssignSelectedItem<T>(T selectedItem, T newItem, string message)
    {
        if (selectedItem == null)
        {
            if (!emptyItemMessage.Contains(message))
            {
                emptyItemMessage.Add(message);
            }
            return newItem;
        }
        else
        {
            return selectedItem;
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    void ClearAll(MouseEventArgs args)
    {
        int count = bookingdata.VehicleGridDataList.Count();
        bookingdata = new BookingFormData();
        PopupVisible = false;

        for (int i = 1; i < count; i++)
        {
            bookingdata.VehicleGridDataList.Add(new VehicleGridData { RowID = "" + (i + 1), BusNum = "1", DriverNum = "1", UnitBusPrice = "0", UnitBusFee = "0", UnitPrice = "0", BusPrice = "0", GuiderNum = "0", UnitGuiderFee = "0", GuiderFee = "0" });
        }
        BackToInitializeState();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handle keydown to add new row in datagrid with hotkey : Alt && '+'
    /// </summary>
    /// <param name="e"></param>
    void HandleKeyAddNewRow(KeyboardEventArgs e)
    {
        if (e.AltKey && e.Key == "+")
        {
            AddNewRow();
        }
        else
        {
            //Prevent re-render when other key is pressed
            shouldRender = false;
        }
    }

    /// <summary>
    /// Handle action create a new booking. Include handle success and error response.
    /// </summary>
    /// <param name="client">HttpClient assign to send</param>
    /// <param name="booking">Reservation information will be registered.</param>
    /// <returns></returns>
    private async Task HandleCreateNewBooking(HttpClient client, BookingFormData booking)
    {
        HttpResponseMessage response = await client.PostAsync($"{baseUrl}/api/BookingInput/", Http.getStringContentFromObject(booking));

        if (response.IsSuccessStatusCode)
        {
            string newUkeNo = await response.Content.ReadAsStringAsync();
            newUkeCd = newUkeNo.Substring(5);
            RegisteredResult = CreateResultSuccessMessage;
            RegisteredResultContent = string.Format(CreateResultScuccessMessageContent, newUkeCd);
            BackToInitializeState();

            PopupSaveDataSucess = true;
        }
        else
        {
            string errorCode = await response.Content.ReadAsStringAsync();

            if (errorCode == Constants.ErrorMessage.UkenoCdIsFull)
            {
                RegisteredResult = CreateResultErrorMessage;
                RegisteredResultContent = CreateResultUkenoIsFullErrorMessageContent;
            }
            else
            {
                RegisteredResult = CreateResultErrorMessage;
                RegisteredResultContent = string.Empty;
            }

            PopupSaveDataError = true;
        }
    }

    /// <summary>
    ///
    /// </summary>
    private async void HandleValidSubmit()
    {
        bool isValid = formContext.Validate();
        if (isValid)
        {
            disableAll = true;
            var client = new HttpClient();

            if (UkeCd == null || UkeCd == "0")
            {
                bookingdata.IsCopyMode = false;

                await HandleCreateNewBooking(client, bookingdata);
            }
            else
            {
                if (isCopyMode)
                {
                    bookingdata.IsCopyMode = true;
                    bookingdata.UkeNo = string.Format("{0:D5}{1}", Common.TenantID, UkeCd);
                    bookingdata.ConfirmationTabDataList = new List<ConfirmationTabData>();
                    bookingdata.CancelTickedData = new CancelTickedData();

                    await HandleCreateNewBooking(client, bookingdata);

                    BookingFormData putData = new BookingFormData();
                    try
                    {
                        putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", Common.TenantID, UkeCd));
                    }
                    catch (Exception)
                    {
                    }
                    if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
                    {
                        bookingdata.SetBookingFromData(putData);
                        PageTitle = string.Format(PageTitleCopy, newUkeCd);
                        SubmitText = CopyButton;
                        await Load(Common.TenantID, Common.CompanyID);
                    }
                    else
                    {
                        NavManager.NavigateTo("/");
                    }

                }
                else if (string.IsNullOrEmpty(bookingdata.KaktYmd) == false)
                {
                    isPopupEditWhenConfirmed = true;
                }
                else
                {
                    bookingdata.IsCopyMode = false;
                    isAutoAssignPopup = await CheckModifiedBookingData();
                    if (!isAutoAssignPopup)
                    {
                        UpdateBookingInput(false);
                    }
                }
            }
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            SubmitBtnEnabledState = false;
        }
    }

    private async void UpdateBookingInput(bool isUpdateWithAutoAssign)
    {
        var client = new HttpClient();
        bookingdata.IsUpdateWithAutoAssign = isUpdateWithAutoAssign;
        HttpResponseMessage response = await client.PutAsync($"{baseUrl}/api/BookingInput/{string.Format("{0:D5}{1}", Common.TenantID, UkeCd)}", Http.getStringContentFromObject(bookingdata));
        if (response.IsSuccessStatusCode)
        {
            isUpdateSuccess = true;
            RegisteredResult = PopupTitleInfo;
            RegisteredResultContent = UpdateResultSuccessMessage;
        }
        else
        {
            isUpdateSuccess = false;
            RegisteredResult = PopupTitleError;
            RegisteredResultContent = UpdateResultErrorMessage;
        }
        isAutoAssignPopup = false;
        PopupUpdateDataSucess = true;
        try
        {
            BookingFormData putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", Common.TenantID, UkeCd));
            if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
            {
                bookingdata.SetBookingFromData(putData);
            }
        }
        catch (Exception)
        {
        }
        await Load(Common.TenantID, Common.EditBookingInputCompanyID);
        ClearAllBtnDisabledState = true;
        bookingdata.CalculateCancelFee();
        bookingdata.CalculateCancelTaxFee();
        await BookingInputTabChild.SetupJourneyTabAsync();
        await BookingInputTabChild.SetupCancelTabAsync(bookingdata);
        BookingInputTabChild.SetupCOnfirmationTab(bookingdata);
        await BookingInputTabChild.Load(bookingdata);
        formContext.MarkAsUnmodified();
        StateHasChanged();

        //formContext = new EditContext(bookingdata);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    void FocusOnOrganizationNameAgainAndDisabledSubmitButton(EventArgs e)
    {
        if (isCopyMode == false) SubmitBtnEnabledState = false;
        JSRuntime.InvokeAsync<string>("focusEditor", "focus");
    }

    /// <summary>
    ///
    /// </summary>
    void BackToInitializeState()
    {
        bookingdata = new BookingFormData();
        bookingdata.VehicleGridDataList.Add(new VehicleGridData { RowID = "1", BusNum = "1", DriverNum = "1", UnitBusPrice = "0", UnitBusFee = "0", UnitPrice = "0", BusPrice = "0", GuiderNum = "0", UnitGuiderFee = "0", GuiderFee = "0", minMaxForm = new MinMaxSettingFormData() });
        bookingdata.TaxTypeforBus = TaxTypeListData.taxTypeList.First();
        bookingdata.TaxTypeforGuider = TaxTypeListData.taxTypeList.First();
        bookingdata.SelectedStaff = StaffList.ToList().Where(t => t.SyainCd == Common.UserId).First();
        bookingdata.SelectedSaleBranch = SaleBranchList.Where(t => t.EigyoCdSeq == bookingdata.SelectedStaff.EigyoCdSeq).First();
        bookingdata.CurrentBookingType = BookingTypeList.ToList().Where(t => t.YoyaKbnSeq == 1).First();

        ClearAllBtnDisabledState = true;
        SubmitBtnEnabledState = false;
        BookingInputTabChild.SetDefaultValueReservationTab(bookingdata);
        formContext = new EditContext(bookingdata);
    }

    void AffectClearAllBtn()
    {
        ClearAllBtnDisabledState = false;
        StateHasChanged();
    }


    /// <summary>
    /// Check if booking need to auto re-assign vehicle
    /// </summary>
    /// <returns>
    /// true - auto re-assign vehicle => open popup for user to choose
    /// false - no need to re-assign => no popup for user to choose
    /// </returns>
    async Task<bool> CheckModifiedBookingData()
    {
        BookingFormData previous = new BookingFormData();
        try
        {
            previous = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", Common.TenantID, UkeCd));
        }
        catch (Exception)
        {
        }
        if (bookingdata != null && previous?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            return this.bookingdata.VerifyHaishaModified(previous);
        }
        else
        {
            return false;
        }
    }

    void HandleNavigateToEditPage()
    {
        PopupSaveDataSucess = false;
        disableAll = false;
        NavManager.NavigateTo($"?UkeCd={newUkeCd}", true);
    }

    async Task<IEnumerable<string>> LoadBookingStatusListAsync(CancellationToken ct = default)
    {
        return await Task.FromResult(BookingStatusList);
    }

    async Task<IEnumerable<InvoiceType>> LoadBillingCategoryListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<InvoiceType>>(baseUrl + "/api/BookingInput/InvoiceType/");
    }

    async Task<IEnumerable<LoadSaleBranch>> LoadSaleBranchListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<LoadSaleBranch>>(baseUrl + "/api/ReceiveBookingSaleBranch/" + Common.TenantID);
    }

    async Task<IEnumerable<LoadStaff>> LoadStaffListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<LoadStaff>>(baseUrl + "/api/Staff/" + Common.TenantID);
    }

    async Task<IEnumerable<BookingTypeData>> LoadBookingTypeListAsync(CancellationToken ct = default)
    {
        return await TpmYoyKbnService.GetBookingTypeData();
    }

    async Task<IEnumerable<LoadCustomerList>> LoadCustomerListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
    }

    async Task ConfirmUpdate(bool isUpdate)
    {
        isPopupEditWhenConfirmed = false;
        if (isUpdate)
        {
            isAutoAssignPopup = await CheckModifiedBookingData();
            if (!isAutoAssignPopup)
            {
                UpdateBookingInput(false);
            }
        }
        else
        {
            disableAll = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    void HandleSelectedBillingChanged(InvoiceType newValue)
    {
        if (newValue != null)
            bookingdata.SelectedInvoiceType = newValue;
        ClearAllBtnDisabledState = false;
        formContext.Validate();
        AffectClearAllBtn();
    }

    /// <summary>
    /// When close popup update => if(update success) => change to tab user want
    /// </summary>
    void HandleClosePopupUpdate()
    {
        PopupUpdateDataSucess = false;
        if (isUpdateSuccess)
        {
            disableAll = false;
            formContext.MarkAsUnmodified();
            BookingInputTabChild.SetActiveTabIndexToWaitting();
            BookingInputTabChild.isEnableSubmitCancel = false;
            BookingInputTabChild.isEnableSubmitConfirm = false;
        }
        else
        {

        }
    }

    /// <summary>
    /// Update only confirm tab
    /// </summary>
    /// <returns></returns>
    async Task HandleUpdateConfirmTab()
    {
        string ukeNo = string.Format("{0:D5}{1}", Common.TenantID, UkeCd);
        var client = new HttpClient();
        StringContent content = Http.getStringContentFromObject(bookingdata.ConfirmationTabDataList);
        HttpResponseMessage response =
            await client.PutAsync($"{baseUrl}/api/BookingInput/updateConfirmList/{ukeNo}", content);
        if (response.IsSuccessStatusCode)
        {
            isUpdateSuccess = true;
            RegisteredResult = PopupTitleInfo;
            RegisteredResultContent = UpdateResultSuccessMessage;
        }
        else
        {
            isUpdateSuccess = false;
            RegisteredResult = PopupTitleError;
            RegisteredResultContent = UpdateResultErrorMessage;
        }
        BookingFormData putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", Common.TenantID, UkeCd));
        if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            bookingdata.ConfirmationTabDataList = putData.ConfirmationTabDataList;
        }
        BookingInputTabChild.SetupCOnfirmationTab(bookingdata);
        PopupUpdateDataSucess = true;
    }

    async Task RefreshConfirmTab()
    {
        BookingFormData putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", Common.TenantID, UkeCd));
        if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            bookingdata.ConfirmationTabDataList = putData.ConfirmationTabDataList;
        }
        BookingInputTabChild.SetupCOnfirmationTab(bookingdata);
    }

    /// <summary>
    /// Update only cancel tab
    /// </summary>
    /// <returns></returns>
    async Task HandleUpdateCancelTab()
    {
        string ukeNo = string.Format("{0:D5}{1}", Common.TenantID, UkeCd);
        var client = new HttpClient();
        StringContent content = Http.getStringContentFromObject(bookingdata.CancelTickedData);
        HttpResponseMessage response =
            await client.PutAsync($"{baseUrl}/api/BookingInput/updateCancel/{ukeNo}", content);
        if (response.IsSuccessStatusCode)
        {
            isUpdateSuccess = true;
            RegisteredResult = PopupTitleInfo;
            RegisteredResultContent = UpdateResultSuccessMessage;
        }
        else
        {
            isUpdateSuccess = false;
            RegisteredResult = PopupTitleError;
            RegisteredResultContent = UpdateResultErrorMessage;
        }
        BookingFormData putData = await Http.GetJsonAsync<BookingFormData>(baseUrl + "/api/BookingInput/" + string.Format("{0:D5}{1}", Common.TenantID, UkeCd));
        if (putData != null && putData?.CurrentBookingType?.YoyaKbnSeq != -1)
        {
            bookingdata.CancelTickedData.SetData(putData.CancelTickedData);
        }
        await BookingInputTabChild.SetupCancelTabAsync(bookingdata);
        BookingInputTabChild.LoadCancelComboboxValue(bookingdata);
        PopupUpdateDataSucess = true;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<Index> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
