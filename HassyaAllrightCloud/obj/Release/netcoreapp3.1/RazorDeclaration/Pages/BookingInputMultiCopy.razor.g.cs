#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\BookingInputMultiCopy.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3edc39239eddcca7845f7abbe0210312a4be788c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\Pages\BookingInputMultiCopy.razor"
using HassyaAllrightCloud.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\Pages\BookingInputMultiCopy.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\Pages\BookingInputMultiCopy.razor"
using static HassyaAllrightCloud.Commons.Extensions.EditContextExtensionHelper;

#line default
#line hidden
#nullable disable
    public partial class BookingInputMultiCopy : OwningComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 363 "E:\Project\HassyaAllrightCloud\Pages\BookingInputMultiCopy.razor"
       
    [Parameter] public string UkeCd { get; set; }

    protected CultureInfo CurrentCulture { get; set; }
    protected EditContext FormContext { get; set; }

    string baseUrl = string.Empty;
    short uriKbn;
    protected string PageTitle { get; set; } = string.Empty;
    protected string PopupTitle { get; set; } = string.Empty;

    protected bool DisableAll { get; set; } = false;
    protected bool IsLoading { get; set; } = true;
    protected bool IsLoadingCopyData { get; set; }
    protected bool IsShowPopupInfo { get; set; }

    protected List<LoadCustomerList> CustomerList { get; set; }
    protected List<DestinationData> DestinationDataList { get; set; }
    protected List<PlaceData> PlaceDataList { get; set; }
    protected List<DateTime> SelectedDateList { get; set; } = new List<DateTime>();
    protected BusBookingMultiCopyData BookingMultiData { get; set; }

    protected Action OnClosePopupInfo { get; set; }
    protected Func<string> OnGetContentPopupInfo { get; set; }

    #region Localization string
    string PageTitleCopy;
    string OrganizationLabel;
    string CustomerListLabel;
    string DestinationLabel;
    string DepotLabel;
    string ArrivalLabel;
    string ResidenceIndicationLink;
    string CopyItemLabel;
    string DispatchTimeLabel;
    string ArrivalTimeLabel;
    string StartDateTimeLabel;
    string CollectiveSettingCheckbox;
    string ReservationFormLabel;
    string OperatingDayLabel;
    string BoardingPlaceLabel;
    string ProcessLabel;
    string ArrangeLabel;
    string LoadingItemsLabel;
    string IncidentalLabel;
    string SubmitText;
    string DispatchDateTimeLabel;
    string ArrivalDateTimeLabel;
    string DriverNumCol;
    string UnitBusPriceCol;
    string UnitBusFeeCol;
    string UnitPriceCol;
    string BusPriceCol;
    string GuiderNumCol;
    string UnitGuiderFeeCol;
    string GuiderFeeCol;
    string TaxRateLabel;
    string BusFeeRateLabel;
    string VehicleRadio;
    string CultureInfoStr;
    string CopyCategoryLabel;
    string Ok;
    string CreateResultScuccessMessageContent;
    string PopupTitleInfo;
    string PopupTitleError;

    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        PageTitleCopy = Lang["PageTitleCopy"];
        OrganizationLabel = Lang["OrganizationLabel"];
        CustomerListLabel = Lang["CustomerListLabel"];
        DestinationLabel = @Lang["DestinationLabel"];
        DepotLabel = @Lang["DepotLabel"];
        ArrivalLabel = @Lang["ArrivalLabel"];
        ResidenceIndicationLink = @Lang["ResidenceIndicationLink"];
        CopyItemLabel = @Lang["CopyItemLabel"];
        DispatchTimeLabel = @Lang["DispatchTimeLabel"];
        ArrivalTimeLabel = @Lang["ArrivalTimeLabel"];
        StartDateTimeLabel = @Lang["StartDateTimeLabel"];
        CollectiveSettingCheckbox = @Lang["CollectiveSettingCheckbox"];
        ReservationFormLabel = @Lang["ReservationFormLabel"];
        OperatingDayLabel = @Lang["OperatingDayLabel"];
        BoardingPlaceLabel = @Lang["BoardingPlaceLabel"];
        ProcessLabel = @Lang["ProcessLabel"];
        ArrangeLabel = @Lang["ArrangeLabel"];
        LoadingItemsLabel = @Lang["LoadingItemsLabel"];
        IncidentalLabel = @Lang["IncidentalLabel"];
        SubmitText = @Lang["CopyButton"];
        DispatchDateTimeLabel = @Lang["DispatchDateTimeLabel"];
        ArrivalDateTimeLabel = @Lang["ArrivalDateTimeLabel"];
        DriverNumCol = @Lang["DriverNumCol"];
        UnitBusPriceCol = @Lang["UnitBusPriceCol"];
        UnitBusFeeCol = @Lang["UnitBusFeeCol"];
        UnitPriceCol = @Lang["UnitPriceCol"];
        BusPriceCol = @Lang["BusPriceCol"];
        GuiderNumCol = @Lang["GuiderNumCol"];
        UnitGuiderFeeCol = @Lang["UnitGuiderFeeCol"];
        GuiderFeeCol = @Lang["GuiderFeeCol"];
        TaxRateLabel = Lang["TaxRateLabel"];
        BusFeeRateLabel = Lang["BusFeeRateLabel"];
        VehicleRadio = @Lang["VehicleRadio"];
        CultureInfoStr = Lang["CultureInfo"];
        CopyCategoryLabel = Lang["CopyCategoryLabel"];
        Ok = Lang["Ok"];
        CreateResultScuccessMessageContent = Lang["CreateResultScuccessMessageContent"];
        PopupTitleInfo = Lang["PopupTitleInfo"];
        PopupTitleError = Lang["PopupTitleError"];
    }
    #endregion

    #region Component Lifecycle

    /// <summary>
    /// Validate length for ukeCd exact 10
    /// </summary>
    /// <param name="parameters"></param>
    /// <returns></returns>
    public override Task SetParametersAsync(ParameterView parameters)
    {
        try
        {
            if (parameters.TryGetValue("UkeCd", out string ukeCd) == false || ukeCd.Length != 10)
            {
                NavManager.NavigateTo("/");
                return null;
            }
            return base.SetParametersAsync(parameters);
        }
        catch (Exception)
        {
            NavManager.NavigateTo("/");
            return null;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeVoidAsync("setEventforTimeInput");
        JSRuntime.InvokeVoidAsync("addMaxLength", "length", 4);
        JSRuntime.InvokeVoidAsync("addMaxLength", "length", 50);
        base.OnAfterRender(firstRender);

        if (firstRender == false)
        {
            JSRuntime.InvokeVoidAsync("loadPageScript", "bookingInputMultiCopyPage");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        CurrentCulture = new CultureInfo(CultureInfoStr);
        BookingMultiData = new BusBookingMultiCopyData();
        baseUrl = AppSettingsService.GetBaseUrl();
        PageTitle = string.Format(PageTitleCopy, UkeCd);

        TkmKasSet tkmKasSet = await Http.GetJsonAsync<TkmKasSet>(baseUrl + "/api/TkmKasSet/" + Common.CompanyID);
        uriKbn = tkmKasSet.UriKbn;

        await LoadAllDataComboboxAsync();
        var bookingDb = await LoadBookingDataAsync();
        if (bookingDb != null)
        {
            LoadSelectedDataCombobox(bookingDb, bookingDb);
            BookingMultiData.BookingDataToCopy.SetBookingFromData(bookingDb);

            BookingMultiData.DispatchTime.Str = BookingMultiData.BookingDataToCopy.BusStartTime.Str;
            BookingMultiData.ArrivalTime.Str = BookingMultiData.BookingDataToCopy.BusEndTime.Str;
        }
        else
        {
            NavManager.NavigateTo("/", true);
        }

        //BookingMultiData.BookingDataToCopy = BookingData;
        FormContext = new EditContext(BookingMultiData);
        await base.OnInitializedAsync().ContinueWith((t) => { IsLoading = false; });
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == false && IsLoading == false && IsLoadingCopyData == false)
        {
            IsLoadingCopyData = true;
            await LoadCopyDataTableAsync(BookingMultiData).ContinueWith((t) =>
            {
                InvokeAsync(StateHasChanged);
            });
        }
    }

    #endregion

    #region Common Methods

    private async Task LoadCopyDataTableAsync(BusBookingMultiCopyData multiCopyData)
    {
        // https://localhost:5001/BookingInputMultiCopy/{0}?ukeNo=000010000007915
        // ex: https://localhost:5001/BookingInputMultiCopy/unkobi?ukeNo=000010000007915
        string uriFormat = string.Format("{0}/api/BookingInputMultiCopy/{1}?ukeNo={2:D5}{3}", baseUrl, "{0}", Common.TenantID, UkeCd);

        multiCopyData.YykshoCopyData = await Http.GetJsonAsync<TkdYyksho>(string.Format(uriFormat, "yyksho"));
        multiCopyData.UnkobiCopyData = await Http.GetJsonAsync<TkdUnkobi>(string.Format(uriFormat, "unkobi"));
        multiCopyData.MishumCopyDataList = await Http.GetJsonAsync<List<TkdMishum>>(string.Format(uriFormat, "mishumList"));
        multiCopyData.YykSyuCopyDataList = await Http.GetJsonAsync<List<TkdYykSyu>>(string.Format(uriFormat, "yykSyuList"));
        multiCopyData.HaishaCopyDataList = await Http.GetJsonAsync<List<TkdHaisha>>(string.Format(uriFormat, "haishaList"));
        multiCopyData.BookingFareFeeCopyDataList =
            await Http.GetJsonAsync<List<TkdBookingMaxMinFareFeeCalc>>(string.Format(uriFormat, "bookingMaxMinFareFeeCalsList"));
        multiCopyData.BookingFareFeeMeisaiCopyDataList =
            await Http.GetJsonAsync<List<TkdBookingMaxMinFareFeeCalcMeisai>>(string.Format(uriFormat, "bookingMaxMinFareFeeCalcMeisaiList"));
        multiCopyData.KoteiList = await Http.GetJsonAsync<List<TkdKotei>>(string.Format(uriFormat, "koteiList"));
        multiCopyData.KoteiKList = await Http.GetJsonAsync<List<TkdKoteik>>(string.Format(uriFormat, "koteiKList"));
        multiCopyData.TehaiList = await Http.GetJsonAsync<List<TkdTehai>>(string.Format(uriFormat, "tehaiList"));
        multiCopyData.FutaiList = await Http.GetJsonAsync<List<TkdFutTum>>(string.Format(uriFormat, "futumList") + "&futumKbn=1");
        multiCopyData.MFutaiList = await Http.GetJsonAsync<List<TkdMfutTu>>(string.Format(uriFormat, "mfutuList") + "&futumKbn=1");
        multiCopyData.TsumiList = await Http.GetJsonAsync<List<TkdFutTum>>(string.Format(uriFormat, "futumList") + "&futumKbn=2");
        multiCopyData.MTsumiList = await Http.GetJsonAsync<List<TkdMfutTu>>(string.Format(uriFormat, "mfutuList") + "&futumKbn=2");
    }

    private async Task LoadAllDataComboboxAsync()
    {
        CustomerList = (await LoadCustomerListAsync()).ToList();
        DestinationDataList = (await LoadDestinationListAsync()).ToList();
        PlaceDataList = (await LoadPlaceListAsync()).ToList();
    }

    private async Task<BookingFormData> LoadBookingDataAsync()
    {
        var bookingDataDb = await Http.GetJsonAsync<BookingFormData>(string.Format("{0}/api/BookingInput/{1:D5}{2}", baseUrl, Common.TenantID, UkeCd));
        return bookingDataDb;
    }

    /// <summary>
    /// Set selected data of combobox
    /// </summary>
    /// <param name="bookingDest">Booking data to reference to combobox data list</param>
    /// <param name="bookingSource">Booking data contain selected data of combobox</param>
    private void LoadSelectedDataCombobox(BookingFormData bookingDest, BookingFormData bookingSource)
    {
        try
        {
            if (CustomerList != null)
            {
                if (bookingSource?.SelectedCustomer != null)
                {
                    var customer = CustomerList.SingleOrDefault(e => e.TokuiSeq == bookingSource.SelectedCustomer.TokuiSeq && e.SitenCdSeq == bookingSource.SelectedCustomer.SitenCdSeq);
                    bookingDest.SelectedCustomer = customer;
                }
                else
                {
                    bookingDest.SelectedCustomer = null;
                }
            }
            if (DestinationDataList != null)
            {
                if (bookingSource?.ReservationTabData?.Destination != null)
                {
                    int basyoMapCdSeq = bookingSource.ReservationTabData.Destination.BasyoMapCdSeq;
                    bookingDest.ReservationTabData.Destination = DestinationDataList.SingleOrDefault(d => d.BasyoMapCdSeq == basyoMapCdSeq);
                }
                else
                {
                    bookingDest.ReservationTabData.Destination = null;
                }
            }
            if (PlaceDataList != null)
            {
                if (bookingSource?.ReservationTabData?.DespatchingPlace != null)
                {
                    int haiSCdSeq = bookingSource.ReservationTabData.DespatchingPlace.HaiSCdSeq;
                    bookingDest.ReservationTabData.DespatchingPlace = PlaceDataList.SingleOrDefault(d => d.HaiSCdSeq == haiSCdSeq);
                }
                else
                {
                    bookingDest.ReservationTabData.DespatchingPlace = null;
                }

                if (bookingSource?.ReservationTabData?.ArrivePlace != null)
                {
                    int haiSCdSeq = bookingSource.ReservationTabData.ArrivePlace.HaiSCdSeq;
                    bookingDest.ReservationTabData.ArrivePlace = PlaceDataList.SingleOrDefault(d => d.HaiSCdSeq == haiSCdSeq);
                }
                else
                {
                    bookingDest.ReservationTabData.ArrivePlace = null;
                }
            }
            if (bookingSource.TaxTypeforBus != null)
            {
                var type = TaxTypeListData.taxTypeList.Single(e => e.IdValue == bookingSource.TaxTypeforBus.IdValue);
                bookingDest.TaxTypeforBus = type;
            }
            if (bookingSource.TaxTypeforGuider != null)
            {
                var type = TaxTypeListData.taxTypeList.Single(e => e.IdValue == bookingSource.TaxTypeforGuider.IdValue);
                bookingDest.TaxTypeforGuider = type;
            }
        }
        catch (System.Exception ex)
        {
            // temporary log to console
            Console.WriteLine("[BookingInputMultiCopy] > [LoadSelectedDataCombobox]: {0}", ex.Message);
        }
    }

    private bool DaysEqual(DateTime date1, DateTime date2)
    {
        return (date1.Year == date2.Year && date1.DayOfYear == date2.DayOfYear);
    }

    private void ChangeInvoiceDate(MultiCopyDataGrid bookingRow)
    {
        var expectDate = bookingRow.InvoiceDate;
        var dateNum = BookingMultiData.BookingDataToCopy.SelectedCustomer.SimeD == 0 ? BookingMultiData.BookingDataToCopy.InvoiceDate.Day : BookingMultiData.BookingDataToCopy.SelectedCustomer.SimeD;
        if (expectDate.Day > dateNum)
        {
            expectDate = expectDate.AddMonths(1);
        }
        bookingRow.InvoiceMonth = expectDate;
    }

    protected bool CheckEnableSubmitButton()
    {
        if (BookingMultiData.IsDoneLoadCopyData == false)
        {
            return false;
        }
        if (BookingMultiData.BookingDataChangedList.Count == 0)
        {
            return false;
        }
        return FormContext.IsModified() && FormContext.Validate();
    }

    private void HandleClosePopupInfoAfterSubmit()
    {
        IsShowPopupInfo = false;
        StateHasChanged();
    }

    /// <summary>
    /// set all data about copy booking to init state
    /// </summary>
    private void BackToInitData()
    {
        BookingMultiData.BookingDataChangedList.Clear();
        SelectedDateList.Clear();
        BookingMultiData.DispatchTime.Str = BookingMultiData.BookingDataToCopy.BusStartTime.Str;
        BookingMultiData.ArrivalTime.Str = BookingMultiData.BookingDataToCopy.BusEndTime.Str;
        BookingMultiData.IsApplyAll = false;
        BookingMultiData.CopyType = BookingMultiCopyType.Reservation;
        BookingMultiData.IsCopyBusRoute = false;
        BookingMultiData.IsCopyArrangement = false;
        //BookingMultiData.IsCopyGetInPlace = false;
        BookingMultiData.IsCopyIncludedGoods = false;
        BookingMultiData.IsCopyIncludedServices = false;
        FormContext.MarkAsUnmodified();
    }

    #endregion

    #region Form value changed methods

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    protected void OnTextOrganizationNameChanged(string newValue)
    {
        BookingMultiData.BookingDataToCopy.TextOrganizationName = newValue;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    protected void OnCustomerComboboxChanged(LoadCustomerList e)
    {
        BookingMultiData.BookingDataToCopy.SelectedCustomer = e ?? new LoadCustomerList();
        BookingMultiData.BookingDataToCopy.FeeBusRate = BookingMultiData.BookingDataToCopy.SelectedCustomer.TesuRitu.ToString("F1");
        BookingMultiData.BookingDataToCopy.FeeGuiderRate = BookingMultiData.BookingDataToCopy.SelectedCustomer.TesuRituGui.ToString("F1");
        for (int index = 0; index < BookingMultiData.BookingDataChangedList.Count; index++)
        {
            ChangeInvoiceDate(BookingMultiData.BookingDataChangedList[index]);
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    protected void OnTextDestinationChanged(string newValue)
    {
        BookingMultiData.BookingDataToCopy.ReservationTabData.IkNm = newValue;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newData"></param>
    protected void OnSelectedDestinationChanged(DestinationData newData)
    {
        if (newData != null)
        {
            BookingMultiData.BookingDataToCopy.ReservationTabData.Destination = newData;
            BookingMultiData.BookingDataToCopy.ReservationTabData.IkNm = BookingMultiData.BookingDataToCopy.ReservationTabData.Destination.VpmBasyoRyakuNm;
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    protected void OnTextDespatchingPlaceNameChanged(string newValue)
    {
        BookingMultiData.BookingDataToCopy.ReservationTabData.HaiSNm = newValue;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newData"></param>
    protected void OnSelectedDespatchingPlaceChanged(PlaceData newData)
    {
        if (newData != null)
        {
            BookingMultiData.BookingDataToCopy.ReservationTabData.DespatchingPlace = newData;
            BookingMultiData.BookingDataToCopy.ReservationTabData.HaiSNm = BookingMultiData.BookingDataToCopy.ReservationTabData.DespatchingPlace.VpmHaichiRyakuNm;
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newData"></param>
    protected void OnSelectedArrivePlaceChanged(PlaceData newData)
    {
        if (newData != null)
        {
            BookingMultiData.BookingDataToCopy.ReservationTabData.ArrivePlace = newData;
            BookingMultiData.BookingDataToCopy.ReservationTabData.TouNm = BookingMultiData.BookingDataToCopy.ReservationTabData.ArrivePlace.VpmHaichiRyakuNm;
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    protected void OnTextArrivePlaceNameChanged(string newValue)
    {
        BookingMultiData.BookingDataToCopy.ReservationTabData.TouNm = newValue;
        StateHasChanged();
    }

    protected string GetCssClassNames(DateTime date)
    {
        string result = string.Empty;

        if (SelectedDateList.Exists(d => DaysEqual(d, date)))
        {
            result = "day-selected font-weight-bold text-success";
        }

        return result;
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedDates"></param>
    protected void OnSelectedDatesChanged(IEnumerable<DateTime> dateTimes)
    {
        if (SelectedDateList.Exists(d => DaysEqual(d, dateTimes.First())))
        {
            SelectedDateList.RemoveAll(d => DaysEqual(d, dateTimes.First()));
            var itemToRemove = BookingMultiData.BookingDataChangedList.Single(r => r.StartDate == dateTimes.First());
            BookingMultiData.BookingDataChangedList.Remove(itemToRemove);
        }
        else
        {
            var dateIndex = BookingMultiData.BookingDataChangedList.DefaultIfEmpty(null).Max(e => e?.Index ?? 0) + 1;
            double journeyDays = (BookingMultiData.BookingDataToCopy.BusEndDate - BookingMultiData.BookingDataToCopy.BusStartDate).TotalDays;
            SelectedDateList.Add(dateTimes.First());
            var newBookingCopyData = new MultiCopyDataGrid()
            {
                Index = dateIndex,
                StartDate = dateTimes.First(),
                EndDate = dateTimes.First().AddDays(journeyDays),
                StartTime = BookingMultiData.DispatchTime,
                EndTime = BookingMultiData.ArrivalTime,
                // uriKbn == 2 => update by endDate
                InvoiceDate = uriKbn == 2 ? dateTimes.First().AddDays(journeyDays) : dateTimes.First(),
                InvoiceMonth = uriKbn == 2 ? dateTimes.First().AddDays(journeyDays) : dateTimes.First(),
            };
            ChangeInvoiceDate(newBookingCopyData);
            BookingMultiData.BookingDataChangedList.Add(newBookingCopyData);
        }
        FormContext.NotifyFieldChanged(FieldIdentifier.Create(() => BookingMultiData.BookingDataChangedList));
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    protected void OnDispatchTimeChanged(BookingInputHelper.MyTime newValue)
    {
        BookingMultiData.DispatchTime = newValue;
        if (BookingMultiData.IsApplyAll)
        {
            foreach (var item in BookingMultiData.BookingDataChangedList)
            {
                item.StartTime = BookingMultiData.DispatchTime;
                //FormContext.NotifyFieldChanged(() => item.EndTime.Str);
            }
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    protected void OnArrivalTimeChanged(BookingInputHelper.MyTime newValue)
    {
        BookingMultiData.ArrivalTime = newValue;
        if (BookingMultiData.IsApplyAll)
        {
            foreach (var item in BookingMultiData.BookingDataChangedList)
            {
                item.EndTime = BookingMultiData.ArrivalTime;
                FormContext.NotifyFieldChanged(() => item.EndTime.Str);
            }
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    protected void OnApplyAllChanged(bool value)
    {
        BookingMultiData.IsApplyAll = value;
        OnDispatchTimeChanged(BookingMultiData.DispatchTime);
        OnArrivalTimeChanged(BookingMultiData.ArrivalTime);
        DisableAll = !DisableAll;
        StateHasChanged();
    }

    protected void OnCopyTypeChanged(ChangeEventArgs arg)
    {
        if (Enum.TryParse(arg.Value.ToString(), out BookingMultiCopyType newType))
        {
            BookingMultiData.CopyType = newType;
        }
        StateHasChanged();
    }

    #endregion

    #region Grid value changed methods

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    /// <param name="index"></param>
    protected void OnGridDispatchTimeChanged(BookingInputHelper.MyTime newValue, int index)
    {
        var item = BookingMultiData.BookingDataChangedList.First(t => t.Index == index);
        item.StartTime = newValue;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    /// <param name="index"></param>
    protected void OnGridArrivalTimeChanged(BookingInputHelper.MyTime newValue, int index)
    {
        var item = BookingMultiData.BookingDataChangedList.First(t => t.Index == index);
        item.EndTime = newValue;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    protected void OnBusTaxRateChanged(string value)
    {
        float rate = float.Parse(value);
        BookingMultiData.BookingDataToCopy.TaxRate = (rate < 0 ? 0 : rate > (float)99.9 ? (float)99.9 : rate).ToString("F1");
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    protected void OnSelectedTaxTypeForBusChanged(TaxTypeList e)
    {
        if (e != null)
        {
            BookingMultiData.BookingDataToCopy.TaxTypeforBus = e;
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    protected void OnSelectedTaxTypeForGuiderChanged(TaxTypeList e)
    {
        if (e != null)
        {
            BookingMultiData.BookingDataToCopy.TaxTypeforGuider = e;
        }
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    protected void OnBusFeeTaxRateChanged(string value)
    {
        float rate = float.Parse(value);
        BookingMultiData.BookingDataToCopy.FeeBusRate = (rate < 0 ? 0 : rate > (float)99.9 ? (float)99.9 : rate).ToString("F1");
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    protected void OnGuiderFeeTaxRateChanged(string value)
    {
        float rate = float.Parse(value);
        BookingMultiData.BookingDataToCopy.FeeGuiderRate = (rate < 0 ? 0 : rate > (float)99.9 ? (float)99.9 : rate).ToString("F1");
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    protected void ConfirmDelete(int index)
    {
        var itemToRemove = BookingMultiData.BookingDataChangedList.Single(r => r.Index == index);
        BookingMultiData.BookingDataChangedList.Remove(itemToRemove);
        if (SelectedDateList.Exists(d => DaysEqual(d, itemToRemove.StartDate)))
        {
            SelectedDateList.RemoveAll(d => DaysEqual(d, itemToRemove.StartDate));
        }
        FormContext.NotifyFieldChanged(FieldIdentifier.Create(() => BookingMultiData.BookingDataChangedList));
        StateHasChanged();
    }

    #endregion

    #region Load combobox async

    protected async Task<IEnumerable<LoadCustomerList>> LoadCustomerListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
    }

    protected async Task<IEnumerable<DestinationData>> LoadDestinationListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<DestinationData>>(baseUrl + "/api/BookingInput/Reservation/Destination");
    }

    protected async Task<IEnumerable<PlaceData>> LoadPlaceListAsync(CancellationToken ct = default)
    {
        return await Http.GetJsonAsync<List<PlaceData>>(baseUrl + "/api/BookingInput/Reservation/Place");
    }

    #endregion

    /// <summary>
    ///
    /// </summary>
    protected async Task OnValidSubmitAsync()
    {
        var postData = Http.getStringContentFromObject(BookingMultiData);
        string postUri = string.Format("{0}/api/BookingInputMultiCopy/{1:D5}{2}", baseUrl, Common.TenantID, UkeCd);
        HttpResponseMessage response = await Http.PostAsync(postUri, postData);

        if (response.IsSuccessStatusCode)
        {
            string dataAsString = await response.Content.ReadAsStringAsync();
            var ukeCdList = JsonConvert.DeserializeObject<List<string>>(dataAsString);

            IsShowPopupInfo = true;
            string stringDisplay = string.Empty;

            // render string content
            stringDisplay += "<p>Copy success</p>";
            foreach (var ukeCd in ukeCdList)
            {
                string message = string.Format(CreateResultScuccessMessageContent, ukeCd);
                stringDisplay += $"<a class='btn-link' href='{baseUrl}?UkeCd={ukeCd}' target='_blank'>{message}</a></br>";
            }

            OnGetContentPopupInfo = () => stringDisplay;
            PopupTitle = PopupTitleInfo;

            // back to init
            var bookingDb = await LoadBookingDataAsync();
            if (bookingDb != null)
            {
                LoadSelectedDataCombobox(bookingDb, bookingDb);
                BookingMultiData.BookingDataToCopy.SetBookingFromData(bookingDb);

                BackToInitData();
            }
            else
            {
                NavManager.NavigateTo("/", true);
            }
        }
        else
        {
            IsShowPopupInfo = true;
            OnGetContentPopupInfo = () => "Copy fail";
            PopupTitle = PopupTitleError;
        }

        OnClosePopupInfo = HandleClosePopupInfoAfterSubmit;
        await InvokeAsync(StateHasChanged);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BusScheduleHelper BusScheduleHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<BookingInputMultiCopy> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppSettingsService AppSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
