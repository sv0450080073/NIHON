#pragma checksum "E:\Project\HassyaAllrightCloud\Pages\HyperGraph.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "72bddc32727af64482d47c15fa7cc8045527829f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HassyaAllrightCloud.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Infrastructure.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Domain.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Commons.Constants;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.Application.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using HassyaAllrightCloud.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using LexLibrary.Line.NotifyBot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "E:\Project\HassyaAllrightCloud\_Imports.razor"
using DevExpress.Blazor.Reporting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/hypergraph")]
    public partial class HyperGraph : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 327 "E:\Project\HassyaAllrightCloud\Pages\HyperGraph.razor"
       
    [Parameter] public string HaishaBiFrom { get; set; }
    [Parameter] public string HaishaBiTo { get; set; }
    [Parameter] public string TochakuBiFrom { get; set; }
    [Parameter] public string TochakuBiTo { get; set; }
    [Parameter] public string YoyakuBiFrom { get; set; }
    [Parameter] public string YoyakuBiTo { get; set; }
    [Parameter] public string UketsukeBangoFrom { get; set; }
    [Parameter] public string UketsukeBangoTo { get; set; }
    [Parameter] public string YoyakuKbnFrom { get; set; }
    [Parameter] public string YoyakuKbnTo { get; set; }
    [Parameter] public string EigyoTantoShaFrom { get; set; }
    [Parameter] public string EigyoTantoShaTo { get; set; }
    [Parameter] public string UketsukeEigyoJoFrom { get; set; }
    [Parameter] public string UketsukeEigyoJoTo { get; set; }
    [Parameter] public string NyuryokuTantoShaFrom { get; set; }
    [Parameter] public string NyuryokuTantoShaTo { get; set; }
    [Parameter] public string TokuiSakiFrom { get; set; }
    [Parameter] public string TokuiSakiTo { get; set; }
    [Parameter] public string ShiireSakiFrom { get; set; }
    [Parameter] public string ShiireSakiTo { get; set; }
    [Parameter] public string DantaiKbnFrom { get; set; }
    [Parameter] public string DantaiKbnTo { get; set; }
    [Parameter] public string KyakuDaneKbnFrom { get; set; }
    [Parameter] public string KyakuDaneKbnTo { get; set; }
    [Parameter] public string YukiSakiFrom { get; set; }
    [Parameter] public string YukiSakiTo { get; set; }
    [Parameter] public string HaishaChiFrom { get; set; }
    [Parameter] public string HaishaChiTo { get; set; }
    [Parameter] public string HasseiChiFrom { get; set; }
    [Parameter] public string HasseiChiTo { get; set; }
    [Parameter] public string AreaFrom { get; set; }
    [Parameter] public string AreaTo { get; set; }
    [Parameter] public string ShashuFrom { get; set; }
    [Parameter] public string ShashuTo { get; set; }
    [Parameter] public string ShashuTankaFrom { get; set; }
    [Parameter] public string ShashuTankaTo { get; set; }
    [Parameter] public string UketsukeJokenFrom { get; set; }
    [Parameter] public string UketsukeJokenTo { get; set; }

    public HyperFormData hyperData = new HyperFormData();
    public List<HyperFormData> CurrentHyperForm = new List<HyperFormData>();
    public HyperFormData LastYearHyperData = new HyperFormData();
    public List<HyperGraphData> GraphData = new List<HyperGraphData>();
    public List<List<HyperGraphData>> CurrentHyperData = new List<List<HyperGraphData>>();
    public List<HyperGraphData> LastYearGraphData = new List<HyperGraphData>();
    public List<SalePerTime> SaleData = new List<SalePerTime>();
    public List<SalePerTime> LastYearSaleData = new List<SalePerTime>();
    public List<SalePerStaff> SalePerStaffDayData = new List<SalePerStaff>();
    public List<SalePerCustomer> SalePerCustomerDayData = new List<SalePerCustomer>();
    public List<SalePerGroupClassification> SalePerGroupClassificationDayData = new List<SalePerGroupClassification>();
    public List<SalePerTime> SelectedTime = new List<SalePerTime>();
    public string TypeDate;
    public dynamic DateFromProperty;
    public dynamic DateToProperty;
    [Parameter] public string type { get; set; }
    public long TotalByStaff = 0;
    public long TotalByCustomer = 0;
    public long TotalByGroupClassification = 0;
    public DateTime? StartDate;
    public DateTime? EndDate;
    public int? SelectedStaffSeq;
    public int? SelectedCustomerSeq;
    public string? SelectedGroupClassificationKbn;
    public int IndexSelectBegin;
    public int IndexSelectEnd;
    public List<StaffsData> StaffList;
    List<LoadCustomerList> CustomerList;
    List<CodeTypeData> CodeKbList;
    public List<GraphPattern> GraphList = new List<GraphPattern>();
    public int IndexOfMenuSeries { get; set; }
    bool IsReinitNewGraph = false;
    public string FormatStringDay = "MM月dd日";
    private bool IsDisplayByDay = true;
    private GraphPattern NextGraph = GraphPattern.LineSale;
    private bool IsShowStaff = false;
    private bool IsShowCustomer = false;
    private bool IsShowGroup = false;

    /// <summary>
    /// Load javascript of page
    /// </summary>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "hyperGraphPage");
        base.OnParametersSet();
    }

    protected override async Task OnInitializedAsync()
    {
        // 予約区分
        List<BookingTypeData> TempBookingTypeList = await YoyKbnService.GetBySiyoKbn();

        // 受付営業所
        List<SaleBranchData> TempSaleBranchList = await EigyosService.Get(Common.CompanyID);

        // 営業担当, 入力担当
        List<StaffsData> TempStaffList = await SyainService.Get(Common.CompanyID);
        StaffList = TempStaffList;

        // 得意先, 仕入先
        List<LoadCustomerList> TempCustomerList = await CustomerService.Get(Common.TenantID);
        CustomerList = TempCustomerList;

        // 団体区分
        List<CodeTypeData> TempCodeKbList = await CodeKbService.GetDantai(Common.TenantID);
        CodeKbList = TempCodeKbList;

        // 客種区分
        List<CustomerClassification> TempCustomerClassificationList = await CustomerCLassificationService.Get(Common.TenantID);

        // 行先
        List<LoadLocation> TempDestinationList = await LocationService.GetDestination(Common.TenantID);

        // 配車地
        List<LoadDispatchArea> TempDispatchList = await DispatchService.Get(Common.TenantID);

        // 発生地
        List<LoadLocation> TempOriginList =  await LocationService.GetOrigin(Common.TenantID);

        // エリア
        List<LoadLocation> TempAreaList = await LocationService.GetArea(Common.TenantID);

        // 車種
        List<BusTypesData> TempBusTypeList = await BusTypeService.GetAll(Common.TenantID);

        // 受付条件
        List<VpmCodeKb> TempConditionList = await CodeKbService.GetJoken(Common.TenantID);

        hyperData = HyperFormData.ToObject(HaishaBiFrom, HaishaBiTo, TochakuBiFrom, TochakuBiTo, YoyakuBiFrom, YoyakuBiTo, UketsukeBangoFrom, UketsukeBangoTo,
            YoyakuKbnFrom, YoyakuKbnTo, TempBookingTypeList,
            EigyoTantoShaFrom, EigyoTantoShaTo, TempStaffList,
            UketsukeEigyoJoFrom, UketsukeEigyoJoTo, TempSaleBranchList,
            NyuryokuTantoShaFrom, NyuryokuTantoShaTo,
            TokuiSakiFrom, TokuiSakiTo, TempCustomerList,
            ShiireSakiFrom, ShiireSakiTo,
            DantaiKbnFrom, DantaiKbnTo, TempCodeKbList,
            KyakuDaneKbnFrom, KyakuDaneKbnTo, TempCustomerClassificationList,
            YukiSakiFrom, YukiSakiTo, TempDestinationList,
            HaishaChiFrom, HaishaChiTo, TempDispatchList,
            HasseiChiFrom, HasseiChiTo, TempOriginList,
            AreaFrom, AreaTo, TempAreaList,
            ShashuFrom, ShashuTo, TempBusTypeList,
            ShashuTankaFrom, ShashuTankaTo,
            UketsukeJokenFrom, UketsukeJokenTo, TempConditionList);
        CurrentHyperForm.Add(new HyperFormData(hyperData));
        LastYearHyperData = new HyperFormData(hyperData);

        int TypeDateNumber = (int)DateType.Dispatch;
        if (hyperData.HaishaBiFrom != null || hyperData.HaishaBiTo != null)
        {
            TypeDate = nameof(HyperGraphData.HaiSYmd);
            StartDate = hyperData.HaishaBiFrom;
            EndDate = hyperData.HaishaBiTo;
            LastYearHyperData.HaishaBiFrom = StartDate == null ? StartDate : ((DateTime)StartDate).AddYears(-1);
            LastYearHyperData.HaishaBiTo = EndDate == null ? EndDate : ((DateTime)EndDate).AddYears(-1);
            DateFromProperty = CurrentHyperForm[0].GetType().GetProperty(nameof(hyperData.HaishaBiFrom));
            DateToProperty = CurrentHyperForm[0].GetType().GetProperty(nameof(hyperData.HaishaBiTo));
        }
        else if (hyperData.TochakuBiFrom != null || hyperData.TochakuBiTo != null)
        {
            TypeDateNumber = (int)DateType.Arrival;
            TypeDate = nameof(HyperGraphData.TouYmd);
            StartDate = (DateTime)hyperData.TochakuBiFrom;
            EndDate = (DateTime)hyperData.TochakuBiTo;
            LastYearHyperData.TochakuBiFrom = StartDate == null ? StartDate : ((DateTime)StartDate).AddYears(-1);
            LastYearHyperData.TochakuBiTo = EndDate == null ? EndDate : ((DateTime)EndDate).AddYears(-1);
            DateFromProperty = CurrentHyperForm[0].GetType().GetProperty(nameof(hyperData.TochakuBiFrom));
            DateToProperty = CurrentHyperForm[0].GetType().GetProperty(nameof(hyperData.TochakuBiTo));
        }
        else
        {
            TypeDateNumber = (int)DateType.Reservation;
            TypeDate = nameof(HyperGraphData.UkeYmd);
            StartDate = (DateTime)hyperData.YoyakuBiFrom;
            EndDate = (DateTime)hyperData.YoyakuBiTo;
            LastYearHyperData.YoyakuBiFrom = StartDate == null ? StartDate : ((DateTime)StartDate).AddYears(-1);
            LastYearHyperData.YoyakuBiTo = EndDate == null ? EndDate : ((DateTime)EndDate).AddYears(-1);
            DateFromProperty = CurrentHyperForm[0].GetType().GetProperty(nameof(hyperData.YoyakuBiFrom));
            DateToProperty = CurrentHyperForm[0].GetType().GetProperty(nameof(hyperData.YoyakuBiTo));
        }

        if (!(int.TryParse(type, out _)) || !(Enum.IsDefined(typeof(GraphTypeDisplay), int.Parse(type))) ||
            !string.IsNullOrEmpty(HyperDataService.CheckValidationForGraph((GraphTypeDisplay)(int.Parse(type)), hyperData, TypeDateNumber)))
        {
            NavigationManager.NavigateTo("/hypermenu", true);
            return;
        }
        GraphData = await HyperDataService.GetHyperGraphData(hyperData, Common.CompanyID, Common.TenantID);
        CurrentHyperData.Add(GraphData);

        switch (int.Parse(type))
        {
            case (int)GraphTypeDisplay.GraphSaleStaffDayBar:
            case (int)GraphTypeDisplay.GraphCustomerDayBar:
            case (int)GraphTypeDisplay.GraphSaleDayLine:
            case (int)GraphTypeDisplay.GraphOrganizationBar:
            case (int)GraphTypeDisplay.GraphOrganizationPie:
                if (StartDate != null && EndDate != null)
                {
                    SaleData = await HyperDataService.GetSaleByDay(GraphData, TypeDate, (DateTime)StartDate, (DateTime)EndDate);
                    await GetLastYearData();
                }
                GraphList.Add(GraphPattern.LineSale);
                if (int.Parse(type) != (int)GraphTypeDisplay.GraphSaleDayLine)
                {
                    IndexSelectBegin = 0;
                    IndexSelectEnd = SaleData.Count() - 1;
                    if (int.Parse(type) == (int)GraphTypeDisplay.GraphSaleStaffDayBar)
                    {
                        NextGraph = GraphPattern.BarSalePerStaff;
                    }
                    else if (int.Parse(type) == (int)GraphTypeDisplay.GraphCustomerDayBar)
                    {
                        NextGraph = GraphPattern.BarSalePerCustomer;
                    }
                    else if (int.Parse(type) == (int)GraphTypeDisplay.GraphOrganizationBar)
                    {
                        NextGraph = GraphPattern.BarSalePerGroupClassification;
                    } else
                    {
                        NextGraph = GraphPattern.PieSalePerGroupClassification;
                    }
                    await SelectTime();
                }
                break;
            case (int)GraphTypeDisplay.GraphSaleStaffMonthBar:
            case (int)GraphTypeDisplay.GraphCustomerMonthBar:
            case (int)GraphTypeDisplay.GraphSaleMonthLine:
                FormatStringDay = "MM月";
                IsDisplayByDay = false;
                if (StartDate != null && EndDate != null)
                {
                    SaleData = await HyperDataService.GetSaleByMonth(GraphData, TypeDate, (DateTime)StartDate, (DateTime)EndDate);
                    await GetLastYearData();
                }
                GraphList.Add(GraphPattern.LineSale);
                if (int.Parse(type) != (int)GraphTypeDisplay.GraphSaleMonthLine)
                {
                    IndexSelectBegin = 0;
                    IndexSelectEnd = SaleData.Count() - 1;
                    if (int.Parse(type) == (int)GraphTypeDisplay.GraphSaleStaffMonthBar)
                    {
                        NextGraph = GraphPattern.BarSalePerStaff;
                    }
                    else
                    {
                        NextGraph = GraphPattern.BarSalePerCustomer;
                    }
                    await SelectTime();
                }
                break;

            default:
                break;
        }

        CultureInfo cultureInfo = System.Threading.Thread.CurrentThread.CurrentCulture;
        if (cultureInfo.Name != "ja-JP")
        {
            FormatStringDay = "MM/dd";
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeAsync<string>("ChangeChartType", DotNetObjectReference.Create(this));
        }
        if (IsReinitNewGraph)
        {
            IsReinitNewGraph = false;
            JSRuntime.InvokeVoidAsync("triggerToggle");
        }
    }

    private async void MouseDownEvent(MouseEventArgs e)
    {
        await JSRuntime.InvokeAsync<string>("setMouseUpAndMove", e.ClientX, e.ClientY, SaleData.Count(), DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task WhenDragComplete(int Begin, int End, double ClientX, double ClientY)
    {
        IndexSelectBegin = Begin;
        IndexSelectEnd = End;
        await SelectTime();
        if (NextGraph == GraphPattern.LineSale)
        {
            await ShowMenu(ClientX, ClientY, 0, 0);
            StateHasChanged();
        }
    }

    private async Task SelectTime()
    {
        SelectedTime = SaleData.Skip(IndexSelectBegin).Take(IndexSelectEnd - IndexSelectBegin + 1).ToList();
        switch(NextGraph)
        {
            case GraphPattern.BarSalePerStaff:
                await DisplayStaffBySale();
                break;
            case GraphPattern.BarSalePerCustomer:
                await DisplayCustomerBySale();
                break;
            case GraphPattern.BarSalePerGroupClassification:
                await DisplayGroupClassificationBarBySale();
                break;
            case GraphPattern.PieSalePerGroupClassification:
                await DisplayGroupClassificationPieBySale();
                break;
            default:
                break;
        }
    }

    private bool CheckDataByDate(HyperGraphData data, DateTime DayFrom, DateTime DayTo)
    {
        DateTime DateValue = (DateTime)data.GetType().GetProperty(TypeDate).GetValue(data, null);
        DateTime DateToCompare = IsDisplayByDay ? DayTo : new DateTime(DayTo.Year, DayTo.Month, DateTime.DaysInMonth(DayTo.Year, DayTo.Month));
        return DateValue >= DayFrom && DateValue <= DateToCompare;
    }

    private bool CheckDataByStaff(HyperGraphData data, int StaffSeq)
    {
        return data.EigTanCdSeq == StaffSeq;
    }

    private bool CheckDataByCustomer(HyperGraphData data, int BranchSeq)
    {
        return data.SitenCdSeq == BranchSeq;
    }

    private bool CheckDataByGroupClassification(HyperGraphData data, string GroupClassification)
    {
        return data.DantaiKbn == GroupClassification;
    }

    private async Task GetLastYearData()
    {
        LastYearGraphData = await HyperDataService.GetHyperGraphData(LastYearHyperData, Common.CompanyID, Common.TenantID);
        if (IsDisplayByDay)
        {
            LastYearSaleData = await HyperDataService.GetSaleByDay(LastYearGraphData, TypeDate, ((DateTime)StartDate).AddYears(-1), ((DateTime)EndDate).AddYears(-1));
        }
        else
        {
            LastYearSaleData = await HyperDataService.GetSaleByMonth(LastYearGraphData, TypeDate, ((DateTime)StartDate).AddYears(-1), ((DateTime)EndDate).AddYears(-1));
        }
        LastYearSaleData = LastYearSaleData.FindAll(data => data.Time.Month != 2 || data.Time.Day != 29);
    }

    private void ClearSelected()
    {
        if (!GraphList.Contains(GraphPattern.BarSalePerStaff))
        {
            SelectedStaffSeq = null;
        }
        if (!GraphList.Contains(GraphPattern.BarSalePerCustomer))
        {
            SelectedCustomerSeq = null;
        }
        if (!GraphList.Contains(GraphPattern.BarSalePerGroupClassification))
        {
            SelectedGroupClassificationKbn = null;
        }
    }

    private void ClearCurrent(int GraphIndex, bool IsResetData)
    {
        if (!IsResetData)
        {
            return;
        }
        if (GraphList.Count() > GraphIndex)
        {
            CurrentHyperForm.RemoveRange(GraphIndex, GraphList.Count() - GraphIndex);
            CurrentHyperData.RemoveRange(GraphIndex, GraphList.Count() - GraphIndex);
            GraphList.RemoveRange(GraphIndex, GraphList.Count() - GraphIndex);
            CurrentHyperForm.Add(new HyperFormData(CurrentHyperForm[GraphIndex - 1]));
            CurrentHyperData.Add(new List<HyperGraphData>(CurrentHyperData[GraphIndex - 1]));
        }
        else if (GraphList.Count() == GraphIndex)
        {
            CurrentHyperForm.Add(new HyperFormData(CurrentHyperForm[GraphIndex - 1]));
            CurrentHyperData.Add(new List<HyperGraphData>(CurrentHyperData[GraphIndex - 1]));
        }
        ClearSelected();
    }

    private void SetSaleAtIndex(int GraphIndex, bool IsResetData)
    {
        if (NextGraph == GraphPattern.LineSale)
        {
            SelectTime().Wait();
        }
        ClearCurrent(GraphIndex, IsResetData);
        int IndexToBeChanged = IsResetData ? GraphIndex : GraphIndex -1 ;
        DateFromProperty.SetValue(CurrentHyperForm[IndexToBeChanged], SelectedTime.Count > 0 && SelectedTime[0].Time >= StartDate ? SelectedTime[0].Time : StartDate, null);
        DateTime? EndSelectedTime = SelectedTime.Count > 0 ? SelectedTime[SelectedTime.Count() - 1].Time : EndDate;
        if (!IsDisplayByDay)
        {
            DateTime EndOfMonth = new DateTime(((DateTime)EndSelectedTime).Year, ((DateTime)EndSelectedTime).Month, DateTime.DaysInMonth(((DateTime)EndSelectedTime).Year, ((DateTime)EndSelectedTime).Month));
            EndSelectedTime = EndOfMonth <= (DateTime)EndDate ? EndOfMonth : (DateTime)EndDate;
        }
        DateToProperty.SetValue(CurrentHyperForm[IndexToBeChanged], EndSelectedTime, null);
        if (IsResetData && SelectedTime.Count > 0)
        {
            CurrentHyperData[IndexToBeChanged] = CurrentHyperData[IndexToBeChanged - 1].FindAll(e => CheckDataByDate(e, SelectedTime[0].Time, SelectedTime[SelectedTime.Count() - 1].Time));
        }
    }

    private async Task OpenSuperMenuBySale(SuperMenyTypeDisplay type)
    {
        int GraphIndex = 0;
        SetSaleAtIndex(GraphIndex + 1, false);
        string QueryParam = string.Format("type={0}&", (int)type) + CurrentHyperForm[GraphIndex].ToQueryString();
        await JSRuntime.InvokeVoidAsync("openNewUrlInNewTab", string.Format("/supermenu?{0}", QueryParam));
    }

    [JSInvokable]
    public async Task DisplayStaffBySale()
    {
        int GraphIndex = 0;
        SetSaleAtIndex(GraphIndex + 1, true);
        IsShowStaff = false;
        GraphList.Add(GraphPattern.BarSalePerStaff);
        StateHasChanged();
        SalePerStaffDayData = await HyperDataService.GetSaleByStaff(CurrentHyperData[GraphIndex + 1]);
        TotalByStaff = SalePerStaffDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowStaff = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task DisplayCustomerBySale()
    {
        int GraphIndex = 0;
        SetSaleAtIndex(GraphIndex + 1, true);
        IsShowCustomer = false;
        GraphList.Add(GraphPattern.BarSalePerCustomer);
        StateHasChanged();
        SalePerCustomerDayData = await HyperDataService.GetSaleByCustomer(CurrentHyperData[GraphIndex + 1]);
        TotalByCustomer = SalePerCustomerDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowCustomer = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task DisplayGroupClassificationBarBySale()
    {
        int GraphIndex = 0;
        SetSaleAtIndex(GraphIndex + 1, true);
        IsShowGroup = false;
        GraphList.Add(GraphPattern.BarSalePerGroupClassification);
        StateHasChanged();
        SalePerGroupClassificationDayData = await HyperDataService.GetSaleByGroupClassification(CurrentHyperData[GraphIndex + 1]);
        TotalByGroupClassification = SalePerGroupClassificationDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowGroup = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task DisplayGroupClassificationPieBySale()
    {
        int GraphIndex = 0;
        SetSaleAtIndex(GraphIndex + 1, true);
        IsShowGroup = false;
        GraphList.Add(GraphPattern.PieSalePerGroupClassification);
        StateHasChanged();
        SalePerGroupClassificationDayData = await HyperDataService.GetSaleByGroupClassification(CurrentHyperData[GraphIndex + 1]);
        TotalByGroupClassification = SalePerGroupClassificationDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowGroup = true;
        StateHasChanged();
    }

    [JSInvokable]
    private void SetStaffAtIndex(int GraphIndex, int StaffSeq, bool IsResetData)
    {
        ClearCurrent(GraphIndex, IsResetData);
        int IndexToBeChanged = IsResetData ? GraphIndex : GraphIndex - 1;
        StaffsData SelectedStaff = StaffList.Find(x => x.SyainCdSeq == StaffSeq);
        CurrentHyperForm[IndexToBeChanged].EigyoTantoShaFrom = SelectedStaff;
        CurrentHyperForm[IndexToBeChanged].EigyoTantoShaTo = SelectedStaff;
        if (IsResetData)
        {
            SelectedStaffSeq = StaffSeq;
            CurrentHyperData[IndexToBeChanged] = CurrentHyperData[IndexToBeChanged - 1].FindAll(e => CheckDataByStaff(e, StaffSeq));
        }
    }

    private async Task OpenSuperMenuByStaff(int GraphIndex, int StaffSeq, SuperMenyTypeDisplay type)
    {
        SetStaffAtIndex(GraphIndex + 1, StaffSeq, false);
        string QueryParam = string.Format("type={0}&", (int)type) + CurrentHyperForm[GraphIndex].ToQueryString();
        await JSRuntime.InvokeVoidAsync("openNewUrlInNewTab", string.Format("/supermenu?{0}", QueryParam));
    }

    [JSInvokable]
    public async Task DisplayCustomerByStaff()
    {
        int GraphIndex = GraphList.IndexOf(GraphPattern.BarSalePerStaff);
        IsShowCustomer = false;
        SetStaffAtIndex(GraphIndex + 1, SalePerStaffDayData[IndexOfMenuSeries].StaffSeq, true);
        GraphList.Add(GraphPattern.BarSalePerCustomer);
        StateHasChanged();
        SalePerCustomerDayData = await HyperDataService.GetSaleByCustomer(CurrentHyperData[GraphIndex + 1]);
        TotalByCustomer = SalePerCustomerDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowCustomer = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task DisplayGroupClassificationBarByStaff()
    {
        int GraphIndex = GraphList.IndexOf(GraphPattern.BarSalePerStaff);
        SetStaffAtIndex(GraphIndex + 1, SalePerStaffDayData[IndexOfMenuSeries].StaffSeq, true);
        IsShowGroup = false;
        GraphList.Add(GraphPattern.BarSalePerGroupClassification);
        StateHasChanged();
        SalePerGroupClassificationDayData = await HyperDataService.GetSaleByGroupClassification(CurrentHyperData[GraphIndex + 1]);
        TotalByGroupClassification = SalePerGroupClassificationDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowGroup = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task DisplayGroupClassificationPieByStaff()
    {
        int GraphIndex = GraphList.IndexOf(GraphPattern.BarSalePerStaff);
        SetStaffAtIndex(GraphIndex + 1, SalePerStaffDayData[IndexOfMenuSeries].StaffSeq, true);
        IsShowGroup = false;
        GraphList.Add(GraphPattern.PieSalePerGroupClassification);
        StateHasChanged();
        SalePerGroupClassificationDayData = await HyperDataService.GetSaleByGroupClassification(CurrentHyperData[GraphIndex + 1]);
        TotalByGroupClassification = SalePerGroupClassificationDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowGroup = true;
        StateHasChanged();
    }

    private void SetCusomterAtIndex(int GraphIndex, int BranchSeq, bool IsResetData)
    {
        ClearCurrent(GraphIndex, IsResetData);
        LoadCustomerList SelectedCustomer = CustomerList.Find(x => x.SitenCdSeq == BranchSeq);
        int IndexToBeChanged = IsResetData ? GraphIndex : GraphIndex - 1;
        CurrentHyperForm[IndexToBeChanged].TokuiSakiFrom = SelectedCustomer;
        CurrentHyperForm[IndexToBeChanged].TokuiSakiTo = SelectedCustomer;
        if (IsResetData)
        {
            SelectedCustomerSeq = BranchSeq;
            CurrentHyperData[IndexToBeChanged] = CurrentHyperData[IndexToBeChanged - 1].FindAll(e => CheckDataByCustomer(e, BranchSeq));
        }
    }

    private async Task OpenSuperMenuByCustomer(int GraphIndex, int BranchSeq, SuperMenyTypeDisplay type)
    {
        SetCusomterAtIndex(GraphIndex + 1, BranchSeq, false);
        string QueryParam = string.Format("type={0}&", (int)type) + CurrentHyperForm[GraphIndex].ToQueryString();
        await JSRuntime.InvokeVoidAsync("openNewUrlInNewTab", string.Format("/supermenu?{0}", QueryParam));
    }

    [JSInvokable]
    public async Task DisplayStaffByCustomer()
    {
        int GraphIndex = GraphList.IndexOf(GraphPattern.BarSalePerCustomer);
        SetCusomterAtIndex(GraphIndex + 1, SalePerCustomerDayData[IndexOfMenuSeries].BranchSeq, true);
        IsShowStaff = false;
        GraphList.Add(GraphPattern.BarSalePerStaff);
        StateHasChanged();
        SalePerStaffDayData = await HyperDataService.GetSaleByStaff(CurrentHyperData[GraphIndex + 1]);
        TotalByStaff = SalePerStaffDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowStaff = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task DisplayGroupClassificationBarByCustomer()
    {
        int GraphIndex = GraphList.IndexOf(GraphPattern.BarSalePerCustomer);
        SetCusomterAtIndex(GraphIndex + 1, SalePerCustomerDayData[IndexOfMenuSeries].BranchSeq, true);
        IsShowGroup = false;
        GraphList.Add(GraphPattern.BarSalePerGroupClassification);
        StateHasChanged();
        SalePerGroupClassificationDayData = await HyperDataService.GetSaleByGroupClassification(CurrentHyperData[GraphIndex + 1]);
        TotalByGroupClassification = SalePerGroupClassificationDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowGroup = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task DisplayGroupClassificationPieByCustomer()
    {
        int GraphIndex = GraphList.IndexOf(GraphPattern.BarSalePerCustomer);
        SetCusomterAtIndex(GraphIndex + 1, SalePerCustomerDayData[IndexOfMenuSeries].BranchSeq, true);
        IsShowGroup = false;
        GraphList.Add(GraphPattern.PieSalePerGroupClassification);
        StateHasChanged();
        SalePerGroupClassificationDayData = await HyperDataService.GetSaleByGroupClassification(CurrentHyperData[GraphIndex + 1]);
        TotalByGroupClassification = SalePerGroupClassificationDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowGroup = true;
        StateHasChanged();
    }

    private void SetGroupClassificationAtIndex(int GraphIndex, string GroupClassificationCd, bool IsResetData)
    {
        ClearCurrent(GraphIndex, IsResetData);
        int IndexToBeChanged = IsResetData ? GraphIndex : GraphIndex - 1;
        CodeTypeData SelectedGroupClassification = CodeKbList.Find(x => x.CodeKbn == GroupClassificationCd);
        CurrentHyperForm[IndexToBeChanged].DantaiKbnFrom = SelectedGroupClassification;
        CurrentHyperForm[IndexToBeChanged].DantaiKbnTo = SelectedGroupClassification;
        if (IsResetData)
        {
            SelectedGroupClassificationKbn = GroupClassificationCd;
            CurrentHyperData[IndexToBeChanged] = CurrentHyperData[IndexToBeChanged - 1].FindAll(e => CheckDataByGroupClassification(e, GroupClassificationCd));
        }
    }

    private async Task OpenSuperMenuByGroupClassification(int GraphIndex, string GroupClassificationCd, SuperMenyTypeDisplay type)
    {
        SetGroupClassificationAtIndex(GraphIndex + 1, GroupClassificationCd, false);
        string QueryParam = string.Format("type={0}&", (int)type) + CurrentHyperForm[GraphIndex].ToQueryString();
        await JSRuntime.InvokeVoidAsync("openNewUrlInNewTab", string.Format("/supermenu?{0}", QueryParam));
    }

    [JSInvokable]
    public async Task DisplayStaffByGroupClassification()
    {
        int GraphIndex = GraphList.IndexOf(GraphPattern.BarSalePerGroupClassification);
        if (GraphIndex < 0)
        {
            GraphIndex = GraphList.IndexOf(GraphPattern.PieSalePerGroupClassification);
        }
        SetGroupClassificationAtIndex(GraphIndex + 1, SalePerGroupClassificationDayData[IndexOfMenuSeries].GroupClassificationCd, true);
        IsShowStaff = false;
        GraphList.Add(GraphPattern.BarSalePerStaff);
        StateHasChanged();
        SalePerStaffDayData = await HyperDataService.GetSaleByStaff(CurrentHyperData[GraphIndex + 1]);
        TotalByStaff = SalePerStaffDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowStaff = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task DisplayCustomerByGroupClassification()
    {
        int GraphIndex = GraphList.IndexOf(GraphPattern.BarSalePerGroupClassification);
        if (GraphIndex < 0)
        {
            GraphIndex = GraphList.IndexOf(GraphPattern.PieSalePerGroupClassification);
        }
        SetGroupClassificationAtIndex(GraphIndex + 1, SalePerGroupClassificationDayData[IndexOfMenuSeries].GroupClassificationCd, true);
        IsShowCustomer = false;
        GraphList.Add(GraphPattern.BarSalePerCustomer);
        StateHasChanged();
        SalePerCustomerDayData = await HyperDataService.GetSaleByCustomer(CurrentHyperData[GraphIndex + 1]);
        TotalByCustomer = SalePerCustomerDayData.Sum(data => data.Sale);
        IsReinitNewGraph = true;
        IsShowCustomer = true;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task ShowMenu(double ClientX, double ClientY, int Index, int Type)
    {
        int x = Convert.ToInt32(ClientX);
        int y = Convert.ToInt32(ClientY);
        IndexOfMenuSeries = Index;
        string MenuId = GetMenuId(Index, Type);
        if (!(string.IsNullOrEmpty(MenuId)))
        {
            await blazorContextMenuService.ShowMenu(MenuId, x, y);
        }
    }

    [JSInvokable]
    public async Task HideMenu(int Index, int Type)
    {
        string MenuId = GetMenuId(Index, Type);
        if (!(string.IsNullOrEmpty(MenuId)))
        {
            await blazorContextMenuService.HideMenu(MenuId);
        }
    }

    private string GetMenuId(int Index, int Type)
    {
        string MenuId = "";
        switch ((GraphPattern)Type)
        {
            case GraphPattern.LineSale:
                MenuId = "LineSaleSeriesMenu";
                break;
            case GraphPattern.BarSalePerStaff:
                MenuId = "BarStaffSeriesMenu";
                break;
            case GraphPattern.BarSalePerCustomer:
                MenuId = "BarCustomerSeriesMenu";
                break;
            case GraphPattern.BarSalePerGroupClassification:
            case GraphPattern.PieSalePerGroupClassification:
                if (!(string.IsNullOrEmpty(SalePerGroupClassificationDayData[IndexOfMenuSeries].GroupClassificationCd)))
                {
                    MenuId = "GroupClassificationSeriesMenu";
                }

                break;
            default:
                break;
        }
        return MenuId;
    }

    private async void MouseDownGrid(MouseEventArgs e, int index)
    {
        await JSRuntime.InvokeAsync<string>("SelectTimeByGrid", index, SaleData.Count(), DotNetObjectReference.Create(this));
    }

    private async void MouseClickGridNext(MouseEventArgs e, int index, int type)
    {
        await ShowMenu(e.ClientX, e.ClientY, index, type);
    }

    protected void PreparePointColorForStaff(ChartSeriesPointCustomizationSettings pointSettings)
    {
        SalePerStaff item = (SalePerStaff)pointSettings.Point.DataItems.ToList()[0];
        int index = SalePerStaffDayData.IndexOf(item);
        pointSettings.PointAppearance.Color = HyperDataService.GetColorByIndex(index);
    }

    protected void PreparePointColorForCustomer(ChartSeriesPointCustomizationSettings pointSettings)
    {
        SalePerCustomer item = (SalePerCustomer)pointSettings.Point.DataItems.ToList()[0];
        int index = SalePerCustomerDayData.IndexOf(item);
        pointSettings.PointAppearance.Color = HyperDataService.GetColorByIndex(index);
    }

    protected void PreparePointColorForGroup(ChartSeriesPointCustomizationSettings pointSettings)
    {
        SalePerGroupClassification item = (SalePerGroupClassification)pointSettings.Point.DataItems.ToList()[0];
        int index = SalePerGroupClassificationDayData.IndexOf(item);
        pointSettings.PointAppearance.Color = HyperDataService.GetColorByIndex(index);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<HyperGraph> Lang { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorContextMenuService blazorContextMenuService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBusTypeListService BusTypeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDispatchListService DispatchService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocationListService LocationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerCLassificationListService CustomerCLassificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISaleBranchListService EigyosService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBookingTypeListService YoyKbnService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITPM_CodeKbListService CodeKbService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICustomerListService CustomerService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStaffListService SyainService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHyperDataService HyperDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
