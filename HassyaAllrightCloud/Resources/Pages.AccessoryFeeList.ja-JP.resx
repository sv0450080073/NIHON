<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ancillary_charge_code" xml:space="preserve">
    <value>付帯料金</value>
  </data>
  <data name="ancillary_type" xml:space="preserve">
    <value>付帯種別</value>
  </data>
  <data name="BI_T001" xml:space="preserve">
    <value>日付指定の範囲指定に誤りがあります！</value>
  </data>
  <data name="BI_T0010" xml:space="preserve">
    <value>該当データがありません。</value>
  </data>
  <data name="BI_T0011" xml:space="preserve">
    <value>予約種別が存在しません。</value>
  </data>
  <data name="BI_T0012" xml:space="preserve">
    <value>営業所の範囲指定に誤りがあります！</value>
  </data>
  <data name="BI_T0013" xml:space="preserve">
    <value>付帯料金の範囲指定に誤りがあります！</value>
  </data>
  <data name="BI_T0014" xml:space="preserve">
    <value>会社が存在しません。</value>
  </data>
  <data name="BI_T002" xml:space="preserve">
    <value>得意先の範囲指定に誤りがあります！</value>
  </data>
  <data name="BI_T003" xml:space="preserve">
    <value>データがありません。</value>
  </data>
  <data name="BI_T004" xml:space="preserve">
    <value>受付番号の範囲指定に誤りがあります！</value>
  </data>
  <data name="BI_T005" xml:space="preserve">
    <value>予約区分が存在しません。</value>
  </data>
  <data name="BI_T006" xml:space="preserve">
    <value>得意先が存在しません。</value>
  </data>
  <data name="BI_T007" xml:space="preserve">
    <value>営業所が存在しません。</value>
  </data>
  <data name="BI_T008" xml:space="preserve">
    <value>付帯料金情報が存在しません。</value>
  </data>
  <data name="BI_T009" xml:space="preserve">
    <value>区切文字その他が未入力です！</value>
  </data>
  <data name="BookingType" xml:space="preserve">
    <value>予約区分</value>
  </data>
  <data name="BreakCustomer" xml:space="preserve">
    <value>得意先毎</value>
  </data>
  <data name="BreakNormal" xml:space="preserve">
    <value>指定なし</value>
  </data>
  <data name="BtnExport" xml:space="preserve">
    <value>出力</value>
  </data>
  <data name="Choices" xml:space="preserve">
    <value>選択項目</value>
  </data>
  <data name="company_code" xml:space="preserve">
    <value>会社</value>
  </data>
  <data name="CsvGroup" xml:space="preserve">
    <value>括り区分</value>
  </data>
  <data name="CsvGrQuotesMarks" xml:space="preserve">
    <value>「”」で括る</value>
  </data>
  <data name="CsvGrWithoutQuotes" xml:space="preserve">
    <value>「”」で括らない</value>
  </data>
  <data name="CsvHadHeader" xml:space="preserve">
    <value>出力する</value>
  </data>
  <data name="CsvHeader" xml:space="preserve">
    <value>見出し出力</value>
  </data>
  <data name="CsvMode" xml:space="preserve">
    <value>CSV</value>
  </data>
  <data name="CsvSeparator" xml:space="preserve">
    <value>区切文字</value>
  </data>
  <data name="CsvSeparatorNullText" xml:space="preserve">
    <value>※その他文字</value>
  </data>
  <data name="CsvSetting" xml:space="preserve">
    <value>CSV設定</value>
  </data>
  <data name="CsvSpaceComma" xml:space="preserve">
    <value>カンマ</value>
  </data>
  <data name="CsvSpaceFixedLength" xml:space="preserve">
    <value>固定長さ</value>
  </data>
  <data name="CsvSpaceOther" xml:space="preserve">
    <value>その他文字</value>
  </data>
  <data name="CsvSpaceSemicolon" xml:space="preserve">
    <value>セミコロン</value>
  </data>
  <data name="CsvSpacing" xml:space="preserve">
    <value>スペース</value>
  </data>
  <data name="CsvWithoutHeader" xml:space="preserve">
    <value>出力しない</value>
  </data>
  <data name="csv_output" xml:space="preserve">
    <value>CSV出力</value>
  </data>
  <data name="csv_setting" xml:space="preserve">
    <value>CSV設定</value>
  </data>
  <data name="customer" xml:space="preserve">
    <value>得意先</value>
  </data>
  <data name="CustomerNullText" xml:space="preserve">
    <value>得意先コード：得意先名　支店コード：支店名</value>
  </data>
  <data name="date_of_arrival" xml:space="preserve">
    <value>到着年月日</value>
  </data>
  <data name="date_of_dispatch" xml:space="preserve">
    <value>配車年月日​</value>
  </data>
  <data name="date_of_occurrence" xml:space="preserve">
    <value>発生年月日</value>
  </data>
  <data name="date_specification" xml:space="preserve">
    <value>日付指定</value>
  </data>
  <data name="Detail" xml:space="preserve">
    <value>明細</value>
  </data>
  <data name="ExportCsv" xml:space="preserve">
    <value>CSV</value>
  </data>
  <data name="ExportPdf" xml:space="preserve">
    <value>PDF</value>
  </data>
  <data name="ExportTypes" xml:space="preserve">
    <value>出力指示</value>
  </data>
  <data name="grouping_output" xml:space="preserve">
    <value>括り区分</value>
  </data>
  <data name="heading_ouput" xml:space="preserve">
    <value>見出し出力</value>
  </data>
  <data name="Information" xml:space="preserve">
    <value>情報</value>
  </data>
  <data name="InvoiceType" xml:space="preserve">
    <value>精算区分</value>
  </data>
  <data name="Liquidate" xml:space="preserve">
    <value>清算する</value>
  </data>
  <data name="NotSolve" xml:space="preserve">
    <value>清算しない</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="OtherDelimiterSymbolNullText" xml:space="preserve">
    <value>※その他文字</value>
  </data>
  <data name="output_classification" xml:space="preserve">
    <value>出力区分​</value>
  </data>
  <data name="page_break_designation" xml:space="preserve">
    <value>改頁指定</value>
  </data>
  <data name="page_title" xml:space="preserve">
    <value>付帯料金一覧</value>
  </data>
  <data name="PreviewReport" xml:space="preserve">
    <value>プレビュー</value>
  </data>
  <data name="receipt_number" xml:space="preserve">
    <value>受付番号</value>
  </data>
  <data name="ReportTitle" xml:space="preserve">
    <value>付帯料金一覧</value>
  </data>
  <data name="reservation_classification" xml:space="preserve">
    <value>予約区分​</value>
  </data>
  <data name="sales_office_code" xml:space="preserve">
    <value>営業所</value>
  </data>
  <data name="separator_output" xml:space="preserve">
    <value>区切り文字</value>
  </data>
  <data name="size_of_paper" xml:space="preserve">
    <value>用紙サイズ</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>合計</value>
  </data>
  <data name="UkeCdNullText" xml:space="preserve">
    <value>例：0000007848</value>
  </data>
  <data name="block1" xml:space="preserve">
    <value>出力設定</value>
  </data>
  <data name="block2" xml:space="preserve">
    <value>条件設定​</value>
  </data>
  <data name="CompaniesNullText" xml:space="preserve">
    <value>会社コード：会社名</value>
  </data>
  <data name="BranchesNullText" xml:space="preserve">
    <value>営業所コード：営業所名</value>
  </data>
  <data name="FutaisNullText" xml:space="preserve">
    <value>付帯料金コード：付帯料金名</value>
  </data>
  <data name="BI_T015" xml:space="preserve">
    <value>予約区分の範囲指定に誤りがあります！</value>
  </data>
  <data name="BookingTypeNullText" xml:space="preserve">
    <value>予約区分名</value>
  </data>
  <data name="clear" xml:space="preserve">
    <value>クリア</value>
  </data>
</root>