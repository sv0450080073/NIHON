@inject IJSRuntime JSRuntime
@inject ITKD_HaishaDataListService TKD_HaishaDataService
@inject BusScheduleHelper busScheduleHelper
@inject IBlazorContextMenuService blazorContextMenuService
@inject ITPM_CalendDataListService TPM_CalendDataService
@inject IStringLocalizer<BusSchedule> Lang

<HassyaAllrightCloud.Pages.Components.MouseContainer Type="@type" Date="@Date" Mode="@Param.Mode" Width="@Width" BusGreenLists="Busgreen" BusGrayLists="Busgray" BusLists="Busnames" View="@Param.ActiveV" GridData="@Param.ActiveP" defaultdate="@Date" GridView="@Param.ActiveCPT" Jobs="BusLines" OnStatusUpdated="HandlerStatusUpdated" UpdateLineHeight="ReupdateLineBusHeight" OnShowMenu="HandleShowMenu" OnUpdateLineCut="HandleUpdateLineCut" Param="@Param" OnSatusRemoved="HandleStatusRemove">
    @if (Param.IsDivided == true)
    {
        <div class="divided-wrap">
            @for (var k = 0; k < 3; k++)
            {
                <div class="busData mb-2 view-@Param.ActiveV line-@Param.ActiveL group-@Param.ActiveG" @onmousewheel="HandleMouseWheel">
                    <div class="wrap">
                        <div class="busData--normal busData__wrap noscroll">
                            <div class="busData-content busData-content--@Param.ActiveP @(Param.ActiveCPT == (int)TimeMode.Minute ? "minute" : null) @(Param.ActiveCPT == (int)TimeMode.OneHour ? "one-hour" : null) @(Param.ActiveCPT == (int)TimeMode.Day ? "one-day" : null) @commentClass">
                                <div class="busData-name">
                                    <div class="topbar"></div>
                                    <div>
                                        @foreach (var busname in Busnames.Take((k + 1) * 20).Skip(k * 20))
                                        {
                                            <div style="height: @(busname.BusHeight)rem" class="busData-name__item"><span>@(busname.BusName)</span></div>
                                        }
                                    </div>
                                </div>
                                <div class="busData-timeline busData--@Param.ActiveCPT mode--@Param.Mode">
                                    <div class="listColumn clearfix">
                                        <!-- 6hours -->
                                        @if (Param.ActiveCPT == (int)TimeMode.SixHours)
                                        {
                                            for (var i = 0; i < Param.Number_of_days; i++)
                                            {
                                                DateTime date = Date.AddDays(i);
                                                <div class="listColumn__item">
                                                    <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                        <div class="day text-center @date.DayOfWeek.ToString("G").ToLower()">
                                                            <strong>@date.ToString("MM月dd日 (ddd)", ci)</strong>
                                                            <span class="fa fa-pencil-square-o mx-1" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))" aria-hidden="true" @onclick="@(() => OnClickDateComment.InvokeAsync(date.ToString("yyyyMMdd")))"></span>
                                                            <div class="des" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))">@GetCommentDate(date)</div>
                                                        </div>
                                                        <div class="description text-center">@((MarkupString)GetheaderText(Date.AddDays(i)))</div>
                                                    </ContextMenuTrigger>
                                                    <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                        <div class="hours d-flex">
                                                            @for (var j = 0; j < 4; j++)
                                                            {
                                                                <span>@(j * 6)</span>
                                                            }
                                                        </div>
                                                    </ContextMenuTrigger>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <div class="listTimeline">
                                        <div class="linevisual" style="left: 0px; position: absolute; width: 100%; height: 100%; z-index:0; background-color: transparent"></div>
                                        @foreach (var busname in Busnames.Take((k + 1) * 20).Skip(k * 20))
                                        {
                                            if (busname.IsOutOfDate)
                                            {
                                                linestatus = 1;
                                            }
                                            else if (busname.NinkaKbn == 7)
                                            {
                                                linestatus = 2;
                                            }
                                            else
                                            {
                                                linestatus = 0;
                                            }
                                            <HassyaAllrightCloud.Pages.Components.BusLine ValueCheckHaitaBus="@ValueCheckHaitaBus" UpYmdTimes="@UpYmdTimeTmps" BusLines="@BusLines" LineType="3" LineId="@busname.BusID" startdate="@busname.StaYmd" enddate="@busname.EndYmd" LineStatus="@linestatus" Busname="@busname.BusName" SitenCdSeq="@busname.SitenCdSeq" NumberDate="@Param.Number_of_days" Width="@Width" Date="@Date" BusVehicle="@busname.BusVehicle" Param="@Param" CodeKbnItem="@CodeKbnItem"></HassyaAllrightCloud.Pages.Components.BusLine>
                                        }
                                        @if (Param.Mode != (int)BusLineMode.Create || Param.Mode != (int)BusLineMode.Repair)
                                        {
                                            <div class="grid-calendar grid-calendar-view">
                                                <!-- 6hours -->
                                                @if (Param.ActiveCPT == (int)TimeMode.SixHours)
                                                {
                                                    @for (var j = 0; j < Param.Number_of_days * 4; j++)
                                                    {
                                                        <div></div>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="busData mb-2 view-@Param.ActiveV line-@Param.ActiveL group-@Param.ActiveG" @onmousewheel="HandleMouseWheel">
                <div class="wrap">
                    @if (Param.ActiveL == (int)LineDrawMode.SpareBus)
                    {
                        <div class="busData--spareBus busData__wrap noscroll">
                            <div class="busData-content busData-content--@Param.ActiveP @(Param.ActiveCPT == (int)TimeMode.Minute ? "minute" : null) @(Param.ActiveCPT == (int)TimeMode.OneHour ? "one-hour" : null) @(Param.ActiveCPT == (int)TimeMode.Day ? "one-day" : null)">
                                <div class="busData-name">
                                    <div class="topbar"></div>
                                    @*<div class="busData-name__item busData-name__item--spareBus disabled">予約車種／型</div>*@
                                    @foreach (var busname in Busgray)
                                    {
                                        <div style="height: @(busname.BusHeight)rem" class="busData-name__item busData-name__item--spareBus"><span>@(busname.BusName)</span></div>
                                    }
                                </div>
                                <div class="busData-timeline busData--@Param.ActiveCPT mode--@Param.Mode">
                                    <div class="listColumn clearfix">
                                        <!-- 6hours -->
                                        @if (Param.ActiveCPT == (int)TimeMode.SixHours)
                                        {
                                            for (var i = 0; i < Param.Number_of_days; i++)
                                            {
                                                DateTime date = Date.AddDays(i);
                                                <div class="listColumn__item">
                                                    <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                        <div class="day text-center @date.DayOfWeek.ToString("G").ToLower()">
                                                            <strong>@date.ToString("MM月dd日 (ddd)", ci)</strong>
                                                            <span class="fa fa-pencil-square-o mx-1" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))" aria-hidden="true" @onclick="@(() => OnClickDateComment.InvokeAsync(date.ToString("yyyyMMdd")))"></span>
                                                            <div class="des" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))">@GetCommentDate(date)</div>
                                                        </div>
                                                        <div class="description text-center">@((MarkupString)GetheaderText(Date.AddDays(i)))</div>
                                                    </ContextMenuTrigger>
                                                    <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                        <div class="hours d-flex">
                                                            @for (var j = 0; j < 4; j++)
                                                            {
                                                                <span>@(j * 6)</span>
                                                            }
                                                        </div>
                                                    </ContextMenuTrigger>
                                                </div>
                                            }
                                        }
                                    </div>
                                    @*<div class="busData-timeline__title--spareBus"><span>未仮車</span></div>*@
                                    <div class="listTimeline">
                                        @foreach (var busname in Busgray)
                                        {
                                            <HassyaAllrightCloud.Pages.Components.BusLine ValueCheckHaitaBus="@ValueCheckHaitaBus" UpYmdTimes="@UpYmdTimeTmps" BusLines="@BusLines" LineId="@busname.BusID" Busname="@busname.BusName" SitenCdSeq="@busname.SitenCdSeq" LineType="2" NumberDate="@Param.Number_of_days" Date="@Date" Width="@Width" BusVehicle="@busname.BusVehicle" Param="@Param" CodeKbnItem="@CodeKbnItem"></HassyaAllrightCloud.Pages.Components.BusLine>
                                        }
                                        @if (Param.Mode != (int)BusLineMode.Create || Param.Mode != (int)BusLineMode.Repair)
                                        {
                                            <div class="grid-calendar grid-calendar-view">
                                                <!-- 15minute -->
                                                @if (Param.ActiveCPT == (int)TimeMode.Minute)
                                                {
                                                    @for (var i = 0; i < 24 * 4; i++)
                                                    {
                                                        <div></div>
                                                    }
                                                }
                                                <!-- 1hour -->
                                                @if (Param.ActiveCPT == (int)TimeMode.OneHour)
                                                {
                                                    @for (var j = 0; j < Param.Number_of_days * 24; j++)
                                                    {
                                                        <div></div>
                                                    }
                                                }
                                                <!-- 3hours -->
                                                @if (Param.ActiveCPT == (int)TimeMode.ThreeHours)
                                                {
                                                    @for (var i = 0; i < Param.Number_of_days * 8; i++)
                                                    {
                                                        <div></div>
                                                    }
                                                }
                                                <!-- 6hours -->
                                                @if (Param.ActiveCPT == (int)TimeMode.SixHours)
                                                {
                                                    @for (var j = 0; j < Param.Number_of_days * 4; j++)
                                                    {
                                                        <div></div>
                                                    }
                                                }
                                                <!-- 1day -->
                                                @if (Param.ActiveCPT == (int)TimeMode.Day)
                                                {
                                                    @for (var j = 0; j < Param.Number_of_days; j++)
                                                    {
                                                        <div></div>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="busData mb-2 view-@Param.ActiveV line-@Param.ActiveL group-@Param.ActiveG" @onmousewheel="HandleMouseWheel">
            <div class="wrap">
                <div class="busData--normal busData__wrap">
                    <div class="busData-content busData-content--@Param.ActiveP @(Param.ActiveCPT == (int)TimeMode.Minute ? "minute" : null) @(Param.ActiveCPT == (int)TimeMode.OneHour ? "one-hour" : null) @(Param.ActiveCPT == (int)TimeMode.Day ? "one-day" : null) @(Param.ActiveP == (int)DayMode.Month ? "one-month" : null) @commentClass">
                        <div class="busData-name">
                            <div class="topbar"></div>
                            <div>
                                @foreach (var busname in Busnames)
                                {
                                    <div style="height: @(busname.BusHeight)rem" class="busData-name__item"><span>@(busname.BusName)</span></div>
                                }
                            </div>
                        </div>
                        <div class="busData-timeline busData--@Param.ActiveCPT mode--@Param.Mode @(Param.ActiveP == (int)DayMode.Month ? "w-100" : null)">
                            <div class="listColumn clearfix">
                                <!-- 15minute -->
                                @if (Param.ActiveCPT == (int)TimeMode.Minute)
                                {
                                    DateTime date = Date;
                                    <div class="listColumn__item">
                                        <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                            <div class="day text-center @date.DayOfWeek.ToString("G").ToLower()">
                                                <div class="day-sticky">
                                                    <strong>@date.ToString("MM月dd日 (ddd)", ci)</strong>
                                                    <span class="fa fa-pencil-square-o mx-1" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))" aria-hidden="true" @onclick="@(() => OnClickDateComment.InvokeAsync(date.ToString("yyyyMMdd")))"></span>
                                                    <div class="des" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))">@GetCommentDate(date)</div>
                                                </div>
                                            </div>
                                        </ContextMenuTrigger>
                                        <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                            <div class="hours font-weight-bold d-flex">
                                                @for (var j = 0; j < 24; j++)
                                                {
                                                    <span>@j</span>
                                                }
                                            </div>
                                        </ContextMenuTrigger>
                                        <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                            <div class="minutes d-flex">
                                                @for (var j = 0; j < 24; j++)
                                                {
                                                    <span>0</span>
                                                    <span>15</span>
                                                    <span>30</span>
                                                    <span>45</span>
                                                }
                                            </div>
                                        </ContextMenuTrigger>
                                    </div>
                                }
                                <!-- 1hour -->
                                @if (Param.ActiveCPT == (int)TimeMode.OneHour)
                                {
                                    for (var i = 0; i < Param.Number_of_days; i++)
                                    {
                                        DateTime date = Date.AddDays(i);
                                        <div class="listColumn__item">
                                            <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                <div class="day text-center @date.DayOfWeek.ToString("G").ToLower()">
                                                    <strong>@date.ToString("MM月dd日 (ddd)", ci)</strong>
                                                    <span class="fa fa-pencil-square-o mx-1" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))" aria-hidden="true" @onclick="@(() => OnClickDateComment.InvokeAsync(date.ToString("yyyyMMdd")))"></span>
                                                    <div class="des" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))">@GetCommentDate(date)</div>
                                                </div>
                                                <div class="description text-center">@((MarkupString)GetheaderText(Date.AddDays(i)))</div>
                                            </ContextMenuTrigger>
                                            <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                <div class="hours d-flex">
                                                    @for (var j = 0; j < 24; j++)
                                                    {
                                                        <span>@j</span>
                                                    }
                                                </div>
                                            </ContextMenuTrigger>
                                        </div>
                                    }
                                }
                                <!-- 3hours -->
                                @if (Param.ActiveCPT == (int)TimeMode.ThreeHours)
                                {
                                    for (int i = 0; i < Param.Number_of_days; i++)
                                    {
                                        DateTime date = Date.AddDays(i);
                                        <div class="listColumn__item">
                                            <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                <div class="day text-center @date.DayOfWeek.ToString("G").ToLower()">
                                                    <strong>@date.ToString("MM月dd日 (ddd)", ci)</strong>
                                                    <span class="fa fa-pencil-square-o mx-1" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))" aria-hidden="true" @onclick="@(() => OnClickDateComment.InvokeAsync(date.ToString("yyyyMMdd")))"></span>
                                                    <div class="des" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))">@GetCommentDate(date)</div>
                                                </div>
                                                <div class="description text-center">@((MarkupString)GetheaderText(Date.AddDays(i)))</div>
                                            </ContextMenuTrigger>
                                            <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                <div class="hours d-flex">
                                                    @for (var j = 0; j < 8; j++)
                                                    {
                                                        <span>@(j * 3)</span>
                                                    }
                                                </div>
                                            </ContextMenuTrigger>
                                        </div>
                                    }
                                }
                                <!-- 6hours -->
                                @if (Param.ActiveCPT == (int)TimeMode.SixHours)
                                {
                                    for (var i = 0; i < Param.Number_of_days; i++)
                                    {
                                        DateTime date = Date.AddDays(i);
                                        <div class="listColumn__item">
                                            <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                <div class="day text-center @date.DayOfWeek.ToString("G").ToLower()">
                                                    <strong>@date.ToString("MM月dd日 (ddd)", ci)</strong>
                                                    <span class="fa fa-pencil-square-o mx-1" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))" aria-hidden="true" @onclick="@(() => OnClickDateComment.InvokeAsync(date.ToString("yyyyMMdd")))"></span>
                                                    <div class="des" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))">@GetCommentDate(date)</div>
                                                </div>
                                                <div class="description text-center">@((MarkupString)GetheaderText(Date.AddDays(i)))</div>
                                            </ContextMenuTrigger>
                                            <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                <div class="hours d-flex">

                                                    @for (var j = 0; j < 4; j++)
                                                    {
                                                        <span>@(j * 6)</span>
                                                    }
                                                </div>
                                            </ContextMenuTrigger>
                                        </div>
                                    }
                                }
                                <!-- 1day -->
                                @if (Param.ActiveCPT == (int)TimeMode.Day && Param.ActiveP != (int)DayMode.Month)
                                {
                                    for (var i = 0; i < Param.Number_of_days; i++)
                                    {
                                        DateTime date = Date.AddDays(i);
                                        <div class="listColumn__item">
                                            <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@date.ToString("yyyyMMdd")">
                                                <div class="day text-center @date.DayOfWeek.ToString("G").ToLower()">
                                                    <div class="d-flex align-items-center justify-content-center">
                                                        <strong>@date.ToString("MM月dd日 (ddd)", ci)</strong>
                                                        <span class="fa fa-pencil-square-o mx-1" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))" aria-hidden="true" @onclick="@(() => OnClickDateComment.InvokeAsync(date.ToString("yyyyMMdd")))"></span>&nbsp;
                                                    </div>
                                                    <div class="des" style="color:@GetheaderColor(date.ToString("yyyyMMdd"))">@GetCommentDate(date)</div>
                                                </div>
                                                <div class="description text-center">@((MarkupString)GetheaderText(Date.AddDays(i)))</div>
                                            </ContextMenuTrigger>
                                        </div>
                                    }
                                }
                                @if (Param.ActiveP == (int)DayMode.Month)
                                {
                                    foreach (var date in Param.ListDate)
                                    {
                                        <div class="listColumn__item" style="width: calc(100% / @Param.TotalDays * @date.Count)">
                                            <div class="month text-center">
                                                <div class="d-flex align-items-center justify-content-center">
                                                    <strong>@(date.First().ToString("MM月", ci))</strong>
                                                </div>
                                                @foreach (var item in date)
                                                {
                                                    <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Left" MenuId="menuDate" Data="@item.ToString("yyyyMMdd")">
                                                        <div class="date-item @(item == date.First() ? "border-left-0" : null)" style="width: calc(100% / @date.Count)">
                                                            <div class="month-popup">
                                                                @((MarkupString)GetheaderText(item))
                                                            </div>
                                                            <strong class="@item.DayOfWeek.ToString("G").ToLower() cursor-pointer">
                                                                @item.ToString("dd (ddd)", ci)
                                                            </strong>
                                                        </div>
                                                    </ContextMenuTrigger>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="listTimeline">

                                <div class="linevisual" style="left: 0px; position: absolute; width: 100%; height: 100%; z-index:0; background-color: transparent">

                                </div>
                                @foreach (var busname in Busnames)
                                {
                                    if (busname.IsOutOfDate)
                                    {
                                        linestatus = 1;
                                    }
                                    else if (busname.NinkaKbn == 7)
                                    {
                                        linestatus = 2;
                                    }
                                    else
                                    {
                                        linestatus = 0;
                                    }
                                    <HassyaAllrightCloud.Pages.Components.BusLine ValueCheckHaitaBus="@ValueCheckHaitaBus" UpYmdTimes="@UpYmdTimeTmps" BusLines="@BusLines" LineType="3" LineId="@busname.BusID" startdate="@busname.StaYmd" enddate="@busname.EndYmd" LineStatus="@linestatus" Busname="@busname.BusName" SitenCdSeq="@busname.SitenCdSeq" NumberDate="@Param.Number_of_days" Width="@Width" Date="@Date" BusVehicle="@busname.BusVehicle" Param="@Param" CodeKbnItem="@CodeKbnItem"></HassyaAllrightCloud.Pages.Components.BusLine>
                                }
                                @if (Param.Mode != (int)BusLineMode.Create || Param.Mode != (int)BusLineMode.Repair)
                                {
                                    <div class="grid-calendar grid-calendar-view">
                                        <!-- 15minute -->
                                        @if (Param.ActiveCPT == (int)TimeMode.Minute)
                                        {
                                            @for (var i = 0; i < 24 * 4; i++)
                                            {
                                                <div></div>
                                            }
                                        }
                                        <!-- 1hour -->
                                        @if (Param.ActiveCPT == (int)TimeMode.OneHour)
                                        {
                                            @for (var j = 0; j < Param.Number_of_days * 24; j++)
                                            {
                                                <div></div>
                                            }
                                        }
                                        <!-- 3hours -->
                                        @if (Param.ActiveCPT == (int)TimeMode.ThreeHours)
                                        {
                                            @for (var i = 0; i < Param.Number_of_days * 8; i++)
                                            {
                                                <div></div>
                                            }
                                        }
                                        <!-- 6hours -->
                                        @if (Param.ActiveCPT == (int)TimeMode.SixHours)
                                        {
                                            @for (var j = 0; j < Param.Number_of_days * 4; j++)
                                            {
                                                <div></div>
                                            }
                                        }
                                        <!-- 1day -->
                                        @if (Param.ActiveCPT == (int)TimeMode.Day && Param.ActiveP != (int)DayMode.Month)
                                        {
                                            @for (var j = 0; j < Param.Number_of_days; j++)
                                            {
                                                <div></div>
                                            }
                                        }
                                        @if (Param.ActiveP == (int)DayMode.Month)
                                        {
                                            @foreach (var date in Param.ListDate)
                                            {
                                                <div style="width: calc(100% / @Param.TotalDays * @date.Count)">
                                                    @foreach (var item in date)
                                                    {
                                                        <div class="date-grid-item @(item == date.First() ? "border-left-0" : null)" style="width: calc(100% / @date.Count)"></div>
                                                    }
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                @if (Param.ActiveL == (int)LineDrawMode.RentalBus || Param.ActiveL == (int)LineDrawMode.All)
                {
                    <div class="busData--rentalBus busData__wrap">
                        <div class="busData-content busData-content--@Param.ActiveP @(Param.ActiveCPT == (int)TimeMode.Minute ? "minute" : null) @(Param.ActiveCPT == (int)TimeMode.OneHour ? "one-hour" : null) @(Param.ActiveCPT == (int)TimeMode.Day ? "one-day" : null) @(Param.ActiveP == (int)DayMode.Month ? "one-month" : null)">
                            <div class="busData-name">
                                <div class="busData-name__item busData-name__item--rentalBus disabled">傭車先</div>
                                @foreach (var busname in Busgreen)
                                {
                                    <div style="height: @(busname.BusHeight)rem" class="busData-name__item busData-name__item--rentalBus"><span>@(busname.BusName)</span></div>
                                }
                            </div>
                            <div class="busData-timeline busData--@Param.ActiveCPT mode--@Param.Mode @(Param.ActiveP == (int)DayMode.Month ? "w-100" : null)">
                                <div class="busData-timeline__title--rentalBus disabled"><span>傭車</span></div>
                                <div class="listTimeline">
                                    @foreach (var busname in Busgreen)
                                    {
                                        <HassyaAllrightCloud.Pages.Components.BusLine ValueCheckHaitaBus="@ValueCheckHaitaBus" UpYmdTimes="@UpYmdTimeTmps" BusLines="@BusLines" LineId="@busname.BusID" Busname="@busname.BusName" SitenCdSeq="@busname.SitenCdSeq" LineType="1" NumberDate="@Param.Number_of_days" Date="@Date" Width="@Width" BusVehicle="@busname.BusVehicle" Param="@Param" CodeKbnItem="@CodeKbnItem"></HassyaAllrightCloud.Pages.Components.BusLine>
                                    }
                                    @if (Param.Mode != (int)BusLineMode.Create || Param.Mode != (int)BusLineMode.Repair)
                                    {
                                        <div class="grid-calendar grid-calendar-view">
                                            <!-- 15minute -->
                                            @if (Param.ActiveCPT == (int)TimeMode.Minute)
                                            {
                                                @for (var i = 0; i < 24 * 4; i++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            <!-- 1hour -->
                                            @if (Param.ActiveCPT == (int)TimeMode.OneHour)
                                            {
                                                @for (var j = 0; j < Param.Number_of_days * 24; j++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            <!-- 3hours -->
                                            @if (Param.ActiveCPT == (int)TimeMode.ThreeHours)
                                            {
                                                @for (var i = 0; i < Param.Number_of_days * 8; i++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            <!-- 6hours -->
                                            @if (Param.ActiveCPT == (int)TimeMode.SixHours)
                                            {
                                                @for (var j = 0; j < Param.Number_of_days * 4; j++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            <!-- 1day -->
                                            @if (Param.ActiveCPT == (int)TimeMode.Day && Param.ActiveP != (int)DayMode.Month)
                                            {
                                                @for (var j = 0; j < Param.Number_of_days; j++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            @if (Param.ActiveP == (int)DayMode.Month)
                                            {
                                                @foreach (var date in Param.ListDate)
                                                {
                                                    <div style="width: calc(100% / @Param.TotalDays * @date.Count)">
                                                        @foreach (var item in date)
                                                        {
                                                            <div class="date-grid-item @(item == date.First() ? "border-left-0" : null)" style="width: calc(100% / @date.Count)"></div>
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @if (Param.ActiveL == (int)LineDrawMode.SpareBus || Param.ActiveL == (int)LineDrawMode.All)
                {
                    <div class="busData--spareBus busData__wrap">
                        <div class="busData-content busData-content--@Param.ActiveP @(Param.ActiveCPT == (int)TimeMode.Minute ? "minute" : null) @(Param.ActiveCPT == (int)TimeMode.OneHour ? "one-hour" : null) @(Param.ActiveCPT == (int)TimeMode.Day ? "one-day" : null) @(Param.ActiveP == (int)DayMode.Month ? "one-month" : null)">
                            <div class="busData-name">
                                <div class="busData-name__item busData-name__item--spareBus disabled">予約車種／型</div>
                                @foreach (var busname in Busgray)
                                {
                                    <div style="height: @(busname.BusHeight)rem" class="busData-name__item busData-name__item--spareBus"><span>@(busname.BusName)</span></div>
                                }
                            </div>
                            <div class="busData-timeline busData--@Param.ActiveCPT mode--@Param.Mode @(Param.ActiveP == (int)DayMode.Month ? "w-100" : null)">
                                <div class="busData-timeline__title--spareBus"><span>未仮車</span></div>
                                <div class="listTimeline">
                                    @foreach (var busname in Busgray)
                                    {
                                        <HassyaAllrightCloud.Pages.Components.BusLine ValueCheckHaitaBus="@ValueCheckHaitaBus" UpYmdTimes="@UpYmdTimeTmps" BusLines="@BusLines" LineId="@busname.BusID" Busname="@busname.BusName" SitenCdSeq="@busname.SitenCdSeq" LineType="2" NumberDate="@Param.Number_of_days" Date="@Date" Width="@Width" BusVehicle="@busname.BusVehicle" Param="@Param" CodeKbnItem="@CodeKbnItem"></HassyaAllrightCloud.Pages.Components.BusLine>
                                    }
                                    @if (Param.Mode != (int)BusLineMode.Create || Param.Mode != (int)BusLineMode.Repair)
                                    {
                                        <div class="grid-calendar grid-calendar-view">
                                            <!-- 15minute -->
                                            @if (Param.ActiveCPT == (int)TimeMode.Minute)
                                            {
                                                @for (var i = 0; i < 24 * 4; i++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            <!-- 1hour -->
                                            @if (Param.ActiveCPT == (int)TimeMode.OneHour)
                                            {
                                                @for (var j = 0; j < Param.Number_of_days * 24; j++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            <!-- 3hours -->
                                            @if (Param.ActiveCPT == (int)TimeMode.ThreeHours)
                                            {
                                                @for (var i = 0; i < Param.Number_of_days * 8; i++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            <!-- 6hours -->
                                            @if (Param.ActiveCPT == (int)TimeMode.SixHours)
                                            {
                                                @for (var j = 0; j < Param.Number_of_days * 4; j++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            <!-- 1day -->
                                            @if (Param.ActiveCPT == (int)TimeMode.Day && Param.ActiveP != (int)DayMode.Month)
                                            {
                                                @for (var j = 0; j < Param.Number_of_days; j++)
                                                {
                                                    <div></div>
                                                }
                                            }
                                            @if (Param.ActiveP == (int)DayMode.Month)
                                            {
                                                @foreach (var date in Param.ListDate)
                                                {
                                                    <div style="width: calc(100% / @Param.TotalDays * @date.Count)">
                                                        @foreach (var item in date)
                                                        {
                                                            <div class="date-grid-item @(item == date.First() ? "border-left-0" : null)" style="width: calc(100% / @date.Count)"></div>
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</HassyaAllrightCloud.Pages.Components.MouseContainer>

@code{
    [Inject] public IBusScheduleService _busScheduleService { get; set; }
    CultureInfo ci = new CultureInfo("ja-JP");
    public int type { get; set; }
    [Parameter] public ConfigBusSchedule Param { get; set; }
    [Parameter] public DateTime Date { get; set; }
    [Parameter] public List<BusDataType> Busnames { get; set; }
    [Parameter] public List<BusDataType> Busgreen { get; set; }
    [Parameter] public List<BusDataType> Busgray { get; set; }
    [Parameter] public List<BusInfoData> BusInfo { get; set; }
    [Parameter] public List<TKD_ShuriData> Busrepair { get; set; }
    [Parameter] public List<ItemBus> Businsert { get; set; }
    [Parameter] public List<TkdCalend> Calendlst { get; set; }
    [Parameter] public VPM_RepairData CodeKbnItem { get; set; }
    [Parameter] public double Width { get; set; }
    [Parameter] public List<ItemBus> BusLines { get; set; }
    [Parameter] public EventCallback<string> OnRowUpdated { get; set; }
    [Parameter] public EventCallback<string> OnClickDateComment { get; set; }
    [Parameter] public List<KyoSHeDatabyDate> listKyoSHebyDate { get; set; }
    //[Parameter] public EventCallback<List<ItemBus>> Activesave { get; set; }
    [Parameter] public EventCallback<ItemBus> OnShowContextMenuUpdated { get; set; }
    [Parameter] public EventCallback<ItemBus> updateitem { get; set; }
    [Parameter] public int GroupID { get; set; }
    [Parameter] public IEnumerable<BranchChartData> SelectedBranchItems { get; set; }
    [Parameter] public List<ResponseHaiTaCheck> UpYmdTimes { get; set; }
    public List<ResponseHaiTaCheck> UpYmdTimeTmps { get; set; }
    [Parameter] public EventCallback<DataInit> ValueCheckHaitaBusSchedule { get; set; }
    public int linestatus { get; set; }
    public string color { get; set; } = "#000";
    string commentClass = "";

    public async Task HandleUpdateLineCut(string text)
    {
        await OnRowUpdated.InvokeAsync(text);
    }

    public async Task HandleShowMenu(ItemBus item)
    {
        await OnShowContextMenuUpdated.InvokeAsync(item);
    }

    public string GetheaderColor(string date)
    {
        if (Calendlst.Count != 0 && Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date).Any())
        {
            string commentdate = Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date).FirstOrDefault().CalenCom;
            if (commentdate != "" && commentdate.Length <= 100)
            {
                color = "#8533ff";
            }
            else
            {
                color = "#000";
            }
        }
        else
        {
            color = "#000";
        }
        return color;
    }

    public string GetheaderText(DateTime date)
    {
        string datestr = date.ToString("yyyyMMdd");
        int countbusname = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7).Select(x => x.BusID).Count();
        int countbusnameLarge = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 1).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 1).Select(x => x.BusID).Count();
        int countbusnameMedium = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 2).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 2).Select(x => x.BusID).Count();
        int countbusnameSmall = Busnames.Where(x => x.IsOutOfDate == false && x.NinkaKbn != 7 && x.KataKbn == 3).Select(x => x.BusID).Count() + Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive & x.NinkaKbn != 7 && x.KataKbn == 3).Select(x => x.BusID).Count();

        if (countbusname != 0)
        {
            int a = countbusname;
        }
        int countbus = 0;
        int countbusrp = 0;
        int countbusLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusSmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countbusgrayLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusgrayMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusgraySmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countbusrpLarge = 0;// BusLines.Where(x=>x.Syasyu_KataKbn ==1).Select(x=>x.BusLine).Count();
        int countbusrpMedium = 0;//BusLines.Where(x => x.Syasyu_KataKbn == 2).Select(x => x.BusLine).Count();
        int countbusrpSmall = 0;// BusLines.Where(x => x.Syasyu_KataKbn == 3).Select(x => x.BusLine).Count();

        int countBusdriver = 0;
        int countBusguider = 0;
        int countBusdriveroff = 0;
        int countBusguieroff = 0;
        int countbusdriveruse = 0;
        int countbusguideruse = 0;

        int countBusdriverNew = 0;
        int countBusguiderNew = 0;
        int countBusdriverLarge = 0;
        int countBusdriverMedium = 0;
        int countBusdriverSmall = 0;
        int countBusdriverLargeNew = 0;
        int countBusdriverMediumNew = 0;
        int countBusdriverSmallNew = 0;
        int countBusdriveroffLarge = 0;
        int countBusdriveroffMedium = 0;
        int countBusdriveroffSmall = 0;
        int countbusdriverwork = 0;
        int countbusdriverholiday = 0;
        int countbusdriverpublic = 0;

        List<int> listbranch = new List<int>();
        if (SelectedBranchItems != null)
        {
            listbranch = SelectedBranchItems.Select(t => t.EigyoCdSeq).ToList();
        }

        /*Update by M*/
        if (Param.ActiveG == (int)GroupMode.All)
        {

            countbusLarge = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId) || t.KSKbn == 1) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId) || t.KSKbn == 1) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId) || t.KSKbn == 1) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true && t.BusLine != "0").Select(x => x.BusLine).Distinct().Count();

            countbusgrayLarge = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7).Select(x => x.BusLine).Distinct().Count();
            countbusgrayMedium = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7).Select(x => x.BusLine).Distinct().Count();
            countbusgraySmall = BusLines.Where(t => String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.KSKbn == 1 && t.Syasyu_KataKbn == 0 && t.YykSyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7).Select(x => x.BusLine).Distinct().Count();
        }
        else if (Param.ActiveG == (int)GroupMode.Branch)
        {
            countbusLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
        }
        else
        {
            countbusLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();
            countbusMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();
            countbusSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == false).Select(x => x.BusLine).Distinct().Count();

            countbusrpLarge = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 1 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
            countbusrpMedium = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 2 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
            countbusrpSmall = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.Syasyu_KataKbn == 3 && t.SyaRyo_NinKaKbn != 7 && t.IsBusRepair == true).Select(x => x.BusLine).Distinct().Count();
        }
        /*END*/
        if (Param.ActiveG == (int)GroupMode.All)
        {
            var busitem = BusLines.Where(t => t.YouTblSeq == 0 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && (listbranch.Contains(t.BranchId) || t.KSKbn == 1) && t.SyaRyo_NinKaKbn != 7 && t.BusLine != "0").ToList();
            countbus = busitem.Where(t => t.IsBusRepair == false).Select(t => t.BusLine).Distinct().Count();
            countbusrp = busitem.Where(t => t.IsBusRepair == true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {

                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem = listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    countBusdriver = listKyoSHebyDateitem.Where(t => t.SyokumuKbn == 1 || t.SyokumuKbn == 2).Count();
                    countBusguider = listKyoSHebyDateitem.Where(t => t.SyokumuKbn == 3 || t.SyokumuKbn == 4).Count();
                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.SmallTypeDrivingFlg == 1).Count();

                    countBusdriverNew = haishadrgdDataitem.Sum(t => t.allDrivers);
                    countBusguiderNew = haishadrgdDataitem.Sum(t => t.allGuides);
                    countBusdriverLargeNew = haishadrgdDataitem.Sum(t => t.largeDriver);
                    countBusdriverMediumNew = haishadrgdDataitem.Sum(t => t.MediumDriver);
                    countBusdriverSmallNew = haishadrgdDataitem.Sum(t => t.SmallDriver);
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }
        else if (Param.ActiveG == (int)GroupMode.Branch)
        {
            var busitem = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.BranchId == GroupID && listbranch.Contains(t.BranchId) && t.SyaRyo_NinKaKbn != 7 && t.BusLine != "0").ToList();
            countbus = busitem.Where(t => t.IsBusRepair == false).Select(t => t.BusLine).Distinct().Count();
            countbusrp = busitem.Where(t => t.IsBusRepair == true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {
                List<TPM_KyoSHeData> busdriver = new List<TPM_KyoSHeData>();
                List<TPM_KyoSHeData> busguider = new List<TPM_KyoSHeData>();
                List<int> busdriverlst = new List<int>();
                List<int> busguiderlst = new List<int>();
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem = listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    busdriver = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID).ToList();
                    busguider = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 3 || t.SyokumuKbn == 4) && t.EigyoCdSeq == GroupID).ToList();
                    busdriverlst = busdriver.Select(t => t.SyainCdSeq).ToList();
                    busguiderlst = busguider.Select(t => t.SyainCdSeq).ToList();
                    countBusdriver = busdriver.Count();
                    countBusguider = busguider.Count();

                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.EigyoCdSeq == GroupID && t.SmallTypeDrivingFlg == 1).Count();

                    countBusdriverNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.allDrivers);
                    countBusguiderNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.allGuides);
                    countBusdriverLargeNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.largeDriver);
                    countBusdriverMediumNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.MediumDriver);
                    countBusdriverSmallNew = haishadrgdDataitem.Where(t => t.EigyoCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.SmallDriver);
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }
        else
        {
            var busitem = BusLines.Where(t => t.KSKbn == 2 && String.Compare(t.StartDateDefault, datestr) <= 0 && String.Compare(t.EndDateDefault, datestr) >= 0 && t.CompanyId == GroupID && listbranch.Contains(t.BranchId) && t.SyaRyo_NinKaKbn != 7 && t.BusLine != "0").ToList();
            countbus = busitem.Where(t => t.IsBusRepair == false).Select(t => t.BusLine).Distinct().Count();
            countbusrp = busitem.Where(t => t.IsBusRepair == true).Select(t => t.BusLine).Distinct().Count();
            if (busitem.Count != 0)
            {
                foreach (var item in busitem)
                {
                    if (busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).Count() == 1)
                    {
                        countbusdriveruse += item.NumberDriver;
                        countbusguideruse += item.NumberGuider;
                    }
                    else
                    {
                        if (item.BunkRen != busitem.Where(t => t.BookingId == item.BookingId && t.TeiDanNo == item.TeiDanNo).First().BunkRen)
                        {
                            countbusdriveruse += item.NumberDriver;
                            countbusguideruse += item.NumberGuider;
                        }
                    }

                }
            }
            if (listKyoSHebyDate != null)
            {
                List<TPM_KyoSHeData> busdriver = new List<TPM_KyoSHeData>();
                List<TPM_KyoSHeData> busguider = new List<TPM_KyoSHeData>();
                List<int> busdriverlst = new List<int>();
                List<int> busguiderlst = new List<int>();
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Count() > 0)
                {
                    var a = listKyoSHebyDate.Where(t => t.date == date).ToList();
                    var listKyoSHebyDateitem = listKyoSHebyDate.Where(t => t.date == date).First().KyoSHelst;
                    var haishadrgdDataitem = listKyoSHebyDate.Where(t => t.date == date).First().haishadrgdData;
                    busdriver = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID).ToList();
                    busguider = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 3 || t.SyokumuKbn == 4) && t.CompanyCdSeq == GroupID).ToList();
                    busdriverlst = busdriver.Select(t => t.SyainCdSeq).ToList();
                    busguiderlst = busguider.Select(t => t.SyainCdSeq).ToList();
                    countBusdriver = busdriver.Count();
                    countBusguider = busguider.Count();

                    countBusdriverLarge = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriverMedium = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriverSmall = listKyoSHebyDateitem.Where(t => (t.SyokumuKbn == 1 || t.SyokumuKbn == 2) && t.CompanyCdSeq == GroupID && t.SmallTypeDrivingFlg == 1).Count();

                    countBusdriverNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.allDrivers);
                    countBusguiderNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.allGuides);
                    countBusdriverLargeNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.largeDriver);
                    countBusdriverMediumNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.MediumDriver);
                    countBusdriverSmallNew = haishadrgdDataitem.Where(t => t.CompanyCdSeq == GroupID && t.KSKbn == 2).Sum(t => t.SmallDriver);
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujdriverlst).ToList().Count() > 0)
                {
                    countBusdriveroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujdriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kikyujguiderlst).ToList().Count() > 0)
                {
                    countBusguieroff = listKyoSHebyDate.Where(t => t.date == date).First().Kikyujguiderlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuTblCdSeq != 1).Count();
                }
                if (listKyoSHebyDate.Count != 0 && listKyoSHebyDate.Where(t => t.date == date).Select(t => t.Kobandriverlst).ToList().Count() > 0)
                {
                    countbusdriverwork = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 1).Count();
                    countbusdriverholiday = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KinKyuKbn == 2).Count();
                    countbusdriverpublic = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.KyusyutsuKbn == 1).Count();

                    countBusdriveroffLarge = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.BigTypeDrivingFlg == 1).Count();
                    countBusdriveroffMedium = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.MediumTypeDrivingFlg == 1).Count();
                    countBusdriveroffSmall = listKyoSHebyDate.Where(t => t.date == date).First().Kobandriverlst.Where(t => busdriverlst.Contains(t.SyainCdSeq) && t.SmallTypeDrivingFlg == 1).Count();
                }
            }
        }

        object tooltip = new Object();
        tooltip = "<div class=\"d-flex\"><div>空台数：</div><div>";
        tooltip += "<div>" + (countbusnameLarge - countbusLarge - countbusrpLarge - countbusgrayLarge) + "台　大型（" + (countbusLarge + countbusgrayLarge) + "/" + (countbusnameLarge - countbusrpLarge) + "）</div>";
        tooltip += "<div>" + (countbusnameMedium - countbusMedium - countbusrpMedium - countbusgrayMedium) + "台　中型（" + (countbusMedium + countbusgrayMedium) + "/" + (countbusnameMedium - countbusrpMedium) + "）</div>";
        tooltip += "<div>" + (countbusnameSmall - countbusSmall - countbusrpSmall - countbusgraySmall) + "台　小型（" + (countbusSmall + countbusgraySmall) + "/" + (countbusnameSmall - countbusrpSmall) + "）</div>";
        tooltip += "</div></div>";

        object tooltipDriver = new Object();
        tooltipDriver = "<div class=\"d-flex\"><div>空運転手：</div><div>";
        tooltipDriver += "<div>大型　" + (countBusdriverLarge - countBusdriveroffLarge - countBusdriverLargeNew).ToString() + "人（" + countBusdriverLargeNew.ToString() + "/" + (countBusdriverLarge - countBusdriveroffLarge).ToString() + "）</div>";
        tooltipDriver += "<div>中型　" + (countBusdriverMedium - countBusdriveroffMedium - countBusdriverMediumNew).ToString() + "人（" + countBusdriverMediumNew.ToString() + "/" + (countBusdriverMedium - countBusdriveroffMedium).ToString() + "）</div>";
        tooltipDriver += "<div>小型　" + (countBusdriverSmall - countBusdriveroffSmall - countBusdriverSmallNew).ToString() + "人（" + countBusdriverSmallNew.ToString() + "/" + (countBusdriverSmall - countBusdriveroffSmall).ToString() + "）</div>";
        tooltipDriver += "</div></div><div>勤務：" + countbusdriverwork.ToString() + "人　休日：" + countbusdriverholiday.ToString() + "人　公出：" + countbusdriverpublic.ToString() + "人</div>";

        return "<a href='javascript:void(0)' data-toggle='tooltip' data-html='true' data-placement='right' data-original-title='" + tooltip + "'>空台数：" + (countbusname - countbus - countbusrp).ToString() + "台（" + countbus + "/" + (countbusname - countbusrp) + "）</a>" +
                "<a href='javascript:void(0)' data-toggle='tooltip' data-html='true' data-placement='right' data-original-title='" + tooltipDriver + "'>空運転手：" + (countBusdriverLarge - countBusdriveroffLarge - countBusdriverNew).ToString() + "人（" + countBusdriverNew.ToString() + "/" + (countBusdriverLarge - countBusdriveroffLarge).ToString() + "）</a>" +
                "<div>空ガイド：" + (countBusguider - countbusguideruse - countBusguieroff).ToString() + "人（" + (countbusguideruse).ToString() + "/" + (countBusguider - countBusguieroff) + "）</div>";
    }

    public async Task HandlerStatusUpdated(ItemBus updatedBus)
    {
        try
        {
            if (updatedBus.BusLine == "-4" || updatedBus.BusLine == "-5" || updatedBus.BusLine == "-6" || updatedBus.BusVehicle == 2)
            {

                //await OnRowUpdated.InvokeAsync("reloadgird");
                await updateitem.InvokeAsync(updatedBus);
            }
            else if (updatedBus.BusLine == "-1" || updatedBus.BusLine == "-2" || updatedBus.BusLine == "-3" || updatedBus.BusVehicle == 1)
            {
                await updateitem.InvokeAsync(updatedBus);
            }
            else if (updatedBus.BookingId != "0")
            {
                await updateitem.InvokeAsync(updatedBus);
                //TKD_HaishaDataService.Updatebusdata(updatedBus, 1);
                //await OnRowUpdated.InvokeAsync("reloadgird");
            }
            else
            {
                DateTime datestart = busScheduleHelper.convertwidthtodate(Width, updatedBus.Left, Param.Number_of_days, Date);
                updatedBus.StartDate = datestart.ToString("yyyyMMdd");
                updatedBus.TimeStart = int.Parse(datestart.ToString("HHmm"));
                DateTime dateend = busScheduleHelper.convertwidthtodate(Width, updatedBus.Left + updatedBus.Width, Param.Number_of_days, Date);
                updatedBus.EndDate = dateend.ToString("yyyyMMdd");
                updatedBus.TimeEnd = int.Parse(dateend.ToString("HHmm"));
                updatedBus.SyaSyuCdSeq = BusInfo.Where(t => t.SyaRyoCdSeq.ToString() == updatedBus.BusLine).First().SyaSyuCdSeq;
                updatedBus.KikEigSeq = BusInfo.Where(t => t.SyaRyoCdSeq.ToString() == updatedBus.BusLine).First().EigyoCdSeq;
                updatedBus.SyuEigCdSeq = BusInfo.Where(t => t.SyaRyoCdSeq.ToString() == updatedBus.BusLine).First().EigyoCdSeq;
                updatedBus.YykSyu_KataKbn = BusInfo.Where(t => t.SyaRyoCdSeq.ToString() == updatedBus.BusLine).First().KataKbn;
                Businsert.Add(updatedBus);
                //await Activesave.InvokeAsync(Businsert);
            }
        }
        catch (Exception ex)
        {
            await OnRowUpdated.InvokeAsync("reloadgird");
        };
        for (var i = 0; i < Busnames.Count; i++)
        {
            if (Busnames[i].BusID != updatedBus.BusLine)
            {
                Busnames[i].BusHeight = 0;
            }
        }
        for (var i = 0; i < Busgreen.Count; i++)
        {
            if (i < Busnames.Count && Busnames[i].BusID != updatedBus.BusLine)
            {
                Busnames[i].BusHeight = 0;
            }
        }
        for (var i = 0; i < Busgray.Count; i++)
        {
            if (i < Busnames.Count && Busnames[i].BusID != updatedBus.BusLine)
            {
                Busnames[i].BusHeight = 0;
            }
        }
    }

    private void ReupdateLineBusHeight(BusLineData busheight)
    {
        for (var i = 0; i < Busnames.Count; i++)
        {
            if (Busnames[i].BusID == busheight.LineID)
            {
                Busnames[i].BusHeight = busheight.LineHeight;
                break;
            }
        }

        for (var i = 0; i < Busgreen.Count; i++)
        {
            if (Busgreen[i].BusID == busheight.LineID)
            {
                Busgreen[i].BusHeight = busheight.LineHeight;
                break;
            }
        }

        for (var i = 0; i < Busgray.Count; i++)
        {
            if (Busgray[i].BusID == busheight.LineID)
            {
                Busgray[i].BusHeight = busheight.LineHeight;
                break;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "customScrollbar");
        await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "TooltipNumberDriver");
    }

    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent");
        if (Param.ActiveS1 == (int)SortVehicleLineMode.Model_Branch)
        {
            Busnames = Busnames.OrderBy(x => x.SyaSyuCd).ThenBy(x => x.EigyoCd).ToList();
        }
        else if (Param.ActiveS1 == (int)SortVehicleLineMode.Model_Vehicle)
        {
            Busnames = Busnames.OrderBy(x => x.SyaSyuCd).ThenBy(x => x.SyaRyoCd).ToList();
        }
        else if (Param.ActiveS1 == (int)SortVehicleLineMode.Branch_Vehicle)
        {
            Busnames = Busnames.OrderBy(x => x.EigyoCd).ThenBy(x => x.SyaRyoCd).ToList();
        }
        else if (Param.ActiveS1 == (int)SortVehicleLineMode.Branch_Model)
        {
            Busnames = Busnames.OrderBy(x => x.EigyoCd).ThenBy(x => x.SyaSyuCd).ToList();
        }
        else if (Param.ActiveS1 == (int)SortVehicleLineMode.Rollcall)
        {
            Busnames = Busnames.OrderBy(x => x.TenkoNo).ToList();
        }

        List<string> buslineid = BusLines.Select(t => t.BusLine).ToList();

        foreach (var i in Busnames)
        {
            if (Param.ActiveS2 == (int)SortVehicleNameMode.Model_Vehicle)
            {
                i.BusName = i.SyaSyuNm + "－" + i.SyaRyoNm;
            }
            else if (Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Model)
            {
                i.BusName = i.RyakuNm + "－" + i.SyaSyuNm;
            }
            else if (Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Temporary_Vehicle)
            {
                i.BusName = i.RyakuNm + "－" + i.KariSyaRyoNm;
            }
            else if (Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Vehicle)
            {
                i.BusName = i.RyakuNm + "－" + i.SyaRyoNm;
            }

            if (DateTime.Compare(Date, DateTime.ParseExact(i.StaYmd, "yyyyMMdd", CultureInfo.InvariantCulture)) >= 0 && DateTime.Compare(Date, DateTime.ParseExact(i.EndYmd, "yyyyMMdd", CultureInfo.InvariantCulture)) < 0)
            {
                i.IsOutOfDate = false;
            }
            else
            {
                i.IsOutOfDate = true;
            }
            if (buslineid.ToArray().Contains(i.BusID))
            {
                if (Busnames.Where(t => t.BusID == i.BusID).Count() > 1)
                {
                    if (i.IsOutOfDate == true)
                    {
                        i.IsHasBooking = false;
                    }
                    else
                    {
                        i.IsHasBooking = true;
                    }
                }
                else
                { i.IsHasBooking = true; }
            }
            else
            {
                i.IsHasBooking = false;
            }
        }

        if (Param.ActiveR == 0)
        {
            BusLines = BusLines.ToList();
        }
        else if (Param.ActiveR != 0)
        {
            BusLines = BusLines.Where(t => t.BookingType == Param.ActiveR || t.IsBusRepair == true).ToList();
        }

        List<string> busid = Busnames.Where(x => x.IsOutOfDate == false).Select(x => x.BusID).ToList();
        List<BusDataType> busnameexpried = Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking).ToList();
        foreach (var i in busnameexpried)
        {
            if (busid.ToArray().Contains(i.BusID))
            {
                i.IsActive = true;
            }
            else
            {
                if (busnameexpried.Where(x => x.BusID == i.BusID).Count() > 1)
                {
                    i.IsActive = true;
                    busnameexpried.Where(x => x.BusID == i.BusID).First().IsActive = true;
                }
                else
                {
                    i.IsActive = true;
                }
            }
        }

        List<string> busnameid = Busnames.Where(x => x.IsOutOfDate && x.IsHasBooking & x.IsActive).Select(t => t.BusID).ToList();
        foreach (var i in BusLines)
        {
            i.Width = busScheduleHelper.calwidth(Width, i.StartDate, i.TimeStart.ToString("D4"), i.EndDate, i.TimeEnd.ToString("D4"), Param.Number_of_days);
            i.Left = busScheduleHelper.calleft(Width, i.StartDate, i.TimeStart.ToString("D4"), Param.Number_of_days, Date);
            i.WidthDefault = busScheduleHelper.calwidth(Width, i.StartDateDefault, i.TimeStartDefault.ToString("D4"), i.EndDateDefault, i.TimeEndDefault.ToString("D4"), Param.Number_of_days);
            i.LeftDefault = busScheduleHelper.calleft(Width, i.StartDateDefault, i.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - busScheduleHelper.calleft(Width, i.StartDate, i.TimeStart.ToString("D4"), Param.Number_of_days, Date);

            if (i.BookingId == "0")
            {
                i.Name = i.Text.ToString();
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.Custom)
            {
                i.Name = i.Text.ToString();
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.Organization)
            {
                i.Name = i.DanTaNm;
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.Destination)
            {
                i.Name = i.IkNm;
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.Customer)
            {
                i.Name = i.TokiSk_RyakuNm + "　" + i.TokiSt_RyakuNm;
            }
            else if (Param.ActiveS3 == (int)DisplayLineMode.None)
            {
                i.Name = "";
            }

            if (busnameid.ToArray().Contains(i.BusLine))
            {
                i.AllowEdit = true;
            }
        }

        if (Param.ActiveL == (int)LineDrawMode.Normal)
        {
            type = 0;
        }
        else if (Param.ActiveL == (int)LineDrawMode.RentalBus)
        {
            type = 1;
        }
        else if (Param.ActiveL == (int)LineDrawMode.SpareBus)
        {
            type = 2;
        }
        else if (Param.ActiveL == (int)LineDrawMode.All)
        {
            type = 3;
        }

        if (Calendlst.Count != 0 && Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == Date.ToString("yyyyMMdd")).Any())
        {
            string commentdate = Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == Date.ToString("yyyyMMdd")).FirstOrDefault().CalenCom;
            if (commentdate != "" && commentdate.Length <= 100)
            {
                commentClass = "hascomment";
            }
            else
            {
                commentClass = "nocomment";
            }
        }
        else
        {
            commentClass = "nocomment";
        }
        //GetUpdYmdInit().Wait();
        UpYmdTimeTmps = UpYmdTimes;
    }

    async Task HandleMouseWheel()
    {
        await blazorContextMenuService.HideMenu("myMenuBusRepair");
        await blazorContextMenuService.HideMenu("myMenuCutline");
        await blazorContextMenuService.HideMenu("menuDate");
    }

    public void HandleStatusRemove(ItemBus updatedBus)
    {
        Businsert.Remove(updatedBus);
    }

    public string GetCommentDate(DateTime date)
    {
        if (Calendlst.Count != 0 && Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date.ToString("yyyyMMdd")).Any())
        {
            string commentdate = Calendlst.Where(t => t.CompanyCdSeq == 1 && t.CalenSyu == 1 && t.CalenYmd == date.ToString("yyyyMMdd")).FirstOrDefault().CalenCom;
            if (commentdate != "" && commentdate.Length <= 100)
            {
                return commentdate;
            }
            else
            {
                return "";
            }
        }
        else
        {
            return "";
        }
    }

    public async Task ValueCheckHaitaBus(DataInit item)
    {
        await ValueCheckHaitaBusSchedule.InvokeAsync(item);
    }

    protected async Task GetUpdYmdInit()
    {
        if (BusLines.Any())
        {
            var dataParam = BusLines?.Select(_ => new ParamHaiTaCheck
            {
                UkeNo = _.BookingId,
                UnkRen = _.haUnkRen,
                TeiDanNo = _.TeiDanNo,
                BunkRen = _.BunkRen,
                SyaSyuRen = _.SyaSyuRen
            }).ToList();
            if (dataParam.Any())
                UpYmdTimeTmps = await _busScheduleService.GetUpYmdTimes(dataParam);
        }
    }
}