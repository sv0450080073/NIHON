@inject IReportLoadingService reportLoadingService
@implements IDisposable
@inject IStringLocalizer<Pages.RevenueSummary> lang
<DxPopup Visible="@IsVisible" ShowHeader="false" CssClass="modal-dialog modal-dialog-centered">
    <div style="font-size: 1rem; text-align: center; font-weight: bold;">Processing... @val%</div>
    <div class="progress" style="height: 1rem;">
        <div class="progress-bar progress-bar-striped bg-success" role="progressbar" style="@($"width: {val}%")"></div>
    </div>
    <div class="mt-3 text-center">
        <button class="btn btn-danger btn-sm width-7rem" @onclick="(e) => CancelBtnOnClicked()">@lang["CancelBtn"]</button>
    </div>
</DxPopup>

@code{
    [Parameter]
    public Guid ReportId { get; set; }

    public int val { get; set; } = 0;
    private bool IsVisible;
    private async Task UpdateProgress(int progress, Guid key)
    {
        if (key == ReportId)
        {
            val = progress;
            await InvokeAsync(StateHasChanged);
            if (val >= 100) await Task.Delay(300);
            IsVisible = val < 100;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void InitReportLoading(Guid reportId)
    {
        ReportId = reportId;
        reportLoadingService.Initialize(reportId, UpdateProgress);
    }

    protected override void OnInitialized()
    {
        if (ReportId != null && ReportId != Guid.Empty)
            reportLoadingService.Initialize(ReportId, UpdateProgress);
    }

    protected void CancelBtnOnClicked()
    {
        IsVisible = false;
        reportLoadingService.AbortReport(ReportId);
    }


    public void Dispose()
    {
        reportLoadingService.AbortReport(ReportId);
    }
}