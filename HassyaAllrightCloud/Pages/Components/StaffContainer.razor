@using HassyaAllrightCloud.Commons
@inject IStringLocalizer<Pages.Staff> Lang
@using System.Data

@if (ErrorMessage.Any())
{
    <ul class="validation-errors pl-4">
        @foreach (var error in ErrorMessage)
        {
            <li class="validation-message">@error</li>
        }
    </ul>
}
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

<HassyaAllrightCloud.Pages.Components.MessageBox IsShow="isShow" Type="type" EventCallback="OnCloseMessageBox" Message="@Lang[message]"></HassyaAllrightCloud.Pages.Components.MessageBox>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public List<StaffData> Staffs { get; set; }
    [Parameter] public List<JobItem> Jobs { get; set; }
    [Parameter] public ConfigStaff Params { get; set; }
    [Parameter] public DateTime Date { get; set; }
    [Parameter] public double Width { get; set; }
    [Parameter] public EventCallback<StaffData> OnStatusUpdated { get; set; }
    [Parameter] public EventCallback<JobItem> OnStatusSwaped { get; set; }
    [Parameter] public EventCallback<JobItem> OnShowMenu { get; set; }
    [Parameter] public EventCallback<bool> OnProcessing { get; set; }

    public StaffData Payload { get; set; } = new StaffData();
    public WorkLeaveItem Holiday { get; set; }
    public WorkLeaveItem Work { get; set; }
    public JobItem Job { get; set; }

    public bool isHoliday = false;
    public bool isWork = false;
    public bool isJob = false;
    public bool isAddMoreWork = false;
    public bool isAssignHoliday = false;
    public bool isFinished = false;
    public bool isSwapJob = false;
    public bool isAssignJob = false;
    public bool isAHoliday = false;

    public bool isShow = false;
    public MessageBoxType type = MessageBoxType.Confirm;
    public string message = "BI_T004";

    public List<string> ErrorMessage { get; set; } = new List<string>();
    public (TkdHaiin, List<TkdKoban>) data { get; set; }
    public List<int> listSyain { get; set; } = new List<int>();

    [Inject] IStaffListService _staffService { get; set; }
    [Inject] protected IErrorHandlerService errorModalService { get; set; }

    public void OnChange()
    {
        StateHasChanged();
    }

    public async Task UpdateJobAsync(StaffData newStaff)
    {
        try
        {
            ErrorMessage.Clear();
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);
            var task = Staffs.IndexOf(newStaff);

            bool haitaCheck = true;
            if(Job != null && isJob)
            {
                haitaCheck = await HaitaCheck(Job);
            }

            if (!haitaCheck)
            {
                Job = new JobItem();
                isJob = false;
                ErrorMessage.Add(Lang["BI_T008"]);
                StateHasChanged();
                return;
            }

            if (task > -1)
            {
                await OnProcessing.InvokeAsync(true);
                Payload = newStaff;

                if (isHoliday && Payload.HolidayID == 0)
                {
                    bool isHaitaUnAssign = true;
                    string updYmdTime = Payload.KobanUpdYmd.Trim() + Payload.KobanUpdTime.Trim();
                    isHaitaUnAssign = await CheckHaitaUnAssign(Payload.SyainCdSeq, updYmdTime);
                    if (isHaitaUnAssign)
                    {
                        var data = PrepareData();
                        var result = await HandleWorkHoliday(data.Item2, data.Item1);
                        if (result)
                        {
                            Payload.HolidayID = Holiday.KinKyuCd;
                            Payload.HolidayNm = Holiday.RyakuNm;
                            Payload.ColKinKyu = Holiday.ColKinKyu;
                            Payload.WorkID = 0;
                            Payload.DayOff = Date.ToString(CommonConstants.FormatYMD);
                            Payload.Status = Flag.Absense;
                            await GetWorkHolidayUpdData(Payload);
                            isFinished = true;
                        }
                    }
                    else
                    {
                        ErrorMessage.Add(Lang["BI_T008"]);
                    }
                    Holiday = new WorkLeaveItem();
                    isHoliday = false;
                    isAssignHoliday = false;
                    await Task.Run(() =>
                    {
                        InvokeAsync(StateHasChanged);
                    });
                }
                if (isWork && Payload.HolidayID != 0)
                {
                    bool isHaitaUnAssign = true;
                    string updYmdTime = Payload.KobanUpdYmd.Trim() + Payload.KobanUpdTime.Trim();
                    isHaitaUnAssign = await CheckHaitaUnAssign(Payload.SyainCdSeq, updYmdTime);
                    if (isHaitaUnAssign)
                    {
                        DataTable KobanTable = new DataTable();
                        AddColumn(KobanTable);
                        var data = PrepareData(KobanTable);
                        bool isValid = await ValidateBeforeAssign(Payload, Payload.SyainCdSeq, KobanTable);
                        if (isValid)
                        {
                            var result = await HandleWorkHoliday(data.Item2, data.Item1);
                            if (result)
                            {
                                Payload.WorkID = Work.KinKyuCd;
                                Payload.WorkNm = Work.RyakuNm;
                                Payload.ColKinKyu = Work.ColKinKyu;
                                Payload.HolidayID = 0;
                                Payload.Status = Flag.NotTodo;
                                await GetWorkHolidayUpdData(Payload);
                                isFinished = true;
                            }
                        }
                    }
                    else
                    {
                        ErrorMessage.Add(Lang["BI_T008"]);
                    }
                    Work = new WorkLeaveItem();
                    isWork = false;
                    isAssignHoliday = false;
                    await Task.Run(() =>
                    {
                        InvokeAsync(StateHasChanged);
                    });
                }
                if (isJob)
                {
                    if ((Job.SyokumuKbn == 1 && Array.IndexOf(new byte[] { 1, 2, 5 }, Payload.SyokumuKbn) < 0) ||
                       (Job.SyokumuKbn == 3 && Array.IndexOf(new byte[] { 3, 4, 5 }, Payload.SyokumuKbn) < 0))
                    {
                        Job = new JobItem();
                        isJob = false;
                        ErrorMessage.Add(Lang["BI_T002"]);
                        StateHasChanged();
                    }
                    else
                    {
                        DataTable KobanTable = new DataTable();
                        AddColumn(KobanTable);
                        bool isValid = true;
                        data = await GetHaiinAndListKoban(Job, Payload.SyainCdSeq, KobanTable);
                        isValid = await ValidateBeforeAssign(Payload, Payload.SyainCdSeq, KobanTable);

                        if (isValid)
                        {
                            if (isAddMoreWork)
                            {
                                isAddMoreWork = false;
                                var countJob = Jobs.Count(_ => _.UkeNo == Job.UkeNo && _.UnkRen == Job.UnkRen && _.TeiDanNo == Job.TeiDanNo && _.BunkRen == Job.BunkRen && _.SyainCdSeq == Payload.SyainCdSeq);
                                if (countJob > 0)
                                {
                                    Job = new JobItem();
                                    isJob = false;
                                    ErrorMessage.Add(Lang["BI_T003"]);
                                    StateHasChanged();
                                }
                                else
                                {
                                    message = "BI_T004";
                                    isShow = true;
                                    StateHasChanged();
                                }
                            }
                            else if (isAssignHoliday)
                            {
                                message = "BI_T005";
                                isShow = true;
                                StateHasChanged();
                            }
                            else
                            {
                                await HandleJob(data);
                            }
                        }
                    }
                }

                await HandleFinished();
            }
        }
        catch (Exception ex)
        {
            errorModalService.HandleError(ex);
            await OnProcessing.InvokeAsync(false);
        }
    }

    private async Task<bool> HandleWorkHoliday(TkdKoban koban, TkdKikyuj kikyuj)
    {
        var result = await _staffService.HandleWorkHoliday(Payload.SyainCdSeq, Date.ToString(CommonConstants.FormatYMD), koban, kikyuj);
        return result;
    }

    private (TkdKikyuj, TkdKoban) PrepareData(DataTable kobanTable = null)
    {
        TkdKikyuj kikyuj = new TkdKikyuj();
        kikyuj.HenKai = 0;
        kikyuj.SyainCdSeq = Payload.SyainCdSeq;
        kikyuj.KinKyuSymd = Date.ToString(CommonConstants.FormatYMD);
        kikyuj.KinKyuEymd = Date.ToString(CommonConstants.FormatYMD);
        kikyuj.BikoNm = string.Empty;

        TkdKoban koban = new TkdKoban();
        koban.UnkYmd = Date.ToString(CommonConstants.FormatYMD);
        koban.SyainCdSeq = Payload.SyainCdSeq;
        koban.HenKai = 0;
        koban.SyugyoKbn = 1;
        koban.UkeNo = "0";
        koban.UnkRen = 0;
        koban.SyaSyuRen = 0;
        koban.TeiDanNo = 0;
        koban.BunkRen = 0;
        koban.RotCdSeq = 0;
        koban.RenEigCd = 0;
        koban.SigySyu = 0;
        koban.SigyKbn = 0;
        koban.KitYmd = string.Empty;
        koban.SigyCd = string.Empty;
        koban.Syukinbasy = string.Empty;
        koban.TaiknBasy = string.Empty;
        koban.TaikTime = string.Empty;
        koban.SyukinYmd = Date.ToString(CommonConstants.FormatYMD);
        koban.TaikinYmd = Date.ToString(CommonConstants.FormatYMD);
        koban.FuriYmd = string.Empty;
        koban.RouTime = string.Empty;
        koban.TaiknTime = string.Empty;
        koban.KyuKtime = string.Empty;
        koban.JitdTime = string.Empty;
        koban.ZangTime = string.Empty;
        koban.UsinyTime = string.Empty;
        koban.SsinTime = string.Empty;
        koban.BikoNm = string.Empty;

        if (isHoliday)
        {
            kikyuj.KinKyuStime = Holiday.DefaultSyukinTime;
            kikyuj.KinKyuEtime = Holiday.DefaultTaiknTime;
            kikyuj.KinKyuCdSeq = Holiday.KinKyuCdSeq;
            koban.SyukinTime = Holiday.DefaultSyukinTime;
            koban.TaiknTime = Holiday.DefaultTaiknTime;
            koban.KouZokPtnKbn = 8;
        }
        else if (isWork)
        {
            kikyuj.KinKyuStime = Work.DefaultSyukinTime;
            kikyuj.KinKyuEtime = Work.DefaultTaiknTime;
            kikyuj.KinKyuCdSeq = Work.KinKyuCdSeq;
            koban.SyukinTime = Work.DefaultSyukinTime;
            koban.TaiknTime = Work.DefaultTaiknTime;
            koban.KouZokPtnKbn = 7;
        }

        GetKouSTime(koban);

        if(kobanTable != null)
        {
            var dr = kobanTable.NewRow();
            dr["UnkYmd"] = koban.UnkYmd;
            dr["UkeNo"] = koban.UkeNo;
            dr["UnkRen"] = koban.UnkRen;
            dr["TeiDanNo"] = koban.TeiDanNo;
            dr["BunkRen"] = koban.BunkRen;
            dr["SyukinYmd"] = koban.SyukinYmd;
            dr["SyukinTime"] = koban.SyukinTime;
            dr["TaikinYmd"] = koban.TaikinYmd;
            dr["TaiknTime"] = koban.TaiknTime;
            kobanTable.Rows.Add(dr);
        }

        return (kikyuj, koban);
    }

    private void GetKouSTime(TkdKoban koban)
    {
        DateTime start = DateTime.MinValue;
        DateTime end = DateTime.MinValue;
        var startDate = DateTime.TryParseExact(koban.SyukinTime, DateTimeFormat.HHmm, CultureInfo.InvariantCulture, DateTimeStyles.None, out start);
        var endDate = DateTime.TryParseExact(koban.TaiknTime, DateTimeFormat.HHmm, CultureInfo.InvariantCulture, DateTimeStyles.None, out end);
        if (startDate && endDate)
        {
            koban.KouStime = end.AddHours(double.Parse(koban.SyukinTime.Substring(0, 2)) * -1).AddMinutes(double.Parse(koban.SyukinTime.Substring(2)) * -1).ToString(DateTimeFormat.HHmm);
        }
        else
        {
            koban.KouStime = string.Empty;
        }
    }

    private async Task HandleJob((TkdHaiin, List<TkdKoban>) data)
    {
        var result = await HandleAssignWork(data);
        if (result)
        {
            Payload.isAssignHoliday = isAssignHoliday;
            if(!isAssignHoliday)
                Payload.HolidayID = 0;
            Job.SyainCdSeq = Payload.SyainCdSeq;
            await GetUpdData(Job);
            Payload.JobID.Add(Job.JobID);
            Payload.Status = Flag.Todo;
            Job = new JobItem();
            isJob = false;
            isFinished = true;
        }
        isAssignHoliday = false;
    }

    private async Task GetUpdData(JobItem job)
    {
        var updData = await _staffService.GetHaitaCheck(job.UkeNo, job.UnkRen, job.TeiDanNo, job.BunkRen);
        if (updData != null)
        {
            var list = Jobs.Where(_ => _.UkeNo == job.UkeNo && _.UnkRen == job.UnkRen && _.TeiDanNo == job.TeiDanNo && _.BunkRen == job.BunkRen).ToList();
            foreach (var item in list)
            {
                item.HaishaUpdYmdTime = updData.HaishaUpdYmd + updData.HaishaUpdTime;
                item.HaiinUpdYmdTime = updData.HaiinUpdYmdTime;
            }
        }
    }

    private async Task HandleFinished()
    {
        Holiday = new WorkLeaveItem();
        isHoliday = false;
        isAssignHoliday = false;
        Work = new WorkLeaveItem();
        isWork = false;
        isAssignHoliday = false;
        listSyain.Clear();
        if (isFinished)
        {
            StaffData tmp = new StaffData();
            tmp = Payload;
            Payload = new StaffData();
            await OnStatusUpdated.InvokeAsync(tmp);
            isFinished = false;
        }
        else
        {
            OnProcessing.InvokeAsync(false);
        }
    }

    private async Task<bool> HandleAssignWork((TkdHaiin, List<TkdKoban>) data)
    {
        //var data = await GetHaiinAndListKoban(Job, Payload.SyainCdSeq);
        var result = await _staffService.HandleAssignWork(data.Item1, data.Item2, Job);
        return result;
    }

    private async Task<(TkdHaiin, List<TkdKoban>)> GetHaiinAndListKoban(JobItem Job, int SyainCdSeq, DataTable kobanTable)
    {
        List<TkdKoban> listKoban = new List<TkdKoban>();
        TkdHaiin haiin = new TkdHaiin();
        haiin.UkeNo = Job.UkeNo;
        haiin.UnkRen = Job.UnkRen;
        haiin.TeiDanNo = Job.TeiDanNo;
        haiin.BunkRen = Job.BunkRen;
        haiin.HenKai = 0;
        haiin.SyainCdSeq = SyainCdSeq;
        haiin.BikoTblSeq = 0;
        haiin.Syukinbasy = string.Empty;
        haiin.TaiknBasy = string.Empty;
        haiin.SyokumuKbn = Job.SyokumuKbn;

        var taskHaisha = _staffService.GetHaisha(Job.UkeNo, Job.UnkRen, Job.TeiDanNo, Job.BunkRen);
        var taskKoteik = _staffService.GetListKoteiK(Job.UkeNo, Job.UnkRen, Job.TeiDanNo, Job.BunkRen);
        var taskSyuTaikinCalculationTime = _staffService.GetListSyuTaikinCalculationTime(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
        await Task.WhenAll(taskHaisha, taskKoteik, taskSyuTaikinCalculationTime);

        var haisha = taskHaisha.Result;
        var listKoteik = taskKoteik.Result;
        var listSyuTaikinCalculationTime = taskSyuTaikinCalculationTime.Result;

        if (haisha != null)
        {
            DateTime start = DateTime.MinValue;
            DateTime end = DateTime.MinValue;
            if (DateTime.TryParseExact(haisha.SyuKoYmd, CommonConstants.FormatYMD, CultureInfo.InvariantCulture, DateTimeStyles.None, out start)
            && DateTime.TryParseExact(haisha.KikYmd, CommonConstants.FormatYMD, CultureInfo.InvariantCulture, DateTimeStyles.None, out end))
            {
                byte days = (byte)((end - start).TotalDays + 1);
                for (int i = 0; i < days; i++)
                {
                    TkdKoban koban = new TkdKoban();
                    MapKobanAssignWork(koban, i, start, end, haisha, listKoteik, listSyuTaikinCalculationTime, SyainCdSeq);
                    var dr = kobanTable.NewRow();
                    dr["UnkYmd"] = koban.UnkYmd;
                    dr["UkeNo"] = koban.UkeNo;
                    dr["UnkRen"] = koban.UnkRen;
                    dr["TeiDanNo"] = koban.TeiDanNo;
                    dr["BunkRen"] = koban.BunkRen;
                    dr["SyukinYmd"] = koban.SyukinYmd;
                    dr["SyukinTime"] = koban.SyukinTime;
                    dr["TaikinYmd"] = koban.TaikinYmd;
                    dr["TaiknTime"] = koban.TaiknTime;
                    kobanTable.Rows.Add(dr);
                    listKoban.Add(koban);
                }
            }
        }
        if (listKoban.Count > 0)
        {
            haiin.SyukinTime = listKoban[0].SyukinTime;
            haiin.TaiknTime = listKoban[listKoban.Count - 1].TaiknTime;
        }

        return (haiin, listKoban);
    }

    private void MapKobanAssignWork(TkdKoban koban, int dayAdd, DateTime start, DateTime end, HaishaStaffItem haisha,
        List<KoteikItem> listKoteik, List<SyuTaikinCalculationTimeItem> listSyuTaikinCalculationTime, int syainCdSeq)
    {
        koban.UnkYmd = start.AddDays(dayAdd).ToString(CommonConstants.FormatYMD);
        koban.SyainCdSeq = syainCdSeq;
        koban.HenKai = 0;
        koban.SyugyoKbn = 1;
        koban.KinKyuTblCdSeq = 0;
        koban.UkeNo = Job.UkeNo;
        koban.UnkRen = Job.UnkRen;
        koban.SyaSyuRen = Job.SyaSyuRen;
        koban.TeiDanNo = Job.TeiDanNo;
        koban.BunkRen = Job.BunkRen;
        koban.RotCdSeq = 0;
        koban.RenEigCd = 0;
        koban.SigySyu = 0;
        koban.SigyKbn = 0;
        koban.KitYmd = string.Empty;
        koban.SigyCd = string.Empty;
        koban.Syukinbasy = string.Empty;
        koban.TaiknBasy = string.Empty;
        koban.TaikTime = string.Empty;
        koban.SyukinYmd = koban.UnkYmd;
        koban.TaikinYmd = koban.UnkYmd;
        koban.FuriYmd = string.Empty;
        koban.RouTime = string.Empty;
        koban.TaiknTime = string.Empty;
        koban.KyuKtime = string.Empty;
        koban.JitdTime = string.Empty;
        koban.ZangTime = string.Empty;
        koban.UsinyTime = string.Empty;
        koban.SsinTime = string.Empty;
        koban.BikoNm = string.Empty;
        if (Job.SyuKoYmd == Job.KikYmd) koban.KouZokPtnKbn = 1;
        else if (Job.UnkoJKbn != 3 && Job.UnkoJKbn != 4 && Job.SyuKoYmd != Job.KikYmd && Job.SyuKoYmd == koban.UnkYmd) koban.KouZokPtnKbn = 2;
        else if (Job.UnkoJKbn != 3 && Job.UnkoJKbn != 4 && Job.SyuKoYmd != Job.KikYmd && Job.SyuKoYmd != koban.UnkYmd && Job.KikYmd != koban.UnkYmd) koban.KouZokPtnKbn = 3;
        else if (Job.UnkoJKbn != 3 && Job.UnkoJKbn != 4 && Job.HaiSYmd != Job.TouYmd && Job.KikYmd == koban.UnkYmd) koban.KouZokPtnKbn = 4;
        else if ((Job.UnkoJKbn == 3 || Job.UnkoJKbn == 4) && Job.SyuKoYmd != Job.KikYmd)
        {
            if (Job.SyuKoYmd == koban.UnkYmd) koban.KouZokPtnKbn = 5;
            else if (Job.KikYmd == koban.UnkYmd) koban.KouZokPtnKbn = 6;
            else koban.KouZokPtnKbn = 9;
        }
        else koban.KouZokPtnKbn = 99;
        var koteik = listKoteik.FirstOrDefault(_ => _.Nittei == short.Parse(koban.UnkYmd.Substring(6)));
        var syuTaikinCalculationTime = listSyuTaikinCalculationTime.FirstOrDefault(_ => _.KouZokPtnKbn == koban.KouZokPtnKbn);
        if (koteik != null)
        {
            if (syuTaikinCalculationTime != null)
            {
                setTime(koban, koteik.SyukoTime, koteik.KikTime, syuTaikinCalculationTime.SyukinCalculationTimeMinutes, syuTaikinCalculationTime.TaikinCalculationTimeMinutes);
            }
            else
            {
                koban.SyukinTime = koteik.SyukoTime;
                koban.TaiknTime = koteik.KikTime;
            }
        }
        else
        {
            switch (koban.KouZokPtnKbn)
            {
                case 2:
                case 5:
                    if (syuTaikinCalculationTime != null)
                        setTime(koban, haisha.SyuKoTime, string.Empty, syuTaikinCalculationTime.SyukinCalculationTimeMinutes, syuTaikinCalculationTime.TaikinCalculationTimeMinutes);
                    else
                        koban.SyukinTime = haisha.SyuKoTime;
                    koban.TaiknTime = "2359";
                    break;
                case 3:
                case 9:
                    koban.SyukinTime = "0000";
                    koban.TaiknTime = "2359";
                    break;
                case 4:
                case 6:
                    koban.SyukinTime = "0000";
                    if (syuTaikinCalculationTime != null)
                        setTime(koban, string.Empty, haisha.KikTime, syuTaikinCalculationTime.SyukinCalculationTimeMinutes, syuTaikinCalculationTime.TaikinCalculationTimeMinutes);
                    else
                        koban.TaiknTime = haisha.KikTime;
                    break;
                default:
                    if (syuTaikinCalculationTime != null)
                    {
                        setTime(koban, haisha.SyuKoTime, haisha.KikTime, syuTaikinCalculationTime.SyukinCalculationTimeMinutes, syuTaikinCalculationTime.TaikinCalculationTimeMinutes);
                    }
                    else
                    {
                        koban.SyukinTime = haisha.SyuKoTime;
                        koban.TaiknTime = haisha.KikTime;
                    }
                    break;
            }
        }

        GetKouSTime(koban);
    }

    private void setTime(TkdKoban koban, string SyukoTime, string KikTime, int SyukinCalculationTimeMinutes, int TaikinCalculationTimeMinutes)
    {
        DateTime temp = DateTime.ParseExact(koban.UnkYmd, DateTimeFormat.yyyyMMdd, CultureInfo.InvariantCulture);
        if (DateTime.TryParseExact(SyukoTime, DateTimeFormat.HHmm, CultureInfo.InvariantCulture, DateTimeStyles.None, out temp))
        {
            var calTime = temp.AddMinutes(-1 * SyukinCalculationTimeMinutes);
            if (calTime.CompareTo(temp) < 0) koban.SyukinYmd = calTime.ToString(DateTimeFormat.yyyyMMdd);
            koban.SyukinTime = temp.AddMinutes(-1 * SyukinCalculationTimeMinutes).ToString(DateTimeFormat.HHmm);
        }
        if (DateTime.TryParseExact(KikTime, DateTimeFormat.HHmm, CultureInfo.InvariantCulture, DateTimeStyles.None, out temp))
        {
            var calTime = temp.AddMinutes(TaikinCalculationTimeMinutes);
            if (calTime.CompareTo(temp) > 0) koban.TaikinYmd = calTime.ToString(DateTimeFormat.yyyyMMdd);
            koban.TaiknTime = temp.AddMinutes(TaikinCalculationTimeMinutes).ToString(DateTimeFormat.HHmm);
        }
    }

    public async Task SwapJobAsync(int jobID)
    {
        try
        {
            ErrorMessage.Clear();
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);

            var task = Jobs.FirstOrDefault(x => x.JobID == jobID);

            if (task != null)
            {
                var haitaCheckOldJob = await HaitaCheck(task);
                var haitaCheckJob = await HaitaCheck(Job);

                if (!haitaCheckOldJob || !haitaCheckJob)
                {
                    Job = new JobItem();
                    isJob = false;
                    ErrorMessage.Add(Lang["BI_T008"]);
                    StateHasChanged();
                    await OnProcessing.InvokeAsync(false);
                    return;
                }

                StaffData oldStaff = null;
                if (isSwapJob)
                {
                    oldStaff = Staffs.FirstOrDefault(_ => _.SyainCdSeq == task.SyainCdSeq);
                    if (oldStaff != null && (task.SyokumuKbn == 1 && Array.IndexOf(new byte[] { 1, 2, 5 }, oldStaff.SyokumuKbn) < 0) ||
                                            (task.SyokumuKbn == 3 && Array.IndexOf(new byte[] { 3, 4, 5 }, oldStaff.SyokumuKbn) < 0))
                    {
                        Job = new JobItem();
                        isJob = false;
                        ErrorMessage.Add(Lang["BI_T002"]);
                        StateHasChanged();
                        await OnProcessing.InvokeAsync(false);
                        return;
                    }
                }

                if ((Job.SyokumuKbn == 1 && Array.IndexOf(new byte[] { 1, 2, 5 }, Payload.SyokumuKbn) < 0) ||
                    (Job.SyokumuKbn == 3 && Array.IndexOf(new byte[] { 3, 4, 5 }, Payload.SyokumuKbn) < 0))
                {
                    Job = new JobItem();
                    isJob = false;
                    ErrorMessage.Add(Lang["BI_T002"]);
                    StateHasChanged();
                }
                else
                {
                    var syainCdSeq = task.SyainCdSeq;

                    DataTable KobanTable = new DataTable();
                    AddColumn(KobanTable);
                    var data = await GetHaiinAndListKoban(Job, syainCdSeq, KobanTable);
                    bool isValid = true;
                    if(oldStaff != null)
                    {
                        isValid = await ValidateBeforeAssign(oldStaff, syainCdSeq, KobanTable, task.UkeNo, task.UnkRen, task.TeiDanNo, task.BunkRen);
                    }

                    if(isValid)
                    {
                        bool result = false;
                        if (isSwapJob)
                        {
                            DataTable KobanTable1 = new DataTable();
                            AddColumn(KobanTable1);
                            var data1 = await GetHaiinAndListKoban(task, Job.SyainCdSeq, KobanTable1);
                            isValid = await ValidateBeforeAssign(Payload, Job.SyainCdSeq, KobanTable1, Job.UkeNo, Job.UnkRen, Job.TeiDanNo, Job.BunkRen);

                            if(isValid)
                            {
                                data1.Item1.SyainCdSeq = Job.SyainCdSeq;
                                result = await _staffService.HandleSwapWork(data.Item1, data.Item2, task, true, data1.Item1, data1.Item2, Job);
                            }
                        }
                        else
                        {
                            result = await _staffService.HandleSwapWork(data.Item1, data.Item2, task);
                        }

                        if (result)
                        {
                            if (oldStaff != null)
                            {
                                oldStaff.JobID.Remove(task.JobID);
                                oldStaff.JobID.Add(Job.JobID);
                            }

                            await GetUpdData(task);
                            if (!isSwapJob)
                            {
                                task.SyainCdSeq = 0;
                                task.IsDoing = false;
                            }
                            else
                            {
                                task.SyainCdSeq = Job.SyainCdSeq;
                                var swapStaff = Staffs.FirstOrDefault(_ => _.SyainCdSeq == Job.SyainCdSeq);
                                if (swapStaff != null)
                                {
                                    swapStaff.JobID.Remove(Job.JobID);
                                    swapStaff.JobID.Add(task.JobID);
                                }
                            }
                            JobItem tmp = new JobItem();
                            tmp = Job;
                            tmp.SyainCdSeq = syainCdSeq;
                            Job = new JobItem();
                            await OnStatusSwaped.InvokeAsync(tmp);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorModalService.HandleError(ex);
        }
    }

    public async Task OnCloseMessageBox(bool value)
    {
        try
        {
            if (value)
            {
                await OnProcessing.InvokeAsync(false);
                await HandleJob(data);
                await HandleFinished();
            }
            else
            {
                isAssignHoliday = false;
            }
            isShow = false;
        }
        catch (Exception ex)
        {
            errorModalService.HandleError(ex);
        }
    }

    public async Task StateChanged()
    {
        await OnProcessing.InvokeAsync(false);
        StateHasChanged();
    }

    public async Task ShowLoading()
    {
        await OnProcessing.InvokeAsync(true);
    }

    private void AddColumn(DataTable table)
    {
        table.Columns.Add("UnkYmd", typeof(string));
        table.Columns.Add("UkeNo", typeof(string));
        table.Columns.Add("UnkRen", typeof(short));
        table.Columns.Add("TeiDanNo", typeof(short));
        table.Columns.Add("BunkRen", typeof(short));
        table.Columns.Add("SyukinYmd", typeof(string));
        table.Columns.Add("SyukinTime", typeof(string));
        table.Columns.Add("TaikinYmd", typeof(string));
        table.Columns.Add("TaiknTime", typeof(string));
    }

    private async Task<bool> ValidateBeforeAssign(StaffData staff, int syainCdSeq, DataTable KobanTable, string ukeNo = "", short unkRen = 0, short teiDanNo = 0, short bunkRen = 0)
    {
        bool isValid = true;
        if (isWork || Job.SyokumuKbn == 1 || Job.SyokumuKbn == 2)
        {
            var check = await _staffService.ValidateBeforeAssignJob(Date.ToString(CommonConstants.FormatYMD), syainCdSeq, KobanTable, ukeNo, unkRen, teiDanNo, bunkRen);
            if (check.Item1 > 0)
            {
                isValid = false;
                isJob = false;
                ErrorMessage.Add(Lang["BI_T006"]);
                StateHasChanged();
            }
            else if (check.Item2.Any())
            {
                isValid = false;
                isJob = false;
                foreach (var error in check.Item2)
                {
                    ErrorMessage.Add(string.Format(Lang["BI_T007"], error.Item2));
                }
            }
        }
        return isValid;
    }

    private async Task<bool> HaitaCheck(JobItem job)
    {
        var haitaData = await _staffService.GetHaitaCheck(job.UkeNo, job.UnkRen, job.TeiDanNo, job.BunkRen);
        if (job.HaishaUpdYmdTime != haitaData.HaishaUpdYmd + haitaData.HaishaUpdTime ||
           job.HaiinUpdYmdTime.Trim() != haitaData.HaiinUpdYmdTime)
            return false;
        return true;
    }

    private async Task<bool> CheckHaitaUnAssign(int syainCdSeq, string updYmdTime)
    {
        var haitaData = await _staffService.GetHaitaCheckDelete(syainCdSeq, Date.ToString(CommonConstants.FormatYMD));
        if (haitaData == updYmdTime) return true;
        return false;
    }

    private async Task GetWorkHolidayUpdData(StaffData staff)
    {
        var haitaData = await _staffService.GetHaitaCheckDelete(staff.SyainCdSeq, Date.ToString(CommonConstants.FormatYMD));
        if (!string.IsNullOrEmpty(haitaData))
        {
            staff.KobanUpdYmd = haitaData.Substring(0, 8);
            staff.KobanUpdTime = haitaData.Substring(8);
        }
    }
}
