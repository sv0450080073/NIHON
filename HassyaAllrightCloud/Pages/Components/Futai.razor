@inject IStringLocalizer<Futai> Lang
@inject AppSettingsService AppSettingsService
@inject CustomHttpClient HttpClient
@inject CustomNavigation NavManager
@using HassyaAllrightCloud.Commons.Extensions;

<DxPopup CssClass="custom-popup" @bind-Visible="@IsShowPopupInfo" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @PopupTitle
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="() => OnClosePopup()"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <i class="fa fa-2x fa-info-circle" aria-hidden="true"></i>
        @PopupInfoContent
    </ChildContent>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary"
                  @onclick="() => OnClosePopup()" Text="@Ok" />
    </FooterTemplate>
</DxPopup>

<DxPopup CssClass="custom-popup" @bind-Visible="@IsShowPopupError" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @PopupTitle
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="() => OnClosePopup()"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <i class="fa fa-2x fa-exclamation-triangle text-warning mr-2" aria-hidden="true"></i>
        @PopupInfoContent
    </ChildContent>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary"
                  @onclick="() => OnClosePopup()" Text="@Ok" />
    </FooterTemplate>
</DxPopup>

<DxPopup CssClass="custom-popup" @bind-Visible="@ShowPopupConfirmDelete" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @PopupConfirmDeleteTitle
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="() => OnClosePopupConfirmDelete()"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <i class="fa fa-2x fa-info-circle" aria-hidden="true"></i>
        @PopupConfirmDeleteContent
    </ChildContent>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Danger" @onclick="() => OnConfirmDelete()" Text="@Yes" />
        <DxButton RenderStyle="ButtonRenderStyle.Secondary" @onclick="() => OnClosePopupConfirmDelete()" Text="@No" />
    </FooterTemplate>
</DxPopup>

@if (IsLoading)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}
else
{
    <EditForm EditContext="FormContext" OnSubmit="async () => await HandleValidSubmitAsync()">
        <DataAnnotationsValidator />
        <FluentValidator TValidator="BookingIncidentalValidator" />
        <ul class="validation-errors">
            @foreach (var message in FormContext.GetValidationMessages().Distinct())
            {
                <li class="validation-message">@Lang[message]</li>
            }
            @if (!isHaitaValid)
            {
                <li class="validation-message">@Lang["BI_T0011"]</li>
            }
        </ul>

        <div class="d-flex mb-2">
            <div class="mr-2">
                <div class="card mb-2">
                    <div class="card-body px-2 pt-2 pb-0">
                        <div class="d-flex flex-nowrap">
                            <div class="form-group d-flex flex-nowrap mr-4">
                                <label class="col-form-label-sm mr-2">@Lang["reservation_classification"]</label>
                                <DxTextBox Text="@IncidentalBookingData.YoyaKbn" TextExpression="() => TempStr" ReadOnly CssClass="width--75"></DxTextBox>
                            </div>
                            <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                                <label class="col-form-label-sm mr-2">@Lang["operating_schedule"]</label>
                                <DxTextBox Text="@IncidentalBookingData.HaiSYmd.ToString("yyyy/MM/dd")" TextExpression="() => TempStr" ReadOnly CssClass="width--100"></DxTextBox>
                                <span>@IncidentalBookingData.HaiSYmd.ToString("（dddd）")</span>
                                <span class="mr-2">～</span>
                                <DxTextBox Text="@IncidentalBookingData.TouYmd.ToString("yyyy/MM/dd")" TextExpression="() => TempStr" ReadOnly CssClass="width--100"></DxTextBox>
                                <span>@IncidentalBookingData.TouYmd.ToString("（dddd）")</span>
                            </div>
                            <div class="form-group d-flex flex-nowrap mr-4">
                                <label class="col-form-label-sm mr-2">@Lang["reception_date"]</label>
                                <DxTextBox Text="@IncidentalBookingData.UkeYmd.ToString("yyyy/MM/dd")" TextExpression="() => TempStr" ReadOnly CssClass="width--100"></DxTextBox>
                            </div>
                            <div class="form-group d-flex flex-nowrap">
                                <label class="col-form-label-sm mr-2">@Lang["receipt_number"]</label>
                                <DxTextBox Text="@IncidentalBookingData.UkeCd.ToString("D10")" TextExpression="() => TempStr" ReadOnly CssClass="width--110"></DxTextBox>
                            </div>
                        </div>
                        <div class="form-group d-flex flex-nowrap">
                            <label class="col-form-label-sm width--56 mr-2">@Lang["organization_name"]</label>
                            <DxTextBox Text="@IncidentalBookingData.DanTaNm" TextExpression="() => TempStr" ReadOnly></DxTextBox>
                        </div>
                    </div>
                </div>
                <div class="card mb-2">
                    <div class="card-body px-2 pt-2 pb-0">
                        <div class="d-flex flex-nowrap">
                            <div class="form-group d-flex flex-nowrap mr-4">
                                <label class="col-form-label-sm width--56 mr-2">@Lang["customer"]</label>
                                <DxTextBox Text="@IncidentalBookingData.Tokui" TextExpression="() => TempStr" ReadOnly CssClass="mr-2 width--110"></DxTextBox>
                                <DxTextBox Text="@IncidentalBookingData.TokuSiten" TextExpression="() => TempStr" ReadOnly CssClass="width--110"></DxTextBox>
                            </div>
                            <div class="form-group d-flex flex-nowrap mr-4">
                                <label class="col-form-label-sm mr-2">@Lang["customer_contact"]</label>
                                <DxTextBox Text="@IncidentalBookingData.TokuiTanNm" TextExpression="() => TempStr" ReadOnly CssClass="width--110"></DxTextBox>
                            </div>
                            <div class="form-group d-flex flex-nowrap mr-4">
                                <label class="col-form-label-sm mr-2">@Lang["phone_number"]</label>
                                <DxTextBox Text="@IncidentalBookingData.TokuiTel" TextExpression="() => TempStr" ReadOnly CssClass="width--130"></DxTextBox>
                            </div>
                            <div class="form-group d-flex flex-nowrap">
                                <label class="col-form-label-sm mr-2">@Lang["fax_number"]</label>
                                <DxTextBox Text="@IncidentalBookingData.TokuiFax" TextExpression="() => TempStr" ReadOnly CssClass="width--130"></DxTextBox>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="d-flex">
                    <div class="card mr-2">
                        <div class="card-body px-2 pt-2 pb-0">
                            <div class="form-group d-flex flex-nowrap">
                                <label class="col-form-label-sm mr-2">@Lang["destination_name"]</label>
                                <DxTextBox Text="@IncidentalBookingData.IkNm" TextExpression="() => TempStr" ReadOnly CssClass="width--150"></DxTextBox>
                            </div>
                            <div class="d-flex">
                                <div class="form-group d-flex flex-nowrap mr-4">
                                    <label class="col-form-label-sm mr-2">@Lang["depot_name"]</label>
                                    <DxTextBox Text="@IncidentalBookingData.HaiSNm" TextExpression="() => TempStr" ReadOnly CssClass="width--150"></DxTextBox>
                                </div>
                                <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                                    <label class="col-form-label-sm mr-2">@Lang["delivery_time"]</label>
                                    <DxTextBox Text="@IncidentalBookingData.HaiSYmd.ToString("yyyy/MM/dd")" TextExpression="() => TempStr" ReadOnly CssClass="width--100"></DxTextBox>
                                    <span>@IncidentalBookingData.HaiSYmd.ToString("（dddd）")</span>
                                    <DxTextBox Text="@IncidentalBookingData.HaiSTime.Str" TextExpression="() => TempStr" ReadOnly CssClass="width--75"></DxTextBox>
                                </div>
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-2">@Lang["departure_time"]</label>
                                    <DxTextBox Text="@IncidentalBookingData.SyuPaTime.Str" TextExpression="() => TempStr" ReadOnly CssClass="width--75"></DxTextBox>
                                </div>
                            </div>
                            <div class="d-flex">
                                <div class="form-group d-flex flex-nowrap mr-4">
                                    <label class="col-form-label-sm mr-2">@Lang["arrival_place_name"]</label>
                                    <DxTextBox Text="@IncidentalBookingData.TouNm" TextExpression="() => TempStr" ReadOnly CssClass="width--150"></DxTextBox>
                                </div>
                                <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                                    <label class="col-form-label-sm mr-2">@Lang["arrival_date"]</label>
                                    <DxTextBox Text="@IncidentalBookingData.TouYmd.ToString("yyyy/MM/dd")" TextExpression="() => TempStr" ReadOnly CssClass="width--100"></DxTextBox>
                                    <span>@IncidentalBookingData.TouYmd.ToString("（dddd）")</span>
                                    <DxTextBox Text="@IncidentalBookingData.TouChTime.Str" TextExpression="() => TempStr" ReadOnly CssClass="width--75"></DxTextBox>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body px-2 pt-2 pb-0">
                            <div class="form-group d-flex flex-nowrap align-items-center">
                                <label class="col-form-label-sm mr-2">@Lang["boarding_personnel"]</label>
                                <DxTextBox Text="@IncidentalBookingData.JyoSyaJin.ToString()" TextExpression="() => TempStr" ReadOnly CssClass="text-right width--56"></DxTextBox>
                                <span class="mx-2">人 +</span>
                                <DxTextBox Text="@IncidentalBookingData.PlusJin.ToString()" TextExpression="() => TempStr" ReadOnly CssClass="text-right width--56"></DxTextBox>
                                <span class="mx-2">人</span>
                            </div>
                            <div class="d-flex">
                                <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                                    <label class="col-form-label-sm mr-2">@Lang["number_of_drivers"]</label>
                                    <DxTextBox Text="@IncidentalBookingData.DrvJin.ToString()" TextExpression="() => TempStr" ReadOnly CssClass="text-right width--56"></DxTextBox>
                                    <span class="ml-2">人</span>
                                </div>
                                <div class="form-group d-flex flex-nowrap align-items-center">
                                    <label class="col-form-label-sm mr-2">@Lang["number_of_guides"]</label>
                                    <DxTextBox Text="@IncidentalBookingData.GuiSu.ToString()" TextExpression="() => TempStr" ReadOnly CssClass="text-right width--56"></DxTextBox>
                                    <span class="mx-2">人</span>
                                </div>
                            </div>
                            <div class="form-group d-flex flex-nowrap align-items-center">
                                <label class="col-form-label-sm width--56 mr-2">@Lang["other"]</label>
                                <DxTextBox Text="@IncidentalBookingData.OthJinKbn1" TextExpression="() => TempStr" ReadOnly CssClass="width--90"></DxTextBox>
                                <DxTextBox Text="@IncidentalBookingData.OthJin1.ToString()" TextExpression="() => TempStr" ReadOnly CssClass="text-right width--56 ml-3"></DxTextBox>
                                <span class="mx-2">人</span>
                                <DxTextBox Text="@IncidentalBookingData.OthJinKbn2" TextExpression="() => TempStr" ReadOnly CssClass="width--90"></DxTextBox>
                                <DxTextBox Text="@IncidentalBookingData.OthJin2.ToString()" TextExpression="() => TempStr" ReadOnly CssClass="text-right width--56 ml-3"></DxTextBox>
                                <span class="mx-2">人</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card">
                <div class="card-body px-2 pt-2 pb-0">
                    <h5>@Lang["vehicle_information"]</h5>
                    <table class="table table-bordered table-sm text-left" style="font-size: 0.875rem">
                        <thead class="thead-primary">
                            <tr>
                                <th scope="col">No.</th>
                                <th scope="col">@Lang["vehicle_delivery_date"]</th>
                                <th scope="col">@Lang["vehicle_code"]</th>
                                <th scope="col">@Lang["car_number"]</th>
                                <th scope="col">@Lang["affiliation_office"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var vehicleInfomationItem in IncidentalBookingData.VehicleInformationList)
                            {
                                <tr>
                                    <td scope="row" class="text-center">@vehicleInfomationItem.No</td>
                                    <td>@vehicleInfomationItem.HaiSYmd.ToString("yyyy/MM/dd")</td>
                                    <td>@vehicleInfomationItem.SyaRyoCd.ToString("D4")</td>
                                    <td>@vehicleInfomationItem.SyaRyoNm</td>
                                    <td>@vehicleInfomationItem.WorkingBranch</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <table class="table table-bordered table-sm" style="font-size: 0.875rem">
            <thead class="thead-primary">
                <tr>
                    <th scope="col" class="text-center">@Lang["schedule"]</th>
                    @if (CurrentViewMode == IncidentalViewMode.Futai)
                    {
                        <th scope="col" class="text-center">@Lang["incidental_name"]</th>
                    }
                    else
                    {
                        <th scope="col" class="text-center" width="80px">@Lang["loadedproductname"]</th>
                    }
                    <th scope="col" class="text-center">@Lang["liquidation_name"]</th>
                    <th scope="col" class="text-center">@Lang["clearing_category"]</th>
                    @if (CurrentViewMode == IncidentalViewMode.Futai)
                    {
                        <th scope="col" class="text-center">@Lang["tollbooth"]</th>
                        <th scope="col" class="text-center">@Lang["tollbooth2"]</th>
                    }
                    <th scope="col" class="text-center" width="40px">@Lang["quantity"]</th>
                    <th scope="col" class="text-center">@Lang["unit_price"]</th>
                    <th scope="col" class="text-center">@Lang["sales_amount"]</th>
                    <th scope="col" class="text-center">@Lang["tax_included"]</th>
                    <th scope="col" class="text-center">@Lang["consumption_tax_rate"]</th>
                    <th scope="col" class="text-center">@Lang["fee"]</th>
                    <th scope="col" class="text-center">@Lang["accrual_date"]</th>
                    <th scope="col" colspan="2" class="text-center bg-white" width="80px">
                        <a href="javascript:void(0)" @onclick="HandleCreateFuttum" class="@(IsDisableEdit || ShowFormCreateFuttum ? "disabled" : "")">@Lang["addnew"]</a>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (ShowFormCreateFuttum)
                {
                    <tr>
                        <EditIncidentalBooking CurrentViewMode="CurrentViewMode"
                                               CustomerList="CustomerList"
                                               FutaiScheduleList="FutaiScheduleList"
                                               LoadDouroDataList="LoadDouroDataList"
                                               LoadFutaiList="LoadFutaiList"
                                               LoadNyuRyokinNameList="LoadNyuRyokinNameList"
                                               LoadSeisanCdList="LoadSeisanCdList"
                                               LoadSeisanKbnList="LoadSeisanKbnList"
                                               LoadTsumiList="LoadTsumiList"
                                               LoadFuttumOrigin="SelectedLoadFuttumItem"
                                               SettingTaxRate="SettingTaxRate"
                                               TaxTypeDataList="TaxTypeDataList"
                                               SettingQuantityList="IncidentalBookingData.SettingQuantityList"
                                               OnSubmit="HandleAddFuttum"
                                               OnCancel="HandleCancelCreateFuttum" />
                    </tr>
                }
                @foreach (var futtumItem in IncidentalBookingData.LoadFuttumList)
                {
                    <tr>
                        @if (futtumItem.Editing)
                        {
                            <EditIncidentalBooking CurrentViewMode="CurrentViewMode"
                                                   IsEditMode="true"
                                                   CustomerList="CustomerList"
                                                   FutaiScheduleList="FutaiScheduleList"
                                                   LoadDouroDataList="LoadDouroDataList"
                                                   LoadFutaiList="LoadFutaiList"
                                                   LoadNyuRyokinNameList="LoadNyuRyokinNameList"
                                                   LoadSeisanCdList="LoadSeisanCdList"
                                                   LoadSeisanKbnList="LoadSeisanKbnList"
                                                   LoadTsumiList="LoadTsumiList"
                                                   LoadFuttumOrigin="futtumItem"
                                                   SettingTaxRate="SettingTaxRate"
                                                   TaxTypeDataList="TaxTypeDataList"
                                                   SettingQuantityList="IncidentalBookingData.SettingQuantityList"
                                                   OnSubmit="HandleSaveEditFuttum"
                                                   OnCancel="HandleCancelEditFuttum" />
                        }
                        else
                        {
                            <td class="text-center @CssHelper.GetFormEditStateCss(futtumItem.EditState)">
                                @futtumItem.ScheduleDate.GetPrefixString()<br />
                                @futtumItem.ScheduleDate.GetDateString()
                            </td>
                            <td class="text-left">@futtumItem.FutTumNm</td>
                            <td class="text-left">@futtumItem.SeisanNm</td>
                            <td class="text-left">@futtumItem.SelectedLoadSeisanKbn?.RyakuName</td>
                            @if (CurrentViewMode == IncidentalViewMode.Futai)
                            {
                                <td class="text-left">@futtumItem.IriRyoNm</td>
                                <td class="text-left">@futtumItem.DeRyoNm</td>
                            }
                            <td class="text-right">@CommonUtil.CurencyFormat(futtumItem.Suryo)</td>
                            <td class="text-right">@CommonUtil.CurencyFormat(futtumItem.Tanka)</td>
                            <td class="text-right">@CommonUtil.CurencyFormat(futtumItem.TotalAmountWithoutTax)</td>
                            <td class="text-right">@CommonUtil.CurencyFormat(futtumItem.ZeikomiKin)</td>
                            <td>
                                <div class="d-flex justify-content-between">
                                    <span>@CommonUtil.TaxRateFormat(futtumItem.Zeiritsu)％</span>
                                    <span>@CommonUtil.CurencyFormat(futtumItem.SyaRyoSyo)</span>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex justify-content-between">
                                    <span>@CommonUtil.TaxRateFormat(futtumItem.TesuRitu)％</span>
                                    <span>@CommonUtil.CurencyFormat(futtumItem.SyaRyoTes)</span>
                                </div>
                            </td>
                            <td class="text-left">@futtumItem.ScheduleDate.Date.ToString("yyyy/MM/dd")</td>
                            <td class="text-center">
                                <button class="custom-hyper font-weight-bold btn-addrow @(IsDisableEdit ? "disabled" : "enabled")"
                                        type="button"
                                        @onclick="() => HandleEditFuttum(futtumItem.Index)">
                                    @Lang["edit"]
                                </button>
                            </td>
                            <td class="text-center">
                                <button class="custom-hyper font-weight-bold text-danger btn-addrow  @(IsDisableEdit ? "disabled" : "enabled")"
                                        type="button"
                                        @onclick="() => HandleDeleteFuttum(futtumItem.Index)">
                                    @Lang["delete"]
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <h5>@Lang["cumulativepay"]</h5>
        <table class="table table-bordered table-sm text-center w-50" style="font-size: 0.875rem">
            <thead class="thead-primary">
                <tr>
                    <th scope="col">@Lang["type"]</th>
                    <th scope="col">@Lang["sales_amount"]</th>
                    <th scope="col">@Lang["consumption_tax"]</th>
                    <th scope="col">@Lang["fee"]</th>
                    <th scope="col">@Lang["incidental_charges"]</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    @if (CurrentViewMode == IncidentalViewMode.Futai)
                    {
                        <th scope="row" class="bg-primary text-white">@Lang["futai"]</th>
                    }
                    else
                    {
                        <th scope="row" class="bg-primary text-white">@Lang["tsumi"]</th>
                    }
                    <td class="text-right">@((IncidentalBookingData.LoadFuttumList?.Where(_ => _.SelectedLoadSeisanKbn.CodeKbn == LoadSeisanKbnList[0].CodeKbn).Sum(f => f.TotalAmountWithoutTax) ?? 0).ToString("C", CurrentCulture))</td>
                    <td class="text-right">@((IncidentalBookingData.LoadFuttumList?.Where(_ => _.SelectedLoadSeisanKbn.CodeKbn == LoadSeisanKbnList[0].CodeKbn).Sum(f => f.SyaRyoSyo) ?? 0).ToString("C", CurrentCulture))</td>
                    <td class="text-right">@((IncidentalBookingData.LoadFuttumList?.Where(_ => _.SelectedLoadSeisanKbn.CodeKbn == LoadSeisanKbnList[0].CodeKbn).Sum(f => f.SyaRyoTes) ?? 0).ToString("C", CurrentCulture))</td>
                    <td class="text-right">@((IncidentalBookingData.LoadFuttumList?.Where(_ => _.SelectedLoadSeisanKbn.CodeKbn == LoadSeisanKbnList[0].CodeKbn).Sum(f => f.ZeikomiKin) ?? 0).ToString("C", CurrentCulture))</td>
                </tr>
            </tbody>
        </table>

        <div class="text-center">
            <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                      Text="@Lang["save"]"
                      SubmitFormOnClick="true"
                      Enabled="IsEnableSubmitButton()"
                      CssClass="width--90" />
        </div>
    </EditForm>
}

@code {
    [Parameter] public IncidentalViewMode CurrentViewMode { get; set; }
    [Parameter] public string UkeNo { get; set; }
    [Inject] IFutaiService _service { get; set; }
    protected List<ScheduleSelectorModel> FutaiScheduleList { get; set; }
    protected List<LoadTsumi> LoadTsumiList { get; set; }
    protected List<LoadFutai> LoadFutaiList { get; set; }
    protected List<LoadNyuRyokinName> LoadNyuRyokinNameList { get; set; }
    protected List<LoadSeisanCd> LoadSeisanCdList { get; set; }
    protected List<LoadSeisanKbn> LoadSeisanKbnList { get; set; }
    protected List<LoadCustomerList> CustomerList { get; set; }
    protected List<TaxTypeList> TaxTypeDataList { get; set; }
    protected List<LoadDouro> LoadDouroDataList { get; set; }
    protected SettingTaxRate SettingTaxRate { get; set; }

    protected IncidentalBooking IncidentalBookingData { get; set; }
    protected LoadFuttum SelectedLoadFuttumItem { get; set; }
    protected EditContext FormContext { get; set; }

    protected string PopupTitle { get; set; }
    protected string PopupConfirmDeleteTitle { get; set; }
    protected string PopupConfirmDeleteContent { get; set; }
    protected string PopupInfoContent { get; set; }
    protected string TempStr { get; set; }

    protected bool IsLoading { get; set; } = true;
    protected bool ShowFormCreateFuttum { get; set; }
    protected bool ShowPopupConfirmDelete { get; set; }
    protected bool IsShowPopupInfo { get; set; }
    protected bool IsShowPopupError { get; set; }
    protected bool IsDisableEdit { get; set; }

    protected CultureInfo CurrentCulture { get; set; }
    protected Action OnClosePopup { get; set; }

    private MaxUpdYmdTime _maxUpdYmd { get; set; }

    private int indexToDelete;
    private string baseUrl;
    private bool isHaitaValid = true;

    #region Localization string

    string Ok;
    string Yes;
    string No;
    string PopupTitleInfo;
    string PopupTitleError;
    string CannotDeleteFuttumMessage;
    string UpdateFuttumSucces;
    string UpdateFail;

    private void LocalizationInit()
    {
        Ok = Lang["Ok"];
        Yes = Lang["Yes"];
        No = Lang["No"];
        PopupTitleInfo = Lang["PopupTitleInfo"];
        PopupTitleError = Lang["PopupTitleError"];
        CannotDeleteFuttumMessage = Lang["BI_T001"];

        PopupConfirmDeleteTitle = Lang["VerificationDelete"];
        PopupConfirmDeleteContent = Lang["BI_T0010"];

        UpdateFuttumSucces = Lang["BI_T008"];
        UpdateFail = Lang["BI_T009"];
    }

    #endregion

    #region Component Lifecycle

    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        baseUrl = AppSettingsService.GetBaseUrl();
        CurrentCulture = new CultureInfo("ja-JP");
        SelectedLoadFuttumItem = new LoadFuttum();
        SelectedLoadFuttumItem.FirstLoad = false;

        // check booking can edit or not
        // disable edit
        //  - paid or coupon
        //  - lock table
        var editStateList = await LoadBookingEditableStateAsync(UkeNo);
        if (editStateList?.Count > 0)
        {
            IsDisableEdit = true;
        }

        await LoadAllDataComboboxAsync();
        var incidentalDb = await LoadBookingIncidentalDataAsync();
        if (incidentalDb != null)
        {
            IncidentalBookingData = incidentalDb;
            _maxUpdYmd = await _service.FutTumMishumMaxUpdYmdTimeAsync(UkeNo, CurrentViewMode);
            FutaiScheduleList = GetFutaiScheduleList(incidentalDb);
            LoadSelectedDataCombobox();

            // enable auto calculate
            IncidentalBookingData.LoadFuttumList.ForEach(f => f.FirstLoad = false);
            FormContext = new EditContext(IncidentalBookingData);
        }
        else
        {
            NavManager.NavigateTo("bookinginput?UkeCd=" + UkeNo.Substring(5), true);
            return;
        }

        await base.OnInitializedAsync().ContinueWith((t) => { IsLoading = false; });
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Common methods

    private async Task LoadAllDataComboboxAsync()
    {
        if (CurrentViewMode == IncidentalViewMode.Tsumi)
        {
            LoadTsumiList = await HttpClient.GetJsonAsync<List<LoadTsumi>>(baseUrl + "/api/BookingIncidental/LoadTsumi?tenantId=" + new ClaimModel().TenantID);
        }
        else if (CurrentViewMode == IncidentalViewMode.Futai)
        {
            LoadFutaiList = await HttpClient.GetJsonAsync<List<LoadFutai>>(baseUrl + "/api/BookingIncidental/LoadFutai?tenantId=" + new ClaimModel().TenantID);
        }
        LoadNyuRyokinNameList = await HttpClient.GetJsonAsync<List<LoadNyuRyokinName>>(baseUrl + "/api/BookingIncidental/LoadNyuRyokinName");
        LoadSeisanCdList = await HttpClient.GetJsonAsync<List<LoadSeisanCd>>(baseUrl + "/api/BookingIncidental/LoadSeisanCd");
        LoadSeisanKbnList = await HttpClient.GetJsonAsync<List<LoadSeisanKbn>>(baseUrl + "/api/BookingIncidental/LoadSeisanKbn");
        CustomerList = await HttpClient.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
        TaxTypeDataList = await HttpClient.GetJsonAsync<List<TaxTypeList>>(baseUrl + "/api/TaxType");
        LoadDouroDataList = await HttpClient.GetJsonAsync<List<LoadDouro>>(baseUrl + "/api/BookingIncidental/LoadDouro");
        SettingTaxRate = await HttpClient.GetJsonAsync<SettingTaxRate>(baseUrl + "/api/BookingIncidental/SettingTaxRate");
    }

    private void LoadSelectedDataCombobox()
    {
        if (LoadSeisanKbnList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadSeisanKbn =
                    LoadSeisanKbnList.SingleOrDefault(s => byte.Parse(s.CodeKbn) == byte.Parse(futtum.SelectedLoadSeisanKbn.CodeKbn));
            }
        }
        if (LoadSeisanCdList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadSeisanCd =
                    LoadSeisanCdList.SingleOrDefault(s => s.SeisanCdSeq == futtum.SelectedLoadSeisanCd.SeisanCdSeq);
            }
        }
        if (CustomerList != null)
        {
            if (!CustomerList.Any(_ => _ == null))
                CustomerList.Insert(0, null); //insert empty object for option: not select

            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];

                if (futtum.SelectedCustomer != null && futtum.SelectedCustomer.SitenCdSeq != 0 && futtum.SelectedCustomer.TokuiSeq != 0)
                {
                    futtum.SelectedCustomer =
                        CustomerList.Skip(1).SingleOrDefault(s => s.SitenCdSeq == futtum.SelectedCustomer.SitenCdSeq && s.TokuiSeq == futtum.SelectedCustomer.TokuiSeq);
                }
                else
                {
                    futtum.SelectedCustomer = CustomerList.FirstOrDefault();
                }
            }
        }
        if (LoadNyuRyokinNameList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadNyuRyokinName =
                    LoadNyuRyokinNameList.SingleOrDefault(s => s.RyokinCd == futtum.SelectedLoadNyuRyokinName.RyokinCd && s.RyokinTikuCd == futtum.SelectedLoadNyuRyokinName.RyokinTikuCd);

                futtum.SelectedLoadShuRyokin =
                    LoadNyuRyokinNameList.SingleOrDefault(s => s.RyokinCd == futtum.SelectedLoadShuRyokin.RyokinCd && s.RyokinTikuCd == futtum.SelectedLoadShuRyokin.RyokinTikuCd);
            }
        }
        if (TaxTypeDataList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.TaxType =
                    TaxTypeDataList.SingleOrDefault(s => s.IdValue == futtum.TaxType.IdValue);
                futtum.SirTaxType =
                    TaxTypeDataList.SingleOrDefault(s => s.IdValue == futtum.SirTaxType.IdValue);
            }
        }
        if (FutaiScheduleList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.ScheduleDate =
                    FutaiScheduleList.SingleOrDefault(s => s.Date == futtum.ScheduleDate.Date) ?? futtum.ScheduleDate;
            }
        }
        if (CurrentViewMode == IncidentalViewMode.Futai && LoadFutaiList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadFutai =
                    LoadFutaiList.SingleOrDefault(s => s.FutaiCdSeq == futtum.SelectedLoadFutai.FutaiCdSeq);

            }
        }
        else if (CurrentViewMode == IncidentalViewMode.Tsumi && LoadTsumiList != null)
        {
            for (int index = 0; index < IncidentalBookingData.LoadFuttumList.Count; index++)
            {
                var futtum = IncidentalBookingData.LoadFuttumList[index];
                futtum.SelectedLoadTsumi =
                        LoadTsumiList.SingleOrDefault(s => s.CodeKbnSeq == futtum.SelectedLoadTsumi.CodeKbnSeq);
            }
        }
    }

    private List<ScheduleSelectorModel> GetFutaiScheduleList(IncidentalBooking incidental)
    {
        return ScheduleHelper.GetScheduleSelectorList(incidental.HaiSYmd, incidental.TouYmd, incidental.IsPreviousDay, incidental.IsAfterDay);
    }

    protected bool IsEnableSubmitButton()
    {
        if (IsDisableEdit)
        {
            return false;
        }
        if (ShowFormCreateFuttum || IncidentalBookingData.LoadFuttumList.Any(f => f.Editing))
        {
            return false;
        }
        var result = FormContext.IsModified() && FormContext.Validate();
        return result;
    }

    private void HandleClosePopupInfoAfterSubmit()
    {
        IsShowPopupInfo = false;
        IsShowPopupError = false;
        StateHasChanged();
    }

    private async Task<IncidentalBooking> LoadBookingIncidentalDataAsync()
    {
        try
        {
            string uri = string.Format("{0}/api/BookingIncidental?ukeNo={1}&viewMode={2}", baseUrl, UkeNo, CurrentViewMode);
            var response = await HttpClient.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<IncidentalBooking>(await response.Content.ReadAsStringAsync());
            }
            else
            {
                return null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
    }

    private async Task<List<BookingDisableEditState>> LoadBookingEditableStateAsync(string ukeNo)
    {
        try
        {
            string uri = string.Format("{0}/api/BookingInput/DisabledBookingStateList?ukeNo={1}", baseUrl, ukeNo);
            var response = await HttpClient.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<List<BookingDisableEditState>>(await response.Content.ReadAsStringAsync());
            }
            else
            {
                return null;
            }
        }
        catch (Exception)
        {
            return null;
        }
    }

    #endregion

    protected void HandleCreateFuttum()
    {
        if (IsDisableEdit == false && ShowFormCreateFuttum == false)
        {
            IncidentalBookingData.LoadFuttumList.ForEach(f => f.Editing = false);

            SelectedLoadFuttumItem = new LoadFuttum();
            SelectedLoadFuttumItem.FirstLoad = false;
            SelectedLoadFuttumItem.Index = IncidentalBookingData.LoadFuttumList.Select(f => f.Index).DefaultIfEmpty(0).Max(index => index + 1);
            SelectedLoadFuttumItem.FutTumRen = ++IncidentalBookingData.FuttumRenMax;

            SelectedLoadFuttumItem.FuttumKbnMode = CurrentViewMode;
            SelectedLoadFuttumItem.SelectedLoadSeisanKbn = LoadSeisanKbnList.FirstOrDefault();
            if (CurrentViewMode == IncidentalViewMode.Futai)
            {
                SelectedLoadFuttumItem.TaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == Constants.ForeignTax.IdValue);
                SelectedLoadFuttumItem.SirTaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == Constants.ForeignTax.IdValue);
            }
            else
            {
                SelectedLoadFuttumItem.TaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == IncidentalBookingData.DefaultLoadedItemTaxType);
                SelectedLoadFuttumItem.SirTaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == IncidentalBookingData.DefaultLoadedItemTaxType);
            }

            SelectedLoadFuttumItem.ScheduleDate = FutaiScheduleList.FirstOrDefault();
            foreach (var item in IncidentalBookingData.SettingQuantityList)
            {
                if (SelectedLoadFuttumItem.ScheduleDate.Date.IsInRange(item.GarageLeaveDate, item.GarageReturnDate))
                {
                    var settingQuantity = new SettingQuantity();
                    settingQuantity.SimpleCloneProperties(item);
                    SelectedLoadFuttumItem.SettingQuantityList.Add(settingQuantity);
                }
            }

            SelectedLoadFuttumItem.DefaultTaxRate = SettingTaxRate.GetTaxRate(IncidentalBookingData.HaiSYmd);
            SelectedLoadFuttumItem.Zeiritsu = SelectedLoadFuttumItem.DefaultTaxRate.ToString();
            SelectedLoadFuttumItem.SirZeiritsu = SettingTaxRate.GetTaxRate(IncidentalBookingData.HaiSYmd).ToString();
            SelectedLoadFuttumItem.TesuRitu = IncidentalBookingData.DefaultFutaiChargeRate.ToString();
            SelectedLoadFuttumItem.RoundType = IncidentalBookingData.RoundType;

            ShowFormCreateFuttum = true;
        }
    }

    protected void HandleAddFuttum()
    {
        IncidentalBookingData.LoadFuttumList.Add(SelectedLoadFuttumItem);
        SelectedLoadFuttumItem.EditState = FormEditState.Added;
        FormContext.NotifyFieldChanged(() => IncidentalBookingData.LoadFuttumList);
        ShowFormCreateFuttum = false;
        StateHasChanged();
    }

    protected void HandleCancelCreateFuttum(int index)
    {
        ShowFormCreateFuttum = false;
        StateHasChanged();
    }

    protected void HandleEditFuttum(int index)
    {
        if (IsDisableEdit == false)
        {
            IncidentalBookingData.LoadFuttumList.ForEach(f => f.Editing = false);
            HandleCancelCreateFuttum(index);

            var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == index);
            selectedFuttum.DefaultTaxRate = SettingTaxRate.GetTaxRate(IncidentalBookingData.HaiSYmd);
            selectedFuttum.Editing = true;
            StateHasChanged();
        }
    }

    protected void HandleSaveEditFuttum(int index)
    {
        var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == index);
        selectedFuttum.Editing = false;
        selectedFuttum.EditState = selectedFuttum.EditState == FormEditState.Added ? FormEditState.Added : FormEditState.Edited;
        FormContext.NotifyFieldChanged(() => IncidentalBookingData.LoadFuttumList);
        StateHasChanged();
    }

    protected void HandleCancelEditFuttum(int index)
    {
        var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == index);
        selectedFuttum.Editing = false;
        StateHasChanged();
    }

    protected void HandleDeleteFuttum(int index)
    {
        if (IsDisableEdit == false)
        {
            var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == index);
            if (selectedFuttum.CanDelete)
            {
                indexToDelete = index;
                ShowPopupConfirmDelete = true;
            }
            else
            {
                IsShowPopupInfo = true;
                PopupTitle = PopupTitleInfo;
                PopupInfoContent = CannotDeleteFuttumMessage;
                OnClosePopup = () =>
                {
                    IsShowPopupInfo = false;
                    IsShowPopupError = false;
                    InvokeAsync(StateHasChanged);
                };
            }
            StateHasChanged();
        }
    }

    protected void OnConfirmDelete()
    {
        var selectedFuttum = IncidentalBookingData.LoadFuttumList.SingleOrDefault(f => f.Index == indexToDelete);

        // check if create new then delete
        if (selectedFuttum.EditState == FormEditState.Added)
        {
            IncidentalBookingData.FuttumRenMax -= 1;
        }

        IncidentalBookingData.LoadFuttumList.Remove(selectedFuttum);
        FormContext.NotifyFieldChanged(() => IncidentalBookingData.LoadFuttumList);

        ShowPopupConfirmDelete = false;
        StateHasChanged();
    }

    protected void OnClosePopupConfirmDelete()
    {
        ShowPopupConfirmDelete = false;
        StateHasChanged();
    }

    protected async Task HandleValidSubmitAsync()
    {
        if (FormContext.Validate())
        {
            var maxUpdYmd = await _service.FutTumMishumMaxUpdYmdTimeAsync(UkeNo, CurrentViewMode);
            isHaitaValid = _maxUpdYmd.FutTumMaxUpdYmdTime == maxUpdYmd.FutTumMaxUpdYmdTime && _maxUpdYmd.MishumMaxUpdYmdTime == maxUpdYmd.MishumMaxUpdYmdTime;
            if (!isHaitaValid)
            {
                StateHasChanged();
                return;
            }

            HttpResponseMessage response = new HttpResponseMessage();
            if (IncidentalBookingData.IsEditMode)
            {
                var requstUri = string.Format("{0}/api/BookingIncidental/{1}", baseUrl, UkeNo);
                response = await HttpClient.PutJsonAsync(requstUri, IncidentalBookingData);
            }
            else
            {
                var requstUri = string.Format("{0}/api/BookingIncidental/{1}", baseUrl, UkeNo);
                response = await HttpClient.PostJsonAsync(requstUri, IncidentalBookingData);
            }

            if (response.IsSuccessStatusCode)
            {
                IsShowPopupInfo = true;
                PopupInfoContent = UpdateFuttumSucces;
                PopupTitle = PopupTitleInfo;
            }
            else
            {
                IsShowPopupError = true;
                PopupInfoContent = UpdateFail;
                PopupTitle = PopupTitleInfo;
            }
            var incidentalDb = await LoadBookingIncidentalDataAsync();
            if (incidentalDb != null)
            {
                IncidentalBookingData = incidentalDb;
                _maxUpdYmd = await _service.FutTumMishumMaxUpdYmdTimeAsync(UkeNo, CurrentViewMode);
                IncidentalBookingData.LoadFuttumList = incidentalDb.LoadFuttumList.Where(f => f.FuttumKbnMode == CurrentViewMode).ToList();
                FutaiScheduleList = GetFutaiScheduleList(incidentalDb);

                LoadSelectedDataCombobox();
                FormContext.MarkAsUnmodified();
            }
            else
            {
                NavManager.NavigateTo("/", true);
            }
            OnClosePopup = HandleClosePopupInfoAfterSubmit;
            await InvokeAsync(StateHasChanged);
        }
    }
}
