@implements IDisposable
@inject IJSRuntime JSRuntime

<input type="file" @ref="inputFileElement" @attributes="UnmatchedParameters" />

@code {
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> UnmatchedParameters { get; set; }
    [Parameter] public EventCallback<IFileListEntry[]> OnChange { get; set; }
    [Parameter] public int MaxMessageSize { get; set; } = 20 * 1024; // TODO: Use SignalR default
    [Parameter] public int MaxBufferSize { get; set; } = 1024 * 1024;
    [Parameter] public EventCallback OnEmpty { get; set; }
    List<FileListEntryImpl> Files = new List<FileListEntryImpl>();
    ElementReference inputFileElement;
    IDisposable thisReference;

    [JSInvokable]
    public async Task NotifyChange(FileListEntryImpl[] files, bool isEnd)
    {
        Files.AddRange(files);
        if (isEnd)
        {
            foreach (var file in Files)
            {
                // So that method invocations on the file can be dispatched back here
                file.Owner = (InputFile)(object)this;
            }

            await OnChange.InvokeAsync(Files.ToArray());
            Files.Clear();
        }
    }

    [JSInvokable]
    public async Task SelectedEmptyFile()
    {
        await OnEmpty.InvokeAsync(null);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            thisReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeAsync<object>("BlazorInputFile.init", inputFileElement, thisReference);
        }
    }

    public void Reset()
    {
        JSRuntime.InvokeVoidAsync("BlazorInputFile.reset", inputFileElement);
    }

    internal Stream OpenFileStream(FileListEntryImpl file)
    {
        return SharedMemoryFileListEntryStream.IsSupported(JSRuntime)
            ? (Stream)new SharedMemoryFileListEntryStream(JSRuntime, inputFileElement, file)
            : new RemoteFileListEntryStream(JSRuntime, inputFileElement, file, MaxMessageSize, MaxBufferSize);
    }

    internal async Task<FileListEntryImpl> ConvertToImageFileAsync(FileListEntryImpl file, string format, int maxWidth, int maxHeight)
    {
        var imageFile = await JSRuntime.InvokeAsync<FileListEntryImpl>("BlazorInputFile.toImageFile", inputFileElement, file.Id, format, maxWidth, maxHeight);

        // So that method invocations on the file can be dispatched back here
        imageFile.Owner = (InputFile)(object)this;

        return imageFile;
    }

    void IDisposable.Dispose()
    {
        thisReference?.Dispose();
    }
}
