@inject IJSRuntime JSRuntime
@inject IStaffScheduleService StaffScheduleService
@inject ITPM_CodeKbListService CodeKbService
@inject ILeaveDayTypeService LeaveDayTypeService
@inject IStringLocalizer<StaffSchedule> Lang
@inject IStaffListService SyainService
@inject IScheduleCustomGroupService ScheduleCustomGroupService
@inject IDisplaySettingService DisplaySettingService
@inject IScheduleGroupDataService StaffGroupDataService
@inject IScheduleManageService IScheduleManageService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject INotificationTemplateService NotificationTemplateService
@inject ITPM_CalendDataListService TPM_CalendDataListService
@inject IErrorHandlerService errorModalService
@inject IGenerateFilterValueDictionary GenerateFilterValueDictionaryService
@inject IFilterCondition FilterConditionService
@using HassyaAllrightCloud.Domain.Entities;

@using TimeZoneConverter;

<link rel="stylesheet" href="css/dx.common.css">
<link rel="stylesheet" href="css/dx.light.css">

@if (isLoading)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}

<DxPopup CssClass="custom-popup" @bind-Visible="@PopupCommentdate">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["message_popup_commentdate"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelDateComment(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        @if (Ischecktext)
        {
            <span class="validation-errors">@Lang["message_error_limit_character"]</span>
        }
        <div class="d-flex">
            <label class="col-form-label-sm mr-3 width--56 flex">@Lang["remark"]：</label>
            <textarea class="flex-grow-1 @(Ischecktext ? "textinvalid" : "")" rows="3" maxlength="100" @bind="@commentdate"></textarea>
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => UpdateDateComment(e))" Text="@Lang["btn_save"]" CssClass="width--90" />
        <DxButton RenderStyle="ButtonRenderStyle.Secondary" @onclick="@((e) => CancelDateComment(e))" Text="@Lang["btn_cancel"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>

<DxPopup CssClass="custom-popup" @bind-Visible="@IsSendMailError">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["Error"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => { IsSendMailError = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <i class="fa fa-2x fa-times-circle" style="color:red" aria-hidden="true"></i>
        @Lang["BI_T005"]
    </ChildContent>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" CssClass="popupsavedata" @onclick="@(() => { IsSendMailError = false; })" Text="@Lang["OK"]" />
    </FooterTemplate>
</DxPopup>


<DxPopup @bind-Visible="@PopupGroupScheduleAdd">
    <HeaderTemplate>
        <div class="schedule-popup-wrapper">
            <div class="schedule-popup-title">@(customGroupScheduleForm.GroupSeq != null ? Lang["CustomGroupScheduleUpdate"] : Lang["CustomGroupScheduleAdd"])</div>
            <a class="schedule-popup-close" href="javascript:void(0)" @onclick="@(() => PopupGroupScheduleAdd = false)">
                <i class="fa fa-window-close" aria-hidden="true"></i>
            </a>
        </div>
    </HeaderTemplate>
    <Content>
        <EditForm Context="formContext" Model="@customGroupScheduleForm">
            <DataAnnotationsValidator />
            <FluentValidator TValidator="CustomGroupScheduleFormValidator" />
            <ul class="validation-errors">
                @foreach (var message in formContext.GetValidationMessages().Distinct())
                {
                    <li class="validation-message">@Lang[message]</li>
                }
            </ul>
            <DxFormLayout CssClass="schedule-popup-content">
                <DxFormLayoutItem Caption="@Lang["GroupName"]" ColSpanMd="12">
                    <Template>
                        <DxTextBox CssClass="length50 focus"
                                   Text="@customGroupScheduleForm.GroupName"
                                   TextExpression="@(() => customGroupScheduleForm.GroupName)"
                                   TextChanged="@((newValue) => ChangeGroupName(newValue))"></DxTextBox>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@Lang["GroupMemberAdd"]" ColSpanMd="12">
                    <Template>
                        <DxTagBox Data="@StaffList"
                                  TextFieldName="SyainNm"
                                  FilteringMode="@DataGridFilteringMode.StartsWith"
                                  ClearButtonDisplayMode="@DataEditorClearButtonDisplayMode.Auto"
                                  SelectedItems="@customGroupScheduleForm.StaffList"
                                  SelectedItemsExpression="@(() => customGroupScheduleForm.StaffList)"
                                  SelectedItemsChanged="@((newValue) => ChangeMemberList(newValue))"></DxTagBox>
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </Content>
    <FooterTemplate>
        <div>
            <button class="btn btn-primary" @onclick="@(() => PopupGroupScheduleAdd = false)">@Lang["Cancel"]</button>
            <button class="btn btn-primary" disabled="@(string.IsNullOrEmpty(customGroupScheduleForm.GroupName) || string.IsNullOrEmpty(customGroupScheduleForm.GroupName.Trim()) || customGroupScheduleForm.StaffList.Count() == 0 ? "disabled" : null)" @onclick="SaveGroupSchedule">@Lang["Save"]</button>
        </div>
    </FooterTemplate>
</DxPopup>

<DxPopup @bind-Visible="@PopupCalendarAdd">
    <HeaderTemplate>
        <div class="schedule-popup-wrapper">
            <div class="schedule-popup-title">@(CalendarSetModel.CalendarSeq == 0 ? Lang["CreateCalendarTitle"] : Lang["ModifyCalendarTitle"])</div>
            <a class="schedule-popup-close" href="javascript:void(0)" @onclick="@(() => PopupCalendarAdd = false)">
                <i class="fa fa-window-close" aria-hidden="true"></i>
            </a>
        </div>
    </HeaderTemplate>
    <Content>
        <EditForm Context="formContext" Model="@CalendarSetModel">
            <DataAnnotationsValidator />
            <FluentValidator TValidator="CalendarFormValidator" />
            <ul class="validation-errors">
                @foreach (var message in formContext.GetValidationMessages().Distinct())
                {
                    <li class="validation-message">@Lang[message]</li>
                }
            </ul>
            <DxFormLayout CssClass="schedule-popup-content">
                <DxFormLayoutItem Caption="@Lang["CalendarName"]" ColSpanMd="12">
                    <Template>
                        <DxTextBox CssClass="length10 focus"
                                   Text="@CalendarSetModel.CalendarName"
                                   TextExpression="@(() => CalendarSetModel.CalendarName)"
                                   TextChanged="@((newValue) => ChangeCalendarName(newValue))"></DxTextBox>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@Lang["CompanyName"]" ColSpanMd="12">
                    <Template>
                        <DxTextBox Text="@CalendarSetModel.CompanyNm"
                                   TextExpression="@(() => CalendarSetModel.CompanyNm)"
                                   ReadOnly="true"
                                   TextChanged="@((newValue) => ChangeCalendarName(newValue))"></DxTextBox>
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </Content>
    <FooterTemplate>
        <div>
            <button class="btn btn-primary" @onclick="@(() => PopupCalendarAdd = false)">@Lang["Cancel"]</button>
            <button class="btn btn-primary" disabled="@(string.IsNullOrEmpty(CalendarSetModel.CalendarName) || string.IsNullOrEmpty(CalendarSetModel.CalendarName.Trim()) ? "disabled" : null)" @onclick="SaveCalendar">@Lang["Save"]</button>
        </div>
    </FooterTemplate>
</DxPopup>

<DxPopup CssClass="FBS-popup" @bind-Visible="@IsShowFeedbackBookingSchedule">
    <ChildContent>
        <div class="col-12">
            <div class="row"><p class="@(CurrentScheduleData.DisplayType == 2 ? "schedule-label-meeting" : "schedule-label-training")">@CurrentScheduleData.Typelabel.LabelText</p><p class="word-break">@CurrentScheduleData.Text</p></div>
            <div class="row"><p>@AppointmentDetailFB.StartDateDisplay ~ @AppointmentDetailFB.EndDateDisplay</p></div>
            <div class="row"><p>@displayRecurrenceRule</p></div>
            <div class="row">
                <div class="col-12">
                    <div class="row"><p style="text-align:left" class="col-4">@Lang["plancreator"]:</p><p class="col-8"> @AppointmentDetailFB.Creator</p></div>
                    <div class="row">
                        <p style="text-align:left" class="col-4">@Lang["planparticipant"]:</p>
                        <div class="col-8">
                            @foreach (var item in AppointmentDetailFB.ParticipantFbStatuses)
                            {
                                <div class="d-flex">
                                    <p>@item.ParticipantName  </p>
                                    @if (item.FeedbackStaus == 1)
                                    {
                                        <i class="fa fa-check" style="color:green; margin-top:5px; margin-left:5px"></i>
                                    }
                                    @if (item.FeedbackStaus == 0)
                                    {
                                        <i class="fa fa-close" style="color:red;margin-top:5px; margin-left:5px"></i>
                                    }
                                    @if (item.FeedbackStaus == 2)
                                    {
                                        <i class="fa fa-question" style="color:deepskyblue;margin-top:5px; margin-left:5px"></i>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <div class="row"><p style="text-align:left" class="col-4">@Lang["plancomment"]:</p><p class="col-8"> @AppointmentDetailFB.Note</p></div>
                </div>
            </div>
            @if (AppointmentDetailFB.CanFeedback)
            {
                <div class="row">
                    <div class="col-12" style="display: flex; border: 1px solid #E0E0E0">
                        <div>
                            <p style="margin-right: 10px;" class="mt-2">@Lang["ParticipateAppointment"]</p>
                        </div>
                        <div class="">
                            <DxCheckBox id="accept" CssClass="width--90 d-inline-block label-font-weight-normal mt-2" CheckedChanged="@((value)=> DecideBookingSchedule(value,"accept"))" Checked="@AcceptSchedule" CheckedExpression="@(() => AcceptSchedule)">@Lang["Yes"]</DxCheckBox>
                        </div>

                        <div class="">
                            <DxCheckBox id="notaccept" CssClass="width--90 d-inline-block label-font-weight-normal mt-2" CheckedChanged="@((value)=> DecideBookingSchedule(value,"notaccept"))" Checked="@NotAcecptSchedule" CheckedExpression="@(() => NotAcecptSchedule)">@Lang["No"]</DxCheckBox>
                        </div>

                        <div class="">
                            <DxCheckBox id="deciding" CssClass="width--90 d-inline-block label-font-weight-normal mt-2" CheckedChanged="@((value)=> DecideBookingSchedule(value, "deciding"))" Checked="@IsDeciding" CheckedExpression="@(() => IsDeciding)">@Lang["NotDicede"]</DxCheckBox>
                        </div>
                        <DxButton Id="send-button" RenderStyle="@ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained"
                                  CssClass="send-button mt-2" Text="@Lang["Send"]" Click="async e => await SendDecide()"></DxButton>
                    </div>
                </div>
            }
        </div>
    </ChildContent>
</DxPopup>

<DxPopup CssClass="Center-Popup" @bind-Visible="@IsShowDetailAppointmentPlan">
    <ChildContent>
        <div class="col-12">
            @if (@AppointmentPlanDetail.DisplayType == 1)
            {
                <div class="row"><p class="@ScheduleLabel">@label</p><p class="word-break">@AppointmentPlanDetail.Text</p></div>
                <div class="row"><p>@AppointmentPlanDetail.StartDateDisplay ~ @AppointmentPlanDetail.EndDateDisplay</p></div>
                <div class="row">
                    <div class="col-12">
                        <div class="row"><p style="text-align:left" class="col-6">@Lang["leavestaffname"]:</p><p class="col-6 word-break"> @AppointmentPlanDetail.YoteiInfo.CreatorNm</p></div>
                        <div class="row"><p style="text-align:left" class="col-6">@Lang["leavelabel"]:</p><p class="col-6 word-break"> @label</p></div>
                        <div class="row"><p style="text-align:left" class="col-6">@Lang["leavedescription"]:</p><p class="col-6 word-break"> @AppointmentPlanDetail.Description</p></div>
                        <div class="row"><p style="text-align:left" class="col-6">@Lang["leavenote"]:</p><p class="col-6 word-break"> @AppointmentPlanDetail.YoteiInfo.Note</p></div>
                    </div>
                </div>
            }
        </div>

    </ChildContent>
</DxPopup>

<DxPopup CssClass="Center-Popup" @bind-Visible="@IsShowWorkingStatusPopup">
    <ChildContent>
        <div class="col-12">
            <div class="row">
                <p class="@(LeaveDetail.DisplayType == 5 ? "schedule-label-red" : "schedule-label-green")">
                    @LeaveDetail.Typelabel.LabelText
                </p><p class="word-break">@LeaveDetail.Text</p>
            </div>
            <div class="row"><p>@LeaveDetail.StartDateDisplay.ToString() ~ @LeaveDetail.EndDateDisplay.ToString()</p></div>
            <div class="row">
                <div class="col-12">
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["leavestaffname"]:</p><p class="col-7 word-break"> @LeaveDetail.KinKyuInfo.SyainNm</p></div>
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["WorkStatusType"]:</p><p class="col-7 word-break"> @LeaveDetail.KinKyuInfo.KinkyuKbnNm</p></div>
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["WorkStatusName"]:</p><p class="col-7 word-break"> @LeaveDetail.KinKyuInfo.KinkyuNm</p></div>
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["WorkStatusNote"]:</p><p class="col-7 word-break"> @LeaveDetail.KinKyuInfo.BikoNm</p></div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 text-right">
                    <button class="btn btn-primary" @onclick="@(() => IsShowWorkingStatusPopup = false)">@Lang["WorkStatusCloseButton"]</button>
                </div>
            </div>
        </div>

    </ChildContent>
</DxPopup>

<DxPopup CssClass="Center-Popup" @bind-Visible="@IsShowRefuseStatusPopup">
    <ChildContent>
        <div class="col-12">
            <div class="row">
                <p class="schedule-label-red">
                    @RefuseLeaveDetail.Typelabel.LabelText
                </p><p class="word-break">@RefuseLeaveDetail.Text</p>
            </div>
            <div class="row"><p>@RefuseLeaveDetail.StartDateDisplay.ToString() ~ @RefuseLeaveDetail.EndDateDisplay.ToString()</p></div>
            <div class="row">
                <div class="col-12">
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["RefuseEmployee"]:</p><p class="col-7 word-break"> @RefuseLeaveDetail.Syainnm</p></div>
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["YoteiNote"]:</p><p class="col-7 word-break"> @RefuseLeaveDetail.Description</p></div>
                </div>
            </div>
            <hr>
            <div>
                <div class="col-12">
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["RefuseStatus"]:</p><p class="col-7 word-break"> @Lang["Refused"]</p></div>
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["RefuseStatus"]:</p><p class="col-7 word-break"> @RefuseLeaveDetail.YoteiInfo.ShoRejBiko</p></div>
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["Approver"]:</p><p class="col-7 word-break"> @RefuseLeaveDetail.YoteiInfo.ShoSyainNm</p></div>
                    <div class="row"><p style="text-align:left" class="col-5">@Lang["ApproveDate"]:</p><p class="col-7 word-break"> @RefuseLeaveDetail.YoteiInfo.ShoDateTime</p></div>
                </div>
            </div>
        </div>

    </ChildContent>
</DxPopup>

<DxPopup CssClass="Center-Popup" @bind-Visible="@IsShowJourneyPopup">
    <ChildContent>
        <div class="col-12">
            <div class="row"><p class="schedule-label-orrange">@JourneyDetail.Typelabel.LabelText</p><p class="word-break">@JourneyDetail.Text</p></div>
            <div class="row"><p>@JourneyDetail.StartDateDisplay.ToString() ~ @JourneyDetail.EndDateDisplay.ToString()</p></div>
            <div class="row">
                <div class="col-12">
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["leavestaffname"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.SyainNm</p></div>
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["InstructionNumber"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.UkeCd.ToString("D10")-@JourneyDetail.HaiinInfo.UnkRen.ToString("D4")-@JourneyDetail.HaiinInfo.TeiDanNo.ToString("D4")-@JourneyDetail.HaiinInfo.BunkRen.ToString("D4")</p></div>
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["BusName"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.Gosya</p></div>
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["BusType"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.SyaSyuNm</p></div>
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["HaiinInfo"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.HaiSInfo</p></div>
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["TouInfo"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.TouInfo</p></div>
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["DantaName"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.DantaNm</p></div>
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["IkName"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.IkNm</p></div>
                    <div class="row"><p style="text-align:left" class="col-6">@Lang["TeiCnt"]:</p><p class="col-6 word-break"> @JourneyDetail.HaiinInfo.TeiCnt</p></div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 text-right">
                    <button class="btn btn-primary" @onclick="@(() => IsShowJourneyPopup = false)">@Lang["WorkStatusCloseButton"]</button>
                </div>
            </div>
        </div>

    </ChildContent>
</DxPopup>

<DxPopup @bind-Visible="@PopupGroupScheduleDelete">
    <HeaderTemplate>
        <div class="bg-dark text-white p-2">
            <i class="fa fa-question-circle" aria-hidden="true"></i> @Lang["Confirm"]
        </div>
    </HeaderTemplate>
    <ChildContent>
        <p>
            @string.Format(Lang["DeleteConfirmMessage"], GroupToBeDelete.GroupName)
        </p>
        <div class="text-right">
            <button type="button" class="btn btn-danger width--90" @onclick="DeleteGroup">@Lang["Yes"]</button>
            <a href="javascript:void(0)" class="btn btn-outline-secondary width--90" @onclick="@(() => PopupGroupScheduleDelete = false)">@Lang["No"]</a>
        </div>
    </ChildContent>
</DxPopup>

<DxPopup @bind-Visible="@PopupDeleteCalendar">
    <HeaderTemplate>
        <div class="bg-dark text-white p-2">
            <i class="fa fa-question-circle" aria-hidden="true"></i> @Lang["Confirm"]
        </div>
    </HeaderTemplate>
    <ChildContent>
        <p>
            @string.Format(Lang["DeleteConfirmMessage"], CalendarSetModel.CalendarName)
        </p>
        <div class="text-right">
            <button type="button" class="btn btn-danger width--90" @onclick="DeleteCalendar">@Lang["Yes"]</button>
            <a href="javascript:void(0)" class="btn btn-outline-secondary width--90" @onclick="@(() => PopupDeleteCalendar = false)">@Lang["No"]</a>
        </div>
    </ChildContent>
</DxPopup>

<DxPopup @bind-Visible="@ShowErrorPopup">
    <HeaderTemplate>
        <div class="bg-dark text-white p-2">
            <i class="fa fa-exclamation-circle" aria-hidden="true"></i> @Lang["Error"]
        </div>
    </HeaderTemplate>
    <ChildContent>
        <p>@Lang["UpdateDatabaseErrorMessage"]</p>
        <div class="text-center">
            <a href="javascript:void(0)" class="btn btn-outline-secondary width--90" @onclick="@(() => ShowErrorPopup = false)">OK</a>
        </div>
    </ChildContent>
</DxPopup>

<DxPopup @bind-Visible="@IsNotDecide">
    <HeaderTemplate>
        <div class="bg-dark text-white p-2">
            <i class="fa fa-exclamation-circle" aria-hidden="true"></i> @Lang["Error"]
        </div>
    </HeaderTemplate>
    <ChildContent>
        <p>@Lang["NotDecide"]</p>
        <div class="text-center">
            <a href="javascript:void(0)" class="btn btn-outline-secondary width--90" @onclick="@(() => IsNotDecide = false)">OK</a>
        </div>
    </ChildContent>
</DxPopup>

<div class="@("schedule-navigate " + (IsHomePage ? "express-condition-home" : "express-condition mb-2 auto-min-height"))">
    <DxTabs @bind-ActiveTabIndex="@ActiveTabIndex" CssClass="schedule-tab-index">
        @foreach (GroupScheduleInfo SelectedGroupSchedule in SelectedGroupScheduleInfo)
        {
            <DxTab Text="@(SelectedGroupSchedule.GroupName)"></DxTab>
        }
    </DxTabs>
    @if (!IsHomePage)
    {
        <button class="btn btn-sm btn-primary schedule-display-button" @onclick="ToggleGroupSChedule">
            <i class="@(IsShowGroupSchedule ? "fa fa-arrow-circle-right" : "fa fa-arrow-circle-left")"></i>
        </button>
    }
</div>
<div class="driver-schedule-wrapper">
    @if (SelectedGroupScheduleInfo[ActiveTabIndex].GroupId == 0)
    {
        <div id="context-menu"></div>
        <div id="driver-schedule" class="@(IsShowGroupSchedule ? "schedule-half-width" : "schedule-full-width")"></div>
    }
    else
    {
        <div id="driver-schedule-group" class="@(IsShowGroupSchedule ? "schedule-half-width" : "schedule-full-width")"></div>
    }
    @if (!IsHomePage && CompaniesScheduleInfo != null)
    {

        <div class="@("max-height-group group-schedule " + (IsShowGroupSchedule ? "group-schedule-show" : "group-schedule-hide"))">
            <div class="group-schedule-title">@Lang["GroupScheduleTitle"]</div>
            @foreach (CompanyScheduleInfo CompanyScheduleInfo in CompaniesScheduleInfo)
            {
                <div class="group-schedule-title-section">
                    <i class="fa fa-angle-up" aria-hidden="true"></i> @(CompanyScheduleInfo.CompanyId != 0 ? CompanyScheduleInfo.CompanyName : Lang["Custom"])
                    @if (CompanyScheduleInfo.CompanyId == 0)
                    {
                        <button @onclick="AddCustomGroup"><i class="fa fa-plus"></i> </button>
                    }

                </div>
                <div>
                    @foreach (GroupScheduleInfo GroupInfo in CompanyScheduleInfo.GroupInfo)
                    {
                        <div class="group-schedule-wrapper">
                            <DxCheckBox Checked="@SelectedGroupScheduleDict[CompanyScheduleInfo.CompanyId][GroupInfo.GroupId]" CheckedChanged="@((value) => CheckGroupSchedule(value, GroupInfo))">@GroupInfo.GroupName</DxCheckBox>
                            @if (GroupInfo.CompanyId == 0)
                            {
                                <button class="btn btn-sm btn-primary group-schedule-button" @onclick="()=> EditGroup(GroupInfo)">
                                    <i class="fa fa-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-primary group-schedule-button" @onclick="()=> ShowPopUpToDelete(GroupInfo)">
                                    <i class="fa fa-trash"></i>
                                </button>
                            }
                        </div>
                    }
                </div>

            }
            <div class="group-schedule-title">@Lang["ScheduleDisplayTitle"]</div>
            <div class="group-schedule-title-section">
                <i class="fa fa-angle-up" aria-hidden="true"></i> @Lang["ScheduleCustomTitle"]
                <button @onclick="AddCalendar"><i class="fa fa-plus"></i> </button>
            </div>
            <div>
                @foreach (var item in CalendarSets)
                {
                    @if (item.CalendarName != new HassyaAllrightCloud.Domain.Dto.ClaimModel().Name)
                    {
                        <div class="group-schedule-wrapper">
                            <DxCheckBox Checked="@SelectedCalendarDict[item.CalendarSeq]" CheckedChanged="@((value) => CheckCalendar(value, item))">@item.CalendarName</DxCheckBox>

                            <button class="btn btn-sm btn-primary group-schedule-button" @onclick="()=> EditCalendar(item)">
                                <i class="fa fa-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-primary group-schedule-button" @onclick="()=> ShowPopUpToDeleteCalendar(item)">
                                <i class="fa fa-trash"></i>
                            </button>
                        </div>
                    }
                }
            </div>
            <div class="group-schedule-title-section">
                <i class="fa fa-angle-up" aria-hidden="true"></i> @Lang["BirthdayTitle"]
            </div>
            <div>
                <div class="group-schedule-wrapper">
                    <DxCheckBox Checked="@SelectedBirthdayCommentDict[1]" CheckedChanged="@((value) => CheckDateCommnet(value, 1))">@Lang["DateComment"]</DxCheckBox>
                </div>
                <div class="group-schedule-wrapper">
                    <DxCheckBox Checked="@SelectedBirthdayCommentDict[2]" CheckedChanged="@((value) => CheckDateCommnet(value, 2))">@Lang["DriverBirthday"]</DxCheckBox>
                </div>
                <div class="group-schedule-wrapper">
                    <DxCheckBox Checked="@SelectedBirthdayCommentDict[3]" CheckedChanged="@((value) => CheckDateCommnet(value, 3))">@Lang["GuideBirthday"]</DxCheckBox>
                </div>
                <div class="group-schedule-wrapper">
                    <DxCheckBox Checked="@SelectedBirthdayCommentDict[4]" CheckedChanged="@((value) => CheckDateCommnet(value, 4))">@Lang["OfficeBirthday"]</DxCheckBox>
                </div>
            </div>
        </div>

    }
</div>


@code {
        Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
        Dictionary<string, string> keyValueFilterPairsCompanyId = new Dictionary<string, string>();
        Dictionary<string, string> keyValueFilterPairsCalendar = new Dictionary<string, string>();
        Dictionary<string, string> keyValueFilterPairsDateComment = new Dictionary<string, string>();
        [Parameter] public bool IsHomePage { get; set; }
        List<CompanyScheduleInfo> CompaniesScheduleInfo;
        List<GroupScheduleInfo> SelectedGroupScheduleInfo = new List<GroupScheduleInfo>();
        Dictionary<int, Dictionary<int, bool>> SelectedGroupScheduleDict = new Dictionary<int, Dictionary<int, bool>>();
        Dictionary<int, bool> SelectedCalendarDict = new Dictionary<int, bool>();
        Dictionary<int, bool> SelectedBirthdayCommentDict = new Dictionary<int, bool>();
        List<VpmCodeKb> ScheduleTypeList = new List<VpmCodeKb>();
        List<VpmCodeKb> ScheduleLabelList = new List<VpmCodeKb>();
        List<StaffsData> StaffList;
        List<StaffModel> StaffListOfGroup;
        List<StaffModel> StaffListOfCustomGroup;
        List<LoadLeaveDayType> LeaveDayTypeList = new List<LoadLeaveDayType>();
        int activeTabIndex = 0;
        bool NotAcecptSchedule = false;
        bool PopupDeleteCalendar = false;
        bool AcceptSchedule = false;
        bool IsDeciding = false;
        bool IsShowDetailAppointmentPlan = false;
        bool IsShowFeedbackBookingSchedule = false;
        bool IsShowGroupSchedule = false;
        bool isLoading = true;
        bool isClickByChangeTab = true;
        bool IsFirstSelect = true;
        bool PopupGroupScheduleAdd = false;
        bool PopupCalendarAdd = false;
        bool PopupDisplaySetting = false;
        bool PopupGroupScheduleDelete = false;
        bool ShowErrorPopup = false;
        bool IsShowWorkingStatusPopup = false;
        bool IsShowRefuseStatusPopup = false;
        bool IsShowJourneyPopup = false;
        bool PopupCommentdate { get; set; } = false;
        bool IsSendMailError = false;
        bool IsNotDecide = false;
        string ScheduleLabel = string.Empty;
        string DateNow = string.Empty;
        string key = "groupschedule";
        string calKey = "calendarkey";
        string dateKey = "datekey";
        string keySelectedGroup = "selectedgroup";
    public string commentdate = "";
    bool Ischecktext { get; set; } = false;
    string datecommentpopup { get; set; } = "";
    string label = string.Empty;
    string labelFB = string.Empty;
    string ScheduleLabelFB = string.Empty;
    List<string> timeRangeNow = new List<string>();
    CustomGroupScheduleForm customGroupScheduleForm = new CustomGroupScheduleForm();
    CalendarSetModel CalendarSetModel = new CalendarSetModel();
    GroupScheduleInfo GroupToBeDelete;
    CalendarSetModel DeleteCalendarModel;
    LoadDisplaySetting DisplaySettingData = new LoadDisplaySetting();
    LoadDisplaySetting DisplaySettingDataForm;
    List<TimeZoneInfo> TimeZones = new List<TimeZoneInfo>();
    List<NumberWithStringDisplay> DisplayTypes = new List<NumberWithStringDisplay>();
    List<NumberWithStringDisplay> WeekStartDays = new List<NumberWithStringDisplay>();
    List<StringWithStringDisplay> DayStartHours = new List<StringWithStringDisplay>();
    AppointmentList AppointmentPlanDetail = new AppointmentList();
    BookedScheduleFeedback AppointmentDetailFB = new BookedScheduleFeedback();
    AppointmentList CurrentScheduleData = new AppointmentList();
    AppointmentList LeaveDetail = new AppointmentList();
    AppointmentList RefuseLeaveDetail = new AppointmentList();
    AppointmentList JourneyDetail = new AppointmentList();
    List<AppointmentLabel> appointmentLabels = new List<AppointmentLabel>();
    List<PlanType> planTypes = new List<PlanType>();
    List<AppointmentList> AppointmentLists = new List<AppointmentList>();
    List<AppointmentList> AppointmentListsGroup = new List<AppointmentList>();
    List<AppointmentList> AppointmentListsCustomGroup = new List<AppointmentList>();
    List<AppointmentList> AppointmentListsGroupFullDay = new List<AppointmentList>();
    List<WorkHourModel> workHourGroups = new List<WorkHourModel>();
    List<WorkHourModel> workHourCustomGroups = new List<WorkHourModel>();
    List<CalendarSetModel> CalendarSets = new List<CalendarSetModel>();
    public string FormName = FormFilterName.StaffSchedule;
    public string FormNameCompanyId = FormFilterName.ConpanyId;
    public string FormNameCalendar = FormFilterName.Calendar;
    public string FormNameDateComment = FormFilterName.DateCommnet;
    public string CurrentView = string.Empty;
    protected string displayRecurrenceRule { get; set; }
    protected string formatRecur = "yyyy年MM月dd日";
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadComponentScript", "staffSchedule");
        base.OnParametersSet();
    }

    int ActiveTabIndex
    {
        get => activeTabIndex;
        set
        {
            activeTabIndex = value;
            if (isClickByChangeTab)
            {
                ChangeTab();
            }
            isClickByChangeTab = true;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        timeRangeNow = GetTimeRangeNow();

        SelectedGroupScheduleInfo = GetGroupScheduleInfos();

        SelectedGroupScheduleInfo.Insert(0, new GroupScheduleInfo()
        {
            CompanyId = new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID,
            GroupId = 0,
            GroupName = new HassyaAllrightCloud.Domain.Dto.ClaimModel().Name
        });
        CalendarSets = await StaffScheduleService.GetCalendarSets(SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId == null ? new ClaimModel().CompanyID : SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId);

        SelectedCalendarDict = new Dictionary<int, bool>();

        SelectedCalendarDict = GetSelectedCalendarDict();
        if (!SelectedCalendarDict.Any())
        {
            GenerateSelectedCalendar(CalendarSets);
        }
        GenerateBirthdayCommentDict();
        GetDateCommnet();
        ScheduleTypeList = await CodeKbService.GetScheduleType(new ClaimModel().TenantID);
        ScheduleLabelList = await CodeKbService.GetScheduleLabel(new ClaimModel().TenantID);
        LeaveDayTypeList = await LeaveDayTypeService.Get();
        StaffList = await SyainService.Get(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);

        Dictionary<int, bool> CurrentUserDict = new Dictionary<int, bool>();
        if (!CurrentUserDict.ContainsKey(0))
        {
            CurrentUserDict.Add(0, true);
        }
        if (!SelectedGroupScheduleDict.ContainsKey(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID))
        {
            SelectedGroupScheduleDict.Add(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, CurrentUserDict);
        }
        GenerateSelectedGroup(SelectedGroupScheduleInfo);
        IEnumerable<CompanyScheduleInfo> ScheduleInfo = await StaffScheduleService.GetGroupScheduleInfo(new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, 0);
        CompaniesScheduleInfo = ScheduleInfo.ToList();
        GenerateGroupScheduleDictionary(ScheduleInfo.ToList());
        LoadDisplaySetting SettingData = await DisplaySettingService.Get(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
        DisplaySettingData = new LoadDisplaySetting(SettingData);
        DisplaySettingDataForm = new LoadDisplaySetting(SettingData);
        appointmentLabels = await DisplaySettingService.GetAppointmentLabel(new ClaimModel().TenantID);
        planTypes = await DisplaySettingService.GetPlanType(new ClaimModel().TenantID);
        GetListOfDisplaySettingScreen(SettingData);
        ChangeTab();
    }

    private List<GroupScheduleInfo> GetGroupScheduleInfos()
    {
        List<GroupScheduleInfo> result = new List<GroupScheduleInfo>();

        List<TkdInpCon> tkdInpCons = FilterConditionService.GetFilterCondition(FormName, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
        List<TkdInpCon> tkdInpConCompanyIds = FilterConditionService.GetFilterCondition(FormNameCompanyId, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;

        foreach (var item in tkdInpCons)
        {
            foreach (var itemc in tkdInpConCompanyIds)
            {
                if (item.ItemNm == itemc.ItemNm)
                {
                    result.Add(new GroupScheduleInfo()
                    {
                        CompanyId = string.IsNullOrWhiteSpace(itemc.JoInput) ? 0 : Int32.Parse(itemc.JoInput),
                        GroupId = string.IsNullOrWhiteSpace(itemc.JoInput) ? 0 : Int32.Parse(item.ItemNm),
                        GroupName = item.JoInput
                    });
                }
            }
        }

        return result;
    }

    private Dictionary<int, bool> GetSelectedCalendarDict()
    {
        Dictionary<int, bool> result = new Dictionary<int, bool>();

        List<TkdInpCon> tkdInpCons = FilterConditionService.GetFilterCondition(FormNameCalendar, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;

        foreach (var item in tkdInpCons)
        {
            result.Add(string.IsNullOrWhiteSpace(item.ItemNm) ? 0 : Int32.Parse(item.ItemNm), item.JoInput.Equals("1") ? true : false);
        }

        return result;
    }

    private void GetDateCommnet()
    {
        List<TkdInpCon> tkdInpCons = FilterConditionService.GetFilterCondition(FormNameDateComment, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;

        foreach (var item in tkdInpCons)
        {
            SelectedBirthdayCommentDict[string.IsNullOrWhiteSpace(item.ItemNm) ? 0 : Int32.Parse(item.ItemNm)] = item.JoInput.Equals("1") ? true : false;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 10);
        JSRuntime.InvokeAsync<string>("addMaxLength", "length", 50);
        JSRuntime.InvokeAsync<string>("loadComponentScript", "staffSchedule", "SetFocus");
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("ResizeScheduleFired");
            JSRuntime.InvokeVoidAsync("fadeToggleExceptButton");
        }
    }

    private void GetListOfDisplaySettingScreen(LoadDisplaySetting SettingData)
    {
        // タイムゾーン
        TimeZones = TimeZoneInfo.GetSystemTimeZones().ToList();

        // 初期表示形式
        SettingData.DefaultDisplayType.Text = Lang["DefaultDisplayType" + SettingData.DefaultDisplayType.Value];
        for (int i = 0; i <= 1; i++)
        {
            DisplayTypes.Add(new NumberWithStringDisplay()
            {
                Value = i,
                Text = Lang["DefaultDisplayType" + i]
            });
        }

        // 週の開始日
        SettingData.WeekStartDay.Text = Lang["WeekStartDay" + SettingData.WeekStartDay.Value];
        for (int i = 0; i <= 6; i++)
        {
            WeekStartDays.Add(new NumberWithStringDisplay()
            {
                Value = i,
                Text = Lang["WeekStartDay" + i]
            });
        }

        // 表示する時間帯
        string Format = "{0:D2}:00";
        SettingData.DayStartTime.Text = SettingData.DayStartTime.Value == DisplaySettingConstants.DefaultDayStartTime ?
        Lang[DisplaySettingConstants.DefaultDayStartTime] : string.Format(Format, int.Parse(SettingData.DayStartTime.Value));
        DayStartHours.Add(new StringWithStringDisplay()
        {
            Value = DisplaySettingConstants.DefaultDayStartTime,
            Text = Lang[DisplaySettingConstants.DefaultDayStartTime]
        });
        for (int i = 0; i <= 23; i++)
        {
            DayStartHours.Add(new StringWithStringDisplay()
            {
                Value = i.ToString(),
                Text = string.Format(Format, i)
            });
        }
    }

    private async Task CancelDateComment(MouseEventArgs e)
    {
        commentdate = "";
        PopupCommentdate = false;
        Ischecktext = false;

        StateHasChanged();
    }

    private async Task UpdateDateComment(MouseEventArgs e)
    {

        bool check = TPM_CalendDataListService.UpdateCommentDate(datecommentpopup, commentdate, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, 1, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,"HONEW");
        if (!check)
        {
            Ischecktext = true;
            StateHasChanged();
        }
        else
        {
            PopupCommentdate = false;
            Ischecktext = false;
            datecommentpopup = "";
            ChangeTab();
        }

    }

    public void GenerateBirthdayCommentDict()
    {
        SelectedBirthdayCommentDict.Add(1, true);
        SelectedBirthdayCommentDict.Add(2, true);
        SelectedBirthdayCommentDict.Add(3, true);
        SelectedBirthdayCommentDict.Add(4, true);
    }

    private List<AppointmentList> GenerateAppointmentDataGroup(List<AppointmentList> appointmentLists)
    {
        var cloneList = new List<AppointmentList>();
        cloneList = appointmentLists;
        for (int i = 0; i < appointmentLists.Count; i++)
        {
            //cloneList[0].StartDate = appointmentLists[0].StartDateDisplay;
            //cloneList[0].EndDate = appointmentLists[0].EndDateDisplay;
        }
        return cloneList;
    }

    private async void ChangeTab()
    {
        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            if (!IsFirstSelect)
            {
            }
            else
            {
                IsFirstSelect = false;
            }
            List<string> Keys = Lang.GetAllStrings().Select(x => x.Name).ToList();
            // Dictionary for multilangue
            Dictionary<string, string> LangDictionary = new Dictionary<string, string>();
            foreach (string Key in Keys)
            {
                LangDictionary.Add(Key, Lang[Key]);
            }
            CultureInfo Culture = System.Threading.Thread.CurrentThread.CurrentCulture;

            // Types of Schedule
            List<TypesInfo> ScheduleTypeData = new List<TypesInfo>();
            foreach (VpmCodeKb ScheduleType in ScheduleTypeList)
            {
                TypesInfo ScheduleTypes = new TypesInfo
                {
                    Id = int.Parse(ScheduleType.CodeKbn),
                    Text = ScheduleType.CodeKbnNm,
                    // Color = GetColorByScheduleType(int.Parse(ScheduleType.CodeKbn))
                };
                ScheduleTypeData.Add(ScheduleTypes);
            }

            // Types of Vacation
            List<TypesInfo> VacationTypeData = new List<TypesInfo>();
            foreach (LoadLeaveDayType LeaveDayType in LeaveDayTypeList)
            {
                TypesInfo VacationTypes = new TypesInfo
                {
                    Id = LeaveDayType.TypeKbnSeq,
                    Text = LeaveDayType.TypeName,
                    //Color = GetColorByVacationType(VacationType)
                };
                VacationTypeData.Add(VacationTypes);
            }

            // Types of Schedule label
            List<TypesInfo> ScheduleLabelData = new List<TypesInfo>();
            foreach (VpmCodeKb ScheduleLabel in ScheduleLabelList)
            {
                TypesInfo ScheduleLabels = new TypesInfo
                {
                    Id = int.Parse(ScheduleLabel.CodeKbn),
                    Text = ScheduleLabel.CodeKbnNm,
                };
                ScheduleLabelData.Add(ScheduleLabels);
            }

            string JsonScheduleTypeData = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleTypeData);
            string JsonVacationTypeData = Newtonsoft.Json.JsonConvert.SerializeObject(VacationTypeData);
            string JsonScheduleLabelTypeData = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleLabelData);
            string JsonStaffData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffList);
            string JsonDisplaySettingData = Newtonsoft.Json.JsonConvert.SerializeObject(DisplaySettingData);
            TZConvert.TryWindowsToIana(DisplaySettingData.TimeZone.Id, out string CurrentTimeZone);
            if (string.IsNullOrEmpty(CurrentTimeZone))
            {
                CurrentTimeZone = DisplaySettingData.TimeZone.Id;
            }
            if (SelectedGroupScheduleInfo[ActiveTabIndex].GroupId == 0)
            {
                CalendarSets = StaffScheduleService.GetCalendarSets(SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId == null ? new ClaimModel().CompanyID : SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId).Result;
                string calendarJson = Newtonsoft.Json.JsonConvert.SerializeObject(CalendarSets);
                AppointmentLists = ConvertTimeToUtc(StaffScheduleService.GetAppointmentLists(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, timeRangeNow[3], timeRangeNow[4], planTypes, appointmentLabels).Result, false, DisplaySettingData.TimeZone.Id);
                AppointmentLists = LoadScheduleBaseOnCalendarCheck(AppointmentLists, SelectedCalendarDict);
                AppointmentLists = LoadScheduleBaseOnDateCommentCheck(AppointmentLists, SelectedBirthdayCommentDict);
                string JsonObjectData = Newtonsoft.Json.JsonConvert.SerializeObject(AppointmentLists);
                JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "renderDriverSchedulePersonal", IsHomePage, calendarJson, JsonObjectData, JsonScheduleTypeData,
                JsonVacationTypeData, JsonScheduleLabelTypeData, JsonStaffData, JsonDisplaySettingData, CurrentTimeZone, LangDictionary, Culture.Name, DotNetObjectReference.Create(this), new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, DateTime.Now);
            }
            else
            {
                if (SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId != 0)
                {
                    workHourGroups = StaffScheduleService.GetWorkHoursGroup(timeRangeNow[2], timeRangeNow[1], SelectedGroupScheduleInfo[ActiveTabIndex].GroupId).Result;
                    AppointmentListsGroup = ConvertTimeToUtc(StaffScheduleService.GetAppointmentListsGroup(new ClaimModel().SyainCdSeq, SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, new ClaimModel().TenantID, timeRangeNow[0], timeRangeNow[1], planTypes, appointmentLabels).Result, true, DisplaySettingData.TimeZone.Id);
                    StaffListOfGroup = SyainService.GetByGroup(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, timeRangeNow[5], workHourGroups);
                    string calendarJson = Newtonsoft.Json.JsonConvert.SerializeObject(CalendarSets);
                    string JsonStaffGroupData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffListOfGroup);
                    string JsonScheduleData = Newtonsoft.Json.JsonConvert.SerializeObject(AppointmentListsGroup);
                    string JsonDisplaySettingDataForGroup = Newtonsoft.Json.JsonConvert.SerializeObject(DisplaySettingData);
                    JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "SetCurrentDisplayData", JsonDisplaySettingDataForGroup, CurrentTimeZone, JsonScheduleData);
                    JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "renderDriverScheduleForGroup", calendarJson, JsonStaffGroupData, JsonScheduleData, DotNetObjectReference.Create(this), CurrentTimeZone, CommonConstants.currentScheduleview, LangDictionary, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                    JsonScheduleTypeData, JsonStaffData, JsonScheduleLabelTypeData, JsonVacationTypeData);

                }
                else
                {
                    workHourCustomGroups = StaffScheduleService.GetWorkHoursCustomGroup(timeRangeNow[2], timeRangeNow[1], SelectedGroupScheduleInfo[ActiveTabIndex].GroupId).Result;
                    AppointmentListsCustomGroup = ConvertTimeToUtc(StaffScheduleService.GetAppointmentListsCustomGroup(new ClaimModel().SyainCdSeq, SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, new ClaimModel().TenantID, timeRangeNow[0], timeRangeNow[1], planTypes, appointmentLabels).Result, true, DisplaySettingData.TimeZone.Id);
                    StaffListOfCustomGroup = SyainService.GetByCustomGroup(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, timeRangeNow[5], workHourCustomGroups);
                    string calendarJson = Newtonsoft.Json.JsonConvert.SerializeObject(CalendarSets);
                    string JsonStaffGroupData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffListOfCustomGroup);
                    string JsonScheduleData = Newtonsoft.Json.JsonConvert.SerializeObject(AppointmentListsCustomGroup);
                    string JsonDisplaySettingDataForGroup = Newtonsoft.Json.JsonConvert.SerializeObject(DisplaySettingData);
                    JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "SetCurrentDisplayData", JsonDisplaySettingDataForGroup, CurrentTimeZone, JsonScheduleData);
                    JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "renderDriverScheduleForGroup", calendarJson, JsonStaffGroupData, JsonScheduleData, DotNetObjectReference.Create(this), CurrentTimeZone, CommonConstants.currentScheduleview, LangDictionary, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                    JsonScheduleTypeData, JsonStaffData, JsonScheduleLabelTypeData, JsonVacationTypeData);
                }
            }
            isLoading = false;
            InvokeAsync(StateHasChanged).Wait();
        });
    }

    [JSInvokable]
    public void ShowFeedbackBookingSchedule(string data, bool canFeedback)
    {
        IsShowFeedbackBookingSchedule = true;
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<AppointmentList>(data);
        CurrentScheduleData = schedule;
        AppointmentDetailFB = StaffGroupDataService.GetBookedScheduleFeedback(schedule).Result;
        AppointmentDetailFB.StartDateDisplay = schedule.StartDateDisplay;
        AppointmentDetailFB.EndDateDisplay = schedule.EndDateDisplay;
        AppointmentDetailFB.CanFeedback = canFeedback;

        if (AppointmentDetailFB.IsAccept == true)
        {
            AcceptSchedule = true;
            NotAcecptSchedule = false;
            IsDeciding = false;
        }
        if (AppointmentDetailFB.IsRefuse == true)
        {
            NotAcecptSchedule = true;
            AcceptSchedule = false;
            IsDeciding = false;
        }
        if (AppointmentDetailFB.IsPending == true)
        {
            NotAcecptSchedule = false;
            AcceptSchedule = false;
            IsDeciding = true;
        }
        displayRecurrenceRule = GetDisPlayRecurrenceRule(CurrentScheduleData.RecurrenceRule, Lang, formatRecur);
        StateHasChanged();
    }

    [JSInvokable]
    public void ShowAppointmentPopup(string data)
    {
        IsShowDetailAppointmentPlan = true;
        AppointmentPlanDetail = Newtonsoft.Json.JsonConvert.DeserializeObject<AppointmentList>(data); ;
        if (AppointmentPlanDetail.DisplayType == 1)
        {
            label = Lang["leavetypetext2"];

            ScheduleLabel = "schedule-label-red";

        }
        StateHasChanged();
    }

    [JSInvokable]
    public void ShowWorkingStatusPopup(string data)
    {
        IsShowWorkingStatusPopup = true;
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<AppointmentList>(data);
        LeaveDetail = schedule;

        StateHasChanged();
    }
    [JSInvokable]
    public void ShowRefuseStatusPopup(string data)
    {
        IsShowRefuseStatusPopup = true;
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<AppointmentList>(data);
        RefuseLeaveDetail = schedule;

        StateHasChanged();
    }

    [JSInvokable]
    public void ShowJourneyPopup(String data)
    {
        IsShowJourneyPopup = true;
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<AppointmentList>(data);
        schedule.HaiinInfo.UkeCd = schedule.HaiinInfo.UkeCd;
        JourneyDetail = schedule;

        StateHasChanged();

    }

    public void GenerateSelectedGroup(List<GroupScheduleInfo> selectedGroupScheduleInfo)
    {
        foreach (var item in selectedGroupScheduleInfo)
        {
            if (!SelectedGroupScheduleDict.ContainsKey(item.CompanyId))
            {
                Dictionary<int, bool> CurrentUserDict = new Dictionary<int, bool>();
                CurrentUserDict.Add(item.GroupId, true);
                SelectedGroupScheduleDict.Add(item.CompanyId, CurrentUserDict);
            }
            SelectedGroupScheduleDict[item.CompanyId][item.GroupId] = true;
        }
    }

    public void GenerateSelectedCalendar(List<CalendarSetModel> calendarInfo)
    {
        foreach (var item in calendarInfo)
        {
            if (!SelectedCalendarDict.ContainsKey(item.CalendarSeq))
            {
                SelectedCalendarDict.Add(item.CalendarSeq, true);
            }
        }
    }

    [JSInvokable]
    public List<string> GetRangeSheduleDataGroup(string startDate, string endDate)
    {
        isLoading = true;
        StateHasChanged();
        var Dates = GetDate(startDate, endDate);
        var fromDate = Dates[0];
        var toDate = Dates[1];
        var from4WDate = GetPrevious28Date(toDate);

        List<string> result = new List<string>();
        string JsonDisplaySettingDataForGroup = Newtonsoft.Json.JsonConvert.SerializeObject(DisplaySettingData);
        TZConvert.TryWindowsToIana(DisplaySettingData.TimeZone.Id, out string CurrentTimeZone);
        if (string.IsNullOrEmpty(CurrentTimeZone))
        {
            CurrentTimeZone = DisplaySettingData.TimeZone.Id;
        }
        List<AppointmentList> ScheduleDataModelRange = new List<AppointmentList>();
        List<StaffModel> StaffModels = new List<StaffModel>();
        if (SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId != 0)
        {
            var workHourGroups = StaffScheduleService.GetWorkHoursGroup(from4WDate, toDate, SelectedGroupScheduleInfo[ActiveTabIndex].GroupId).Result;
            StaffModels = SyainService.GetByGroup(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, toDate, workHourGroups);
            ScheduleDataModelRange = ConvertTimeToUtc(StaffScheduleService.GetAppointmentListsGroup(new ClaimModel().SyainCdSeq, SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, new ClaimModel().TenantID, fromDate, toDate, planTypes, appointmentLabels).Result, true, DisplaySettingData.TimeZone.Id);
        }
        else
        {
            var workHourCustomGroups = StaffScheduleService.GetWorkHoursCustomGroup(from4WDate, toDate, SelectedGroupScheduleInfo[ActiveTabIndex].GroupId).Result;
            StaffModels = SyainService.GetByCustomGroup(SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, toDate, workHourCustomGroups);
            ScheduleDataModelRange = ConvertTimeToUtc(StaffScheduleService.GetAppointmentListsCustomGroup(new ClaimModel().SyainCdSeq, SelectedGroupScheduleInfo[ActiveTabIndex].GroupId, new ClaimModel().TenantID, fromDate, toDate, planTypes, appointmentLabels).Result, true, DisplaySettingData.TimeZone.Id);
        }
        ScheduleDataModelRange = LoadScheduleBaseOnCalendarCheck(ScheduleDataModelRange, SelectedCalendarDict);
        ScheduleDataModelRange = LoadScheduleBaseOnDateCommentCheck(ScheduleDataModelRange, SelectedBirthdayCommentDict);
        string JsonScheduleData = Newtonsoft.Json.JsonConvert.SerializeObject(ScheduleDataModelRange);
        string StaffData = Newtonsoft.Json.JsonConvert.SerializeObject(StaffModels);

        JSRuntime.InvokeAsync<string>("loadLibraryScript", "js/dx.all.js", "SetCurrentDisplayData", JsonDisplaySettingDataForGroup, CurrentTimeZone, JsonScheduleData);
        result.Add(StaffData);
        result.Add(JsonScheduleData);
        isLoading = false;
        StateHasChanged();
        return result;
    }

    [JSInvokable]
    public List<string> GetRangeSheduleDataPersonal(string preDate)
    {
        isLoading = true;
        StateHasChanged();
        var Dates = GetTimeRange(preDate);
        var fromDate = string.Format("{0}{1}", new object[] { Dates[6], "01" });
        var toDate = Dates[7];

        List<string> result = new List<string>();
        AppointmentLists = ConvertTimeToUtc(StaffScheduleService.GetAppointmentLists(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, fromDate, toDate, planTypes, appointmentLabels).Result, false, DisplaySettingData.TimeZone.Id);
        AppointmentLists = LoadScheduleBaseOnCalendarCheck(AppointmentLists, SelectedCalendarDict);
        AppointmentLists = LoadScheduleBaseOnDateCommentCheck(AppointmentLists, SelectedBirthdayCommentDict);
        var scheduledata = Newtonsoft.Json.JsonConvert.SerializeObject(AppointmentLists);

        result.Add(scheduledata);
        isLoading = false;
        StateHasChanged();
        return result;
    }

    public List<string> GetTimeRangeNow()
    {
        var result = new List<string>();

        var date = DateTime.Now;

        result.Add(date.AddDays(-5).ToString().Substring(0, 10).Replace("/", string.Empty));
        result.Add(date.AddDays(+5).ToString().Substring(0, 10).Replace("/", string.Empty));
        result.Add(date.AddDays(-27).ToString().Substring(0, 10).Replace("/", string.Empty));

        var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        result.Add(firstDayOfMonth.ToString().Substring(0, 10).Replace("/", string.Empty));
        result.Add(lastDayOfMonth.ToString().Substring(0, 10).Replace("/", string.Empty));

        result.Add(date.AddDays(+2).ToString().Substring(0, 10).Replace("/", string.Empty));

        return result;
    }

    public List<string> GetDate(string startDate, string endDate)
    {
        List<string> Dates = new List<string>();

        var smonth = GetMonth(startDate.Substring(4, 3));
        var sdate = $"{ Int32.Parse(startDate.Substring(8, 2)):00}";
        var syear = startDate.Substring(11, 4);

        var emonth = GetMonth(endDate.Substring(4, 3));
        var edate = $"{ Int32.Parse(endDate.Substring(8, 2)):00}";
        var eyear = endDate.Substring(11, 4);

        var startDateSTemp = string.Format("{0}{1}{2}", new object[] { syear, smonth, sdate });
        var startDateDateTime = DateTime.ParseExact(startDateSTemp + "0000", "yyyyMMddHHmm", null);

        var endDateSTemp = string.Format("{0}{1}{2}", new object[] { eyear, emonth, edate });
        var endDateDateTime = DateTime.ParseExact(endDateSTemp + "0000", "yyyyMMddHHmm", null);

        var startDateString = startDateDateTime.ToString("yyyyMMdd");
        var endDateString = endDateDateTime.ToString("yyyyMMdd");

        Dates.Add(startDateString);
        Dates.Add(endDateString);

        return Dates;
    }

    public string GetPrevious28Date(string endDate)
    {
        string Date = string.Empty;

        var DateTemp = DateTime.ParseExact(endDate, "yyyyMMdd", null);

        Date = DateTemp.AddDays(-27).ToString("yyyyMMdd");

        return Date;
    }

    public List<string> GetTimeRange(string preDate)
    {
        List<string> Dates = new List<string>();
        var month = GetMonth(preDate.Substring(4, 3));
        var date = $"{ Int32.Parse(preDate.Substring(8, 2)):00}";
        var scheduleFrom = string.Empty;
        var scheduleTo = string.Empty;
        var scheduleFrom4Week = string.Empty;
        var from15Day = string.Empty;
        var to15Day = string.Empty;

        var year = preDate.Substring(11, 4);

        var dateString = string.Format("{0}{1}{2}", new object[] { year, month, date });

        var dateTimeTemp = DateTime.ParseExact(dateString + "0000", "yyyyMMddHHmm", null);
        var dateTimeMonthTemp = DateTime.ParseExact(year + month, "yyyyMM", null);

        var fromDateString = dateTimeTemp.AddDays(-7);
        var toDateString = dateTimeTemp.AddDays(+7);
        var from4WeekString = dateTimeTemp.AddDays(-27);
        var from15DayS = dateTimeTemp.AddDays(-15);
        var to15DayS = dateTimeTemp.AddDays(+15);
        var sMonthDate = dateTimeMonthTemp.ToString("yyyyMM");
        var eMonthDate = dateTimeMonthTemp.AddDays(+31).ToString("yyyyMMdd");

        var dateTimeTempString = dateTimeTemp.ToString().Substring(0, 10).Replace("/", string.Empty);

        scheduleFrom = fromDateString.ToString().Substring(0, 10).Replace("/", string.Empty);
        scheduleTo = toDateString.ToString().Substring(0, 10).Replace("/", string.Empty);
        scheduleFrom4Week = from4WeekString.ToString().Substring(0, 10).Replace("/", string.Empty);
        from15Day = from15DayS.ToString().Substring(0, 10).Replace("/", string.Empty);
        to15Day = to15DayS.ToString().Substring(0, 10).Replace("/", string.Empty);
        Dates.Add(scheduleFrom);
        Dates.Add(scheduleTo);
        Dates.Add(scheduleFrom4Week);
        Dates.Add(from15Day);
        Dates.Add(to15Day);
        Dates.Add(dateTimeTempString);
        Dates.Add(sMonthDate);
        Dates.Add(eMonthDate);
        Dates.Add(dateString);

        return Dates;
    }

    private void DecideBookingSchedule(bool value, string type)
    {
        if (type.Equals("accept"))
        {
            AcceptSchedule = value;
            if (value)
            {
                NotAcecptSchedule = false;
            }
            IsDeciding = false;
        }
        if (type.Equals("notaccept"))
        {
            NotAcecptSchedule = value;
            if (value)
            {
                AcceptSchedule = false;
            }
            IsDeciding = false;
        }
        if (type.Equals("deciding"))
        {
            IsDeciding = value;
            if (value)
            {
                AcceptSchedule = NotAcecptSchedule = false;
            }
        }
        StateHasChanged();
    }

    private async Task SendDecide()
    {
        var valueToUpdate = AcceptSchedule == true ? 1 : NotAcecptSchedule == true ? 2 : 3;

        if (AcceptSchedule == false && NotAcecptSchedule == false && IsDeciding == false)
        {
            IsNotDecide = true;
            IsShowFeedbackBookingSchedule = false;
        }
        else
        {
            var result = StaffGroupDataService.SubmitScheduleFeedback(CurrentScheduleData, valueToUpdate).Result;
            IsShowFeedbackBookingSchedule = false;
        }
        StateHasChanged();
    }

    private string GetMonth(string monthInChar)
    {
        var result = string.Empty;
        switch (monthInChar)
        {
            case "Jan":
                result = "01";
                break;
            case "Feb":
                result = "02";
                break;
            case "Mar":
                result = "03";
                break;
            case "Apr":
                result = "04";
                break;
            case "May":
                result = "05";
                break;
            case "Jun":
                result = "06";
                break;
            case "Jul":
                result = "07";
                break;
            case "Aug":
                result = "08";
                break;
            case "Sep":
                result = "09";
                break;
            case "Oct":
                result = "10";
                break;
            case "Nov":
                result = "11";
                break;
            case "Dec":
                result = "12";
                break;
        }
        return result;
    }

    private List<AppointmentList> ConvertTimeToUtc(List<AppointmentList> appointmentLists, bool isGroupData, string timezoneId)
    {
        foreach (var item in appointmentLists)
        {
            item.StartDate = TimeZoneInfo.ConvertTimeToUtc(item.StartDateInDatetimeType).ToString("yyyy-MM-ddTHH:mm:ssZ");
            item.EndDate = TimeZoneInfo.ConvertTimeToUtc(item.EndDateInDatetimeType).ToString("yyyy-MM-ddTHH:mm:ssZ");
            if (isGroupData)
            {
                TimeZoneInfo infotime = TimeZoneInfo.FindSystemTimeZoneById(timezoneId);
                item.StartDateDisplay = TimeZoneInfo.ConvertTimeFromUtc(item.StartDateDisplay.ToUniversalTime(), infotime);
                item.EndDateDisplay = TimeZoneInfo.ConvertTimeFromUtc(item.EndDateDisplay.ToUniversalTime(), infotime);
            }
            else
            {
                TimeZoneInfo infotime = TimeZoneInfo.FindSystemTimeZoneById(timezoneId);
                item.StartDateDisplay = TimeZoneInfo.ConvertTimeFromUtc(item.StartDateInDatetimeType.ToUniversalTime(), infotime);
                item.EndDateDisplay = TimeZoneInfo.ConvertTimeFromUtc(item.EndDateInDatetimeType.ToUniversalTime(), infotime);
            }
        }

        return appointmentLists;
    }

    private StaffScheduleData ConvertUtcToLocalTime(StaffScheduleData appointmentList)
    {
        appointmentList.StartDate = appointmentList.StartDate.ToLocalTime();
        appointmentList.EndDate = appointmentList.EndDate.ToLocalTime();

        return appointmentList;
    }

    [JSInvokable]
    public async void SaveAppointment(string data)
    {
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<StaffScheduleData>(data);

        schedule = ConvertUtcToLocalTime(schedule);


        if (schedule.DisplayType == 1 && schedule.IsSendNoti)
        {
            NotificationResult NotificationResult = await NotificationTemplateService.SendApplication(new ClaimModel().TenantID, NotificationSendMethod.Both, CodeKbnForNotification.Application, schedule.StaffIdToSend, schedule.StartDate, CreateReplaceDictionary(schedule));
            IsSendMailError = NotificationResult.SendResultKbn == NotificationResultClassification.Failed;
        }
        var save = StaffScheduleService.SaveStaffSchedule(schedule).Result;
        ChangeTab();
    }

    [JSInvokable]
    public async void UpdateAppointment(string data)
    {
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<StaffScheduleData>(data);

        schedule.Staffs.RemoveAll(x => x == new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);


        schedule = ConvertUtcToLocalTime(schedule);

        if (schedule.DisplayType == 1 && schedule.IsSendNoti)
        {
            NotificationResult NotificationResult = await NotificationTemplateService.SendApplication(new ClaimModel().TenantID, NotificationSendMethod.Both, CodeKbnForNotification.Application, schedule.StaffIdToSend, schedule.StartDate, CreateReplaceDictionary(schedule));
            IsSendMailError = NotificationResult.SendResultKbn == NotificationResultClassification.Failed;
        }
        var save = StaffScheduleService.UpdateStaffSchedule(schedule).Result;
        ChangeTab();
    }
    [JSInvokable]
    public void DeleteAppointment(string data)
    {
        var schedule = Newtonsoft.Json.JsonConvert.DeserializeObject<AppointmentList>(data);

        var save = StaffScheduleService.DeleteStaffSchedule(schedule).Result;
        ChangeTab();
    }

    [JSInvokable]
    public void UpdateDateComment(string date, string comments)
    {
        if (date.Length > 8)
        {
            date = GetTimeRange(date)[5];
        }
        datecommentpopup = date; ;
        commentdate = comments;

        PopupCommentdate = true;

        StateHasChanged();
    }

    public void GenerateGroupScheduleDictionary(List<CompanyScheduleInfo> ScheduleInfo)
    {
        foreach (CompanyScheduleInfo CompanySchedule in ScheduleInfo)
        {
            Dictionary<int, bool> CurrentUserDict;
            if (SelectedGroupScheduleDict.ContainsKey(CompanySchedule.CompanyId))
            {
                CurrentUserDict = SelectedGroupScheduleDict[CompanySchedule.CompanyId];
            }
            else
            {
                CurrentUserDict = new Dictionary<int, bool>();
                SelectedGroupScheduleDict.Add(CompanySchedule.CompanyId, CurrentUserDict);
            }
            foreach (GroupScheduleInfo GroupInfo in CompanySchedule.GroupInfo)
            {
                if (!CurrentUserDict.ContainsKey(GroupInfo.GroupId))
                {
                    CurrentUserDict.Add(GroupInfo.GroupId, false);
                }
            }
        }
    }

    public async void SaveTab(List<GroupScheduleInfo> groupSchedules)
    {
        keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForStaffSchedule(groupSchedules).Result;
        FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormName, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
        keyValueFilterPairsCompanyId = GenerateFilterValueDictionaryService.GenerateForStaffScheduleCompanyId(groupSchedules).Result;
        FilterConditionService.SaveFilterCondtion(keyValueFilterPairsCompanyId, FormNameCompanyId, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
    }

    public async void SaveCalendar(Dictionary<int, bool> calendarSeletedDict)
    {
        List<CalendarValueModel> calendarValueToSaves = new List<CalendarValueModel>();
        foreach (var item in calendarSeletedDict)
        {
            calendarValueToSaves.Add(new CalendarValueModel()
            {
                CalendarSeq = item.Key,
                Value = item.Value
            });
        }
        keyValueFilterPairsCalendar = GenerateFilterValueDictionaryService.GenerateForStaffScheduleCalendar(calendarValueToSaves).Result;
        FilterConditionService.SaveFilterCondtion(keyValueFilterPairsCalendar, FormNameCalendar, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
    }

    public async void SaveDateComment(Dictionary<int, bool> dateCommnetSeletedDict)
    {
        List<DateCommentCheckValueModel> dateCommentValueToSaves = new List<DateCommentCheckValueModel>();
        foreach (var item in dateCommnetSeletedDict)
        {
            dateCommentValueToSaves.Add(new DateCommentCheckValueModel()
            {
                Id = item.Key,
                Value = item.Value
            });
        }
        keyValueFilterPairsDateComment = GenerateFilterValueDictionaryService.GenerateForStaffScheduleDateComment(dateCommentValueToSaves).Result;
        FilterConditionService.SaveFilterCondtion(keyValueFilterPairsDateComment, FormNameDateComment, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
    }

    public async void ClearFilter()
    {
        FilterConditionService.DeleteFilterCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 0, FormName);
        FilterConditionService.DeleteFilterCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 0, FormNameCompanyId);
        FilterConditionService.DeleteFilterCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 0, FormNameCalendar);
        FilterConditionService.DeleteFilterCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 0, FormNameDateComment);
    }

    public string GetColorByScheduleType(int ScheduleType)
    {
        switch (ScheduleType)
        {
            case 1:
                return "";
            case 2:
                return "#bbd806";
            case 3:
                return "#ff9747";
            default:
                return "";
        }
    }

    private void ToggleGroupSChedule()
    {
        IsShowGroupSchedule = !IsShowGroupSchedule;
        StateHasChanged();
        JSRuntime.InvokeVoidAsync("repaintSchedule");
        JSRuntime.InvokeVoidAsync("repaintScheduleGroup");
    }

    private void CheckCalendar(bool value, CalendarSetModel calendarSet)
    {
        SelectedCalendarDict[calendarSet.CalendarSeq] = value;
        SaveCalendar(SelectedCalendarDict);
        ChangeTab();
    }

    private void CheckDateCommnet(bool value, int type)
    {
        SelectedBirthdayCommentDict[type] = value;
        SaveDateComment(SelectedBirthdayCommentDict);

        ChangeTab();
    }


    private void CheckGroupSchedule(bool value, GroupScheduleInfo GroupSchedule)
    {
        SelectedGroupScheduleDict[GroupSchedule.CompanyId][GroupSchedule.GroupId] = value;
        if (value)
        {
            SelectedGroupScheduleInfo.Add(new GroupScheduleInfo()
            {
                CompanyId = GroupSchedule.CompanyId,
                GroupId = GroupSchedule.GroupId,
                GroupName = GroupSchedule.GroupName
            });
        }
        else
        {
            int SelectedCompanyId = SelectedGroupScheduleInfo[ActiveTabIndex].CompanyId;
            int SelectedGroupId = SelectedGroupScheduleInfo[ActiveTabIndex].GroupId;
            SelectedGroupScheduleInfo.RemoveAll(g => g.CompanyId == GroupSchedule.CompanyId && g.GroupId == GroupSchedule.GroupId);
            int NewTabIndex = SelectedGroupScheduleInfo.FindIndex(g => g.CompanyId == SelectedCompanyId && g.GroupId == SelectedGroupId);
            if (NewTabIndex < 0)
            {
                ActiveTabIndex = 0;
            }
            else
            {
                isClickByChangeTab = false;
                ActiveTabIndex = NewTabIndex;
                ChangeState();
            }
        }
        ClearFilter();
        SaveTab(SelectedGroupScheduleInfo);
        GenerateSelectedGroup(SelectedGroupScheduleInfo);
        InvokeAsync(StateHasChanged);
    }

    private async void ChangeState()
    {
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
        });
    }

    private void EditGroup(GroupScheduleInfo GroupSchedule)
    {
        PopupGroupScheduleAdd = true;
        customGroupScheduleForm = new CustomGroupScheduleForm(GroupSchedule, StaffList);
        InvokeAsync(StateHasChanged);
    }

    private void EditCalendar(CalendarSetModel calendar)
    {
        PopupCalendarAdd = true;
        CalendarSetModel = calendar;
        var edited = StaffScheduleService.SaveCalendarSet(CalendarSetModel, false).Result;

        InvokeAsync(StateHasChanged);
    }

    private List<AppointmentList> LoadScheduleBaseOnCalendarCheck(List<AppointmentList> appointments, Dictionary<int, bool> calendarChecks)
    {
        List<AppointmentList> unloadAppointments = new List<AppointmentList>();
        foreach (var item in calendarChecks)
        {
            if (item.Value == false)
            {
                unloadAppointments = appointments.Where(x => x.DataType == 1 && x.YoteiInfo != null && x.YoteiInfo.CalendarSeq == item.Key).ToList();
                foreach (var removeItem in unloadAppointments)
                {
                    appointments.Remove(removeItem);
                }
            }
        }

        return appointments;
    }

    private List<AppointmentList> LoadScheduleBaseOnDateCommentCheck(List<AppointmentList> appointments, Dictionary<int, bool> dateCommentChecks)
    {
        List<AppointmentList> unloadAppointments = new List<AppointmentList>();
        foreach (var item in dateCommentChecks)
        {
            if (item.Value == false)
            {
                if (item.Key == 1)
                {
                    unloadAppointments = appointments.Where(x => x.DataType == 5).ToList();
                    foreach (var removeItem in unloadAppointments)
                    {
                        appointments.Remove(removeItem);
                    }
                }
                else if (item.Key == 2)
                {
                    unloadAppointments = appointments.Where(x => x.DataType == 4 && x.BirthDayInfo != null && (x.BirthDayInfo.SyainSyokumuKbn == 1 || x.BirthDayInfo.SyainSyokumuKbn == 2)).ToList();
                    foreach (var removeItem in unloadAppointments)
                    {
                        appointments.Remove(removeItem);
                    }
                }
                else if (item.Key == 3)
                {
                    unloadAppointments = appointments.Where(x => x.DataType == 4 && x.BirthDayInfo != null && (x.BirthDayInfo.SyainSyokumuKbn == 3 || x.BirthDayInfo.SyainSyokumuKbn == 4)).ToList();
                    foreach (var removeItem in unloadAppointments)
                    {
                        appointments.Remove(removeItem);
                    }
                }
                else if (item.Key == 4)
                {
                    unloadAppointments = appointments.Where(x => x.DataType == 4 && x.BirthDayInfo != null && (x.BirthDayInfo.SyainSyokumuKbn == 5)).ToList();
                    foreach (var removeItem in unloadAppointments)
                    {
                        appointments.Remove(removeItem);
                    }
                }

            }
        }

        return appointments;
    }

    private void DisplaySettingOpen()
    {
        PopupDisplaySetting = true;
        DisplaySettingDataForm = new LoadDisplaySetting(DisplaySettingData);
        InvokeAsync(StateHasChanged);
    }

    private void ShowPopUpToDelete(GroupScheduleInfo GroupInfo)
    {
        PopupGroupScheduleDelete = true;
        GroupToBeDelete = GroupInfo;
        InvokeAsync(StateHasChanged);
    }

    private void ShowPopUpToDeleteCalendar(CalendarSetModel calendar)
    {
        PopupDeleteCalendar = true;
        DeleteCalendarModel = calendar;
        InvokeAsync(StateHasChanged);
    }

    private async void DeleteCalendar()
    {
        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            bool IsDeleteSuccessfully = StaffScheduleService.SaveCalendarSet(DeleteCalendarModel, true).Result;
            if (IsDeleteSuccessfully)
            {
                SelectedCalendarDict.Remove(DeleteCalendarModel.CalendarSeq);
                CalendarSets = StaffScheduleService.GetCalendarSets(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID).Result;
            }
            else
            {
                ShowErrorPopup = true;
            }
            isLoading = false;
            PopupDeleteCalendar = false;
            ClearFilter();
            SaveCalendar(SelectedCalendarDict);
            InvokeAsync(StateHasChanged);
        });
    }

    private async void DeleteGroup()
    {
        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            bool IsDeleteSuccessfully = ScheduleCustomGroupService.Delete(GroupToBeDelete.GroupId).Result;
            if (IsDeleteSuccessfully)
            {
                ResetCustomGroupSchedule();
                CompaniesScheduleInfo[CompaniesScheduleInfo.Count() - 1].GroupInfo.RemoveAll(g => g.GroupId == GroupToBeDelete.GroupId);
                if (SelectedGroupScheduleDict[0][GroupToBeDelete.GroupId])
                {
                    CheckGroupSchedule(false, GroupToBeDelete);
                }
            }
            else
            {
                ShowErrorPopup = true;
            }
            isLoading = false;
            PopupGroupScheduleDelete = false;
            ClearFilter();
            SaveTab(SelectedGroupScheduleInfo);
            GenerateSelectedGroup(SelectedGroupScheduleInfo);
            InvokeAsync(StateHasChanged);
        });
    }

    private void AddCustomGroup()
    {
        PopupGroupScheduleAdd = true;
        customGroupScheduleForm = new CustomGroupScheduleForm();
        //InvokeAsync(StateHasChanged);
        StateHasChanged();
    }

    private void AddCalendar()
    {
        PopupCalendarAdd = true;
        CalendarSetModel = new CalendarSetModel();
        CalendarSetModel.CompanyCdSeq = new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID;
        CalendarSetModel.CompanyNm = CompaniesScheduleInfo.Where(x => x.CompanyId == new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID).FirstOrDefault()?.CompanyName;
        InvokeAsync(StateHasChanged);
    }

    private void ChangeGroupName(string NewName)
    {
        customGroupScheduleForm.GroupName = NewName.Trim();
        var currentGrcs = SelectedGroupScheduleInfo.Where(x => x.GroupId == customGroupScheduleForm.GroupSeq).FirstOrDefault();
        if (currentGrcs != null)
        {
            currentGrcs.GroupName = customGroupScheduleForm.GroupName;
        }
        ClearFilter();
        SaveTab(SelectedGroupScheduleInfo);
        InvokeAsync(StateHasChanged);
    }

    private void ChangeCalendarName(string NewName)
    {
        CalendarSetModel.CalendarName = NewName.Trim();
        InvokeAsync(StateHasChanged);
    }

    private void ChangeMemberList(IEnumerable<StaffsData> NewMemberList)
    {
        customGroupScheduleForm.StaffList = (NewMemberList == null ? new List<StaffsData>() : NewMemberList.ToList());
        InvokeAsync(StateHasChanged);
    }

    private async void SaveGroupSchedule()
    {
        if (string.IsNullOrEmpty(customGroupScheduleForm.GroupName) || string.IsNullOrEmpty(customGroupScheduleForm.GroupName.Trim()) || customGroupScheduleForm.StaffList.Count() == 0)
        {
            return;
        }

        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            bool IsUpdateSuccessfully = ScheduleCustomGroupService.Update(customGroupScheduleForm).Result;
            if (IsUpdateSuccessfully)
            {
                ResetCustomGroupSchedule();
            }
            else
            {
                ShowErrorPopup = true;
            }
            isLoading = false;
            PopupGroupScheduleAdd = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private async void SaveCalendar()
    {
        if (string.IsNullOrEmpty(CalendarSetModel.CalendarName) || string.IsNullOrEmpty(CalendarSetModel.CalendarName.Trim()))
        {
            return;
        }

        isLoading = true;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            bool IsUpdateSuccessfully = StaffScheduleService.SaveCalendarSet(CalendarSetModel, false).Result;
            if (IsUpdateSuccessfully)
            {
                CalendarSets = StaffScheduleService.GetCalendarSets(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID).Result;
                SelectedCalendarDict = new Dictionary<int, bool>();
                GenerateSelectedCalendar(CalendarSets);
                SaveCalendar(SelectedCalendarDict);
            }
            else
            {
                ShowErrorPopup = true;
            }
            isLoading = false;
            PopupCalendarAdd = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private async void SaveDisplaySetting()
    {
        isLoading = true;
        bool IsUpdateSuccessfully = false;
        await Task.Run(() =>
        {
            InvokeAsync(StateHasChanged).Wait();
            IsUpdateSuccessfully = DisplaySettingService.Save(DisplaySettingDataForm).Result;
            if (IsUpdateSuccessfully)
            {
                DisplaySettingData = new LoadDisplaySetting(DisplaySettingDataForm);
            }
            else
            {
                ShowErrorPopup = true;
            }
            isLoading = false;
            PopupDisplaySetting = false;
            InvokeAsync(StateHasChanged);
        });
        if (IsUpdateSuccessfully)
        {
            ChangeTab();
        }
    }

    private void ResetCustomGroupSchedule()
    {
        List<GroupScheduleInfo> CustomGroupsInfo = ScheduleCustomGroupService.Get(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
        CompaniesScheduleInfo[CompaniesScheduleInfo.Count() - 1].GroupInfo = CustomGroupsInfo;
        GenerateGroupScheduleDictionary(CompaniesScheduleInfo);
    }

    private Dictionary<string, string> CreateReplaceDictionary(StaffScheduleData data)
    {
        Dictionary<string, string> Result = new Dictionary<string, string>();
        Result.Add("{Applicant}", new HassyaAllrightCloud.Domain.Dto.ClaimModel().Name);
        LoadLeaveDayType loadLeaveDayType = LeaveDayTypeList.Where(item => item.TypeKbnSeq == data.DisplayType).FirstOrDefault();
        if (loadLeaveDayType != null)
        {
            Result.Add("{LeaveType}", loadLeaveDayType.TypeName);
        }
        Result.Add("{Title}", data.Text);
        Result.Add("{StartDate}", data.StartDate.ToString(Lang["FormatStringDate"]));
        Result.Add("{StartTime}", data.StartDate.ToString(Lang["FormatStringHour"]));
        Result.Add("{EndDate}", data.EndDate.ToString(Lang["FormatStringDate"]));
        Result.Add("{EndTime}", data.EndDate.ToString(Lang["FormatStringHour"]));
        Result.Add("{Description}", data.Description);
        return Result;
    }

    public string GetDisPlayRecurrenceRule(string currentRule, IStringLocalizer<StaffSchedule> Lang, string formatDate)
    {

        string result = "";
        string[] arrType = currentRule.Split(";");
        string[] arrDetail0;
        string[] arrDetail1;
        string[] arrDetail2;
        string[] arrDetail3;
        string[] arrDetail4;
        string[] arrDetailDate;
        string dValue = "";
        if (!string.IsNullOrWhiteSpace(currentRule))
        {
            if (arrType.Length > 0)
            {
                arrDetail0 = arrType[0].Split("=");
                if (arrDetail0.Length > 0)
                {
                    result = Lang["RecurrenceAfter"] + ": ";
                    switch (arrDetail0[1])
                    {
                        case "HOURLY":
                            arrDetail1 = arrType[1].Split("=");
                            if (arrDetail1[1] == "1")
                            {
                                result += Lang["RecurrenceRepeatHourly"] + " ";
                            }
                            else
                            {
                                result += arrDetail1[1] + Lang["TimeTimes"] + " ";
                            }
                            if (arrType.Length > 2)
                            {
                                arrDetail2 = arrType[1].Split("=");
                                if (arrDetail2[0].Equals("UNTIL"))
                                {
                                    result += (DateDisplayValue(arrDetail2[1]) != null ? (DateDisplayValue(arrDetail2[1].Substring(0, 8)).Value.ToString(formatDate) + Lang["To"]) : "");
                                }
                                else
                                {
                                    result += arrDetail2[1] + Lang["Times"];
                                }
                            }
                            break;
                        case "DAILY":
                            if (arrType.Length == 1)
                            {
                                result += Lang["RecurrenceRepeatDaily"];
                            }
                            if (arrType.Length > 1)
                            {
                                arrDetail1 = arrType[1].Split("=");
                                switch (arrDetail1[0])
                                {
                                    case "UNTIL":
                                        result += (DateDisplayValue(arrDetail1[1].Substring(0, 8)) != null ? (DateDisplayValue(arrDetail1[1].Substring(0, 8)).Value.ToString(formatDate) + " " + Lang["To"]) : "");
                                        break;
                                    case "COUNT":
                                        result += arrDetail1[1] + " " + Lang["Times"];
                                        break;
                                    default:
                                        if (arrDetail1[1] == "1")
                                        {
                                            result += Lang["RecurrenceRepeatDaily"] + " ";
                                        }
                                        else
                                        {
                                            result += arrDetail1[1] + Lang["DayTimes"] + " ";
                                        }
                                        break;
                                }
                            }
                            if (arrType.Length > 2)
                            {
                                arrDetail2 = arrType[1].Split("=");
                                if (arrDetail2[0].Equals("UNTIL"))
                                {
                                    result += (DateDisplayValue(arrDetail2[1].Substring(0, 8)) != null ? (DateDisplayValue(arrDetail2[1].Substring(0, 8)).Value.ToString(formatDate) + " " + Lang["To"]) : "");
                                }
                                else
                                {
                                    result += arrDetail2[1] + " " + Lang["Times"];
                                }
                            }
                            break;
                        case "WEEKLY":
                            if (arrType.Length == 1)
                            {
                                result += Lang["RecurrenceRepeatWeekly"];
                            }
                            if (arrType.Length > 1)
                            {
                                arrDetail1 = arrType[1].Split("=");
                                if (arrDetail1[1].Length > 0)
                                {
                                    arrDetailDate = arrDetail1[1].Split(",");
                                    for (int j = 0; j < arrDetailDate.Length; j++)
                                    {
                                        switch (arrDetailDate[j])
                                        {
                                            case "SU":
                                                dValue += Lang["Sunday"] + ", ";
                                                break;
                                            case "MO":
                                                dValue += Lang["Monday"] + ", ";
                                                break;
                                            case "TU":
                                                dValue += Lang["Tuesday"] + ", ";
                                                break;
                                            case "WE":
                                                dValue += Lang["wednesday"] + ", ";
                                                break;
                                            case "TH":
                                                dValue += Lang["Thursday"] + ", ";
                                                break;
                                            case "FR":
                                                dValue += Lang["Friday"] + ", ";
                                                break;
                                            default:
                                                dValue += Lang["Saturday"] + ", ";
                                                break;
                                        }
                                    }
                                    dValue = dValue.Substring(0, dValue.LastIndexOf(",") - 1);
                                }
                            }

                            if (arrType.Length > 2)
                            {
                                arrDetail2 = arrType[2].Split("=");
                                switch (arrDetail2[0])
                                {
                                    case "UNTIL":
                                        result += Lang["RecurrenceRepeatWeekly"] + " ";
                                        result += dValue + ", ";
                                        result += (DateDisplayValue(arrDetail2[1].Substring(0, 8)) != null ? (DateDisplayValue(arrDetail2[1].Substring(0, 8)).Value.ToString(formatDate) + " " + Lang["To"]) : "");
                                        break;
                                    case "COUNT":
                                        result += Lang["RecurrenceRepeatWeekly"] + " ";
                                        result += dValue + ", ";
                                        result += arrDetail2[1] + " " + Lang["Times"];
                                        break;
                                    default:
                                        if (arrDetail2[1] == "1")
                                        {
                                            result += Lang["RecurrenceRepeatWeekly"] + ", ";
                                        }
                                        else
                                        {
                                            result += arrDetail2[1] + Lang["WeekTimes"] + ", ";
                                        }
                                        result += dValue + " ";
                                        break;
                                }
                            }
                            else
                            {
                                result += Lang["RecurrenceRepeatWeekly"] + " ";
                                result += dValue + " ";
                            }
                            if (arrType.Length > 3)
                            {
                                arrDetail3 = arrType[3].Split("=");
                                if (arrDetail3[0].Equals("UNTIL"))
                                {
                                    result += (DateDisplayValue(arrDetail3[1].Substring(0, 8)) != null ? (DateDisplayValue(arrDetail3[1].Substring(0, 8)).Value.ToString(formatDate) + " " + Lang["To"]) : "");
                                }
                                else
                                {
                                    result += arrDetail3[1] + Lang["Times"];
                                }
                            }
                            break;
                        case "MONTHLY":
                            if (arrType.Length == 1)
                            {
                                result += Lang["RecurrenceRepeatMonthly"];
                            }
                            if (arrType.Length > 1)
                            {
                                arrDetail1 = arrType[1].Split("=");
                                dValue = arrDetail1[1] + Lang["DayText"];
                            }
                            if (arrType.Length > 2)
                            {
                                arrDetail2 = arrType[2].Split("=");
                                switch (arrDetail2[0])
                                {
                                    case "UNTIL":
                                        result += Lang["RecurrenceRepeatMonthly"] + " ";
                                        result += dValue + ", ";
                                        result += (DateDisplayValue(arrDetail2[1].Substring(0, 8)) != null ? (DateDisplayValue(arrDetail2[1].Substring(0, 8)).Value.ToString(formatDate) + " " + Lang["To"]) : "");
                                        break;
                                    case "COUNT":
                                        result += Lang["RecurrenceRepeatMonthly"] + " ";
                                        result += dValue + ", ";
                                        result += arrDetail2[1] + " " + Lang["Times"];
                                        break;
                                    default:
                                        if (arrDetail2[1] == "1")
                                        {
                                            result += Lang["RecurrenceRepeatMonthly"] + " ";
                                        }
                                        else
                                        {
                                            result += arrDetail2[1] + Lang["MonthTimes"];
                                        }
                                        result += dValue + " ";
                                        break;
                                }
                            }
                            else
                            {
                                result += Lang["RecurrenceRepeatMonthly"] + " ";
                                result += dValue + " ";
                            }
                            if (arrType.Length > 3)
                            {
                                arrDetail3 = arrType[3].Split("=");
                                if (arrDetail3[0].Equals("UNTIL"))
                                {
                                    result += (DateDisplayValue(arrDetail3[1].Substring(0, 8)) != null ? (DateDisplayValue(arrDetail3[1].Substring(0, 8)).Value.ToString(formatDate) + " " + Lang["To"]) : "");
                                }
                                else
                                {
                                    result += arrDetail3[1] + " " + Lang["Times"];
                                }
                            }
                            break;
                        default:
                            if (arrType.Length == 1)
                            {
                                result += Lang["RecurrenceRepeatYearly"];
                            }
                            if (arrType.Length > 1)
                            {
                                arrDetail1 = arrType[1].Split("=");
                                dValue = arrDetail1[1] + Lang["DayText"];
                            }
                            if (arrType.Length > 2)
                            {
                                arrDetail1 = arrType[1].Split("=");
                                arrDetail2 = arrType[2].Split("=");
                                dValue = arrDetail2[1] + Lang["MonthText"] + arrDetail1[1] + Lang["DayText"];
                            }
                            if (arrType.Length > 3)
                            {
                                arrDetail3 = arrType[3].Split("=");
                                switch (arrDetail3[0])
                                {
                                    case "UNTIL":
                                        result += Lang["RecurrenceRepeatYearly"] + " ";
                                        result += dValue + ", ";
                                        result += (DateDisplayValue(arrDetail3[1].Substring(0, 8)) != null ? (DateDisplayValue(arrDetail3[1].Substring(0, 8)).Value.ToString(formatDate) + " " + Lang["To"]) : "");
                                        break;
                                    case "COUNT":
                                        result += Lang["RecurrenceRepeatYearly"] + " ";
                                        result += dValue + ", ";
                                        result += arrDetail3[1] + " " + Lang["Times"];
                                        break;
                                    default:
                                        if (arrDetail3[1] == "1")
                                        {
                                            result += Lang["RecurrenceRepeatYearly"] + " ";
                                        }
                                        else
                                        {
                                            result += arrDetail3[1] + Lang["YearTimes"] + " ";
                                        }
                                        result += dValue + " ";
                                        break;
                                }
                            }
                            else
                            {
                                result += Lang["RecurrenceRepeatYearly"] + " ";
                                result += dValue + " ";
                            }
                            if (arrType.Length > 4)
                            {
                                arrDetail4 = arrType[4].Split("=");
                                if (arrDetail4[0].Equals("UNTIL"))
                                {
                                    result += (DateDisplayValue(arrDetail4[1].Substring(0, 8)) != null ? (DateDisplayValue(arrDetail4[1].Substring(0, 8)).Value.ToString(formatDate) + " " + Lang["To"]) : "");
                                }
                                else
                                {
                                    result += arrDetail4[1] + " " + Lang["Times"];
                                }
                            }
                            break;
                    }

                }
            }
        }

        return result;
    }
    public DateTime? DateDisplayValue(string Ymd)
    {
        DateTime DateValue;
        string DateFormat = "yyyyMMdd";
        if (!DateTime.TryParseExact(Ymd, DateFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateValue))
        {
            return null;
        }
        else
        {
            return DateTime.ParseExact(Ymd, DateFormat, CultureInfo.InvariantCulture);
        }
    }
}