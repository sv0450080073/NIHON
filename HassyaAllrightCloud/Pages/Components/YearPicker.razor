
<div class="year-picker-component" id="@Id">
    <div class="input-group">
        <input value="@InputDate?.Year.AddPaddingLeft(4, '0')" @onchange="async args => await InputChanged(args?.Value.ToString())" @attributes="UnmatchedParameters"
               class="form-control form-control-sm year-picker-input @GetClass()" type="text" />
        <div class="input-group-append">
            <button class="btn btn-sm btn-pick-year" type="button" @onclick="InputOnClick">
                <i class="fa fa-calendar"></i>
            </button>
        </div>
    </div>

    @if (showPopup)
    {
        <div class="year-picker" @onmousewheel="OnWheelScrolling">
            <div class="year-picker-header d-flex">
                <button class="btn btn-sm" type="button" @onclick="(e) => showPopup = false">
                    <i class="fa fa-close"></i>
                </button>
                <p class="p-0">Year</p>
                <button class="btn btn-sm" type="button" @onclick="async (e) => await Picked()">
                    <i class="fa fa-check"></i>
                </button>
            </div>
            <div class="year-picker-years">
                @foreach (var i in years)
                {
                    if (i < min || i > max)
                    {
                        <p>&nbsp;</p>
                    }
                    else
                    {
                        <p @onclick="(e) => UpdateSelectedYear(i)" class="@(selectedYear == i ? "selected" : string.Empty)">@i</p>
                    }
                }
            </div>
        </div>
    }
</div>

@using System.Linq.Expressions;

@code {
    [CascadingParameter] private EditContext EditContext { get; set; }
    [Parameter] public Expression<Func<object>> ValueExpressions { get; set; }
    bool showPopup = false;
    bool isMouseOut = false;
    int? selectedYear;
    int min = 1;
    int max = 9999;
    List<int> years;
    string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> UnmatchedParameters { get; set; }
    [Parameter] public DateTime? InputDate { get; set; }

    [Parameter]
    public EventCallback<DateTime?> YearChanged { get; set; }

    [Inject]
    IJSRuntime jsRuntime { get; set; }

    [JSInvokable]
    public void InvokeClickOutside()
    {
        showPopup = false;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (InputDate == null) InputDate = DateTime.Now;
        InitYearPicker(InputDate.Value.Year);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("initClickOutSide", Id, DotNetObjectReference.Create(this));
        }
    }

    string GetClass()
    {
        if (EditContext != null)
            return (EditContext.GetValidationMessages(ValueExpressions).Any() ? " border-danger" : " border-primary");
        else return string.Empty;
    }

    async Task InputChanged(string newVal)
    {
        if (string.IsNullOrEmpty(newVal))
        {
            InputDate = null;
            selectedYear = null;
            await YearChanged.InvokeAsync(null);
        }
        else
        {
            if (int.TryParse(newVal, out int result))
            {
                if (result >= min && result <= max)
                    selectedYear = result;
                else
                    selectedYear = result > max ? max : min;

                InputDate = new DateTime(selectedYear.Value, 1, 1);
                await YearChanged.InvokeAsync(InputDate.Value);
            }
            else
            {
                // Return old value
                var temp = 1;
                InputDate = new DateTime(temp, 1, 1);
                StateHasChanged();
                await Task.Delay(1);    // flush UI changes
                InputDate = new DateTime(selectedYear ?? DateTime.Now.Year, 1, 1);
                await YearChanged.InvokeAsync(InputDate.Value);
                StateHasChanged();
                await Task.Delay(1);    // flush UI changes
            }
        }
    }

    void UpdateSelectedYear(int year)
    {
        if (year >= min && year <= max)
        {
            InitYearPicker(year);
        }
    }

    void InputOnClick(MouseEventArgs e)
    {
        showPopup = !showPopup;
        if (showPopup)
        {
            InitYearPicker(InputDate?.Year);
        }
    }

    private void InitYearPicker(int? year)
    {
        if (year >= min && year <= max)
            selectedYear = year;
        else
            selectedYear = DateTime.Now.Year;

        years = new List<int>() { selectedYear.Value - 2, selectedYear.Value - 1, selectedYear.Value, selectedYear.Value + 1, selectedYear.Value + 2 };
    }

    async Task Picked()
    {
        selectedYear = years[years.Count / 2];
        showPopup = false;
        InputDate = new DateTime(selectedYear.Value, 1, 1);
        await YearChanged.InvokeAsync(InputDate.Value);
    }

    protected void OnWheelScrolling(WheelEventArgs e)
    {
        if (e.DeltaY > 0) // Down
        {
            if (years.Last() < max + 2)
            {
                years.Add(years.Last() + 1);
                years.Remove(years.First());
            }
        }
        else // Up
        {
            if (years.First() > min - 2)
            {
                years.Insert(0, years.First() - 1);
                years.Remove(years.Last());
            }
        }

        selectedYear = years[years.Count / 2];
    }
}
