@inject IStringLocalizer<Futai> Lang
@inject AppSettingsService AppSettingsService
@inject CustomHttpClient HttpClient
@inject IJSRuntime JSRuntime
@using HassyaAllrightCloud.Commons.Extensions;

<td colspan="15" class="p-2">
    <EditForm EditContext="FormContext" id="futaiForm">
        <DataAnnotationsValidator />
        <FluentValidator TValidator="LoadFuttumValidator" />
        <div class="d-flex flex-nowrap">
            <div class="form-group d-flex flex-nowrap mr-4">
                <label class="col-form-label-sm mr-2">@Lang["schedule"]</label>
                <DxComboBox Data="FutaiScheduleList"
                            CssClass="width--240"
                            SelectedItem="LoadFuttumModel.ScheduleDate"
                            TextFieldName="Text"
                            FilteringMode="DataGridFilteringMode.Contains"
                            SelectedItemChanged="value => HandleSelectedScheduleChanged(value)"
                            SelectedItemExpression="() => LoadFuttumModel.ScheduleDate"
                            ListRenderMode="ListRenderMode.Virtual" />
            </div>
            <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                @if (CurrentViewMode == IncidentalViewMode.Futai)
                {
                    <label class="col-form-label-sm mr-2">@Lang["incidental_name_code"]</label>
                    <div class="has-tooltip-error">
                        <Tooltip ValueExpressions="@(() =>LoadFuttumModel.SelectedLoadFutai)" Lang="@LangDic"
                                 Text="" Position="PositionTooltip.top">
                        </Tooltip>
                        <DxComboBox Data="LoadFutaiList"
                                    NullText="付帯コード : 付帯名"
                                    TextFieldName="Text"
                                    FilteringMode="DataGridFilteringMode.Contains"
                                    SelectedItem="LoadFuttumModel.SelectedLoadFutai"
                                    SelectedItemChanged="value => HandleSelectedFutaiCodeChanged(value)"
                                    SelectedItemExpression="() => LoadFuttumModel.SelectedLoadFutai"
                                    CssClass="width--250 mr-2"
                                    ListRenderMode="ListRenderMode.Virtual" />
                    </div>
                    <DxTextBox Text="@LoadFuttumModel.FutTumNm"
                               TextChanged="value => HandleLoadFuttumModelNmChanged(value)"
                               maxlength="50"
                               NullText="付帯名"
                               CssClass="withtabindex"
                               TextExpression="() => LoadFuttumModel.FutTumNm" />
                }
                else
                {
                    <label class="col-form-label-sm mr-2">@Lang["loading_code"]</label>
                    <div class="has-tooltip-error">
                        <Tooltip ValueExpressions="@(() =>LoadFuttumModel.SelectedLoadTsumi)" Lang="@LangDic"
                                 Text="" Position="PositionTooltip.top">
                        </Tooltip>
                        <DxComboBox Data="LoadTsumiList"
                                    NullText="積込品コード: 積込品名"
                                    TextFieldName="Text"
                                    FilteringMode="DataGridFilteringMode.Contains"
                                    SelectedItem="LoadFuttumModel.SelectedLoadTsumi"
                                    SelectedItemChanged="value => HandleSelectedTsumiCodeChanged(value)"
                                    SelectedItemExpression="() => LoadFuttumModel.SelectedLoadTsumi"
                                    CssClass="width--250 mr-2"
                                    ListRenderMode="ListRenderMode.Virtual" />
                    </div>
                    <DxTextBox Text="@LoadFuttumModel.FutTumNm"
                               TextChanged="value => HandleLoadFuttumModelNmChanged(value)"
                               maxlength="50"
                               NullText="積込品名"
                               CssClass="withtabindex"
                               TextExpression="() => LoadFuttumModel.FutTumNm" />
                }
            </div>
            <div class="form-group d-flex flex-nowrap mr-4">
                <label class="col-form-label-sm mr-2">@Lang["clearing_code"]</label>
                <div class="has-tooltip-error">
                    <Tooltip ValueExpressions="@(() =>LoadFuttumModel.SelectedLoadSeisanCd)" Lang="@LangDic"
                             Text="" Position="PositionTooltip.top">
                    </Tooltip>
                    <DxComboBox Data="LoadSeisanCdList"
                                NullText="精算コード: 精算名"
                                TextFieldName="Text"
                                FilteringMode="DataGridFilteringMode.Contains"
                                SelectedItem="LoadFuttumModel.SelectedLoadSeisanCd"
                                SelectedItemChanged="value => HandleSelectedSeisanCdChanged(value)"
                                SelectedItemExpression="() => LoadFuttumModel.SelectedLoadSeisanCd"
                                CssClass="width--250 mr-2"
                                ListRenderMode="ListRenderMode.Virtual" />
                </div>
                <DxTextBox Text="@LoadFuttumModel.SeisanNm"
                           TextChanged="value => HandleSelectedSeisanNmChanged(value)"
                           maxlength="50"
                           NullText="精算名"
                           CssClass="withtabindex"
                           TextExpression="() => LoadFuttumModel.SeisanNm" />
            </div>
        </div>
        <div class="d-flex flex-nowrap">
            <div class="form-group d-flex flex-nowrap mr-4">
                <label class="col-form-label-sm mr-2">@Lang["clearing_category"]</label>
                <DxComboBox Data="LoadSeisanKbnList"
                            TextFieldName="Text"
                            NullText="精算する"
                            FilteringMode="DataGridFilteringMode.Contains"
                            SelectedItem="LoadFuttumModel.SelectedLoadSeisanKbn"
                            SelectedItemChanged="value => HandleSelectedSeisanKbnChanged(value)"
                            SelectedItemExpression="() => LoadFuttumModel.SelectedLoadSeisanKbn"
                            CssClass="width--130"
                            ListRenderMode="ListRenderMode.Virtual" />
            </div>
            @if (CurrentViewMode == IncidentalViewMode.Futai)
            {
                <div class="form-group d-flex flex-nowrap mr-4">
                    <label class="col-form-label-sm mr-2">@Lang["tollbooth"]</label>
                    <DxComboBox Data="GetLoadNyuRyokinNameList()"
                                TextFieldName="Text"
                                NullText="入料金所コード : 入料金所名"
                                FilteringMode="DataGridFilteringMode.Contains"
                                SelectedItem="LoadFuttumModel.SelectedLoadNyuRyokinName"
                                SelectedItemChanged="value => HandleSelectedLoadNyuRyokinNameChanged(value)"
                                SelectedItemExpression="() => LoadFuttumModel.SelectedLoadNyuRyokinName"
                                CssClass="mr-2 width--250"
                                ListRenderMode="ListRenderMode.Virtual" />
                    <DxTextBox Text="@LoadFuttumModel.IriRyoNm"
                            TextChanged="value => HandleSelectedIriRyoNmChanged(value)"
                            maxlength="10"
                            NullText="入料金所名"
                            CssClass="width--336 withtabindex"
                            TextExpression="() => LoadFuttumModel.IriRyoNm" />
                </div>
                <div class="form-group d-flex flex-nowrap mr-4">
                    <label class="col-form-label-sm mr-2">@Lang["tollbooth2"]</label>
                    <DxComboBox Data="GetLoadNyuRyokinNameList2()"
                                TextFieldName="Text"
                                NullText="出料金所コード :  出料金所名"
                                FilteringMode="DataGridFilteringMode.Contains"
                                SelectedItem="LoadFuttumModel.SelectedLoadShuRyokin"
                                SelectedItemChanged="value => HandleSelectedLoadShuRyokinNameChanged(value)"
                                SelectedItemExpression="() => LoadFuttumModel.SelectedLoadShuRyokin"
                                CssClass="mr-2 width--250"
                                ListRenderMode="ListRenderMode.Virtual">
                    </DxComboBox>
                    <DxTextBox Text="@LoadFuttumModel.DeRyoNm"
                            TextChanged="value => HandleSelectedDeRyoNmChanged(value)"
                            maxlength="10"
                            NullText="出料金所名"
                            CssClass="width--290 withtabindex"
                            TextExpression="() => LoadFuttumModel.DeRyoNm" />
                </div>
            }
        </div>
        <div class="d-flex flex-nowrap">
            <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                <label class="col-form-label-sm mr-2">@Lang["sales"]：</label>
                <label class="col-form-label-sm mr-2">@Lang["quantity"]</label>
                <div class="has-tooltip-error">
                    <Tooltip ValueExpressions="@(() =>LoadFuttumModel.Suryo)" Lang="@LangDic"
                             Text="" Position="PositionTooltip.top">
                    </Tooltip>
                    <DxTextBox Text="@LoadFuttumModel.Suryo"
                               TextChanged="value => HandleSuryoChanged(value)"
                               TextExpression="() => LoadFuttumModel.Suryo"
                               CssClass="width--56 text-center number withtabindex forcus"
                               type="tel"
                               maxlength="3" />
                </div>
                    <span class="mx-2">ｘ</span>
                    <label class="col-form-label-sm mr-2">@Lang["unit_price"]</label>
                    <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.Tanka)"
                               TextChanged="value => HandleTankaChanged(value)"
                               TextExpression="() => LoadFuttumModel.Tanka"
                               CssClass="width--75 text-right mr-2 number withtabindex"
                               maxlength="6" />
                    <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.UriGakKin)"
                               TextExpression="() => TempStr"
                               ReadOnly="true"
                               CssClass="width--90 text-right"
                               maxlength="8" />
                </div>
                <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                    <label class="col-form-label-sm mr-2">@Lang["tax_included"]</label>
                    <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.ZeikomiKin.ToString())"
                               TextExpression="() => TempStr"
                               ReadOnly="true"
                               CssClass="width--90 text-right" />
                </div>
                <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                    <label class="col-form-label-sm mr-2">@Lang["consumption_tax"]</label>
                    <DxComboBox Data="TaxTypeDataList"
                                SelectedItem="LoadFuttumModel.TaxType"
                                TextFieldName="StringValue"
                                FilteringMode="DataGridFilteringMode.Contains"
                                SelectedItemChanged="value => HandleTaxTypeChanged(value)"
                                SelectedItemExpression="() => LoadFuttumModel.TaxType"
                                CssClass="width--90 mr-2"
                                ListRenderMode="ListRenderMode.Virtual">
                    </DxComboBox>
                    <InputRate RateValue="@LoadFuttumModel.Zeiritsu"
                               RateChanged="value => HandleZeiritSuChanged(value)"
                               ReadOnly="@(LoadFuttumModel.TaxType.IdValue == Constants.NoTax.IdValue)"
                               CssClass="width--56 text-center rate withtabindex" />
                    <span class="mx-2">%</span>
                    <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.SyaRyoSyo)"
                               TextExpression="() => TempStr"
                               ReadOnly="true"
                               maxlength="8"
                               CssClass="width--90 text-right" />
                </div>
                <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                    <label class="col-form-label-sm mr-2">@Lang["fee"]</label>
                    <InputRate RateValue="@LoadFuttumModel.TesuRitu"
                               RateChanged="value => HandleTesuRituChanged(value)"
                               CssClass="width--56 text-center rate withtabindex" />
                    <span class="mx-2">%</span>
                    <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.SyaRyoTes)"
                               TextExpression="() => TempStr"
                               ReadOnly="true"
                               maxlength="8"
                               CssClass="width--90 text-right" />
                </div>
            </div>
        <div class="d-flex flex-nowrap">
            <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                <label class="col-form-label-sm mr-2">@Lang["purchase"]：</label>
                <label class="col-form-label-sm mr-2">@Lang["quantity"]</label>
                <DxTextBox Text="@LoadFuttumModel.SirSuryo"
                           TextChanged="value => HandleSirSuryoChanged(value)"
                           TextExpression="() => LoadFuttumModel.SirSuryo"
                           CssClass="width--56 text-center number withtabindex"
                           maxlength="3" />
                <span class="mx-2">ｘ</span>
                <label class="col-form-label-sm mr-2">@Lang["unit_price"]</label>
                <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.SirTanka)"
                           TextChanged="value => HandleSirTankaChanged(value)"
                           TextExpression="() => LoadFuttumModel.SirTanka"
                           CssClass="width--75 text-right mr-2 number withtabindex"
                           maxlength="6" />
                <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.SirGakKin)"
                           TextExpression="() => TempStr"
                           ReadOnly="true"
                           maxlength="8"
                           CssClass="width--90 text-right" />
            </div>
            <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                <label class="col-form-label-sm mr-2">@Lang["tax_included"]</label>
                <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.SirZeikomiKin.ToString())"
                           TextExpression="() => TempStr"
                           ReadOnly="true"
                           CssClass="width--90 text-right" />
            </div>
            <div class="form-group d-flex flex-nowrap align-items-center mr-4">
                <label class="col-form-label-sm mr-2">@Lang["consumption_tax"]</label>
                <DxComboBox Data="TaxTypeDataList"
                            SelectedItem="LoadFuttumModel.SirTaxType"
                            TextFieldName="StringValue"
                            FilteringMode="DataGridFilteringMode.Contains"
                            SelectedItemChanged="value => HandleSirTaxTypeChanged(value)"
                            SelectedItemExpression="() => LoadFuttumModel.SirTaxType"
                            CssClass="width--90 mr-2" 
                            ListRenderMode="ListRenderMode.Virtual"/>
                <InputRate RateValue="@LoadFuttumModel.SirZeiritsu"
                           RateChanged="value => HandleSirZeiritsuChanged(value)"
                           ReadOnly="@(LoadFuttumModel.SirTaxType.IdValue == Constants.NoTax.IdValue)"
                           CssClass="width--56 text-center rate withtabindex" />
                <span class="mx-2">%</span>
                <DxTextBox Text="@CommonUtil.CurencyFormat(LoadFuttumModel.SirSyaRyoSyo.ToString())"
                           TextExpression="() => TempStr"
                           ReadOnly="true"
                           maxlength="8"
                           CssClass="width--90 text-right" />
            </div>
            <div class="form-group d-flex flex-nowrap mr-4">
                <div class="has-tooltip-error">
                    <Tooltip ValueExpressions="@(() =>LoadFuttumModel.SelectedCustomer)" Lang="@LangDic"
                             Text="" Position="PositionTooltip.top">
                    </Tooltip>
                    <DxComboBox Data="CustomerList"
                                NullText="仕入先選択してください"
                                TextFieldName="Text"
                                FilteringMode="DataGridFilteringMode.Contains"
                                SelectedItem="LoadFuttumModel.SelectedCustomer"
                                SelectedItemChanged="value => HandleSelectedCustomerChanged(value)"
                                SelectedItemExpression="() => LoadFuttumModel.SelectedCustomer"
                                CssClass="width--450"
                                ListRenderMode="ListRenderMode.Virtual" />

                </div>
            </div>
        </div>

        <div class="text-right btnFutaiForm">
            <button class="btn btn-sm btn-outline-dark" type="button"
                    @onclick="() => HandleChangeStateSettingQuantity()">
                @Lang["advanced_setting"]
            </button>
            <button class="btn btn-sm btn-outline-dark" type="button"
                    @onclick="() => HandleCancelFuttum()">
                @Lang["cancel"]
            </button>
            <DxButton class="btn btn-sm btn-primary width--75" Enabled="IsEnableSaveButton()" type="button" Id="btnFutaiSubmit"
                      @onclick="() => HandleAddFuttum()" Text="@(IsEditMode ? Lang["update"] : Lang["saveNew"])"></DxButton>
        </div>

        @if(ShowSettingQuantity)
        {
            <div class="@(ShowSettingQuantity ? "" : "d-none")">
                <table class="table table-bordered table-sm text-center w-50">
                    <thead class="thead-primary">
                        <tr>
                            <th style="width: 15% !important" scope="col">No.</th>
                            <th style="width: 15% !important" scope="col">@Lang["car"]</th>
                            <th style="width: 15% !important" scope="col">@Lang["car_number"]</th>
                            <th style="width: 20% !important" scope="col">@Lang["quantity"]</th>
                            <th style="width: 35% !important" scope="col">@Lang["mercenary"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in LoadFuttumModel.SettingQuantityList)
                        {
                            <tr>
                                <td scope="row">@item.GoSyaJyn</td>
                                <td>@item.GosyaDisplay</td>
                                <td>@item.SyaRyoNm</td>
                                <td>
                                    <div class="has-tooltip-error">
                                        <Tooltip ValueExpressions="@(() =>item.Suryo)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                        <DxTextBox Text="@item.Suryo"
                                                TextChanged="value => HandleSettingQuantityChanged(value, item)"
                                                TextExpression="() => item.Suryo"
                                                CssClass="@("number text-right withtabindex " + ((FormContext.GetCustomCss(() => item.Suryo) == "custom-invalid") ? "custom-invalid" : ""))"
                                                maxlength="3" />
                                    </div>
                                </td>
                                <td>@item.YouSha</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </EditForm>
</td>

@code {
    [Parameter] public IncidentalViewMode CurrentViewMode { get; set; }
    [Parameter] public LoadFuttum LoadFuttumOrigin { get; set; }
    [Parameter] public bool IsEditMode { get; set; }

    [Parameter] public List<ScheduleSelectorModel> FutaiScheduleList { get; set; }
    [Parameter] public List<LoadTsumi> LoadTsumiList { get; set; }
    [Parameter] public List<LoadFutai> LoadFutaiList { get; set; }
    [Parameter] public List<LoadNyuRyokinName> LoadNyuRyokinNameList { get; set; }
    [Parameter] public List<LoadSeisanCd> LoadSeisanCdList { get; set; }
    [Parameter] public List<LoadSeisanKbn> LoadSeisanKbnList { get; set; }
    [Parameter] public List<LoadCustomerList> CustomerList { get; set; }
    [Parameter] public List<TaxTypeList> TaxTypeDataList { get; set; }
    [Parameter] public List<LoadDouro> LoadDouroDataList { get; set; }
    [Parameter] public List<SettingQuantity> SettingQuantityList { get; set; }
    [Parameter] public SettingTaxRate SettingTaxRate { get; set; }
    [Parameter] public EventCallback<int> OnSubmit { get; set; }
    [Parameter] public EventCallback<int> OnCancel { get; set; }
    protected EditContext FormContext { get; set; }
    protected LoadFuttum LoadFuttumModel { get; set; }
    protected bool ShowSettingQuantity { get; set; }
    protected string TempStr { get; set; }
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    private bool isChangeNyuDouro;
    private bool isChangeShuDouro;
    private void LocalizationInit()
    {
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }

    protected override void OnInitialized()
    {
        LocalizationInit();
        if (IsEditMode)
        {
            LoadFuttumOrigin.FirstLoad = true;
            var json = JsonConvert.SerializeObject(LoadFuttumOrigin);
            LoadFuttumModel = JsonConvert.DeserializeObject<LoadFuttum>(json);
            LoadSelectedDataCombobox(LoadFuttumModel);
            LoadFuttumModel.FirstLoad = false;
        }
        else
        {
            LoadFuttumModel = LoadFuttumOrigin;
        }
        FormContext = new EditContext(LoadFuttumModel);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        JSRuntime.InvokeAsync<string>("loadPageScript", "bookingInputPage", "futaiEnterKey");
        JSRuntime.InvokeAsync<string>("loadPageScript", "bookingInputPage", "futaiTabKey");
    }

    protected bool IsEnableSaveButton()
    {
        return FormContext.IsModified() && FormContext.Validate();
    }

    private void LoadSelectedDataCombobox(LoadFuttum loadFuttum)
    {
        if (LoadSeisanKbnList != null && loadFuttum.SelectedLoadSeisanKbn != null)
        {
            loadFuttum.SelectedLoadSeisanKbn =
                LoadSeisanKbnList.SingleOrDefault(s => byte.Parse(s.CodeKbn) == byte.Parse(loadFuttum.SelectedLoadSeisanKbn.CodeKbn));
        }
        if (LoadSeisanCdList != null && loadFuttum.SelectedLoadSeisanCd != null)
        {
            loadFuttum.SelectedLoadSeisanCd =
                LoadSeisanCdList.SingleOrDefault(s => s.SeisanCdSeq == loadFuttum.SelectedLoadSeisanCd.SeisanCdSeq);
        }
        if (CustomerList != null)
        {
            if (loadFuttum.SelectedCustomer != null && loadFuttum.SelectedCustomer.SitenCdSeq != 0 && loadFuttum.SelectedCustomer.TokuiSeq != 0)
            {
                loadFuttum.SelectedCustomer =
                    CustomerList.Skip(1).SingleOrDefault(s => s.SitenCdSeq == loadFuttum.SelectedCustomer.SitenCdSeq && s.TokuiSeq == loadFuttum.SelectedCustomer.TokuiSeq);
            }
            else
            {
                loadFuttum.SelectedCustomer = CustomerList.FirstOrDefault();
            }
        }
        if (LoadNyuRyokinNameList != null)
        {
            if (loadFuttum.SelectedLoadNyuRyokinName != null)
            {
                loadFuttum.SelectedLoadNyuRyokinName =
                    LoadNyuRyokinNameList.SingleOrDefault(s => s.RyokinCd == loadFuttum.SelectedLoadNyuRyokinName.RyokinCd && s.RyokinTikuCd == loadFuttum.SelectedLoadNyuRyokinName.RyokinTikuCd);
            }
            if (loadFuttum.SelectedLoadShuRyokin != null)
            {
                loadFuttum.SelectedLoadShuRyokin =
                    LoadNyuRyokinNameList.SingleOrDefault(s => s.RyokinCd == loadFuttum.SelectedLoadShuRyokin.RyokinCd && s.RyokinTikuCd == loadFuttum.SelectedLoadShuRyokin.RyokinTikuCd);
            }
        }
        if (TaxTypeDataList != null)
        {
            if (loadFuttum.TaxType != null)
            {
                loadFuttum.TaxType =
                    TaxTypeDataList.SingleOrDefault(s => s.IdValue == loadFuttum.TaxType.IdValue);
            }
            if (loadFuttum.SirTaxType != null)
            {
                loadFuttum.SirTaxType =
                    TaxTypeDataList.SingleOrDefault(s => s.IdValue == loadFuttum.SirTaxType.IdValue);
            }
        }
        if (FutaiScheduleList != null && loadFuttum.ScheduleDate != null)
        {
            loadFuttum.ScheduleDate =
                FutaiScheduleList.SingleOrDefault(s => s.Date == loadFuttum.ScheduleDate.Date) ?? loadFuttum.ScheduleDate;
        }
        if (loadFuttum.FuttumKbnMode == IncidentalViewMode.Futai)
        {
            if (LoadFutaiList != null && loadFuttum.SelectedLoadFutai != null)
            {
                loadFuttum.SelectedLoadFutai =
                    LoadFutaiList.SingleOrDefault(s => s.FutaiCdSeq == loadFuttum.SelectedLoadFutai.FutaiCdSeq);
            }
        }
        else if (loadFuttum.FuttumKbnMode == IncidentalViewMode.Tsumi)
        {
            if (LoadTsumiList != null && loadFuttum.SelectedLoadTsumi != null)
            {
                loadFuttum.SelectedLoadTsumi =
                    LoadTsumiList.SingleOrDefault(s => s.CodeKbnSeq == loadFuttum.SelectedLoadTsumi.CodeKbnSeq);
            }
        }

    }

    protected List<LoadNyuRyokinName> GetLoadNyuRyokinNameList()
    {
        if (LoadFuttumModel.SelectedLoadNyuDouro is null)
        {
            return LoadNyuRyokinNameList;
        }

        var result = LoadNyuRyokinNameList.Where(n => n.DouroCdSeq == LoadFuttumModel.SelectedLoadNyuDouro.CodeKbnSeq).ToList();
        if (isChangeNyuDouro)
        {
            HandleSelectedLoadNyuRyokinNameChanged(result.FirstOrDefault());
            isChangeNyuDouro = false;
        }
        return result;
    }

    protected List<LoadNyuRyokinName> GetLoadNyuRyokinNameList2()
    {
        if (LoadFuttumModel.SelectedLoadShuDouro is null)
        {
            return LoadNyuRyokinNameList;
        }

        var result = LoadNyuRyokinNameList.Where(n => n.DouroCdSeq == LoadFuttumModel.SelectedLoadShuDouro.CodeKbnSeq).ToList();
        if (isChangeShuDouro)
        {
            HandleSelectedLoadShuRyokinNameChanged(result.FirstOrDefault());
            isChangeShuDouro = false;
        }
        return result;
    }

    #region Handle value change

    protected void HandleSelectedScheduleChanged(ScheduleSelectorModel newValue)
    {
        LoadFuttumModel.ScheduleDate = newValue;
        LoadFuttumModel.SettingQuantityList.Clear();
        foreach (var item in SettingQuantityList)
        {
            if (LoadFuttumModel.ScheduleDate.Date.IsInRange(item.GarageLeaveDate, item.GarageReturnDate))
            {
                var settingQuantity = new SettingQuantity();
                settingQuantity.SimpleCloneProperties(item);
                LoadFuttumModel.SettingQuantityList.Add(settingQuantity);
            }
        }
        StateHasChanged();
    }

    protected void HandleSelectedFutaiCodeChanged(LoadFutai newValue)
    {
        LoadFuttumModel.SelectedLoadFutai = newValue;
        LoadFuttumModel.FutTumNm = newValue.RyakuNm;

        // change tax type
        LoadFuttumModel.TaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == newValue.ZeiHyoKbn);
        LoadFuttumModel.SirTaxType = TaxTypeDataList.SingleOrDefault(t => t.IdValue == newValue.ZeiHyoKbn);
        StateHasChanged();
    }

    protected void HandleLoadFuttumModelNmChanged(string newValue)
    {
        LoadFuttumModel.FutTumNm = newValue;
        StateHasChanged();
    }

    protected void HandleSelectedTsumiCodeChanged(LoadTsumi newValue)
    {
        LoadFuttumModel.SelectedLoadTsumi = newValue;
        LoadFuttumModel.FutTumNm = newValue.RyakuNm;

        StateHasChanged();
    }

    protected void HandleSelectedSeisanCdChanged(LoadSeisanCd newValue)
    {
        LoadFuttumModel.SelectedLoadSeisanCd = newValue;
        LoadFuttumModel.SeisanNm = newValue.RyakuNm;

        LoadFuttumModel.SelectedLoadSeisanKbn = LoadSeisanKbnList.SingleOrDefault(s => byte.Parse(s.CodeKbn) == newValue.SeisanKbn);
        StateHasChanged();
    }

    protected void HandleSelectedSeisanNmChanged(string newValue)
    {
        LoadFuttumModel.SeisanNm = newValue;
        StateHasChanged();
    }

    protected void HandleSelectedSeisanKbnChanged(LoadSeisanKbn newValue)
    {
        LoadFuttumModel.SelectedLoadSeisanKbn = newValue;
        StateHasChanged();
    }

    protected void HandleSelectedNoteInputChanged(string newValue)
    {
        LoadFuttumModel.NoteInput = newValue;
        StateHasChanged();
    }

    protected void HandleSelectedLoadNyuDouroChanged(LoadDouro newValue)
    {
        LoadFuttumModel.SelectedLoadNyuDouro = newValue;
        isChangeNyuDouro = true;
        StateHasChanged();
    }

    protected void HandleSelectedLoadNyuRyokinNameChanged(LoadNyuRyokinName newValue)
    {
        LoadFuttumModel.SelectedLoadNyuRyokinName = newValue;
        LoadFuttumModel.IriRyoNm = newValue?.RyakuNm ?? string.Empty;
        StateHasChanged();
    }

    protected void HandleSelectedIriRyoNmChanged(string newValue)
    {
        LoadFuttumModel.IriRyoNm = newValue;
        StateHasChanged();
    }

    protected void HandleSelectedLoadShuDouroChanged(LoadDouro newValue)
    {
        LoadFuttumModel.SelectedLoadShuDouro = newValue;
        isChangeShuDouro = true;
        StateHasChanged();
    }

    protected void HandleSelectedLoadShuRyokinNameChanged(LoadNyuRyokinName newValue)
    {
        LoadFuttumModel.SelectedLoadShuRyokin = newValue;
        LoadFuttumModel.DeRyoNm = newValue?.RyakuNm ?? string.Empty;
        StateHasChanged();
    }

    protected void HandleSelectedDeRyoNmChanged(string newValue)
    {
        LoadFuttumModel.DeRyoNm = newValue;
        StateHasChanged();
    }

    protected void HandleSuryoChanged(string newValue)
    {
        LoadFuttumModel.Suryo = newValue;
        StateHasChanged();
    }

    protected void HandleTankaChanged(string newValue)
    {
        LoadFuttumModel.Tanka = newValue;
        StateHasChanged();
    }

    protected void HandleTaxTypeChanged(TaxTypeList newValue)
    {
        LoadFuttumModel.TaxType = newValue;
        StateHasChanged();
    }

    protected void HandleZeiritSuChanged(string newValue)
    {
        if(LoadFuttumModel.TaxType.IdValue != Constants.NoTax.IdValue)
        {
            LoadFuttumModel.Zeiritsu = newValue;
        }
        StateHasChanged();
    }

    protected void HandleTesuRituChanged(string newValue)
    {
        LoadFuttumModel.TesuRitu = newValue;
        StateHasChanged();
    }

    protected void HandleSirSuryoChanged(string newValue)
    {
        LoadFuttumModel.SirSuryo = newValue;
        StateHasChanged();
    }

    protected void HandleSirTankaChanged(string newValue)
    {
        LoadFuttumModel.SirTanka = newValue;
        StateHasChanged();
    }

    protected void HandleSirTaxTypeChanged(TaxTypeList newValue)
    {
        LoadFuttumModel.SirTaxType = newValue;
        StateHasChanged();
    }

    protected void HandleSirZeiritsuChanged(string newValue)
    {
        if(LoadFuttumModel.SirTaxType.IdValue != Constants.NoTax.IdValue)
        {
            LoadFuttumModel.SirZeiritsu = newValue;
        }
        StateHasChanged();
    }

    protected void HandleSelectedCustomerChanged(LoadCustomerList newValue)
    {
        LoadFuttumModel.SelectedCustomer = newValue;
        StateHasChanged();
    }

    protected void HandleSettingQuantityChanged(string newValue, SettingQuantity settingQuantity)
    {
        settingQuantity.Suryo = newValue;
        StateHasChanged();
    }

    protected void HandleChangeStateSettingQuantity()
    {
        ShowSettingQuantity = !ShowSettingQuantity;
        JSRuntime.InvokeAsync<string>("loadPageScript", "bookingInputPage", "futaiEnterKey");
        JSRuntime.InvokeAsync<string>("loadPageScript", "bookingInputPage", "futaiTabKey");
    }

    #endregion

    protected void HandleAddFuttum()
    {
        if (IsEditMode)
        {
            LoadFuttumOrigin.SimpleCloneProperties(LoadFuttumModel);
        }
        OnSubmit.InvokeAsync(LoadFuttumOrigin.Index);
    }

    protected void HandleCancelFuttum()
    {
        OnCancel.InvokeAsync(LoadFuttumOrigin.Index);
    }
}
