@page "/statusconfirmation"
@using HassyaAllrightCloud.Pages.Components.CommonComponents
@using HassyaAllrightCloud.IService.CommonComponents
@using HassyaAllrightCloud.Domain.Dto.CommonComponents
@using System.Linq
@inject IStringLocalizer<StatusConfirmation> Lang
@inject ITPM_CompnyDataListService TPM_CompnyDataService
@inject ITPM_EigyosDataListService TPM_EigyosDataService
@inject ICustomerListService CustomerService
@inject IStatusConfirmationService StatusConfirmationService
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostingEnvironment
@inject IJSRuntime IJSRuntime
@inject IFilterCondition FilterServices
@inject ILoadingService _loadingService
@inject IGridLayoutService GridLayoutService
@inject IErrorHandlerService errorModalService
@inject ICustomerComponentService _service

<DxPopup CssClass="custom-popup" @bind-Visible="@notifyNotFound" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["Information"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => notifyNotFound = false)"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <i class="fa fa-2x fa-info-circle" aria-hidden="true" />
        @NotFound
    </ChildContent>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => notifyNotFound = false)" Text="@Lang["OK"]" />
    </FooterTemplate>
</DxPopup>

<DxPopup CssClass="custom-popup modal-xl" @bind-Visible="@isShowPreviewReport" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ReportTitle"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => isShowPreviewReport = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <DxDocumentViewer ReportUrl="@($"{nameof(IStatusConfirmationService)}?" + PreviewReportUrl)" Height="800px" Width="100%">
            <DxDocumentViewerTabPanelSettings Width="180" />
        </DxDocumentViewer>
    </Content>
</DxPopup>

<div class="d-flex justify-content-between align-items-center mb-2">
    <div class="d-flex">
        <h5>@Lang["PageTitle"]</h5>
    </div>
    <div class="d-flex">
        <button class="btn btn-sm btn-danger btnclear" @onclick="ResetSearchOption">
            <i class="fa fa-refresh" aria-hidden="true"></i>
            @Lang["ClearAllOptions"]
        </button>
    </div>
</div>
<div class="main-top mb-2">
    <EditForm Model="@statusConfirmationData" Context="formContext">
        <DataAnnotationsValidator />
        <FluentValidator TValidator="StatusConfirmationValidator" />

        @if (isLoading)
        {
            <div class="loader">
                <div class="loader-icon"></div>
            </div>
        }
        else
        {
            <div id="control-tab" class="title-section mb-2">
                <i class="fa fa-angle-up" aria-hidden="true"></i> @Lang["ConditionSearch"]
            </div>
            <div class="express-condition mb-2">
                <DxTabs @bind-ActiveTabIndex="@ActiveTabIndex">
                    <DxTab Text="@Lang["tab_1"]"></DxTab>
                    <DxTab Text="@Lang["tab_2"]"></DxTab>
                    <DxTab Text="@Lang["tab_3"]"></DxTab>
                    <DxTab Text="@Lang["tab_4"]"></DxTab>
                    <DxTab Text="@Lang["tab_5"]"></DxTab>
                </DxTabs>
                <div class="card dxbs-border-top-0 dxbs-border-radius-top-0">
                    <div class="card-body">
                        @switch (ActiveTabIndex)
                        {
                            case 0:
                                <div class="d-flex">
                                    <div class="form-group d-flex flex-nowrap">
                                        <label class="col-form-label-sm width--75 mr-3">@Lang["DateOptions"]</label>
                                        <div class="has-tooltip-error">
                                            <Tooltip ValueExpressions="@(() =>statusConfirmationData.StartDate)" Lang="@LangDic" Text="" Position="PositionTooltip.top">
                                            </Tooltip>
                                            <DxDateEdit Date="@statusConfirmationData.StartDate"
                                                        Format="yyyy/MM/dd"
                                                        DateChanged="@(async (newValue) => await OnStartDateChanged(newValue, formContext))"
                                                        DateExpression="@(() => statusConfirmationData.StartDate)"
                                                        CssClass="width--120"></DxDateEdit>
                                        </div>
                                        <span class="mx-3">～</span>
                                        <div class="has-tooltip-error">
                                            <Tooltip ValueExpressions="@(() =>statusConfirmationData.StartDate)" Lang="@LangDic" Text="" Position="PositionTooltip.top">
                                            </Tooltip>
                                            <DxDateEdit Date="@statusConfirmationData.EndDate"
                                                        Format="yyyy/MM/dd"
                                                        DateChanged="@(async (newValue) => await OnEndDateChanged(newValue, formContext))"
                                                        DateExpression="@(() => statusConfirmationData.StartDate)"
                                                        CssClass="width--120"></DxDateEdit>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5">
                                        <label class="col-form-label-sm width--75 mr-3">@Lang["CompanyOptions"]</label>
                                        <div class=@("has-tooltip-error " +(companyEmpty?" custom-invalid":""))>
                                            <Tooltip ValueExpressions="@(() =>statusConfirmationData.SelectedCompany)" Lang="@LangDic"
                                                     Text="@(companyEmpty ? emptyItemMessage[nameof(CompaniesEmpty)]:"")" Position="PositionTooltip.top">
                                            </Tooltip>
                                            <DxComboBox Data="Companies"
                                                        NullText="@Lang["NullTextCompany"]"
                                                        TextFieldName="CompanyInfo"
                                                        AllowUserInput="false"
                                                        SelectedItem="@statusConfirmationData.SelectedCompany"
                                                        SelectedItemChanged="@(async (c) => await OnSelectedCompanyItemsChanged(c, formContext))"
                                                        SelectedItemExpression="@(() => @statusConfirmationData.SelectedCompany)">
                                            </DxComboBox>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group d-flex flex-nowrap flex-nowrap">
                                    <label class="col-form-label-sm width--75 mr-3">@Lang["BranchOptions"]</label>
                                    <div class=@("has-tooltip-error " +(branchEmpty?" custom-invalid":""))>
                                        <Tooltip ValueExpressions="@(() =>statusConfirmationData.BranchStart)" Lang="@LangDic"
                                                 Text="@(branchEmpty ? emptyItemMessage[nameof(BranchesEmpty)]:"")" Position="PositionTooltip.top">
                                        </Tooltip>
                                        <DxComboBox Data="@Branches"
                                                    NullText="@Lang["NullTextBranch"]"
                                                    TextFieldName="BranchInfo"
                                                    AllowUserInput="false"
                                                    SelectedItem="@statusConfirmationData.BranchStart"
                                                    SelectedItemChanged="@(async (e) => await OnSelectedBranchStartItemsChanged(e, formContext))"
                                                    SelectedItemExpression="@(()=>@statusConfirmationData.BranchStart)"
                                                    CssClass="width--290">
                                        </DxComboBox>
                                    </div>
                                    <span class="mx-3">～</span>
                                    <div class=@("has-tooltip-error " +(branchEmpty?" custom-invalid":""))>
                                        <Tooltip ValueExpressions="@(() =>statusConfirmationData.BranchStart)" Lang="@LangDic"
                                                 Text="@(branchEmpty ? emptyItemMessage[nameof(BranchesEmpty)]:"")" Position="PositionTooltip.top">
                                        </Tooltip>
                                        <DxComboBox Data="@Branches"
                                                    NullText="@Lang["NullTextBranch"]"
                                                    TextFieldName="BranchInfo"
                                                    AllowUserInput="false"
                                                    SelectedItem="@statusConfirmationData.BranchEnd"
                                                    SelectedItemChanged="@(async (e) => await OnSelectedBranchEndItemsChanged(e, formContext))"
                                                    SelectedItemExpression="@(()=>@statusConfirmationData.BranchStart)"
                                                    CssClass="width--290">
                                        </DxComboBox>
                                    </div>
                                </div>
                                <div class="form-group d-flex flex-nowrap flex-nowrap">
                                    <label class="col-form-label-sm width--75 mr-3">@Lang["CustomerOptions"]</label>
                                    <div class="item-inline  custom-width-cmbtk">
                                        <CustomerComponent LangDic="@LangDic"
                                                           isGyosyaAddNull="true"
                                                           isTokiskAddNull="true"
                                                           isTokiStAddNull="true"
                                                           DefaultGyosya="@(statusConfirmationData.GyosyaTokuiSakiFrom != null ? statusConfirmationData.GyosyaTokuiSakiFrom.GyosyaCdSeq : 0)"
                                                           SelectedGyosya="@statusConfirmationData.GyosyaTokuiSakiFrom"
                                                           GyosyaExpression="@(() => statusConfirmationData.GyosyaTokuiSakiFrom)"
                                                           SelectedGyosyaChanged="@(async (newValue) => await ChangeValueForm(nameof(statusConfirmationData.GyosyaTokuiSakiFrom), newValue, formContext))"
                                                           DefaultTokisk="@(statusConfirmationData.TokiskTokuiSakiFrom != null ? statusConfirmationData.TokiskTokuiSakiFrom.TokuiSeq : 0)"
                                                           SelectedTokisk="@statusConfirmationData.TokiskTokuiSakiFrom"
                                                           TokiskExpression="@(() => statusConfirmationData.TokiskTokuiSakiFrom)"
                                                           SelectedTokiskChanged="@(async (newValue) => await ChangeValueForm(nameof(statusConfirmationData.TokiskTokuiSakiFrom), newValue, formContext))"
                                                           DefaultTokiSt="@(statusConfirmationData.TokiStTokuiSakiFrom != null ? statusConfirmationData.TokiStTokuiSakiFrom.SitenCdSeq : 0)"
                                                           SelectedTokiSt="@statusConfirmationData.TokiStTokuiSakiFrom"
                                                           TokiStExpression="@(() => statusConfirmationData.TokiStTokuiSakiFrom)"
                                                           SelectedTokiStChanged="@(async (newValue) => await ChangeValueForm(nameof(statusConfirmationData.TokiStTokuiSakiFrom), newValue, formContext))"></CustomerComponent>

                                    </div>
                                    <span class="mx-3">～</span>
                                    <div class="item-inline custom-width-cmbtk">
                                        <CustomerComponent LangDic="@LangDic"
                                                           isGyosyaAddNull="true"
                                                           isTokiskAddNull="true"
                                                           isTokiStAddNull="true"
                                                           DefaultGyosya="@(statusConfirmationData.GyosyaTokuiSakiTo != null ? statusConfirmationData.GyosyaTokuiSakiTo.GyosyaCdSeq : 0)"
                                                           SelectedGyosya="@statusConfirmationData.GyosyaTokuiSakiTo"
                                                           GyosyaExpression="@(() => statusConfirmationData.GyosyaTokuiSakiTo)"
                                                           SelectedGyosyaChanged="@(async (newValue) => await ChangeValueForm(nameof(statusConfirmationData.GyosyaTokuiSakiTo), newValue, formContext))"
                                                           DefaultTokisk="@(statusConfirmationData.TokiskTokuiSakiTo != null ? statusConfirmationData.TokiskTokuiSakiTo.TokuiSeq : 0)"
                                                           SelectedTokisk="@statusConfirmationData.TokiskTokuiSakiTo"
                                                           TokiskExpression="@(() => statusConfirmationData.TokiskTokuiSakiTo)"
                                                           SelectedTokiskChanged="@(async (newValue) => await ChangeValueForm(nameof(statusConfirmationData.TokiskTokuiSakiTo), newValue, formContext))"
                                                           DefaultTokiSt="@(statusConfirmationData.TokiStTokuiSakiTo != null ? statusConfirmationData.TokiStTokuiSakiTo.SitenCdSeq : 0)"
                                                           SelectedTokiSt="@statusConfirmationData.TokiStTokuiSakiTo"
                                                           TokiStExpression="@(() => statusConfirmationData.TokiStTokuiSakiTo)"
                                                           SelectedTokiStChanged="@(async (newValue) => await ChangeValueForm(nameof(statusConfirmationData.TokiStTokuiSakiTo), newValue, formContext))"></CustomerComponent>
                                    </div>
                                </div>
                                break;
                            case 1:
                                <div class="d-flex">
                                    <div class="form-group d-flex flex-nowrap">
                                        <label class="col-form-label-sm width--75 mr-3">@Lang["FixedStatus"]</label>
                                        <nav class="nav nav-pills">
                                            <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.FixedStatus == ConfirmStatus.Fixed ? "active" : null)" @onclick="@(async e => await OnClickFixedStatus(e, ConfirmStatus.Fixed))">@Lang["Fixed"]</a>
                                            <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.FixedStatus == ConfirmStatus.NotFixed ? "active" : null)" @onclick="@(async e => await OnClickFixedStatus(e, ConfirmStatus.NotFixed))">@Lang["Unfixed"]</a>
                                        </nav>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5 mr-3">
                                        <label class="col-form-label-sm width--75 mr-3 text-right">@Lang["ConfirmedStatus"]</label>
                                        <nav class="nav nav-pills">
                                            <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.ConfirmedStatus == ConfirmStatus.Confirmed ? "active" : null )" @onclick="@(async e => await OnClickConfirmedStatus(e, ConfirmStatus.Confirmed))">@Lang["Confirmed"]</a>
                                            <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.ConfirmedStatus == ConfirmStatus.UnConfirmed ? "active" : null )" @onclick="@(async e => await OnClickConfirmedStatus(e, ConfirmStatus.UnConfirmed))">@Lang["UnConfirmed"]</a>
                                        </nav>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5">
                                        <label class="col-form-label-sm width--75 mr-3 text-right">@Lang["ConfirmedTime"]</label>
                                        <DxComboBox Data="@ConfirmedTimeOptions"
                                                    TextFieldName="DisplayName"
                                                    AllowUserInput="false"
                                                    SelectedItem="@statusConfirmationData.ConfirmedTimes"
                                                    SelectedItemChanged="@(async e => await OnSelectedNumberConfirmationChanged(e))"
                                                    SelectedItemExpression="@(() => @statusConfirmationData.ConfirmedTimes)"
                                                    CssClass="@(enableCmbConfirmedTime ? "width--140" : "width--140 disabled-content")">
                                        </DxComboBox>
                                    </div>
                                </div>
                                <div class="d-flex">
                                    <div class="form-group d-flex flex-nowrap">
                                        <label class="col-form-label-sm width--75 mr-3">@Lang["Saikou"]</label>
                                        <DxComboBox Data="@ConfirmStatusOptions"
                                                    TextFieldName="DisplayName"
                                                    AllowUserInput="false"
                                                    SelectedItem="@statusConfirmationData.Saikou"
                                                    SelectedItemChanged="@(async e => await OnSelectedItemCheckChanged(e))"
                                                    SelectedItemExpression="@(() => @statusConfirmationData.Saikou)"
                                                    CssClass="width--140">
                                        </DxComboBox>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5 mr-1">
                                        <label class="col-form-label-sm width--75 mr-3 text-right">@Lang["SumDai"]</label>
                                        <DxComboBox Data="@ConfirmStatusOptions"
                                                    TextFieldName="DisplayName"
                                                    AllowUserInput="false"
                                                    SelectedItem="@statusConfirmationData.SumDai"
                                                    SelectedItemChanged="@(async e => await OnSelectedNumberUnitsChanged(e))"
                                                    SelectedItemExpression="@(() => @statusConfirmationData.SumDai)"
                                                    CssClass="width--140">
                                        </DxComboBox>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5">
                                        <label class="col-form-label-sm width--75 mr-3 text-right">@Lang["Ammount"]</label>
                                        <DxComboBox Data="@ConfirmStatusOptions"
                                                    TextFieldName="DisplayName"
                                                    AllowUserInput="false"
                                                    SelectedItem="@statusConfirmationData.Ammount"
                                                    SelectedItemChanged="@(async e => await OnSelectedAmountChanged(e))"
                                                    SelectedItemExpression="@(() => @statusConfirmationData.Ammount)"
                                                    CssClass="width--140">
                                        </DxComboBox>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5">
                                        <label class="col-form-label-sm width--75 mr-3 text-right">@Lang["ScheduleDate"]</label>
                                        <DxComboBox Data="@ConfirmStatusOptions"
                                                    TextFieldName="DisplayName"
                                                    AllowUserInput="false"
                                                    SelectedItem="@statusConfirmationData.ScheduleDate"
                                                    SelectedItemChanged="@(async e => await OnSelectedScheduleChanged(e))"
                                                    SelectedItemExpression="@(() => @statusConfirmationData.ScheduleDate)"
                                                    CssClass="width--140">
                                        </DxComboBox>
                                    </div>
                                </div>
                                break;
                            case 2:
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3">@Lang["switching_width"]：</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.Size == (int)ViewMode.Large ? "active" : null)" @onclick="@(async e => await SelectedSize(e, (int)ViewMode.Large))">@Lang["large"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.Size == (int)ViewMode.Medium ? "active" : null)" @onclick="@(async e => await SelectedSize(e, (int)ViewMode.Medium))">@Lang["medium"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.Size == (int)ViewMode.Small ? "active" : null)" @onclick="@(async e => await SelectedSize(e, (int)ViewMode.Small))">@Lang["small"]</a>
                                    </nav>
                                </div>
                                break;
                            case 3:
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3">@Lang["OutputMode"]</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.ExportType == OutputReportType.Preview ? "active" : null)" @onclick="@(e => OnExportTypeOptionClicked(e, OutputReportType.Preview))">@Lang["PreviewMode"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.ExportType == OutputReportType.CSV ? "active" : null)" @onclick="@(e => OnExportTypeOptionClicked(e, OutputReportType.CSV))">@Lang["CsvMode"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(statusConfirmationData.ExportType == OutputReportType.ExportPdf ? "active" : null)" @onclick="@(e => OnExportTypeOptionClicked(e, OutputReportType.ExportPdf))">@Lang["PdfMode"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-flex flex-nowrap align-items-center">
                                    <label class="col-form-label-sm mr-3">@Lang["PaperSetting"]</label>
                                    <div class="border p-2 form-group d-flex flex-nowrap @(statusConfirmationData.ExportType == OutputReportType.CSV ? "disabled-content" : null)">
                                        <label class="col-form-label-sm width--100 mr-3">@Lang["PaperSize"]</label>
                                        <DxComboBox Data="@PaperSizeOptions"
                                                    AllowUserInput="false"
                                                    ReadOnly="@(statusConfirmationData.ExportType == OutputReportType.CSV)"
                                                    SelectedItem="@statusConfirmationData.PaperSize"
                                                    SelectedItemChanged="@(e => OnSelectPaperSizeChanged(e))"
                                                    SelectedItemExpression="@(() => @statusConfirmationData.PaperSize)"
                                                    CssClass="width--120">
                                        </DxComboBox>
                                    </div>
                                </div>
                                <div class="form-group d-flex flex-nowrap align-items-center">
                                    <label class="col-form-label-sm mr-3">@Lang["CsvSetting"]</label>
                                    <div class="border pt-2 px-2 mb-2 form-group d-flex flex-nowrap @(statusConfirmationData.ExportType == OutputReportType.CSV ? null: "disabled-content")">
                                        <div class="form-group d-flex flex-nowrap">
                                            <label class="col-form-label-sm mr-3">@Lang["CsvHeader"]</label>
                                            <div class="@(statusConfirmationData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.FixedLength ? "disabled-content" : null)">
                                                <DxComboBox Data="@CsvHeaderOptions"
                                                            TextFieldName="DisplayName"
                                                            AllowUserInput="false"
                                                            ReadOnly="@(statusConfirmationData.ExportType != OutputReportType.CSV)"
                                                            SelectedItem="@(statusConfirmationData.CsvConfigOption.Header)"
                                                            SelectedItemChanged="@(e => OnSelectedHeadingOutput(e))"
                                                            SelectedItemExpression="@(()=>@statusConfirmationData.CsvConfigOption.Header)"
                                                            CssClass="width--160"></DxComboBox>
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap ml-5">
                                            <label class="col-form-label-sm mr-3">@Lang["CsvGroup"]</label>
                                            <div class="@(statusConfirmationData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.FixedLength ? "disabled-content" : null)">
                                                <DxComboBox Data="@CsvGroupSymbolOptions"
                                                            AllowUserInput="false"
                                                            TextFieldName="DisplayName"
                                                            ReadOnly="@(statusConfirmationData.ExportType != OutputReportType.CSV)"
                                                            SelectedItem="@(statusConfirmationData.CsvConfigOption.GroupSymbol)"
                                                            SelectedItemChanged="@(e => OnSelectedGroupingOutput(e))"
                                                            SelectedItemExpression="@(()=>@statusConfirmationData.CsvConfigOption.GroupSymbol)"
                                                            CssClass="width--160"></DxComboBox>
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap ml-5">
                                            <label class="col-form-label-sm mr-3">@Lang["CsvSeparator"]</label>
                                            <DxComboBox Data="@CsvDelimiterOptions"
                                                        TextFieldName="DisplayName"
                                                        AllowUserInput="false"
                                                        ReadOnly="@(statusConfirmationData.ExportType != OutputReportType.CSV)"
                                                        SelectedItem="@(statusConfirmationData.CsvConfigOption.Delimiter)"
                                                        SelectedItemChanged="@(e => OnSelectedDelimiterOutput(e))"
                                                        SelectedItemExpression="@(()=>@statusConfirmationData.CsvConfigOption.Delimiter)"
                                                        CssClass="width--160"></DxComboBox>
                                            @if (statusConfirmationData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.Other)
                                            {
                                                <div class="has-tooltip-error">
                                                    <Tooltip ValueExpressions="@(() =>statusConfirmationData.CsvConfigOption.DelimiterSymbol)"
                                                             Lang="@LangDic" Text="" Position="PositionTooltip.top">
                                                    </Tooltip>
                                                    <DxTextBox NullText="@Lang["CsvSeparatorNullText"]"
                                                               Text="@statusConfirmationData.CsvConfigOption.DelimiterSymbol"
                                                               TextChanged="@((newValue) => OnDelimiterTextChanged(newValue, formContext))"
                                                               TextExpression="@(() => @statusConfirmationData.CsvConfigOption.DelimiterSymbol)"
                                                               CssClass="ml-3"
                                                               maxlength="1">
                                                    </DxTextBox>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="text-center form-group">
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary" CssClass="width--100" Click="@(async e => await OnButtonReportClicked(e))" Enabled="@isExportable" Text="@Lang["BtnExport"]"></DxButton>
                                </div>
                                break;
                            case 4:
                                <div class="d-flex">
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary" Enabled="@ResultSearch" Text="@Lang["SaveGridLayout"]" @onclick="ReOrderTable" CssClass="pl-2 width--90"></DxButton>
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary" Enabled="@ResultSearch" Text="@Lang["InitGridLayout"]" @onclick="InitGridLayout" CssClass="mx-2 width--90"></DxButton>
                                </div>
                                break;
                        }
                    </div>
                </div>
            </div>
        }
    </EditForm>
</div>

@if (ResultSearch)
{
    <div class="coupon-payment-grid-body">
        <KoboSimpleGrid Header="Header"
                        Body="Body"
                        DataItems="SearchResultDatas"
                        CssClass="@(string.Format("kobo-grid-size-{0}", statusConfirmationData.Size))"
                        ShowCheckbox="ShowCheckboxOptions"
                        OnSave="async (e) => await SaveGridLayout(e)"
                        CheckedItems="SelectedList"
                        CheckedItemsChanged="CheckedChange"
                        EnableSaveBtn="false" />
    </div>
    <Pagination TotalCount=@TotalItems
                ItemPerPage=@RecordsPerPage
                OnChangePage="async (page) => await OnPaginationChanged(page)"
                OnChangeItemPerPage="(value) => HandleItemPerPageChange(value)" 
                @ref="paging"/>

    <div id="total-area" class="total-table mt-3 w-75 @(string.Format("kobo-grid-size-{0}", statusConfirmationData.Size))">
        <table>
            <thead>
                <tr>
                    <th>@Lang["Total"]</th>
                    <th>@Lang["SumBusFee"]</th>
                    <th>@Lang["SumBusTax"]</th>
                    <th>@Lang["SumBusCharge"]</th>
                    <th>@Lang["SumGuideFee"]</th>
                    <th>@Lang["SumGuideTax"]</th>
                    <th>@Lang["SumGuideCharge"]</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row">@Lang["PageTotal"]</th>
                    <td>@PageSummary.SumBusFee</td>
                    <td>@PageSummary.SumBusTax</td>
                    <td>@PageSummary.SumBusCharge</td>
                    <td>@PageSummary.SumGuideFee</td>
                    <td>@PageSummary.SumGuideTax</td>
                    <td>@PageSummary.SumGuideCharge</td>
                </tr>
                <tr>
                    <th scope="row">@Lang["Cumulative"]</th>
                    <td>@TotalSummary.SumBusFee</td>
                    <td>@TotalSummary.SumBusTax</td>
                    <td>@TotalSummary.SumBusCharge</td>
                    <td>@TotalSummary.SumGuideFee</td>
                    <td>@TotalSummary.SumGuideTax</td>
                    <td>@TotalSummary.SumGuideCharge</td>
                </tr>
            </tbody>
        </table>
    </div>
}
else if (!ResultSearch && isSearching)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}

@code {
    #region Properties
    private StatusConfirmationData statusConfirmationData = new StatusConfirmationData();

    private EditContext formContext;

    private List<string> EmptyErrorMessages { get; set; } = new List<string>();
    private bool isLoading = true;
    private bool isSearching = false;
    private bool notifyNotFound = false;
    private bool isSearchable = true;
    private bool isExportable = true;
    private bool enableCmbConfirmedTime = true;
    private bool isShowPreviewReport = false;
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    private List<CompanyData> Companies = new List<CompanyData>();
    private List<LoadSaleBranch> Branches = new List<LoadSaleBranch>();
    private List<LoadCustomerList> Customers = new List<LoadCustomerList>();
    private List<SelectedOption<ConfirmStatus>> ConfirmStatusOptions = new List<SelectedOption<ConfirmStatus>>();
    private List<SelectedOption<NumberOfConfirmed>> ConfirmedTimeOptions = new List<SelectedOption<NumberOfConfirmed>>();
    private List<PaperSize> PaperSizeOptions = new List<PaperSize>();
    private List<SelectedOption<CSV_Group>> CsvGroupSymbolOptions = new List<SelectedOption<CSV_Group>>();
    private List<SelectedOption<CSV_Header>> CsvHeaderOptions = new List<SelectedOption<CSV_Header>>();
    private List<SelectedOption<CSV_Delimiter>> CsvDelimiterOptions = new List<SelectedOption<CSV_Delimiter>>();

    private List<StatusConfirmSearchResultData> SearchResultDatas = new List<StatusConfirmSearchResultData>();
    private List<StatusConfirmSearchResultData> SelectedList = new List<StatusConfirmSearchResultData>();

    private PageSummaryData PageSummary = new PageSummaryData();
    private PageSummaryData TotalSummary = new PageSummaryData();

    private bool IsCheckedAll = false;
    private int CurrentPage = 1;
    private byte RecordsPerPage = 25;
    private int TotalItems;
    Dictionary<string, string> emptyItemMessage = new Dictionary<string, string>();
    private string PreviewReportUrl = string.Empty;
    string filterConditionFormName = "KJ2000";
    int coutChange = 0;
    bool isChageTab = false;
    bool isSetFilter = true;
    int activeTabIndex = 0;
    int ActiveTabIndex
    {
        get => activeTabIndex;
        set
        {
            activeTabIndex = value;
            setTabChange();
        }
    }

    bool ResultSearch = false;
    bool companyEmpty = false;
    bool customerEmpty = false;
    bool branchEmpty = false;

    bool IsFilterApply;
    bool isFirstRender = true;

    public List<CustomerComponentGyosyaData> ListGyosya { get; set; } = new List<CustomerComponentGyosyaData>();
    public List<CustomerComponentTokiskData> TokiskData { get; set; } = new List<CustomerComponentTokiskData>();
    public List<CustomerComponentTokiStData> TokiStData { get; set; } = new List<CustomerComponentTokiStData>();

    public Pagination paging { get; set; }
    #endregion

    protected HeaderTemplate Header { get; set; }
    protected BodyTemplate Body { get; set; }
    protected ShowCheckboxArgs<StatusConfirmSearchResultData> ShowCheckboxOptions { get; set; } = new ShowCheckboxArgs<StatusConfirmSearchResultData>()
    {
        RowIdentifier = (checkedItem, item) => checkedItem.Ukeno == item.Ukeno && checkedItem.UnkRen == item.UnkRen,
        Disable = (item) => false
    };

    #region Localization string

    string CompaniesEmpty;
    string BranchesEmpty;
    string CustomerEmpty;
    string NotFound;

    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        CompaniesEmpty = Lang["BI_T007"];
        BranchesEmpty = Lang["BI_T008"];
        CustomerEmpty = Lang["BI_T0010"];
        NotFound = Lang["BI_T009"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }
    #endregion

    #region Component lifecycle
    protected override void OnParametersSet()
    {
        IJSRuntime.InvokeVoidAsync("loadPageScript", "statusConfirmation");
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await IJSRuntime.InvokeVoidAsync("loadPageScript", "statusConfirmation", "DragAndDropColumn");
    }

    /// <summary>
    /// <inheritdoc />
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        //formContext = new EditContext(statusConfirmationData);
        //formContext.OnValidationStateChanged += (sender, eventArgs) => OnValidationStateChanged(sender, eventArgs);
        // 得意先, 仕入先
        var taskTokisk = _service.GetListTokisk();
        var taskTokiSt = _service.GetListTokiSt();
        var taskGyosya = _service.GetListGyosya();

        await Task.WhenAll(taskGyosya, taskTokisk, taskTokiSt);

        ListGyosya = taskGyosya.Result;
        TokiskData = taskTokisk.Result;
        TokiStData = taskTokiSt.Result;
        LocalizationInit();
        LoadConfirmStatusOptions();
        LoadConfirmedTimeOptions();
        bool companyLoaded = await LoadCompanyData();
        // bool customerLoaded = await LoadCustomerData();
        companyEmpty = !companyLoaded;
        // customerEmpty = !customerLoaded;
        if (companyLoaded)
        {
            statusConfirmationData.SelectedCompany = Companies.First();
            bool branchLoaded = await LoadBranchData();
            // branchEmpty = !branchLoaded;
            if (branchLoaded)
            {
                statusConfirmationData.BranchStart = Branches.First();
                statusConfirmationData.BranchEnd = Branches.First();
            }
        }

        LoadExportOption();
        await ApplyFilter().ContinueWith(async (t) =>
        {
            formContext = new EditContext(statusConfirmationData);
            formContext.OnValidationStateChanged += (sender, eventArgs) => OnValidationStateChanged(sender, eventArgs);
            formContext.Validate();

            GenrateGrid();
            if (t.Result)
            {
                isSearching = true;
                ResultSearch = false;
                await OnButtonSearchClicked(true);
            }
        });

        // formContext.Validate();
        await base.OnInitializedAsync().ContinueWith((t) =>
        {
            isLoading = false;
            InvokeAsync(StateHasChanged);
        });
    }
    public static Func<object, string> CustomRowCss = (item) =>
    {
        var model = item as StatusConfirmSearchResultData;
        var cssClass = "";
        return cssClass;
    };

    #endregion

    #region Load method

    /// <summary>
    /// Load data for Companies
    /// </summary>
    /// <returns><c>true</c> if company data had load successed, otherwise <c>false</c></returns>
    private async Task<bool> LoadCompanyData()
    {
        Companies.Clear();
        Companies = await TPM_CompnyDataService.GetCompanyByTenantIdAsync(new ClaimModel().TenantID);
        EmptyErrorMessages.Clear();
        if (!Companies.Any())
        {
            emptyItemMessage[nameof(CompaniesEmpty)] = CompaniesEmpty;
            ModifyEmptyErrorMessage(CompaniesEmpty);
            return false;
        }
        else
        {
            if (!Companies.Any(_ => _ is null))
                Companies.Insert(0, null); // Insert a item to mark choose all in first line

            return true;
        }
    }

    /// <summary>
    /// Load data for Branches
    /// </summary>
    /// <returns><c>true</c> if branch data had load successed, otherwise <c>false</c></returns>
    private async Task<bool> LoadBranchData()
    {
        Branches = new List<LoadSaleBranch>();
        if (statusConfirmationData.SelectedCompany is null)
        {
            Branches = await TPM_EigyosDataService.GetBranchDataByTenantId(new ClaimModel().TenantID);
        }
        else
        {
            Branches = await TPM_EigyosDataService.GetBranchDataByCompany(statusConfirmationData.SelectedCompany.CompanyCdSeq, new ClaimModel().TenantID);
        }
        // Anh-ntl fix bug 9454
        //if (!Branches.Any())
        //{
        //    emptyItemMessage[nameof(BranchesEmpty)] = BranchesEmpty;
        //    ModifyEmptyErrorMessage(BranchesEmpty);

        //    return false;
        //}
        if (Branches.Any())
        {
            ModifyEmptyErrorMessage(BranchesEmpty, false);

            if (!Branches.Any(_ => _ is null))
                Branches.Insert(0, null); // Insert a item to mark choose all in first line

            return true;
        }
        return false;
    }

    /// <summary>
    /// Load status confirmation options for combobox
    /// </summary>
    private void LoadConfirmStatusOptions()
    {
        ConfirmStatusOptions = new List<SelectedOption<ConfirmStatus>>
{
                new SelectedOption<ConfirmStatus>
                {
                    Option = ConfirmStatus.Unknown,
                    DisplayName = Lang["Unknown"],
                },
                new SelectedOption<ConfirmStatus>
                {
                    Option = ConfirmStatus.Confirmed,
                    DisplayName = Lang["Confirmed"],
                },
                new SelectedOption<ConfirmStatus>
                {
                    Option = ConfirmStatus.UnConfirmed,
                    DisplayName = Lang["UnConfirmed"],
                },
            };
    }

    /// <summary>
    /// Load confirmed time options for combobox
    /// </summary>
    private void LoadConfirmedTimeOptions()
    {
        string[] langStr = new string[] { "Unknown", "CT_One", "CT_Two", "CT_Three", "CT_Four", "CT_Five", "CT_Six", "CT_Seven", "CT_Eight", "CT_Nine", "CT_Other" };

        int i = 0;
        foreach (string str in langStr)
        {
            ConfirmedTimeOptions.Add(new SelectedOption<NumberOfConfirmed>
            {
                Option = (NumberOfConfirmed)i++,
                DisplayName = Lang[str]
            });
        }
    }

    private void LoadExportOption()
    {
        PaperSizeOptions = new List<PaperSize>
{
                PaperSize.A3,
                PaperSize.A4,
                PaperSize.B4
            };

        CsvHeaderOptions = new List<SelectedOption<CSV_Header>>
{
                new SelectedOption<CSV_Header>{Option = CSV_Header.IncludeHeader, DisplayName= Lang["CsvHadHeader"] },
                new SelectedOption<CSV_Header>{Option = CSV_Header.WithoutHeader, DisplayName= Lang["CsvWithoutHeader"] },
            };

        CsvGroupSymbolOptions = new List<SelectedOption<CSV_Group>>
{
                new SelectedOption<CSV_Group>{Option = CSV_Group.QuotationMarks, DisplayName= Lang["CsvGrQuotesMarks"]},
                new SelectedOption<CSV_Group>{Option = CSV_Group.WithoutQuotes, DisplayName= Lang["CsvGrWithoutQuotes"]},
            };

        CsvDelimiterOptions = new List<SelectedOption<CSV_Delimiter>>
{
                new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Comma, DisplayName= Lang["CsvSpaceComma"]},
                new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Semicolon, DisplayName= Lang["CsvSpaceSemicolon"]},
                new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Space, DisplayName= Lang["CsvSpacing"]},
                new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.FixedLength, DisplayName= Lang["CsvSpaceFixedLength"]},
                new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Other, DisplayName= Lang["CsvSpaceOther"]},
            };

        statusConfirmationData.ConfirmedTimes = ConfirmedTimeOptions.First();
        statusConfirmationData.Saikou = ConfirmStatusOptions.First();
        statusConfirmationData.SumDai = ConfirmStatusOptions.First();
        statusConfirmationData.Ammount = ConfirmStatusOptions.First();
        statusConfirmationData.ScheduleDate = ConfirmStatusOptions.First();
        statusConfirmationData.CsvConfigOption.Header = CsvHeaderOptions.First();
        statusConfirmationData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.First();
        statusConfirmationData.CsvConfigOption.Delimiter = CsvDelimiterOptions.First();
    }

    private async void ResetSearchOption()
    {
        EmptyErrorMessages.Clear();
        SearchResultDatas.Clear();
        SelectedList.Clear();

        ResultSearch = false;
        isLoading = false;
        isSearching = false;
        notifyNotFound = false;
        isSearchable = true;
        isExportable = true;
        enableCmbConfirmedTime = true;
        IsCheckedAll = false;

        statusConfirmationData = new StatusConfirmationData();
        //formContext = new EditContext(statusConfirmationData);
        //formContext.OnValidationStateChanged += (sender, eventArgs) => OnValidationStateChanged(sender, eventArgs);
        statusConfirmationData.SelectedCompany = Companies.First();

        bool branchLoaded = await LoadBranchData();
        if (branchLoaded)
        {
            statusConfirmationData.BranchStart = Branches.First();
            statusConfirmationData.BranchEnd = Branches.First();
        }

        statusConfirmationData.GyosyaTokuiSakiFrom = null;
        statusConfirmationData.GyosyaTokuiSakiTo = null;
        statusConfirmationData.TokiskTokuiSakiFrom = null;
        statusConfirmationData.TokiskTokuiSakiTo = null;
        statusConfirmationData.TokiStTokuiSakiFrom = null;
        statusConfirmationData.TokiStTokuiSakiTo = null;

        statusConfirmationData.ConfirmedTimes = ConfirmedTimeOptions.First();
        statusConfirmationData.Saikou = ConfirmStatusOptions.First();
        statusConfirmationData.SumDai = ConfirmStatusOptions.First();
        statusConfirmationData.Ammount = ConfirmStatusOptions.First();
        statusConfirmationData.ScheduleDate = ConfirmStatusOptions.First();
        statusConfirmationData.PaperSize = PaperSizeOptions.First();
        statusConfirmationData.CsvConfigOption.Header = CsvHeaderOptions.First();
        statusConfirmationData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.First();
        statusConfirmationData.CsvConfigOption.Delimiter = CsvDelimiterOptions.First();

        await OnButtonSearchClicked(true);
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region value changed method
    private async void setTabChange()
    {
        await Task.Run(() =>
        {
            isSetFilter = false;
            isChageTab = true;
            coutChange = 0;
            InvokeAsync(StateHasChanged).Wait();
        });

    }

    private async Task OnButtonSearchClicked(bool isNotCusTomer)
    {
        bool isGeted = false;
        if (((!isChageTab || coutChange == 0 || coutChange == 3) && isSetFilter) || isNotCusTomer)
        {
            if (!isFirstRender)
            {
                await SaveCurrentFilter();
            }
            else
            {
                isFirstRender = false;
            }
            await GetList();
            isGeted = true;;
            await InvokeAsync(StateHasChanged);
        }
        if((!isChageTab || coutChange == 0 || coutChange == 3) && isSetFilter == false && isGeted == false)
        {
            if (!isFirstRender)
            {
                await SaveCurrentFilter();
            }
            await GetList();
            isSetFilter = true;
        }

    }
    private async Task GetList()
    {
        await _loadingService.ShowAsync();
        var searchResult = await StatusConfirmationService.SearchStatusConfirmDataByTenanIdAsync(
            StatusConfirmationData.ApplySelectAllFromNull(statusConfirmationData),
            tenantId: new ClaimModel().TenantID,
            skip: (CurrentPage - 1) * RecordsPerPage,
            take: RecordsPerPage
        );

        SelectedList.Clear();

        //if not found any => show 009
        if (!searchResult.DataList.Any())
        {
            notifyNotFound = true;
            ResultSearch = false;
        }
        else
        {
            TotalItems = searchResult.TotalItems;
            SearchResultDatas = searchResult.DataList;
            TotalSummary = searchResult.TotalSummary;

            UpdateSummaryPricePage();
            ResultSearch = true;
        }
        await _loadingService.HideAsync();
        isSearching = false;
    }

    #region Basic search event

    /// <summary>
    /// Occurs when DxDateEdit start date changed
    /// </summary>
    /// <param name="newDate">New date value</param>
    private async Task OnStartDateChanged(DateTime newDate, EditContext formContext)
    {
        statusConfirmationData.StartDate = newDate;
        isSearchable = formContext.Validate();
        isExportable = isSearchable;
        if (!IsFilterApply && isSearchable)
        {
            await OnButtonSearchClicked(true);
        }
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Occurs when DxDateEdit end date changed
    /// </summary>
    /// <param name="newDate">New date value</param>
    private async Task OnEndDateChanged(DateTime newDate, EditContext formContext)
    {
        statusConfirmationData.EndDate = newDate;
        isSearchable = formContext.Validate();
        isExportable = isSearchable;
        if (!IsFilterApply && isSearchable)
        {
            await OnButtonSearchClicked(true);
        }
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Occurs when combobox company selected change
    /// </summary>
    /// <param name="selectedItems">Item selected</param>
    private async Task OnSelectedCompanyItemsChanged(CompanyData selectedCompanyItems, EditContext formContext)
    {
        bool isSelectAll = selectedCompanyItems is null;
        statusConfirmationData.SelectedCompany = selectedCompanyItems;

        bool branchLoaded = await LoadBranchData();
        if (!IsFilterApply)
        {
            if (branchLoaded)
            {
                statusConfirmationData.BranchStart = Branches.FirstOrDefault();
                statusConfirmationData.BranchEnd = Branches.FirstOrDefault();
            }
            else
            {
                statusConfirmationData.BranchStart = null;
                statusConfirmationData.BranchEnd = null;
            }
            // branchEmpty = !branchLoaded;
        }
        isSearchable = formContext.Validate();
        isExportable = isSearchable;
        if (!IsFilterApply && isSearchable)
        {
            await OnButtonSearchClicked(true);
        }
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Occurs when combobox branch start/end selected change
    /// </summary>
    /// <param name="selectedItems">Item selected</param>
    async Task OnSelectedBranchStartItemsChanged(LoadSaleBranch selectedItems, EditContext formContext)
    {
        bool isSelectAll = selectedItems is null;
        statusConfirmationData.BranchStart = selectedItems;

        if (!IsFilterApply && isSelectAll)
        {
            statusConfirmationData.BranchEnd = Branches.FirstOrDefault();
        }

        isSearchable = formContext.Validate();
        isExportable = isSearchable;
        if (!IsFilterApply && isSearchable)
        {
            await OnButtonSearchClicked(true);
        }
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Occurs when combobox branch end selected change
    /// </summary>
    /// <param name="selectedItems">Item selected</param>
    async Task OnSelectedBranchEndItemsChanged(LoadSaleBranch selectedItems, EditContext formContext)
    {
        bool isSelectAll = selectedItems is null;
        statusConfirmationData.BranchEnd = selectedItems;

        if (!IsFilterApply && isSelectAll)
        {
            statusConfirmationData.BranchStart = Branches.FirstOrDefault();
        }

        isSearchable = formContext.Validate();
        isExportable = isSearchable;
        if (!IsFilterApply && isSearchable)
        {
            await OnButtonSearchClicked(true);
        }
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Change value customer from, to
    /// </summary>
    /// <param name="ValueName"></param>
    /// <param name="value"></param>
    /// <param name="formContext"></param>
    /// <returns></returns>
    private async Task ChangeValueForm(string ValueName, dynamic value, EditContext formContext)
    {
        try
        {
            if (value is string && string.IsNullOrEmpty(value))
            {
                value = null;
            }
            var propertyInfo = statusConfirmationData.GetType().GetProperty(ValueName);
            propertyInfo.SetValue(statusConfirmationData, value, null);
            isSearchable = formContext.Validate();
            isExportable = isSearchable;
            // 
            if (isChageTab)
            {
                coutChange++;
            }
            if (coutChange == 3)
            {
                isChageTab = false;
            }
            if (!isChageTab && (coutChange == 3 || coutChange == 0))
            {
                isSearching = true;
                if (isSearchable && !IsFilterApply)
                {
                    if((ValueName != nameof(statusConfirmationData.GyosyaTokuiSakiFrom) && ValueName != nameof(statusConfirmationData.GyosyaTokuiSakiTo)
                    && ValueName != nameof(statusConfirmationData.TokiskTokuiSakiFrom) && ValueName != nameof(statusConfirmationData.TokiskTokuiSakiTo)))
                    {
                        await OnButtonSearchClicked(false);
                    }
                }
                if (isSearching)
                    isSearching = false;
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await _loadingService.HideAsync();
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    #endregion

    #region Search result event

    private async Task OnPaginationChanged(int page)
    {
        await _loadingService.ShowAsync();
        //Because in Paination component page start at 0
        CurrentPage = page + 1;

        var searchResult = await StatusConfirmationService.SearchStatusConfirmDataByTenanIdAsync(
            StatusConfirmationData.ApplySelectAllFromNull(statusConfirmationData),
            tenantId: new ClaimModel().TenantID,
            skip: (CurrentPage - 1) * RecordsPerPage,
            take: RecordsPerPage
        );
        TotalItems = searchResult.TotalItems;
        SearchResultDatas = searchResult.DataList;
        TotalSummary = searchResult.TotalSummary;

        UpdateSummaryPricePage();
        await _loadingService.HideAsync();
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Export Action

    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    private async Task OnButtonReportClicked(MouseEventArgs args)
    {
        await SaveCurrentFilter();
        switch (statusConfirmationData.ExportType)
        {
            case OutputReportType.Preview:
                await PreviewReport();
                break;
            case OutputReportType.Print: //disable this feature
                notifyNotFound = true;
                break;
            case OutputReportType.ExportPdf:
                await PDFReport();
                break;
            case OutputReportType.CSV:
                await CSVReport();
                break;
            default:
                break;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task PreviewReport()
    {
        var selectedBookingKey = SelectedList.Select(i => new BookingKeyData(i.Ukeno, i.UnkRen)).ToList();

        if (!selectedBookingKey.Any())
        {
            notifyNotFound = true;
            return;
        }

        StatusConfirmationPreviewReportParam param = new StatusConfirmationPreviewReportParam
        {
            SelectedList = selectedBookingKey,
            StartDate = statusConfirmationData.StartDate,
            EndDate = statusConfirmationData.EndDate,
            TenantId = new ClaimModel().TenantID,
            PaperSize = statusConfirmationData.PaperSize
        };

        var searchString = EncryptHelper.EncryptToUrl(param);
        IJSRuntime.InvokeVoidAsync("open", $"StatusConfirmationReportPreview?searchString=" + searchString, "_blank");
    }

    private async Task PDFReport()
    {
        var selectedBookingKey = SelectedList.Select(i => new BookingKeyData(i.Ukeno, i.UnkRen)).ToList();
        var data = await StatusConfirmationService.GetStatusConfirmationReportPagedInfoAsync(
            selectedBookingKey,
            new ClaimModel().TenantID,
            statusConfirmationData.StartDate,
            statusConfirmationData.EndDate
        );

        if (data.Any())
        {
            DevExpress.XtraReports.UI.XtraReport report = new DevExpress.XtraReports.UI.XtraReport();

            switch (statusConfirmationData.PaperSize)
            {
                case PaperSize.A3:
                    report = new Reports.ReportTemplate.KakuninListReport.KakuninListReportA3();
                    break;
                case PaperSize.A4:
                    report = new Reports.ReportTemplate.KakuninListReport.KakuninList();
                    break;
                case PaperSize.B4:
                    report = new Reports.ReportTemplate.KakuninListReport.KakuninListReportB4();
                    break;
                default:
                    break;
            }

            report.DataSource = data;
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                report.CreateDocument();
                using (MemoryStream ms = new MemoryStream())
                {
                    report.ExportToPdf(ms);

                    byte[] exportedFileBytes = ms.ToArray();
                    string myExportString = Convert.ToBase64String(exportedFileBytes);
                    IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", "StatusConfirmationReport");
                }
            });
        }
        else
        {
            notifyNotFound = true;
        }
    }

    private async Task CSVReport()
    {
        var selectedBookingKey = SelectedList.Select(i => new BookingKeyData(i.Ukeno, i.UnkRen)).ToList();

        //this temp path to check valid
        string path = string.Format("{0}/csv/{1}.csv", HostingEnvironment.WebRootPath, Guid.NewGuid());

        var reportData = await StatusConfirmationService.GetStatusConfirmationReportInfoAsync(selectedBookingKey, new ClaimModel().TenantID);

        if (reportData.Any())
        {
            var csvData = reportData.Cast<StatusConfirmationExportData>().ToList();

            var result = CsvHelper.ExportCollectionToCsv(
                csvData,
                new CsvConfigOption
                {
                    FilePath = path.Substring(0, path.LastIndexOf("/")),
                    Delimiter = statusConfirmationData.CsvConfigOption.Delimiter,
                    DelimiterSymbol = statusConfirmationData.CsvConfigOption.DelimiterSymbol,
                    GroupSymbol = statusConfirmationData.CsvConfigOption.GroupSymbol,
                    Header = statusConfirmationData.CsvConfigOption.Header,
                },
                SetupHeaderCsvReport());

            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                string myExportString = Convert.ToBase64String(result);
                IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "csv", "StatusConfirmationReport");
            });
        }
        else
        {
            notifyNotFound = true;
        }
    }

    #endregion

    #region Advance search events

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    private async Task OnClickConfirmedStatus(MouseEventArgs e, ConfirmStatus status)
    {
        statusConfirmationData.ConfirmedStatus = status;

        enableCmbConfirmedTime = (status == ConfirmStatus.Confirmed);
        if (!enableCmbConfirmedTime)
        {
            statusConfirmationData.ConfirmedTimes = ConfirmedTimeOptions?.First() ?? new SelectedOption<NumberOfConfirmed>();
        }

        if (!IsFilterApply)
        {
            await OnButtonSearchClicked(true);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    private async Task OnClickFixedStatus(MouseEventArgs e, ConfirmStatus status)
    {
        statusConfirmationData.FixedStatus = status;
        if (!IsFilterApply)
        {
            await OnButtonSearchClicked(true);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    async Task OnSelectedNumberConfirmationChanged(SelectedOption<NumberOfConfirmed> selectedItems)
    {
        statusConfirmationData.ConfirmedTimes = selectedItems;
        if (!IsFilterApply)
        {
            await OnButtonSearchClicked(true);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    async Task OnSelectedItemCheckChanged(SelectedOption<ConfirmStatus> selectedItems)
    {
        statusConfirmationData.Saikou = selectedItems;
        if (!IsFilterApply)
        {
            await OnButtonSearchClicked(true);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    async Task OnSelectedNumberUnitsChanged(SelectedOption<ConfirmStatus> selectedItems)
    {
        statusConfirmationData.SumDai = selectedItems;
        if (!IsFilterApply)
        {
            await OnButtonSearchClicked(true);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    async Task OnSelectedAmountChanged(SelectedOption<ConfirmStatus> selectedItems)
    {
        statusConfirmationData.Ammount = selectedItems;
        if (!IsFilterApply)
        {
            await OnButtonSearchClicked(true);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    async Task OnSelectedScheduleChanged(SelectedOption<ConfirmStatus> selectedItems)
    {
        statusConfirmationData.ScheduleDate = selectedItems;
        if (!IsFilterApply)
        {
            await OnButtonSearchClicked(true);
            await InvokeAsync(StateHasChanged);
        }
    }

    #endregion

    #region Export form events

    private void OnExportTypeOptionClicked(MouseEventArgs e, OutputReportType exportType)
    {
        if (statusConfirmationData.ExportType == OutputReportType.CSV && exportType != OutputReportType.CSV)
        {
            //Reset fields in CSV config form

            statusConfirmationData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.First();
            statusConfirmationData.CsvConfigOption.Header = CsvHeaderOptions.First();
            statusConfirmationData.CsvConfigOption.Delimiter = CsvDelimiterOptions.First();

            formContext.NotifyFieldChanged(FieldIdentifier.Create(() => statusConfirmationData.CsvConfigOption.Delimiter.Option));
        }
        statusConfirmationData.ExportType = exportType;

        if (!IsFilterApply) StateHasChanged();
    }

    /// <summary>
    ///  Occurs when selected item in PaperSize combobox changed
    /// </summary>
    /// <param name="size">New item selected</param>
    private async Task OnSelectPaperSizeChanged(PaperSize size)
    {
        statusConfirmationData.PaperSize = size;
        if (!IsFilterApply) StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    private async Task OnSelectedDelimiterOutput(SelectedOption<CSV_Delimiter> selectedItems)
    {
        if (statusConfirmationData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.Other && selectedItems.Option != CSV_Delimiter.Other)
        {
            statusConfirmationData.CsvConfigOption.DelimiterSymbol = string.Empty;
        }

        if (selectedItems.Option == CSV_Delimiter.FixedLength)
        {
            statusConfirmationData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.Where(_ => _.Option == CSV_Group.WithoutQuotes).FirstOrDefault();
            statusConfirmationData.CsvConfigOption.Header = CsvHeaderOptions.Where(_ => _.Option == CSV_Header.WithoutHeader).FirstOrDefault();
        }

        statusConfirmationData.CsvConfigOption.Delimiter = selectedItems;

        if (!IsFilterApply) StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    private async Task OnDelimiterTextChanged(string newValue, EditContext formContext)
    {
        isSearchable = formContext.Validate();
        isExportable = formContext.Validate();
        if (newValue?.Length > 1)
            statusConfirmationData.CsvConfigOption.DelimiterSymbol = newValue.Substring(0, 1);
        else
            statusConfirmationData.CsvConfigOption.DelimiterSymbol = newValue;

        if (!IsFilterApply) StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    private async Task OnSelectedHeadingOutput(SelectedOption<CSV_Header> selectedItems)
    {
        statusConfirmationData.CsvConfigOption.Header = selectedItems;
        if (!IsFilterApply) StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    private async Task OnSelectedGroupingOutput(SelectedOption<CSV_Group> selectedItems)
    {
        statusConfirmationData.CsvConfigOption.GroupSymbol = selectedItems;
        if (!IsFilterApply) StateHasChanged();
    }
    #endregion

    #endregion

    #region Helper

    private void OnValidationStateChanged(object sender, ValidationStateChangedEventArgs args)
    {
        bool ctxIsInvalid = ((EditContext)sender).GetValidationMessages().Any();

        isSearchable = !ctxIsInvalid && !EmptyErrorMessages.Any();
        isExportable = !((EditContext)sender).GetValidationMessages().Where(_ => _.Contains(Constants.ErrorMessage.SC_CsvSeparatorIsEmpty)).Any();
    }

    /// <summary>
    /// Add an error message to <see cref="EmptyErrorMessages" />. Validate empty system data
    /// </summary>
    /// <param name="message">Message error added</param>
    /// <param name="isAdd">Mark is add new. Default is true</param>
    private void ModifyEmptyErrorMessage(string message, bool isAdd = true)
    {
        if (isAdd)
        {
            if (!EmptyErrorMessages.Contains(message))
                EmptyErrorMessages.Add(message);
        }
        else
        {
            if (EmptyErrorMessages.Contains(message))
                EmptyErrorMessages.Remove(message);
        }
    }

    private void ResetSearchResult()
    {
        if (ResultSearch)
            ResultSearch = false;

        isSearching = true;
        IsCheckedAll = false;
        CurrentPage = 1;
        SelectedList.Clear();
        SearchResultDatas.Clear();

        StateHasChanged();
    }

    private void UpdateSummaryPricePage()
    {
        PageSummary = new PageSummaryData();

        SearchResultDatas.ForEach(item =>
        {
            PageSummary._sumBusFee += item._busFee;
            PageSummary._sumBusTax += item._busTaxAmount;
            PageSummary._sumBusCharge += item._busCharge;
            PageSummary._sumGuideFee += item._guideFee;
            PageSummary._sumGuideTax += item._guideTax;
            PageSummary._sumGuideCharge += item._guideCharge;
        });
    }

    private List<string> SetupHeaderCsvReport()
    {
        return new List<string>
{
            "受付番号",
            "予約区分", "予約区分名称",
            "受付年月日",
            "得意先コード", "得意先略称", "支店コード", "支店略称",
            "得意先担当者名",
            "仕入先コード", "仕入先略称", "仕入先支店コード", "仕入先支店略称",
            "受付営業所コード", "受付営業所略称",
            "予約書名", "配車年月日", "配車時間", "到着年月日", "到着時間", "配車地名", "到着地名", "団体名", "行先", "幹事氏名",
            "車種コード", "車種コード名称", "型区分",
            "型区分名称",
            "車種台数", "運賃累計", "消費税累計", "手数料累計", "乗車人員", "プラス人員", "確認回数", "確定年月日",
            "確認人数", "備考", "催行フラグ", "台数フラグ", "金額フラグ", "日程フラグ",
            "入力担当者コード", "入力担当者名称", "営業担当者コード", "営業担当者名称",
            "ガイド人数", "ガイド料累計", "ガイド料消費税累計", "ガイド料手数料累計"
        };
    }
    #endregion

    #region Order column table
    public async void ReOrderTable()
    {
        await _loadingService.ShowAsync();
        await Task.Run(() =>
        {
            var headerColumns = Header.Rows.Count > 0 ? Header.Rows[0].Columns : new List<ColumnHeaderTemplate>();
            List<TkdGridLy> gridLayouts = new List<TkdGridLy>();
            if (headerColumns.Count > 0)
            {
                for (int i = 0; i < headerColumns.Count; i++)
                {
                    string itemName = headerColumns[i].CodeName;
                    gridLayouts.Add(new TkdGridLy()
                    {
                        DspNo = i,
                        FormNm = filterConditionFormName,
                        FrozenCol = 0,
                        GridNm = StatusConfirmationGridHeaderNameConstants.GridName,
                        ItemNm = itemName,
                        SyainCdSeq = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                        UpdPrgId = Common.UpdPrgId,
                        UpdSyainCd = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                        UpdYmd = DateTime.Now.ToString().Substring(0, 10).Replace("/", string.Empty),
                        UpdTime = DateTime.Now.ToString().Substring(11).Replace(":", string.Empty),
                        Width = headerColumns[i].Width
                    });
                }
            }

            var isSaved = GridLayoutService.SaveGridLayout(gridLayouts).Result;
            InvokeAsync(StateHasChanged).Wait();
        });
        await _loadingService.HideAsync();
    }
    #endregion

    private async Task SaveCurrentFilter()
    {
        await FilterServices.SaveCustomFilterAndConditions(GetFieldValues(), filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
    }

    private Dictionary<string, string> GetFieldValues()
    {
        var result = new Dictionary<string, string>();
        result = StatusConfirmationService.GetFieldValues(
            StatusConfirmationData.ApplySelectAllFromNull(statusConfirmationData)
        );
        return result;
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns>True if has filter value saved in db</returns>
    private async Task<bool> ApplyFilter()
    {
        var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq)).ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues();
        if (filterValues.Count > 0)
        {
            IsFilterApply = true;
            statusConfirmationData = StatusConfirmationService.ApplyFilter(filterValues, CsvHeaderOptions, ConfirmStatusOptions, ConfirmedTimeOptions, Branches, Companies, ListGyosya, TokiskData, TokiStData, CsvGroupSymbolOptions, CsvDelimiterOptions);

            //await OnStartDateChanged(statusConfirmationData.StartDate);
            //await OnEndDateChanged(statusConfirmationData.EndDate);
            //await OnSelectedCompanyItemsChanged(Companies.SingleOrDefault(c => (c?.CompanyCdSeq ?? -1) == (statusConfirmationData.SelectedCompany?.CompanyCdSeq ?? -1)));
            //await OnSelectedBranchStartItemsChanged(Branches.SingleOrDefault(c => (c?.EigyoCdSeq ?? -1) == (statusConfirmationData.BranchStart?.EigyoCdSeq ?? -1)));
            //await OnSelectedBranchEndItemsChanged(Branches.SingleOrDefault(c => (c?.EigyoCdSeq ?? -1) == (statusConfirmationData.BranchEnd?.EigyoCdSeq ?? -1)));
            //await OnClickConfirmedStatus(null, statusConfirmationData.ConfirmedStatus);
            //await OnClickFixedStatus(null, statusConfirmationData.FixedStatus);
            //await OnSelectedNumberConfirmationChanged(ConfirmedTimeOptions.SingleOrDefault(c => c.Option == statusConfirmationData.ConfirmedTimes.Option));
            //await OnSelectedItemCheckChanged(ConfirmStatusOptions.SingleOrDefault(c => c.Option == statusConfirmationData.Saikou.Option));
            //await OnSelectedNumberUnitsChanged(ConfirmStatusOptions.SingleOrDefault(c => c.Option == statusConfirmationData.SumDai.Option));
            //await OnSelectedAmountChanged(ConfirmStatusOptions.SingleOrDefault(c => c.Option == statusConfirmationData.Ammount.Option));
            //await OnSelectedScheduleChanged(ConfirmStatusOptions.SingleOrDefault(c => c.Option == statusConfirmationData.ScheduleDate.Option));
            //OnExportTypeOptionClicked(null, statusConfirmationData.ExportType);
            //OnSelectPaperSizeChanged(statusConfirmationData.PaperSize);
            //OnSelectedHeadingOutput(CsvHeaderOptions.SingleOrDefault(c => c.Option == statusConfirmationData.CsvConfigOption.Header.Option));
            //OnSelectedGroupingOutput(CsvGroupSymbolOptions.SingleOrDefault(c => c.Option == statusConfirmationData.CsvConfigOption.GroupSymbol.Option));
            //OnSelectedDelimiterOutput(CsvDelimiterOptions.SingleOrDefault(c => c.Option == statusConfirmationData.CsvConfigOption.Delimiter.Option));
            // OnDelimiterTextChanged(statusConfirmationData.CsvConfigOption.DelimiterSymbol);

            IsFilterApply = false;
            StateHasChanged();
            return true;
        }
        return false;
    }
    async Task SelectedSize(MouseEventArgs e, int number)
    {
        statusConfirmationData.Size = number;
        await SaveCurrentFilter();
        StateHasChanged();
    }

    protected async Task SaveGridLayout(bool val)
    {
        if (val)
            await IJSRuntime.InvokeAsync<string>("KoboGrid.saveGridLayout", "KJ2000", JsonConvert.SerializeObject(new GridTemplate() { Header = Header, Body = Body }));
    }

    protected void CheckedChange(CheckedChangeEventArgs<StatusConfirmSearchResultData> args)
    {
        if (args.CheckedItems != null)
        {
            SelectedList = args.CheckedItems;
            StateHasChanged();
        }
    }

    protected void HandleItemPerPageChange(byte newItemPerPage)
    {
        RecordsPerPage = newItemPerPage;
        StateHasChanged();
    }

    private void GenrateGrid()
    {
        List<TkdGridLy> tkdGridLies = GridLayoutService.GetGridLayout(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, filterConditionFormName, StatusConfirmationGridHeaderNameConstants.GridName).Result;
        RenderGridBySavedLayout(tkdGridLies);
    }

    private void RenderGridBySavedLayout(List<TkdGridLy> gridlayouts)
    {
        HeaderTemplate headerTemplate = new HeaderTemplate();
        headerTemplate.Rows = new List<RowHeaderTemplate>();
        headerTemplate.StickyCount = 1;
        BodyTemplate bodyTemplate = new BodyTemplate();
        bodyTemplate.Rows = new List<RowBodyTemplate>();
        for (int i = 0; i < 3; i++)
        {
            headerTemplate.Rows.Add(new RowHeaderTemplate());
            bodyTemplate.Rows.Add(new RowBodyTemplate());
        }
        for (int i = 0; i < 3; i++)
        {
            headerTemplate.Rows[i].Columns = new List<ColumnHeaderTemplate>();
            bodyTemplate.Rows[i].Columns = new List<ColumnBodyTemplate>();
        }
        int CurrentIndex = 0;
        while (true)
        {
            // No
            if ((gridlayouts.Count == 0 && CurrentIndex == 0) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.NoItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["No"], RowSpan = 3, CodeName = StatusConfirmationGridHeaderNameConstants.NoItemNm, Width = gridlayouts.Count == 0 ? 40 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.No), RowSpan = 3, AlignCol = AlignColEnum.Center });
            }
            //得意先名,得意先担当者,仕入先名
            if ((gridlayouts.Count == 0 && CurrentIndex == 1) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.TokuiSakiItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["TokuiSaki"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.TokuiSakiItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["TokuiStaff"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.TokuiStaffItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ShiireSaki"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.ShiireSakiItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.TokuiSaki), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.TokuiStaff), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ShiireSaki), RowSpan = 1 });
            }
            //確認回数,確認年月日,画定年月日
            if ((gridlayouts.Count == 0 && CurrentIndex == 2) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.ConfirmedTimeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ConfirmedTime"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.ConfirmedTimeItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ConfirmedYmd"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.ConfirmedYmdItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["FixedYmd"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.FixedYmdItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ConfirmedTime), RowSpan = 1, AlignCol = AlignColEnum.Center });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ConfirmedYmd), RowSpan = 1, AlignCol = AlignColEnum.Center });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.FixedYmd), RowSpan = 1, AlignCol = AlignColEnum.Center });
            }
            //確認人数,確認相手,備考
            if ((gridlayouts.Count == 0 && CurrentIndex == 3) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.ConfirmedPersonItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ConfirmedPerson"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.ConfirmedPersonItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ConfirmedBy"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.ConfirmedByItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["NoteContent"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.NoteContentItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ConfirmedPerson), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ConfirmedBy), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.NoteContent), RowSpan = 1 });
            }
            //催行

            if ((gridlayouts.Count == 0 && CurrentIndex == 4) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.SaikouItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Saikou"], RowSpan = 3, TextDisplay = DisplayTextHeader.Vertical, CodeName = StatusConfirmationGridHeaderNameConstants.SaikouItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.Saikou), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean });
            }
            //台数
            if ((gridlayouts.Count == 0 && CurrentIndex == 5) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.SumDaiItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["SumDai"], RowSpan = 3, TextDisplay = DisplayTextHeader.Vertical, CodeName = StatusConfirmationGridHeaderNameConstants.SumDaiItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.SumDai), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean });
            }
            //金額
            if ((gridlayouts.Count == 0 && CurrentIndex == 6) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.AmmountItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Ammount"], RowSpan = 3, TextDisplay = DisplayTextHeader.Vertical, CodeName = StatusConfirmationGridHeaderNameConstants.AmmountItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.SumAmount), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean });
            }
            //日程
            if ((gridlayouts.Count == 0 && CurrentIndex == 7) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.ScheduleDateItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ScheduleDate"], TextDisplay = DisplayTextHeader.Vertical, RowSpan = 3, CodeName = StatusConfirmationGridHeaderNameConstants.ScheduleDateItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ScheduledDate), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean });
            }
            //団体名,幹事氏名,行き先名
            if ((gridlayouts.Count == 0 && CurrentIndex == 8) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.DanTaiNameItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["DanTaiName"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.DanTaiNameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["KanjiName"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.KanjiNameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["DestinationName"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.DestinationNameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.DanTaiName), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.KanjiName), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.DestinationName), RowSpan = 1 });
            }
            //配車項目,到着項目,乗車人員
            if ((gridlayouts.Count == 0 && CurrentIndex == 9) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.HaishaInfoItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["HaishaInfo"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.HaishaInfoItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["TouInfo"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.TouInfoItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["PassengerInfo"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.PassengerInfoItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.HaishaInfoStrRow1), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.HaishaInfoStrRow2), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.HaishaInfoStrRow3), RowSpan = 1 });
            }
            //車種
            if ((gridlayouts.Count == 0 && CurrentIndex == 10) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.BusTypeInfoItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BusTypeInfo"], RowSpan = 1, ColSpan = 3, CodeName = StatusConfirmationGridHeaderNameConstants.BusTypeInfoItemNm, Width = gridlayouts.Count == 0 ? 246 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BusName"], RowSpan = 2 });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BusType"], RowSpan = 2 });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Daisu"], RowSpan = 2 });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BusViewDatas), RowSpan = 3, ColSpan = 1, CustomTextFormatDelegate = KoboGridHelper.BreakListBusViewDatas_BusName, CustomCss = "text-preline" });
                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BusViewDatas), RowSpan = 3, ColSpan = 1, CustomTextFormatDelegate = KoboGridHelper.BreakListBusViewDatas_BusType, CustomCss = "text-preline" });
                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BusViewDatas), RowSpan = 3, ColSpan = 1, CustomTextFormatDelegate = KoboGridHelper.BreakListBusViewDatas_Daisu, AlignCol = AlignColEnum.Right, CustomCss = "text-preline" });
            }
            //運賃,消費税額,手数料額
            if ((gridlayouts.Count == 0 && CurrentIndex == 11) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.BusFeeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BusFee"], RowSpan = 1, ColSpan = 2, CodeName = StatusConfirmationGridHeaderNameConstants.BusFeeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ConsumptionTax"], RowSpan = 1, ColSpan = 2, CodeName = StatusConfirmationGridHeaderNameConstants.ConsumptionTaxItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["FeeAmount"], RowSpan = 1, ColSpan = 2, CodeName = StatusConfirmationGridHeaderNameConstants.PassengerInfoItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BusFee), RowSpan = 1, ColSpan = 2, CustomTextFormatDelegate = KoboGridHelper.ToFormatC, AlignCol = AlignColEnum.Right });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BusTaxRate), RowSpan = 1, AlignCol = AlignColEnum.Left, CustomCss = "border-right-0" });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BusTaxAmount), RowSpan = 1, CustomTextFormatDelegate = KoboGridHelper.ToFormatC, AlignCol = AlignColEnum.Right, CustomCss = "border-left-0" });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BusChargeRate), RowSpan = 1, AlignCol = AlignColEnum.Left, CustomCss = "border-right-0" });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BusCharge), RowSpan = 1, CustomTextFormatDelegate = KoboGridHelper.ToFormatC, AlignCol = AlignColEnum.Right, CustomCss = "border-left-0" });
            }
            //ガイド料,消費税額,手数料額
            if ((gridlayouts.Count == 0 && CurrentIndex == 12) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.GuideFeeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["GuideFee"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.GuideFeeItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ConsumptionTax"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.ConsumptionTaxGuideItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["FeeAmount"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.FeeAmountGuideItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.GuideFee), RowSpan = 1, AlignCol = AlignColEnum.Right });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.GuideTax), RowSpan = 1, AlignCol = AlignColEnum.Right });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.GuideCharge), RowSpan = 1, AlignCol = AlignColEnum.Right });
            }
            //受付営業所,営業担当者,入力担当者
            if ((gridlayouts.Count == 0 && CurrentIndex == 13) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.BranchOptionsItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BranchOptions"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.BranchOptionsItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ReceivedBy"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.ReceivedByItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["InputBy"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.InputByItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ReceivedBranch), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ReceivedBy), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.InputBy), RowSpan = 1 });
            }
            //予約区分,受付年月日,受付番号
            if ((gridlayouts.Count == 0 && CurrentIndex == 14) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.BookingTypeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BookingType"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.BookingTypeItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["ReceivedYmd"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.ReceivedYmdItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BookingNo"], RowSpan = 1, CodeName = StatusConfirmationGridHeaderNameConstants.BookingNoItemNm, Width = gridlayouts.Count == 0 ? 120 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BookingType), RowSpan = 1, AlignCol = AlignColEnum.Center });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.ReceivedYmd), RowSpan = 1, AlignCol = AlignColEnum.Center });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.BookingNo), RowSpan = 1, AlignCol = AlignColEnum.Center });
            }
            //ガイド
            if ((gridlayouts.Count == 0 && CurrentIndex == 15) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.GuideItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Guide"], RowSpan = 3, TextDisplay = DisplayTextHeader.Vertical, CodeName = StatusConfirmationGridHeaderNameConstants.SaikouItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.Saikou), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean, AlignCol = AlignColEnum.Center });
            }
            //行程
            if ((gridlayouts.Count == 0 && CurrentIndex == 16) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.KoteiItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Kotei"], RowSpan = 3, TextDisplay = DisplayTextHeader.Vertical, CodeName = StatusConfirmationGridHeaderNameConstants.KoteiItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.Kotei), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean, AlignCol = AlignColEnum.Center });
            }
            //積込
            if ((gridlayouts.Count == 0 && CurrentIndex == 17) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.TsuMiItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["TsuMi"], RowSpan = 3, TextDisplay = DisplayTextHeader.Vertical, CodeName = StatusConfirmationGridHeaderNameConstants.TsuMiItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.TsuMi), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean, AlignCol = AlignColEnum.Center });
            }
            //手配
            if ((gridlayouts.Count == 0 && CurrentIndex == 18) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.TehaiItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Tehai"], TextDisplay = DisplayTextHeader.Vertical, RowSpan = 3, CodeName = StatusConfirmationGridHeaderNameConstants.TehaiItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.Tehai), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean, AlignCol = AlignColEnum.Center });
            }
            //付帯
            if ((gridlayouts.Count == 0 && CurrentIndex == 19) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == StatusConfirmationGridHeaderNameConstants.FutaiItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Futai"], RowSpan = 3, TextDisplay = DisplayTextHeader.Vertical, CodeName = StatusConfirmationGridHeaderNameConstants.FutaiItemNm, Width = gridlayouts.Count == 0 ? 30 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(StatusConfirmSearchResultData.Futai), RowSpan = 3, CustomTextFormatDelegate = KoboGridHelper.MarkedBoolean, AlignCol = AlignColEnum.Center });
                if (gridlayouts.Count == 0)
                {
                    break;
                }
            }
            CurrentIndex++;
            if (gridlayouts.Count != 0 && CurrentIndex >= gridlayouts.Count)
            {
                break;
            }
        }
        Header = headerTemplate;
        Body = bodyTemplate;
    }
    public async void InitGridLayout()
    {

        await _loadingService.ShowAsync();
        await Task.Run(() =>
        {
            List<TkdGridLy> tkdGridLies = new List<TkdGridLy>();
            RenderGridBySavedLayout(tkdGridLies);
            DeleteSavedGridLayout();
            InvokeAsync(StateHasChanged).Wait();
        });
        await _loadingService.HideAsync();
    }
    private void DeleteSavedGridLayout()
    {
        var isDeleted = GridLayoutService.DeleteSavedGridLayout(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, filterConditionFormName, StatusConfirmationGridHeaderNameConstants.GridName).Result;
    }
}
