@page "/cancellist"
@inject IStringLocalizer<CancelList> Lang
@inject IJSRuntime IJSRuntime
@inject ITPM_YoyKbnDataListService TPM_YoyKbnDataService
@inject ITPM_CompnyDataListService CompanyDataService
@inject ITPM_EigyosDataListService BranchDataService
@inject ICustomerListService CustomerService
@inject ITPM_CodeKbListService CodeKbService
@inject ICancelListReportService CancelListReportService
@inject AppSettingsService AppSettingsService
@inject CustomHttpClient Http
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostingEnvironment
@inject IFilterCondition FilterServices
@inject ILoadingService _loadingService
@inject IGridLayoutService GridLayoutService
@using HassyaAllrightCloud.Pages.Components.CommonComponents
@using HassyaAllrightCloud.IService.CommonComponents;
@using HassyaAllrightCloud.Domain.Dto.CommonComponents;
@inject ICustomerComponentService _service
@inject IReservationClassComponentService _yoyakuservice
@inject IErrorHandlerService errorModalService

@if (!IsFilterApply)
{
    <DxPopup CssClass="custom-popup" @bind-Visible="@notifyNotFound" Scrollable="true">
        <HeaderTemplate>
            <div class="custom-header bg-primary text-white w-100">
                @Lang["Information"]
                <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => notifyNotFound = false)"></a>
            </div>
        </HeaderTemplate>
        <ChildContent>
            <i class="fa fa-2x fa-info-circle" aria-hidden="true" />
            @NotFound
        </ChildContent>
        <FooterTemplate>
            <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => notifyNotFound = false)" Text="@Lang["OK"]" />
        </FooterTemplate>
    </DxPopup>
}

<DxPopup CssClass="custom-popup modal-xl" @bind-Visible="@isShowPreviewReport" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ReportTitle"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => isShowPreviewReport = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <DxDocumentViewer ReportUrl="@($"{nameof(ICancelListReportService)}?" + PreviewReportUrl)" Height="800px" Width="100%">
            <DxDocumentViewerTabPanelSettings Width="180" />
        </DxDocumentViewer>
    </Content>
</DxPopup>

<div class="d-flex justify-content-between align-items-center mb-2">
    <h5 class="mb-0">@Lang["page_title"]</h5>
    <button class="btn btn-sm btn-danger btnclear" @onclick="async () => await ResetSearchOption()">
        <i class="fa fa-refresh" aria-hidden="true"></i>
        @Lang["clear"]
    </button>
</div>

@if (isLoading)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}
else
{
    <div class="main-top mb-2">
        <EditForm EditContext="@formContext">
            <DataAnnotationsValidator />
            <FluentValidator TValidator="CancelListValidator" />
            <div id="control-tab" class="title-section mb-2">
                <i class="fa fa-angle-down" aria-hidden="true"></i> @Lang["condition"]
            </div>
            <div class="express-condition mb-2" style="display: none">
                <DxTabs @bind-ActiveTabIndex="@ActiveTabIndex">
                    <DxTab Text="@Lang["tab_1"]"></DxTab>
                    <DxTab Text="@Lang["tab_2"]"></DxTab>
                    <DxTab Text="@Lang["tab_3"]"></DxTab>
                    <DxTab Text="@Lang["tab_4"]"></DxTab>
                </DxTabs>
                <div class="card dxbs-border-top-0 dxbs-border-radius-top-0">
                    <div class="card-body pb-0 cancell-list">
                        @switch (ActiveTabIndex)
                        {
                            case 0:
                                <div class="d-flex">
                                    <div class="form-group d-flex flex-nowrap">
                                        <label class="col-form-label-sm width--90 mr-3">@Lang["CancelDateType"]</label>
                                        <div>
                                            <nav class="nav nav-pills">
                                                <a href="javascript:void(0)" class="nav-link @(cancelFormData.DateType == DateType.Cancellation ? "active" : null)" @onclick="@(e => DateTypeChanged(e, DateType.Cancellation))">@Lang["cancellation_date"]</a>
                                                <a href="javascript:void(0)" class="nav-link @(cancelFormData.DateType == DateType.VehicleDelivery ? "active" : null)" @onclick="@(e => DateTypeChanged(e, DateType.VehicleDelivery))">@Lang["vehicle_delivery"]</a>
                                                <a href="javascript:void(0)" class="nav-link @(cancelFormData.DateType == DateType.Arrival ? "active" : null)" @onclick="@(e => DateTypeChanged(e, DateType.Arrival))">@Lang["nextday"]</a>
                                            </nav>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap flex-nowrap">
                                        <label class="col-form-label-sm mr-3">@Lang["BookingType"]</label>
                                        <div class="item-inline">
                                            <ReservationClassComponent LangDic="@LangDic"
                                                                       isAddNullItem="true"
                                                                       DefaultValue="@(cancelFormData.YoyakuFrom != null ? cancelFormData.YoyakuFrom.YoyaKbnSeq : 0)"
                                                                       SelectedReservationClass="@cancelFormData.YoyakuFrom"
                                                                       ReservationClassExpression="@(() => cancelFormData.YoyakuFrom)"
                                                                       SelectedReservationClassChanged="(e) => OnBookingTypeChanged(e, true, true)">
                                            </ReservationClassComponent>
                                        </div>
                                        <span class="mx-3">～</span>
                                        <div class="item-inline">
                                            <ReservationClassComponent LangDic="@LangDic"
                                                                       isAddNullItem="true"
                                                                       DefaultValue="@(cancelFormData.YoyakuTo != null ? cancelFormData.YoyakuTo.YoyaKbnSeq : 0)"
                                                                       SelectedReservationClass="@cancelFormData.YoyakuTo"
                                                                       ReservationClassExpression="@(() => cancelFormData.YoyakuTo)"
                                                                       SelectedReservationClassChanged="(e) => OnBookingTypeChanged(e, false, true)">
                                            </ReservationClassComponent>
                                        </div>
                                    </div>
                                </div>
                                <div class="d-flex">
                                    <div class="form-group d-flex flex-nowrap mr-5">
                                        <label class="col-form-label-sm width--90 text-right mr-3">&nbsp;</label>
                                        <div class="has-tooltip-error">
                                            <Tooltip ValueExpressions="@(() =>cancelFormData.StartDate)" Lang="@LangDic"
                                                     Text="" Position="PositionTooltip.top">
                                            </Tooltip>
                                            <DxDateEdit Date="@cancelFormData.StartDate"
                                                        Format="yyyy/MM/dd"
                                                        DateChanged="@((newValue) => OnStartDateChanged(newValue))"
                                                        DateExpression="@(() => cancelFormData.StartDate)"
                                                        CssClass="width--120"></DxDateEdit>
                                        </div>
                                        <span class="mx-3">～</span>
                                        <div class="has-tooltip-error">
                                            <Tooltip ValueExpressions="@(() =>cancelFormData.EndDate)" Lang="@LangDic"
                                                     Text="" Position="PositionTooltip.top">
                                            </Tooltip>
                                            <DxDateEdit Date="@cancelFormData.EndDate"
                                                        Format="yyyy/MM/dd"
                                                        DateChanged="@((newValue) => OnEndDateChanged(newValue))"
                                                        DateExpression="@(() => cancelFormData.EndDate)"
                                                        CssClass="width--120"></DxDateEdit>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5">
                                        <label class="col-form-label-sm mr-3">@Lang["Company"]</label>
                                        <div class="has-tooltip-error">
                                            <Tooltip ValueExpressions="@(() =>cancelFormData.Company)" Lang="@LangDic"
                                                     Text="" Position="PositionTooltip.top">
                                            </Tooltip>
                                            <DxComboBox Data="Companies"
                                                        NullText="@Lang["CompanyNullText"]"
                                                        TextFieldName="CompanyInfo"
                                                        AllowUserInput="false"
                                                        SelectedItem="@cancelFormData.Company"
                                                        SelectedItemChanged="async (e) => await OnCompanySelectedChanged(e)"
                                                        SelectedItemExpression="@(() => @cancelFormData.Company)"
                                                        CssClass="width--130">
                                            </DxComboBox>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5">
                                        <label class="col-form-label-sm mr-3">@Lang["CancelBookingType"]</label>
                                        <div class="has-tooltip-error">
                                            <Tooltip ValueExpressions="@(() =>cancelFormData.CancelBookingType)" Lang="@LangDic"
                                                     Text="" Position="PositionTooltip.top">
                                            </Tooltip>
                                            <DxComboBox Data="CancelBookingTypes"
                                                        TextFieldName="CodeKbnName"
                                                        AllowUserInput="false"
                                                        SelectedItem="@cancelFormData.CancelBookingType"
                                                        SelectedItemChanged="@((value) => OnCancelBookingTypeChanged(value))"
                                                        SelectedItemExpression="()=>cancelFormData.CancelBookingType"
                                                        CssClass="width--190">
                                            </DxComboBox>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap ml-5">
                                        <label class="col-form-label-sm mr-3">@Lang["CancelCharge"]</label>
                                        <DxComboBox Data="CancelCharges"
                                                    TextFieldName="DisplayName"
                                                    AllowUserInput="false"
                                                    SelectedItem="@cancelFormData.CancelCharge"
                                                    SelectedItemChanged="@OnCancelChargeChanged"
                                                    SelectedItemExpression="()=>cancelFormData.CancelCharge"
                                                    CssClass="width--130">
                                        </DxComboBox>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="col-sm-6">
                                        <div class="form-group d-sm-flex flex-nowrap">
                                            <label class="col-form-label-sm width--90 mr-3 text-left">@Lang["UkeCd"]</label>
                                            <div class="item-inline has-tooltip-error">
                                                <Tooltip ValueExpressions="@(() =>cancelFormData.UkeCdTo)" Lang="@LangDic"
                                                         Text="" Position="PositionTooltip.top" />
                                                <DxTextBox Text="@cancelFormData.UkeCdFrom"
                                                           TextChanged="@((newValue) => OnUkeCdChanged(newValue))"
                                                           TextExpression="@(() => cancelFormData.UkeCdTo)"
                                                           CssClass="filter-inline date-sm custom-bill-combo-box pdr-dxcombo code-number length10" />
                                            </div>
                                            <label class="col-form-label-sm from-to">～</label>
                                            <div class="item-inline has-tooltip-error">
                                                <Tooltip ValueExpressions="@(() =>cancelFormData.UkeCdTo)" Lang="@LangDic"
                                                         Text="" Position="PositionTooltip.top" />
                                                <DxTextBox Text="@cancelFormData.UkeCdTo"
                                                           TextChanged="@((newValue) =>  OnUkeCdChanged(newValue, false))"
                                                           TextExpression="()=> cancelFormData.UkeCdTo"
                                                           CssClass="filter-inline date-sm custom-bill-combo-box pdr-dxcombo code-number length10" />
                                            </div>
                                        </div>
                                        <div class="form-group d-sm-flex flex-nowrap">
                                            <label class="col-form-label-sm width--90 mr-3 text-left">@Lang["Customer"]</label>
                                            <div class="item-inline custom-width-cmbccll cmb-from">
                                                <CustomerComponent LangDic="@LangDic"
                                                                   isGyosyaAddNull="true"
                                                                   isTokiskAddNull="true"
                                                                   isTokiStAddNull="true"
                                                                   DefaultGyosya="@(cancelFormData.GyosyaTokuiSakiFrom != null ? cancelFormData.GyosyaTokuiSakiFrom.GyosyaCdSeq : 0)"
                                                                   SelectedGyosya="@cancelFormData.GyosyaTokuiSakiFrom"
                                                                   GyosyaExpression="@(() => cancelFormData.GyosyaTokuiSakiFrom)"
                                                                   SelectedGyosyaChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.GyosyaTokuiSakiFrom), newValue, formContext, true))"
                                                                   DefaultTokisk="@(cancelFormData.TokiskTokuiSakiFrom != null ? cancelFormData.TokiskTokuiSakiFrom.TokuiSeq : 0)"
                                                                   SelectedTokisk="@cancelFormData.TokiskTokuiSakiFrom"
                                                                   TokiskExpression="@(() => cancelFormData.TokiskTokuiSakiFrom)"
                                                                   SelectedTokiskChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.TokiskTokuiSakiFrom), newValue, formContext, true))"
                                                                   DefaultTokiSt="@(cancelFormData.TokiStTokuiSakiFrom != null ? cancelFormData.TokiStTokuiSakiFrom.SitenCdSeq : 0)"
                                                                   SelectedTokiSt="@cancelFormData.TokiStTokuiSakiFrom"
                                                                   TokiStExpression="@(() => cancelFormData.TokiStTokuiSakiFrom)"
                                                                   SelectedTokiStChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.TokiStTokuiSakiFrom), newValue, formContext, true))"></CustomerComponent>

                                            </div>
                                        </div>
                                        <div class="form-group d-sm-flex flex-nowrap">
                                            <label class="col-form-label-sm width--90 mr-3 text-left">@Lang["Supplier"]</label>
                                            <div class="item-inline custom-width-cmbccll cmb-from">
                                                <CustomerComponent LangDic="@LangDic"
                                                                   isGyosyaAddNull="true"
                                                                   isTokiskAddNull="true"
                                                                   isTokiStAddNull="true"
                                                                   DefaultTokiskNullText="@Lang["SupplierNullText"]"
                                                                   DefaultGyosya="@(cancelFormData.GyosyaShiireSakiFrom != null ? cancelFormData.GyosyaShiireSakiFrom.GyosyaCdSeq : 0)"
                                                                   SelectedGyosya="@cancelFormData.GyosyaShiireSakiFrom"
                                                                   GyosyaExpression="@(() => cancelFormData.GyosyaShiireSakiFrom)"
                                                                   SelectedGyosyaChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.GyosyaShiireSakiFrom), newValue, formContext, true))"
                                                                   DefaultTokisk="@(cancelFormData.TokiskShiireSakiFrom != null ? cancelFormData.TokiskShiireSakiFrom.TokuiSeq : 0)"
                                                                   SelectedTokisk="@cancelFormData.TokiskShiireSakiFrom"
                                                                   TokiskExpression="@(() => cancelFormData.TokiskShiireSakiFrom)"
                                                                   SelectedTokiskChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.TokiskShiireSakiFrom), newValue, formContext, true))"
                                                                   DefaultTokiSt="@(cancelFormData.TokiStShiireSakiFrom != null ? cancelFormData.TokiStShiireSakiFrom.SitenCdSeq : 0)"
                                                                   SelectedTokiSt="@cancelFormData.TokiStShiireSakiFrom"
                                                                   TokiStExpression="@(() => cancelFormData.TokiStShiireSakiFrom)"
                                                                   SelectedTokiStChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.TokiStShiireSakiFrom), newValue, formContext, true))"></CustomerComponent>

                                            </div>
                                        </div>
                                        <div class="form-group d-sm-flex flex-nowrap">
                                            <label class="col-form-label-sm width--90 mr-3 text-left">@Lang["Staff"]</label>
                                            <div class="item-inline has-tooltip-error">
                                                <Tooltip ValueExpressions="@(() =>cancelFormData.StaffStart)" Lang="@LangDic"
                                                         Text="" Position="PositionTooltip.top" />
                                                <DxComboBox NullText="@Lang["StaffNullText"]"
                                                            Data="Staffs"
                                                            TextFieldName="StaffText"
                                                            AllowUserInput="false"
                                                            SelectedItem="@cancelFormData.StaffStart"
                                                            SelectedItemChanged="@(e => OnStaffSelectedChanged(e))"
                                                            SelectedItemExpression="@(() => cancelFormData.StaffStart)"
                                                            CssClass="filter-inline date-sm custom-bill-combo-box pdr-dxcombo" />
                                            </div>
                                            <label class="col-form-label-sm from-to">～</label>
                                            <div class="item-inline has-tooltip-error">
                                                <Tooltip ValueExpressions="@(() =>cancelFormData.StaffStart)" Lang="@LangDic"
                                                         Text="" Position="PositionTooltip.top" />
                                                <DxComboBox NullText="@Lang["StaffNullText"]"
                                                            Data="Staffs"
                                                            TextFieldName="StaffText"
                                                            AllowUserInput="false"
                                                            SelectedItem="@cancelFormData.StaffEnd"
                                                            SelectedItemChanged="@(e => OnStaffSelectedChanged(e, false))"
                                                            SelectedItemExpression="@(() => cancelFormData.StaffStart)"
                                                            CssClass="filter-inline date-sm custom-bill-combo-box pdr-dxcombo" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="form-group d-sm-flex flex-nowrap">
                                            <label class="col-form-label-sm condition-label-custom text-left pl-3">@Lang["Branch"]</label>
                                            <div class="item-inline has-tooltip-error">
                                                <Tooltip ValueExpressions="@(() =>cancelFormData.BranchStart)" Lang="@LangDic"
                                                         Text="" Position="PositionTooltip.top" />
                                                <DxComboBox Data="@Branches"
                                                            NullText="@Lang["BranchNullText"]"
                                                            TextFieldName="BranchText"
                                                            AllowUserInput="false"
                                                            SelectedItem="@cancelFormData.BranchStart"
                                                            SelectedItemChanged="@((newBranch)=> OnSaleBranchChanged(newBranch))"
                                                            SelectedItemExpression="@(()=>@cancelFormData.BranchStart)"
                                                            CssClass="filter-inline date-sm custom-bill-combo-box pdr-dxcombo" />
                                            </div>
                                            <label class="col-form-label-sm from-to">～</label>
                                            <div class="item-inline has-tooltip-error">
                                                <Tooltip ValueExpressions="@(() =>cancelFormData.BranchStart)" Lang="@LangDic"
                                                         Text="" Position="PositionTooltip.top" />
                                                <DxComboBox Data="@Branches"
                                                            NullText="@Lang["BranchNullText"]"
                                                            TextFieldName="BranchText"
                                                            AllowUserInput="false"
                                                            SelectedItem="@cancelFormData.BranchEnd"
                                                            SelectedItemChanged="@((newBranch)=> OnSaleBranchChanged(newBranch, false))"
                                                            SelectedItemExpression="@(()=>@cancelFormData.BranchStart)"
                                                            CssClass="filter-inline date-sm custom-bill-combo-box pdr-dxcombo" />
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap">
                                            <label class="col-form-label-sm from-to width--90 text-left lbl-from-to">～</label>
                                            <div class="item-inline custom-width-cmbccll cmb-to">
                                                <CustomerComponent LangDic="@LangDic"
                                                                   isGyosyaAddNull="true"
                                                                   isTokiskAddNull="true"
                                                                   isTokiStAddNull="true"
                                                                   DefaultGyosya="@(cancelFormData.GyosyaTokuiSakiTo != null ? cancelFormData.GyosyaTokuiSakiTo.GyosyaCdSeq : 0)"
                                                                   SelectedGyosya="@cancelFormData.GyosyaTokuiSakiTo"
                                                                   GyosyaExpression="@(() => cancelFormData.GyosyaTokuiSakiTo)"
                                                                   SelectedGyosyaChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.GyosyaTokuiSakiTo), newValue, formContext, true))"
                                                                   DefaultTokisk="@(cancelFormData.TokiskTokuiSakiTo != null ? cancelFormData.TokiskTokuiSakiTo.TokuiSeq : 0)"
                                                                   SelectedTokisk="@cancelFormData.TokiskTokuiSakiTo"
                                                                   TokiskExpression="@(() => cancelFormData.TokiskTokuiSakiTo)"
                                                                   SelectedTokiskChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.TokiskTokuiSakiTo), newValue, formContext, true))"
                                                                   DefaultTokiSt="@(cancelFormData.TokiStTokuiSakiTo != null ? cancelFormData.TokiStTokuiSakiTo.SitenCdSeq : 0)"
                                                                   SelectedTokiSt="@cancelFormData.TokiStTokuiSakiTo"
                                                                   TokiStExpression="@(() => cancelFormData.TokiStTokuiSakiTo)"
                                                                   SelectedTokiStChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.TokiStTokuiSakiTo), newValue, formContext, true))"></CustomerComponent>
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap">
                                            <label class="col-form-label-sm from-to width--90 text-left lbl-from-to">～</label>
                                            <div class="item-inline custom-width-cmbccll cmb-to">
                                                <CustomerComponent LangDic="@LangDic"
                                                                   isGyosyaAddNull="true"
                                                                   isTokiskAddNull="true"
                                                                   isTokiStAddNull="true"
                                                                   DefaultTokiskNullText="@Lang["SupplierNullText"]"
                                                                   DefaultGyosya="@(cancelFormData.GyosyaShiireSakiTo != null ? cancelFormData.GyosyaShiireSakiTo.GyosyaCdSeq : 0)"
                                                                   SelectedGyosya="@cancelFormData.GyosyaShiireSakiTo"
                                                                   GyosyaExpression="@(() => cancelFormData.GyosyaShiireSakiTo)"
                                                                   SelectedGyosyaChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.GyosyaShiireSakiTo), newValue, formContext, true))"
                                                                   DefaultTokisk="@(cancelFormData.TokiskShiireSakiTo != null ? cancelFormData.TokiskShiireSakiTo.TokuiSeq : 0)"
                                                                   SelectedTokisk="@cancelFormData.TokiskShiireSakiTo"
                                                                   TokiskExpression="@(() => cancelFormData.TokiskShiireSakiTo)"
                                                                   SelectedTokiskChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.TokiskShiireSakiTo), newValue, formContext, true))"
                                                                   DefaultTokiSt="@(cancelFormData.TokiStShiireSakiTo != null ? cancelFormData.TokiStShiireSakiTo.SitenCdSeq : 0)"
                                                                   SelectedTokiSt="@cancelFormData.TokiStShiireSakiTo"
                                                                   TokiStExpression="@(() => cancelFormData.TokiStShiireSakiTo)"
                                                                   SelectedTokiStChanged="@((newValue) => ChangeValueForm(nameof(cancelFormData.TokiStShiireSakiTo), newValue, formContext, true))"></CustomerComponent>
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap">
                                            <label class="col-form-label-sm condition-label-custom text-left pl-3">@Lang["CancelStaff"]</label>
                                            <div class="item-inline has-tooltip-error">
                                                <Tooltip ValueExpressions="@(() =>cancelFormData.CancelStaffStart)" Lang="@LangDic"
                                                         Text="" Position="PositionTooltip.top" />
                                                <DxComboBox NullText="@Lang["CancelStaffNullText"]"
                                                            Data="Staffs"
                                                            TextFieldName="StaffText"
                                                            AllowUserInput="false"
                                                            SelectedItem="@cancelFormData.CancelStaffStart"
                                                            SelectedItemChanged="@(e => OnCancelStaffSelectedChanged(e))"
                                                            SelectedItemExpression="@(() => cancelFormData.CancelStaffStart)"
                                                            CssClass="filter-inline date-sm custom-bill-combo-box pdr-dxcombo" />
                                            </div>
                                            <label class="col-form-label-sm from-to text-left">～</label>
                                            <div class="item-inline has-tooltip-error">
                                                <Tooltip ValueExpressions="@(() =>cancelFormData.CancelStaffStart)" Lang="@LangDic"
                                                         Text="" Position="PositionTooltip.top" />
                                                <DxComboBox NullText="@Lang["CancelStaffNullText"]"
                                                            Data="Staffs"
                                                            TextFieldName="StaffText"
                                                            AllowUserInput="false"
                                                            SelectedItem="@cancelFormData.CancelStaffEnd"
                                                            SelectedItemChanged="@(e => OnCancelStaffSelectedChanged(e, false))"
                                                            SelectedItemExpression="@(() => cancelFormData.CancelStaffStart)"
                                                            CssClass="filter-inline date-sm custom-bill-combo-box pdr-dxcombo" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                break;
                            case 1:
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3">@Lang["switching_width"]</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link width--65 text-center @(cancelFormData.Size == (int)ViewMode.Large ? "active" : null)" @onclick="@(e => SelectedSize(e, (int)ViewMode.Large))">@Lang["large"]</a>
                                        <a href="javascript:void(0)" class="nav-link width--65 text-center @(cancelFormData.Size == (int)ViewMode.Medium ? "active" : null)" @onclick="@(e => SelectedSize(e, (int)ViewMode.Medium))">@Lang["medium"]</a>
                                        <a href="javascript:void(0)" class="nav-link width--65 text-center @(cancelFormData.Size == (int)ViewMode.Small ? "active" : null)" @onclick="@(e => SelectedSize(e, (int)ViewMode.Small))">@Lang["small"]</a>
                                    </nav>
                                </div>
                                break;
                            case 2:
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3">@Lang["print_mode"]</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link width--110 text-center @(cancelFormData.ExportType == OutputReportType.Preview ? "active" : null)" @onclick="@(e => OnExportTypeClicked(e, OutputReportType.Preview))">@Lang["preview"]</a>
                                        <a href="javascript:void(0)" class="nav-link width--110 text-center @(cancelFormData.ExportType == OutputReportType.CSV ? "active" : null)" @onclick="@(e => OnExportTypeClicked(e, OutputReportType.CSV))">@Lang["csv"]</a>
                                        <a href="javascript:void(0)" class="nav-link width--110 text-center @(cancelFormData.ExportType == OutputReportType.ExportPdf ? "active" : null)" @onclick="@(e => OnExportTypeClicked(e, OutputReportType.ExportPdf))">@Lang["pdf"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-flex flex-nowrap align-items-center">
                                    <label class="col-form-label-sm mr-3">@Lang["form_setting"]</label>
                                    <div class="border p-2 form-group d-flex flex-nowrap @(cancelFormData.ExportType == OutputReportType.CSV ? "disabled-content" : null)">
                                        <div class="d-flex flex-nowrap">
                                            <label class="col-form-label-sm width--100 mr-3">@Lang["size_of_paper"]</label>
                                            <DxComboBox Data="@PaperSizeOptions"
                                                        AllowUserInput="false"
                                                        SelectedItem="@cancelFormData.PaperSize"
                                                        SelectedItemChanged="@OnPaperSizeChanged"
                                                        SelectedItemExpression="@(() => @cancelFormData.PaperSize)"
                                                        CssClass="width--120">
                                            </DxComboBox>
                                        </div>
                                        <div class="d-flex flex-nowrap ml-5">
                                            <label class="col-form-label-sm width--100 mr-3">@Lang["pagebreak_specification"]</label>
                                            <DxComboBox Data="@BreakPageOptions"
                                                        TextFieldName="DisplayName"
                                                        AllowUserInput="false"
                                                        SelectedItem="@cancelFormData.BreakPage"
                                                        SelectedItemChanged="@OnPageBreakChanged"
                                                        SelectedItemExpression="@(() => @cancelFormData.BreakPage)"
                                                        CssClass="width--120">
                                            </DxComboBox>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group d-flex flex-nowrap align-items-center">
                                    <label class="col-form-label-sm mr-3">@Lang["csv_setting"]</label>
                                    <div class="border pt-2 px-2 mb-2 form-group d-flex flex-nowrap @(cancelFormData.ExportType == OutputReportType.CSV ? null: "disabled-content")">
                                        <div class="form-group d-flex flex-nowrap">
                                            <label class="col-form-label-sm mr-3">@Lang["heading_ouput"]</label>
                                            <div class="@(cancelFormData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.FixedLength ? "disabled-content" : null)">
                                                <DxComboBox Data="@CsvHeaderOptions"
                                                            TextFieldName="DisplayName"
                                                            AllowUserInput="false"
                                                            SelectedItem="@(cancelFormData.CsvConfigOption.Header)"
                                                            SelectedItemChanged="@OnCsvHeaderChanged"
                                                            SelectedItemExpression="@(()=>@cancelFormData.CsvConfigOption.Header)"
                                                            CssClass="width--160"></DxComboBox>
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap ml-5">
                                            <label class="col-form-label-sm mr-3">@Lang["grouping_output"]</label>
                                            <div class="@(cancelFormData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.FixedLength ? "disabled-content" : null)">
                                                <DxComboBox Data="@CsvGroupSymbolOptions"
                                                            TextFieldName="DisplayName"
                                                            AllowUserInput="false"
                                                            SelectedItem="@cancelFormData.CsvConfigOption.GroupSymbol"
                                                            SelectedItemChanged="@OnGroupSymbolChanged"
                                                            SelectedItemExpression="@(()=>@cancelFormData.CsvConfigOption.GroupSymbol)"
                                                            CssClass="width--160"></DxComboBox>
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap ml-5">
                                            <label class="col-form-label-sm mr-3">@Lang["separator_output"]</label>
                                            <DxComboBox Data="@CsvDelimiterOptions"
                                                        TextFieldName="DisplayName"
                                                        AllowUserInput="false"
                                                        SelectedItem="@cancelFormData.CsvConfigOption.Delimiter"
                                                        SelectedItemChanged="@OnSeparatorChanged"
                                                        SelectedItemExpression="@(()=>@cancelFormData.CsvConfigOption.Delimiter)"
                                                        CssClass="width--160"></DxComboBox>
                                            @if (cancelFormData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.Other)
                                            {
                                                <div class="has-tooltip-error">
                                                    <Tooltip ValueExpressions="@(() =>cancelFormData.CsvConfigOption.DelimiterSymbol)" Lang="@LangDic"
                                                             Text="" Position="PositionTooltip.top">
                                                    </Tooltip>
                                                    <DxTextBox NullText="※その他文字"
                                                               Text="@cancelFormData.CsvConfigOption.DelimiterSymbol"
                                                               TextChanged="@((newValue) => OnDelimiterTextChanged(newValue))"
                                                               TextExpression="@(() => @cancelFormData.CsvConfigOption.DelimiterSymbol)"
                                                               CssClass="ml-3"
                                                               maxlength="1">
                                                    </DxTextBox>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="text-center form-group">
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary" CssClass="width--100" @onclick="@OnButtonReportClicked" Enabled="@isExportable" Text="@Lang["BtnExport"]"></DxButton>
                                </div>
                                break;
                            case 3:
                                <div class="form-group">
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="ReOrderTable" Text="@Lang["save"]" CssClass="width--100 mr-2" />
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="InitGridLayout" Text="@Lang["initialize"]" CssClass="width--100" />
                                </div>
                                break;
                        }
                    </div>
                </div>
            </div>
        </EditForm>
    </div>

    @if (ResultSearch)
    {
        <div class="sortby">
            <div class="form-group d-flex flex-nowrap align-items-center">
                <label class="col-form-label-sm mr-3">@Lang["display_order"]</label>
                <div class="list-button-display-order">
                    <nav class="nav nav-pills">
                        <a href="javascript:void(0)" class="nav-link @(cancelFormData.Sort == SortCancel.Customer ? "active" : null)" @onclick="@(e => OnSortOptionClicked(e, SortCancel.Customer))">@Lang["Customer"]</a>
                        <a href="javascript:void(0)" class="nav-link @(cancelFormData.Sort == SortCancel.CancellationDate ? "active" : null)" @onclick="@(e => OnSortOptionClicked(e, SortCancel.CancellationDate))">@Lang["cancellation_date"]</a>
                        <a href="javascript:void(0)" class="nav-link @(cancelFormData.Sort == SortCancel.VehicleDeliveryDate ? "active" : null)" @onclick="@(e => OnSortOptionClicked(e, SortCancel.VehicleDeliveryDate))">@Lang["vehicle_delivery"]</a>
                    </nav>
                </div>
            </div>
        </div>

        @if (Header != null && Body != null)
        {
            <KoboSimpleGrid Header="Header"
                            Body="Body"
                            DataItems="@PagedResultDatas"
                            ShowCheckbox="ShowCheckboxOptions"
                            CssClass="@(string.Format(" kobo-grid-size-{0} mn-3", cancelFormData.Size))"
                            OnRowClick="async e => await RowClick(e)"
                            CheckedItems="SelectedList"
                            CheckedItemsChanged="CheckedChange" />
            <Pagination TotalCount=@TotalItems
                        ItemPerPage=@RecordsPerPage
                        OnChangePage="async (page) => await OnPaginationChanged(page)"
                        OnChangeItemPerPage="(value) => HandleItemPerPageChange(value)"
                        @ref="paging" />
            <div id="total-area" class="total-table mt-3 w-75 @(string.Format("kobo-grid-size-{0}", cancelFormData.Size))">
                <table>
                    <thead>
                        <tr>
                            <th>@Lang["total"]</th>
                            <th>@Lang["fare"]</th>
                            <th>@Lang["FeeTaxTotal"]</th>
                            <th>@Lang["FeeCommissionTotal"]</th>
                            <th>@Lang["guide_fee"]</th>
                            <th>@Lang["GuideFeeTaxTotal"]</th>
                            <th>@Lang["GuideFeeCommissionTotal"]</th>
                            <th>@Lang["number_of_cancellations"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">@Lang["PageTotal"]</th>
                            <td>@PageSummary.SumBusFee</td>
                            <td>@PageSummary.SumBusTax</td>
                            <td>@PageSummary.SumTaxIncludeFee</td>
                            <td>@PageSummary.SumCancelFee</td>
                            <td>@PageSummary.SumCancelTax</td>
                            <td>@PageSummary.SumTaxIncludedCancelFee</td>
                            <td>@PageSummary.SumCancelCase</td>
                        </tr>
                        <tr>
                            <th scope="row">@Lang["Cumulative"]</th>
                            <td>@TotalSummary.SumBusFee</td>
                            <td>@TotalSummary.SumBusTax</td>
                            <td>@TotalSummary.SumTaxIncludeFee</td>
                            <td>@TotalSummary.SumCancelFee</td>
                            <td>@TotalSummary.SumCancelTax</td>
                            <td>@TotalSummary.SumTaxIncludedCancelFee</td>
                            <td>@TotalSummary.SumCancelCase</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    }
    if (isSearching)
    {
        <div class="loader loader-search">
            <div class="loader-icon"></div>
        </div>
    }
}

@code {
    CancelListData cancelFormData = new CancelListData();
    private EditContext formContext;
    public Pagination paging = new Pagination();
    public List<CustomerComponentGyosyaData> ListGyosya { get; set; } = new List<CustomerComponentGyosyaData>();
    public List<CustomerComponentTokiskData> TokiskData { get; set; } = new List<CustomerComponentTokiskData>();
    public List<CustomerComponentTokiStData> TokiStData { get; set; } = new List<CustomerComponentTokiStData>();

    private List<CancelListSearchData> SearchResultDatas = new List<CancelListSearchData>();
    private List<CancelListSearchData> OnSearchResultDatasChanged
    {
        set
        {
            if (value?.Any() ?? false)
            {
                IsCheckedAll = false;

                SearchResultDatas = value;
                ReorderSearchList(cancelFormData.Sort);

                int index = 1;
                foreach (var item in SearchResultDatas)
                {
                    item.RowID = index++;
                }

                var pageInfo = PagedList<CancelListSearchData>.ToPagedList(SearchResultDatas.AsQueryable(), CurrentPage, RecordsPerPage);
                PagedResultDatas = pageInfo;
                TotalItems = SearchResultDatas.Count;

                CalculatorSummaryPrice(SearchResultDatas, PagedResultDatas);

                ResultSearch = true;
                isSearching = false;
            }
            else
            {
                ResultSearch = false;
                isSearching = false;
                notifyNotFound = true;
                if (Header == null)
                {
                    Header = new HeaderTemplate();
                }
            }
            InvokeAsync(StateHasChanged);
        }
    }
    private List<CancelListSearchData> PagedResultDatas = new List<CancelListSearchData>();
    private List<CancelListSearchData> SelectedList = new List<CancelListSearchData>();

    private List<ReservationClassComponentData> BookingTypes = new List<ReservationClassComponentData>();
    private List<CompanyData> Companies = new List<CompanyData>();
    private List<LoadSaleBranch> Branches = new List<LoadSaleBranch>();
    private List<LoadStaff> Staffs = new List<LoadStaff>();
    private List<LoadCustomerList> Customers = new List<LoadCustomerList>();
    private List<TPM_CodeKbData> CancelBookingTypes = new List<TPM_CodeKbData>();
    private List<SelectedOption<ConfirmAction>> CancelCharges = new List<SelectedOption<ConfirmAction>>();

    private List<PaperSize> PaperSizeOptions = new List<PaperSize>();
    private List<SelectedOption<CSV_Group>> CsvGroupSymbolOptions = new List<SelectedOption<CSV_Group>>();
    private List<SelectedOption<CSV_Header>> CsvHeaderOptions = new List<SelectedOption<CSV_Header>>();
    private List<SelectedOption<CSV_Delimiter>> CsvDelimiterOptions = new List<SelectedOption<CSV_Delimiter>>();
    private List<SelectedOption<BreakReportPage>> BreakPageOptions = new List<SelectedOption<BreakReportPage>>();

    private PageSummaryData PageSummary = new PageSummaryData();
    private PageSummaryData TotalSummary = new PageSummaryData();

    private bool notifyNotFound = false;
    private bool isLoading = true;
    private bool isSearching = false;
    private bool isSearchable = true;
    private bool isExportable = true;
    private bool btnClearIsDisabled { get; set; } = true;
    private bool isShowPreviewReport = false;
    private bool isInitValidated = false;
    private bool isFirstRender = false;

    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    int printmode;
    string baseUrl;

    private bool ResultSearch = false;
    private bool IsCheckedAll = false;
    private int CurrentPage = 1;
    private byte RecordsPerPage = 25;
    private int TotalItems;
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    string filterConditionFormName = "KJ4500";
    bool IsFilterApply;

    private string PreviewReportUrl = string.Empty;

    private HeaderTemplate headerTemplate { get; set; } = new HeaderTemplate();
    private BodyTemplate bodyTemplate { get; set; } = new BodyTemplate();
    #region Localization string

    string NotFound;
    /*Grid*/
    protected HeaderTemplate Header { get; set; }
    protected BodyTemplate Body { get; set; }

    protected Pagination pagination { get; set; }
    protected int totalPage { get; set; }
    public int? CurrentClick { get; set; } = null;
    protected ShowCheckboxArgs<CancelListSearchData> ShowCheckboxOptions { get; set; } = new ShowCheckboxArgs<CancelListSearchData>()
    {
        RowIdentifier = (checkedItem, item) => checkedItem.UkeNo == item.UkeNo && checkedItem.UnkRen == item.UnkRen,
        Disable = (item) => false
    };


    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        NotFound = Lang["BI_T0010"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }
    #endregion

    #region Component Lifecycle
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        baseUrl = AppSettingsService.GetBaseUrl();
        formContext = new EditContext(cancelFormData);
        formContext.OnValidationStateChanged += (sender, eventArgs) => OnValidationStateChanged(sender, eventArgs);
        LocalizationInit();
        LoadStaticData();

        GenrateGrid();

        await LoadCompany();
        await LoadBookingType();
        await LoadBookingStatus();
        await LoadBranch();
        await LoadStaff();
        await LoadCustomer();
        await ApplyFilter().ContinueWith(async (t) =>
        {
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        });
        await base.OnInitializedAsync().ContinueWith((t) => { formContext.Validate(); isLoading = false; InvokeAsync(StateHasChanged); });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isFirstRender = firstRender;
        if (firstRender)
        {
            formContext.Validate();
        }
        if (!isLoading && !isInitValidated)
        {
            isInitValidated = true;
            formContext.Validate();
        }
        await IJSRuntime.InvokeVoidAsync("setEventforCodeNumberField");
        await base.OnAfterRenderAsync(firstRender);
    }
    #endregion

    #region Load cancelFormData

    private void LoadStaticData()
    {
        CancelCharges = new List<SelectedOption<ConfirmAction>>(){
            new SelectedOption<ConfirmAction>{Option = ConfirmAction.Yes, DisplayName = Lang["Yes"]},
            new SelectedOption<ConfirmAction>{Option = ConfirmAction.None, DisplayName = Lang["None"]},
            new SelectedOption<ConfirmAction>{Option = ConfirmAction.All, DisplayName = Constants.SelectedAll},
        };

        PaperSizeOptions = new List<PaperSize>(){
            PaperSize.A3,
            PaperSize.A4,
            PaperSize.B4,
        };

        CsvHeaderOptions = new List<SelectedOption<CSV_Header>>(){
            new SelectedOption<CSV_Header>{Option = CSV_Header.IncludeHeader, DisplayName= Lang["CsvHadHeader"] },
            new SelectedOption<CSV_Header>{Option = CSV_Header.WithoutHeader, DisplayName= Lang["CsvWithoutHeader"] },
        };

        CsvGroupSymbolOptions = new List<SelectedOption<CSV_Group>>(){
            new SelectedOption<CSV_Group>{Option = CSV_Group.QuotationMarks, DisplayName= Lang["CsvGrQuotesMarks"]},
            new SelectedOption<CSV_Group>{Option = CSV_Group.WithoutQuotes, DisplayName= Lang["CsvGrWithoutQuotes"]},
        };

        CsvDelimiterOptions = new List<SelectedOption<CSV_Delimiter>>(){
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Comma, DisplayName= Lang["CsvSpaceComma"]},
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Semicolon, DisplayName= Lang["CsvSpaceSemicolon"]},
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Space, DisplayName= Lang["CsvSpacing"]},
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.FixedLength, DisplayName= Lang["CsvSpaceFixedLength"]},
            new SelectedOption<CSV_Delimiter>{Option = CSV_Delimiter.Other, DisplayName= Lang["CsvSpaceOther"]},
        };

        BreakPageOptions = new List<SelectedOption<BreakReportPage>>(){
            new SelectedOption<BreakReportPage>{Option = BreakReportPage.Customer, DisplayName = Lang["BreakCustomer"]},
            new SelectedOption<BreakReportPage>{Option = BreakReportPage.None, DisplayName = Lang["BreakNormal"]},
        };

        cancelFormData.CancelCharge = CancelCharges.FirstOrDefault();

        cancelFormData.PaperSize = PaperSizeOptions.FirstOrDefault();
        cancelFormData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.FirstOrDefault();
        cancelFormData.CsvConfigOption.Header = CsvHeaderOptions.FirstOrDefault();
        cancelFormData.CsvConfigOption.Delimiter = CsvDelimiterOptions.FirstOrDefault();
        cancelFormData.BreakPage = BreakPageOptions.FirstOrDefault();

        cancelFormData.DateTypeText = Lang["cancellation_date"];
        cancelFormData.SortText = Lang["Customer"];
        cancelFormData.Size = (int)ViewMode.Large;
    }

    private async Task LoadBookingType()
    {
        BookingTypes = await _yoyakuservice.GetListReservationClass();
        cancelFormData.BookingTypes = BookingTypes;
    }

    private async Task LoadCompany()
    {
        Companies = await CompanyDataService.GetCompanyByTenantIdAsync(new ClaimModel().TenantID);
        if (Companies.Count > 0 && Companies[0] != null) Companies.Insert(0, null);

        cancelFormData.Company = Companies.FirstOrDefault();
    }

    private async Task LoadBookingStatus()
    {
        CancelBookingTypes = await CodeKbService.GetCodeKbByCodeSyuAndListCodeKbn(new List<string> { "02", "04" }, "YOYASYU", new ClaimModel().TenantID);
        cancelFormData.CancelBookingType = CancelBookingTypes.Where(_ => _.CodeKb_CodeKbn.Equals("02")).FirstOrDefault();
        if (CancelBookingTypes.Count > 0 && CancelBookingTypes[0] != null) CancelBookingTypes.Insert(0, null);
    }

    private async Task LoadBranch()
    {
        try
        {
            if (cancelFormData.Company is null)
            {
                Branches = (await BranchDataService.GetBranchDataByTenantId(new ClaimModel().TenantID)).DefaultIfEmpty().OrderBy(_ => _.EigyoCd).ToList();
            }
            else
            {
                Branches = (await BranchDataService.GetBranchDataByCompany(cancelFormData.Company.CompanyCdSeq, new ClaimModel().TenantID)).OrderBy(_ => _.EigyoCd).ToList();
            }

            if (Branches.Count > 0 && Branches[0] != null) Branches.Insert(0, null);

            if (!IsFilterApply)
            {
                cancelFormData.BranchStart = Branches.FirstOrDefault();
                cancelFormData.BranchEnd = Branches.FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    private async Task LoadStaff()
    {
        Staffs = (await Http.GetJsonAsync<List<LoadStaff>>(baseUrl + "/api/Staff/" + new ClaimModel().TenantID)).OrderBy(_ => _.SyainCd).ToList();

        if (Staffs.Count > 0 && Staffs[0] != null) Staffs.Insert(0, null);

        cancelFormData.StaffStart = Staffs.FirstOrDefault();
        cancelFormData.StaffEnd = Staffs.FirstOrDefault();
        cancelFormData.CancelStaffStart = Staffs.FirstOrDefault();
        cancelFormData.CancelStaffEnd = Staffs.FirstOrDefault();
    }

    private async Task LoadCustomer()
    {
        // 得意先, 仕入先
        var taskTokisk = _service.GetListTokisk();
        var taskTokiSt = _service.GetListTokiSt();
        var taskGyosya = _service.GetListGyosya();

        await Task.WhenAll(taskGyosya, taskTokisk, taskTokiSt);

        ListGyosya = taskGyosya.Result;
        TokiskData = taskTokisk.Result;
        TokiStData = taskTokiSt.Result;
    }

    private void InsertSelectAll<T>(List<T> source, Func<T, bool> predicate, T emptyObj = null) where T : class
    {
        if (source.Any() && !source.Where(predicate).Any())
            source.Insert(0, emptyObj != null ? emptyObj : (T)Activator.CreateInstance(typeof(T))); // Insert a item to mark choose all in first line
    }

    #endregion

    #region value changed method

    private async void OnStartDateChanged(DateTime newDate)
    {
        cancelFormData.StartDate = newDate;
        if (cancelFormData.StartDate.CompareTo(cancelFormData.EndDate) > 0)
        {
            cancelFormData.EndDate = newDate;
        }
        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            //await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnEndDateChanged(DateTime newDate)
    {
        cancelFormData.EndDate = newDate;

        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void DateTypeChanged(MouseEventArgs e, DateType dateType)
    {
        cancelFormData.DateType = dateType;
        switch (dateType)
        {
            case DateType.Cancellation:
                cancelFormData.DateTypeText = Lang["cancellation_date"];
                break;
            case DateType.VehicleDelivery:
                cancelFormData.DateTypeText = Lang["vehicle_delivery"];
                break;
            case DateType.Arrival:
                cancelFormData.DateTypeText = Lang["nextday"];
                break;
            default:
                break;
        }
        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }


    private async void OnBookingTypeChanged(ReservationClassComponentData newType, bool isFrom = true, bool isClickChange = false)
    {
        bool isSelectAll = newType is null;
        bool isChange = false;
        if (isFrom)
        {
            if(cancelFormData.YoyakuFrom != newType)
            {
                cancelFormData.YoyakuFrom = newType;
                isChange = true;
            }
        }
        else
        {
            if (cancelFormData.YoyakuTo != newType)
            {
                cancelFormData.YoyakuTo = newType;
                isChange = true;
            }
            cancelFormData.YoyakuTo = newType;
        }

        if (!IsFilterApply && !isFirstRender && isClickChange && isChange)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnCompanySelectedChanged(CompanyData newCompany)
    {
        cancelFormData.Company = newCompany;

        isSearching = true;
        await LoadBranch();

        if (!IsFilterApply)
        {
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnSaleBranchChanged(LoadSaleBranch newBranch, bool isFrom = true)
    {
        bool isSelectAll = newBranch is null;
        if (isFrom)
        {
            cancelFormData.BranchStart = newBranch;
            if (!IsFilterApply && isSelectAll)
            {
                cancelFormData.BranchEnd = Branches.FirstOrDefault();
            }
        }
        else
        {
            cancelFormData.BranchEnd = newBranch;
            if (!IsFilterApply && isSelectAll)
            {
                cancelFormData.BranchStart = Branches.FirstOrDefault();
            }
        }

        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnCancelBookingTypeChanged(TPM_CodeKbData newType)
    {
        cancelFormData.CancelBookingType = newType;
        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnCancelChargeChanged(SelectedOption<ConfirmAction> selectedValue)
    {
        cancelFormData.CancelCharge = selectedValue;
        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnUkeCdChanged(string newUkeCd, bool isFrom = true)
    {
        if (isFrom)
        {
            cancelFormData.UkeCdFrom = newUkeCd;
        }
        else
        {
            cancelFormData.UkeCdTo = newUkeCd;
        }

        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnStaffSelectedChanged(LoadStaff newStaff, bool isFrom = true)
    {
        bool isSelectAll = newStaff is null;
        if (isFrom)
        {
            cancelFormData.StaffStart = newStaff;
            if (!IsFilterApply && isSelectAll)
            {
                cancelFormData.StaffEnd = Staffs.FirstOrDefault();
            }
        }
        else
        {
            cancelFormData.StaffEnd = newStaff;
            if (!IsFilterApply && isSelectAll)
            {
                cancelFormData.StaffStart = Staffs.FirstOrDefault();
            }
        }
        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnCancelStaffSelectedChanged(LoadStaff newStaff, bool isFrom = true)
    {
        bool isSelectAll = newStaff is null;
        if (isFrom)
        {
            cancelFormData.CancelStaffStart = newStaff;
            if (!IsFilterApply && isSelectAll)
            {
                cancelFormData.CancelStaffEnd = Staffs.FirstOrDefault();
            }
        }
        else
        {
            cancelFormData.CancelStaffEnd = newStaff;
            if (!IsFilterApply && isSelectAll)
            {
                cancelFormData.CancelStaffStart = Staffs.FirstOrDefault();
            }
        }
        if (!IsFilterApply)
        {
            isSearching = true;
            await OnButtonSearchClicked();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnSortOptionClicked(MouseEventArgs e, SortCancel option)
    {
        cancelFormData.Sort = option;

        switch (option)
        {
            case SortCancel.Customer:
                cancelFormData.SortText = Lang["Customer"];
                break;
            case SortCancel.CancellationDate:
                cancelFormData.SortText = Lang["cancellation_date"];
                break;
            case SortCancel.VehicleDeliveryDate:
                cancelFormData.SortText = Lang["vehicle_delivery"];
                break;
            default:
                break;
        }

        ReorderSearchList(option);
        PagedResultDatas = PagedList<CancelListSearchData>.ToPagedList(SearchResultDatas.AsQueryable(), CurrentPage, RecordsPerPage);
    }

    private async Task ResetSearchOption()
    {
        isLoading = true;
        isSearching = false;
        isSearchable = true;
        ResultSearch = false;

        cancelFormData = new CancelListData();

        await FilterServices.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName);

        await OnInitializedAsync();

        SearchResultDatas = new List<CancelListSearchData>();
        PagedResultDatas = new List<CancelListSearchData>();
        SelectedList.Clear();

        btnClearIsDisabled = true;
        await InvokeAsync(StateHasChanged);
    }

    private void OnExportTypeClicked(MouseEventArgs e, OutputReportType type)
    {
        if (cancelFormData.ExportType == OutputReportType.CSV && type != OutputReportType.CSV)
        {
            //Reset fields in CSV config form
            cancelFormData.CsvConfigOption.DelimiterSymbol = string.Empty;
            cancelFormData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.First();
            cancelFormData.CsvConfigOption.Header = CsvHeaderOptions.First();
            cancelFormData.CsvConfigOption.Delimiter = CsvDelimiterOptions.First();
        }
        cancelFormData.ExportType = type;

        if (!IsFilterApply)
        {
            StateHasChanged();
            formContext.Validate();
        }
    }

    private void OnPaperSizeChanged(PaperSize size)
    {
        cancelFormData.PaperSize = size;
        if (!IsFilterApply) StateHasChanged();
    }

    private void OnCsvHeaderChanged(SelectedOption<CSV_Header> selectedItems)
    {
        cancelFormData.CsvConfigOption.Header = selectedItems;
        if (!IsFilterApply) StateHasChanged();
    }

    private void OnGroupSymbolChanged(SelectedOption<CSV_Group> selectedItems)
    {
        cancelFormData.CsvConfigOption.GroupSymbol = selectedItems;
        if (!IsFilterApply) StateHasChanged();
    }

    private void OnSeparatorChanged(SelectedOption<CSV_Delimiter> selectedItems)
    {
        if (cancelFormData.CsvConfigOption.Delimiter.Option == CSV_Delimiter.Other && selectedItems.Option != CSV_Delimiter.Other)
        {
            cancelFormData.CsvConfigOption.DelimiterSymbol = string.Empty;
        }

        if (selectedItems.Option == CSV_Delimiter.FixedLength)
        {
            cancelFormData.CsvConfigOption.GroupSymbol = CsvGroupSymbolOptions.Where(_ => _.Option == CSV_Group.WithoutQuotes).FirstOrDefault();
            cancelFormData.CsvConfigOption.Header = CsvHeaderOptions.Where(_ => _.Option == CSV_Header.WithoutHeader).FirstOrDefault();
        }
        cancelFormData.CsvConfigOption.Delimiter = selectedItems;

        if (!IsFilterApply) StateHasChanged();
    }

    private async void ChangeValueForm(string ValueName, dynamic value, EditContext formContext, bool isClickChange = false)
    {
        try
        {
            bool isChangeValue = true;
            if (value is string && string.IsNullOrEmpty(value))
            {
                value = null;
            }

            if (isChangeValue)
            {
                var propertyInfo = cancelFormData.GetType().GetProperty(ValueName);
                propertyInfo.SetValue(cancelFormData, value, null);
                isChangeValue = formContext.Validate();
            }
            if (isChangeValue && !IsFilterApply && ValueName != nameof(cancelFormData.GyosyaTokuiSakiFrom) && ValueName != nameof(cancelFormData.GyosyaTokuiSakiTo)
                && ValueName != nameof(cancelFormData.TokiskTokuiSakiFrom) && ValueName != nameof(cancelFormData.TokiskTokuiSakiTo)
                && ValueName != nameof(cancelFormData.GyosyaShiireSakiFrom) && ValueName != nameof(cancelFormData.GyosyaShiireSakiTo)
                && ValueName != nameof(cancelFormData.TokiskShiireSakiFrom) && ValueName != nameof(cancelFormData.TokiskShiireSakiTo))
            {
                if (!isFirstRender && isClickChange)
                {
                    isSearching = true;
                    await InvokeAsync(StateHasChanged);
                    await OnButtonSearchClicked();
                }
                else
                {
                    isFirstRender = false;
                }
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnDelimiterTextChanged(string newValue)
    {
        cancelFormData.CsvConfigOption.DelimiterSymbol = newValue;
        //if (!IsFilterApply) StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="newValue"></param>
    void OnPageBreakChanged(SelectedOption<BreakReportPage> newValue)
    {
        cancelFormData.BreakPage = newValue;
        if (!IsFilterApply) StateHasChanged();
    }

    private async Task OnButtonSearchClicked()
    {
        if (formContext.Validate())
        {
            // TODO 2021/06/08
            //BookingTypes[0] = new ReservationData() { IsSelectedAll = true };
            //cancelFormData.BookingTypes = Commons.Helpers.YoyKbnHelper.GetListYoyKbnFromTo(
            //    cancelFormData.BookingTypeFrom,
            //    cancelFormData.BookingTypeTo,
            //    BookingTypes
            //);

            var searchCondition = CancelListData.ApplySelectAllFromNull(cancelFormData);

            await SaveCurrentFilter();
            CurrentPage = 1;
            btnClearIsDisabled = false;
            isSearching = true;
            OnSearchResultDatasChanged = await CancelListReportService.SearchCancelListByCondition(searchCondition, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);

            isSearching = false;
            isLoading = false;
            SelectedList.Clear();

            paging.currentPage = 0;
            //TODO
            BookingTypes[0] = null;

        }
        else
        {
            ResultSearch = false;
            isSearching = false;
            if (Header == null)
            {
                Header = new HeaderTemplate();
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnPaginationChanged(int page)
    {
        //Because in Paination component page start at 0
        CurrentPage = page + 1;
        IsCheckedAll = false;
        isSearching = true;

        await LoadPaggingDataAsync();
    }

    private async Task LoadPaggingDataAsync()
    {
        // TODO 2021/06/08
        //BookingTypes[0] = new ReservationData() { IsSelectedAll = true };
        //cancelFormData.BookingTypes = Commons.Helpers.YoyKbnHelper.GetListYoyKbnFromTo(
        //    cancelFormData.BookingTypeFrom,
        //    cancelFormData.BookingTypeTo,
        //    BookingTypes
        //);

        var searchCondition = CancelListData.ApplySelectAllFromNull(cancelFormData);
        OnSearchResultDatasChanged = await CancelListReportService.SearchCancelListByCondition(searchCondition, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);

        isSearching = false;
        //TODO
        BookingTypes[0] = null;
        await InvokeAsync(StateHasChanged);
    }

    #region Export Action

    private async void OnButtonReportClicked(MouseEventArgs args)
    {
        await SaveCurrentFilter();
        switch (cancelFormData.ExportType)
        {
            case OutputReportType.Preview:
                PreviewReport();
                break;
            case OutputReportType.Print: //disable this feature
                notifyNotFound = true;
                break;
            case OutputReportType.ExportPdf:
                await PDFReport();
                break;
            case OutputReportType.CSV:
                await CSVReport();
                break;
            default:
                break;
        }

        StateHasChanged();
    }

    private void PreviewReport()
    {
        var checkeds = SelectedList.Select(_ => new BookingKeyData { UkeNo = _.UkeNo, UnkRen = _.UnkRen }).ToList();
        // TODO N.T.L.Anh delete 2021//06/08
        //BookingTypes[0] = new ReservationData() { IsSelectedAll = true };
        //cancelFormData.BookingTypes = Commons.Helpers.YoyKbnHelper.GetListYoyKbnFromTo(
        //    cancelFormData.BookingTypeFrom,
        //    cancelFormData.BookingTypeTo,
        //    BookingTypes
        //);
        if (!checkeds.Any())
        {
            notifyNotFound = true;
            return;
        }
        CancelListReportSearchParamsUri param = new CancelListReportSearchParamsUri
        {
            BookingKeys = checkeds,
            TenantId = new ClaimModel().TenantID,
            UserLoginId = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
            SearchCondition = SetValueUri(CancelListData.ApplySelectAllFromNull(cancelFormData)),
        };
        //PreviewReportUrl = EncryptHelper.EncryptToUrl(param);
        string baseUrl = AppSettingsService.GetBaseUrl();
        string searchString = EncryptHelper.EncryptToUrl(param);
        string url = baseUrl + "/CancelListPreview";
        url = url + string.Format("/?SearchString={0}", searchString);
        IJSRuntime.InvokeVoidAsync("open", url, "_blank");
        // isShowPreviewReport = true;
        BookingTypes[0] = null;
    }

    private async Task PDFReport()
    {
        var checkeds = SelectedList.Select(_ => new BookingKeyData { UkeNo = _.UkeNo, UnkRen = _.UnkRen }).ToList();
        // TODO N.T.L.Anh Delete 2021/06/08
        //BookingTypes[0] = new ReservationData() { IsSelectedAll = true };
        //cancelFormData.BookingTypes = Commons.Helpers.YoyKbnHelper.GetListYoyKbnFromTo(
        //    cancelFormData.BookingTypeFrom,
        //    cancelFormData.BookingTypeTo,
        //    BookingTypes
        //);
        CancelListReportSearchParams param = new CancelListReportSearchParams
        {
            TenantId = new ClaimModel().TenantID,
            UserLoginId = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
            BookingKeys = checkeds,
            SearchCondition = CancelListData.ApplySelectAllFromNull(cancelFormData),
        };

        var data = await CancelListReportService.GetCancelListReportPaged(param);

        if (data.Any())
        {
            DevExpress.XtraReports.UI.XtraReport report = new DevExpress.XtraReports.UI.XtraReport();

            switch (cancelFormData.PaperSize)
            {
                case PaperSize.A3:
                    report = new Reports.ReportTemplate.Kyanseru.KyanseruA3();
                    break;
                case PaperSize.A4:
                    report = new Reports.ReportTemplate.Kyanseru.Kyanseru();
                    break;
                case PaperSize.B4:
                    report = new Reports.ReportTemplate.Kyanseru.KyanseruB4();
                    break;
                default:
                    break;
            }

            report.DataSource = data;
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                report.CreateDocument();
                using (MemoryStream ms = new MemoryStream())
                {
                    report.ExportToPdf(ms);

                    byte[] exportedFileBytes = ms.ToArray();
                    string myExportString = Convert.ToBase64String(exportedFileBytes);
                    IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", "CancelListReport");
                }
            });
        }
        else
        {
            notifyNotFound = true;
        }
        BookingTypes[0] = null;
    }

    private async Task CSVReport()
    {
        var checkeds = SelectedList.Select(_ => new BookingKeyData { UkeNo = _.UkeNo, UnkRen = _.UnkRen }).ToList();
        // TODO N.T.L.Anh delete 2021/06/08
        //BookingTypes[0] = new ReservationData() { IsSelectedAll = true };
        //cancelFormData.BookingTypes = Commons.Helpers.YoyKbnHelper.GetListYoyKbnFromTo(
        //    cancelFormData.BookingTypeFrom,
        //    cancelFormData.BookingTypeTo,
        //    BookingTypes
        //);
        //this temp path to check valid
        string path = string.Format("{0}/csv/{1}.csv", HostingEnvironment.WebRootPath, Guid.NewGuid());

        CancelListReportSearchParams prs = new CancelListReportSearchParams
        {
            BookingKeys = checkeds,
            TenantId = new ClaimModel().TenantID,
            UserLoginId = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
            SearchCondition = CancelListData.ApplySelectAllFromNull(cancelFormData),
        };

        var reportData = await CancelListReportService.GetCancelListReport(prs);

        if (reportData.Any())
        {
            var csvData = reportData.Cast<CancelListExportData>().ToList();

            var result = CsvHelper.ExportCollectionToCsv(
                csvData,
                new CsvConfigOption
                {
                    FilePath = path.Substring(0, path.LastIndexOf("/")),
                    Delimiter = cancelFormData.CsvConfigOption.Delimiter,
                    DelimiterSymbol = cancelFormData.CsvConfigOption.DelimiterSymbol,
                    GroupSymbol = cancelFormData.CsvConfigOption.GroupSymbol,
                    Header = cancelFormData.CsvConfigOption.Header,
                },
                SetupHeaderCsvReport());

            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                string myExportString = Convert.ToBase64String(result);
                IJSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "csv", "CancelListReport");
            });
        }
        else
        {
            notifyNotFound = true;
        }
        BookingTypes[0] = null;
    }

    #endregion

    #endregion

    #region Helper

    private void OnValidationStateChanged(object sender, ValidationStateChangedEventArgs args)
    {
        bool ctxIsInvalid = ((EditContext)sender).GetValidationMessages().Any();

        isSearchable = isExportable = !ctxIsInvalid;
        btnClearIsDisabled = false;
        StateHasChanged();
    }

    private void ReorderSearchList(SortCancel option)
    {
        switch (option)
        {
            case SortCancel.Customer:
                SearchResultDatas = SearchResultDatas.OrderBy(_ => _.TokuiCd).ThenBy(_ => _.UkeNo).AsEnumerable().ToList();
                break;
            case SortCancel.CancellationDate:
                SearchResultDatas = SearchResultDatas.OrderBy(_ => _.CanCanYmd).ThenBy(_ => _.UkeNo).AsEnumerable().ToList();
                break;
            case SortCancel.VehicleDeliveryDate:
                SearchResultDatas = SearchResultDatas.OrderBy(_ => _.HaiSYmd).ThenBy(_ => _.UkeNo).AsEnumerable().ToList();
                break;
            default:
                break;
        }
        int index = 1;
        foreach (var item in SearchResultDatas)
        {
            item.RowID = index++;
        }
    }

    private void CalculatorSummaryPrice(List<CancelListSearchData> result, List<CancelListSearchData> paged)
    {
        TotalSummary = new PageSummaryData();
        PageSummary = new PageSummaryData();

        result.ForEach(item =>
        {
            TotalSummary._sumBusFee += int.Parse(item.BookingAmount);
            TotalSummary._sumBusTax += int.Parse(item.TaxAmount);
            TotalSummary._sumTaxIncludeFee += int.Parse(item.BookingAmount) + int.Parse(item.TaxAmount);
            TotalSummary._sumCancelFee += int.Parse(item.CancelFee);
            TotalSummary._sumCancelTax += int.Parse(item.CancelTaxFee);
            TotalSummary._sumTaxIncludedCancelFee += int.Parse(item.CancelFee) + int.Parse(item.CancelTaxFee);
        });
        TotalSummary._sumCancelCase = result.Count();

        paged.ForEach(item =>
        {
            PageSummary._sumBusFee += int.Parse(item.BookingAmount);
            PageSummary._sumBusTax += int.Parse(item.TaxAmount);
            PageSummary._sumTaxIncludeFee += int.Parse(item.BookingAmount) + int.Parse(item.TaxAmount);
            PageSummary._sumCancelFee += int.Parse(item.CancelFee);
            PageSummary._sumCancelTax += int.Parse(item.CancelTaxFee);
            PageSummary._sumTaxIncludedCancelFee += int.Parse(item.CancelFee) + int.Parse(item.CancelTaxFee);
        });
        PageSummary._sumCancelCase = paged.Count();
    }

    private void UpdateSummaryPricePage()
    {
        PageSummary = new PageSummaryData();

        PagedResultDatas.ForEach(item =>
        {
            PageSummary._sumBusFee += int.Parse(item.BookingAmount);
            PageSummary._sumBusTax += int.Parse(item.TaxAmount);
            PageSummary._sumTaxIncludeFee += int.Parse(item.BookingAmount) + int.Parse(item.TaxAmount);
            PageSummary._sumCancelFee += int.Parse(item.CancelFee);
            PageSummary._sumCancelTax += int.Parse(item.CancelTaxFee);
            PageSummary._sumTaxIncludedCancelFee += int.Parse(item.CancelFee) + int.Parse(item.CancelTaxFee);
        });
        PageSummary._sumCancelCase = PagedResultDatas.Count();
    }

    private List<string> SetupHeaderCsvReport()
    {
        return new List<string>
{
            "得意先業者コード", "得意先業者名",
            "得意先コード", "得意先名", "得意先略名",
            "得意先支店コード", "得意先支店名", "得意先支店略名", "得意先担当者名",
            "仕入先業者コード", "仕入先業者名",
            "仕入先コード", "仕入先名", "仕入先略名",
            "仕入先支店コード", "仕入先支店名", "仕入先支店略名",
            "キャンセル年月日", "キャンセル担当者営業所コード", "キャンセル担当者営業所名", "キャンセル担当者営業所略名",
            "キャンセル担当者社員コード", "キャンセル担当者社員名", "予約書名", "キャンセル理由",
            "運転手数", "ガイド数", "処理区分", "確定年月日", "確認回数", "運賃累計",
            "消費税区分", "消費税区分略名", "消費税率", "消費税累計", "手数料率", "手数料累計",
            "キャンセル率", "キャンセル料運賃", "キャンセル料税区分", "キャンセル料税区分略名", "キャンセル料消費税率",
            "キャンセル消費税額", "配車年月日", "配車時間", "配車地名", "到着年月日", "到着時間", "到着地名", "団体名", "幹事氏名",
            "行き先名", "車種コード", "車種名", "型区分", "型区分略名", "車種台数",
            "乗車人員", "プラス人員", "請求書発行年月日", "受付営業所コード", "受付営業所名", "受付営業所略名",
            "営業担当者社員コード", "営業担当者社員名", "入力担当者社員コード", "入力担当者社員名", "予約区分",
            "予約区分名", "受付年月日", "受付番号", "運行日連番",
            "Hide_運賃累計", "Hide_消費税累計", "Hide_手数料累計", "Hide_キャンセル料運賃", "Hide_キャンセル消費税額",
            "得意先コード使用開始年月日", "得意先コード使用終了年月日", "得意先支店コード使用開始年月日", "得意先支店コード使用終了年月日",
        };
    }

    #endregion

    private async Task SaveCurrentFilter()
    {
        await FilterServices.SaveCustomFilterAndConditions(GetFieldValues(), filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
    }

    private Dictionary<string, string> GetFieldValues()
    {
        var data = CancelListData.ApplySelectAllFromNull(cancelFormData);
        var result = new Dictionary<string, string>();
        result = CancelListReportService.GetFieldValues(data);
        return result;
    }

    private async Task<bool> ApplyFilter()
    {
        var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq)).ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues();
        if (filterValues.Count > 0)
        {
            IsFilterApply = true;
            CancelListReportService.ApplyFilter(ref cancelFormData, filterValues, BookingTypes, ListGyosya, TokiskData, TokiStData);

            OnUkeCdChanged(cancelFormData.UkeCdFrom, true);
            OnUkeCdChanged(cancelFormData.UkeCdTo, false);
            OnStartDateChanged(cancelFormData.StartDate);
            OnEndDateChanged(cancelFormData.EndDate);
            DateTypeChanged(null, cancelFormData.DateType);
            await OnCompanySelectedChanged(Companies.SingleOrDefault(_ => (_?.CompanyCdSeq ?? -1) == cancelFormData.Company.CompanyCdSeq));
            OnSaleBranchChanged(Branches.SingleOrDefault(_ => (_?.EigyoCdSeq ?? -1) == cancelFormData.BranchStart.EigyoCdSeq), true);
            OnSaleBranchChanged(Branches.SingleOrDefault(_ => (_?.EigyoCdSeq ?? -1) == cancelFormData.BranchEnd.EigyoCdSeq), false);
            OnCancelBookingTypeChanged(CancelBookingTypes.SingleOrDefault(_ => (_?.CodeKb_CodeKbnSeq ?? -1) == cancelFormData.CancelBookingType.CodeKb_CodeKbnSeq));
            OnCancelChargeChanged(CancelCharges.SingleOrDefault(_ => (_?.Option ?? null) == cancelFormData.CancelCharge.Option));
            OnPageBreakChanged(BreakPageOptions.SingleOrDefault(_ => (_?.Option ?? null) == cancelFormData.BreakPage.Option));

            OnStaffSelectedChanged(Staffs.SingleOrDefault(_ => cancelFormData.StaffStart.SyainCdSeq == (_?.SyainCdSeq ?? -1)), true);
            OnStaffSelectedChanged(Staffs.SingleOrDefault(_ => cancelFormData.StaffEnd.SyainCdSeq == (_?.SyainCdSeq ?? -1)), false);
            OnCancelStaffSelectedChanged(Staffs.SingleOrDefault(_ => cancelFormData.CancelStaffStart.SyainCdSeq == (_?.SyainCdSeq ?? -1)), true);
            OnCancelStaffSelectedChanged(Staffs.SingleOrDefault(_ => cancelFormData.CancelStaffEnd.SyainCdSeq == (_?.SyainCdSeq ?? -1)), false);
            OnSortOptionClicked(null, cancelFormData.Sort);
            OnExportTypeClicked(null, cancelFormData.ExportType);
            OnPaperSizeChanged(cancelFormData.PaperSize);
            OnCsvHeaderChanged(CsvHeaderOptions.SingleOrDefault(c => c.Option == cancelFormData.CsvConfigOption.Header.Option));
            OnGroupSymbolChanged(CsvGroupSymbolOptions.SingleOrDefault(c => c.Option == cancelFormData.CsvConfigOption.GroupSymbol.Option));
            OnSeparatorChanged(CsvDelimiterOptions.SingleOrDefault(c => c.Option == cancelFormData.CsvConfigOption.Delimiter.Option));
            OnDelimiterTextChanged(cancelFormData.CsvConfigOption.DelimiterSymbol);

            IsFilterApply = false;
            StateHasChanged();
            return true;
        }
        return false;
    }

    private CancelListDataUri SetValueUri(CancelListData data)
    {
        var result = new CancelListDataUri();
        result._ukeCdFrom = data._ukeCdFrom;
        result._ukeCdTo = data._ukeCdTo;
        result.DateType = data.DateType;
        result.DateTypeText = data.DateTypeText;
        result.Sort = data.Sort;
        result.SortText = data.SortText;
        result.YoyakuFrom = data.YoyakuFrom;
        result.YoyakuTo = data.YoyakuTo;
        result.StartDate = data.StartDate;
        result.EndDate = data.EndDate;
        result.Company = data.Company;
        result.CancelBookingType = data.CancelBookingType;
        result.CancelCharge = data.CancelCharge;
        result.BreakPage = data.BreakPage;
        result.BranchStart = data.BranchStart;
        result.BranchEnd = data.BranchEnd;
        result.GyosyaTokuiSakiFrom = data.GyosyaTokuiSakiFrom;
        result.GyosyaTokuiSakiTo = data.GyosyaTokuiSakiTo;
        result.GyosyaShiireSakiFrom = data.GyosyaShiireSakiFrom;
        result.GyosyaShiireSakiTo = data.GyosyaShiireSakiTo;
        result.TokiskTokuiSakiFrom = data.TokiskTokuiSakiFrom;
        result.TokiskTokuiSakiTo = data.TokiskTokuiSakiTo;
        result.TokiskShiireSakiFrom = data.TokiskShiireSakiFrom;
        result.TokiskShiireSakiTo = data.TokiskShiireSakiTo;
        result.TokiStShiireSakiFrom = data.TokiStShiireSakiFrom;
        result.TokiStShiireSakiTo = data.TokiStShiireSakiTo;
        result.TokiStTokuiSakiFrom = data.TokiStTokuiSakiFrom;
        result.TokiStTokuiSakiTo = data.TokiStTokuiSakiTo;
        result.StaffStart = data.StaffStart;
        result.StaffEnd = data.StaffEnd;
        result.CancelStaffStart = data.CancelStaffStart;
        result.CancelStaffEnd = data.CancelStaffEnd;
        result.ExportType = data.ExportType;
        result.PaperSize = data.PaperSize;
        result.CsvConfigOption = data.CsvConfigOption;
        return result;
    }
    async Task SelectedSize(MouseEventArgs e, int number)
    {

        cancelFormData.Size = number;
        await SaveCurrentFilter();
        StateHasChanged();
    }

    public static Func<object, string> CustomRowCss = (item) =>
    {
        var cssClass = "";
        var model = item as CancelListSearchData;

        if (model != null)
        {
            //cssClass = model.ColorClass;
        }

        return cssClass;
    };

    protected async Task RowClick(RowClickEventArgs<CancelListSearchData> args)
    {
        CancelListSearchData selectedItem = args.SelectedItem;
        if (!args.Event.ShiftKey && !args.Event.CtrlKey)
        {
            SelectedList.Clear();
            SelectedList.Add(args.SelectedItem);
        }
        else
        {
            if (args.Event.CtrlKey)
            {
                if (!SelectedList.Any(item => item.UkeNo == selectedItem.UkeNo && item.UnkRen == selectedItem.UnkRen))
                {
                    var itemToAdd = PagedResultDatas.FirstOrDefault(item => item.UkeNo == selectedItem.UkeNo && item.UnkRen == selectedItem.UnkRen);
                    if (itemToAdd != null)
                    {
                        SelectedList.Add(itemToAdd);
                    }
                }
                else
                {
                    SelectedList.RemoveAll(item => item.UkeNo == selectedItem.UkeNo && item.UnkRen == selectedItem.UnkRen);
                    if (SelectedList.Count == 0)
                    {
                        CurrentClick = null;
                    }
                    else
                    {
                        CurrentClick = SelectedList.Max(item => item.RowID);
                    }
                }
            }
            else if (args.Event.ShiftKey)
            {
                int beginIndex = Math.Min(selectedItem.RowID, (int)CurrentClick);
                int endIndex = Math.Max(selectedItem.RowID, (int)CurrentClick);
                for (int indexToBeAdd = beginIndex; indexToBeAdd <= endIndex; indexToBeAdd++)
                {
                    if (!SelectedList.Any(item => item.RowID == indexToBeAdd))
                    {
                        var itemToAdd = SearchResultDatas.FirstOrDefault(item => item.RowID == indexToBeAdd);
                        if (itemToAdd != null)
                        {
                            SelectedList.Add(itemToAdd);
                        }
                    }
                }
            }
        }
        CurrentClick = selectedItem.RowID;
        StateHasChanged();
    }

    protected void CheckedChange(CheckedChangeEventArgs<CancelListSearchData> args)
    {
        if (args.CheckedItems != null)
        {
            SelectedList = args.CheckedItems;
            StateHasChanged();
        }
    }

    async Task PageChanged(int pageNum)
    {
        // to do
    }

    public async void ReOrderTable()
    {
        await _loadingService.ShowAsync();
        await Task.Run(() =>
        {
            var headerColumns = Header.Rows.Count > 0 ? Header.Rows[0].Columns : new List<ColumnHeaderTemplate>();
            List<TkdGridLy> gridLayouts = new List<TkdGridLy>();
            if (headerColumns.Count > 0)
            {
                for (int i = 0; i < headerColumns.Count; i++)
                {
                    string itemName = headerColumns[i].CodeName;
                    gridLayouts.Add(new TkdGridLy()
                    {
                        DspNo = i,
                        FormNm = filterConditionFormName,
                        FrozenCol = 0,
                        GridNm = CancelListGridHeaderNameConstants.GridName,
                        ItemNm = itemName,
                        SyainCdSeq = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                        UpdPrgId = Common.UpdPrgId,
                        UpdSyainCd = new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,
                        UpdYmd = DateTime.Now.ToString().Substring(0, 10).Replace("/", string.Empty),
                        UpdTime = DateTime.Now.ToString().Substring(11).Replace(":", string.Empty),
                        Width = headerColumns[i].Width
                    });
                }
            }

            var isSaved = GridLayoutService.SaveGridLayout(gridLayouts).Result;
            InvokeAsync(StateHasChanged).Wait();
        });
        await _loadingService.HideAsync();
    }
    private void GenrateGrid()
    {
        List<TkdGridLy> tkdGridLies = GridLayoutService.GetGridLayout(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, filterConditionFormName, CancelListGridHeaderNameConstants.GridName).Result;
        RenderGridBySavedLayout(tkdGridLies);
    }
    private void RenderGridBySavedLayout(List<TkdGridLy> gridlayouts)
    {

        headerTemplate.Rows = new List<RowHeaderTemplate>();
        headerTemplate.StickyCount = 1;

        bodyTemplate.Rows = new List<RowBodyTemplate>();
        for (int i = 0; i < 3; i++)
        {
            headerTemplate.Rows.Add(new RowHeaderTemplate());
            bodyTemplate.Rows.Add(new RowBodyTemplate());
        }
        for (int i = 0; i < 3; i++)
        {
            headerTemplate.Rows[i].Columns = new List<ColumnHeaderTemplate>();
            bodyTemplate.Rows[i].Columns = new List<ColumnBodyTemplate>();
        }
        int CurrentIndex = 0;
        while (true)
        {
            // No
            if ((gridlayouts.Count == 0 && CurrentIndex == 0) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.no_colItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["No"], RowSpan = 3, CodeName = CancelListGridHeaderNameConstants.no_colItemNm, Width = gridlayouts.Count == 0 ? 50 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.RowID), RowSpan = 3, AlignCol = AlignColEnum.Center });
            }
            //得意先名,得意先担当者,仕入先名
            if ((gridlayouts.Count == 0 && CurrentIndex == 1) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.customer_nameItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["customer_name"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.customer_nameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["customer_contact"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.customer_contactItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["supplier_name"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.supplier_nameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.TokuiSaki), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.TokuiTanNm), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.ShiireSaki), RowSpan = 1 });
            }
            //キャンセル年月日,営業所,担当者
            if ((gridlayouts.Count == 0 && CurrentIndex == 2) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.cancellation_dateItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["cancellation_date"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.cancellation_dateItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["sales_office"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.sales_officeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["person_in_charge"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.person_in_chargeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.CancelYmdText), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.Eigos), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.InChargeStaff), RowSpan = 1 });
            }
            //予約書名,キャンセル理由,
            if ((gridlayouts.Count == 0 && CurrentIndex == 3) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.booking_nameItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["booking_name"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.booking_nameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["reason_cancel"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.reason_cancelItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = "", RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.nulltextItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.BookingName), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.CancelReason), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.EmptyValue), RowSpan = 1 });
            }
            //処理区分
            if ((gridlayouts.Count == 0 && CurrentIndex == 4) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.processing_divisionItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["processing_division"], RowSpan = 3, CodeName = CancelListGridHeaderNameConstants.processing_divisionItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.FixedDateText), RowSpan = 1, AlignCol = AlignColEnum.Left });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.Status), AlignCol = AlignColEnum.Left, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.Cancel), AlignCol = AlignColEnum.Left });
            }
            //運賃・売上,消費税,手数料
            if ((gridlayouts.Count == 0 && CurrentIndex == 5) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.faresalesItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["fare"] + "・" + Lang["sales"], RowSpan = 1, ColSpan = 2, CodeName = CancelListGridHeaderNameConstants.faresalesItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["consumption_tax"], RowSpan = 1, ColSpan = 2, CodeName = CancelListGridHeaderNameConstants.consumption_taxItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["fee"], RowSpan = 1, ColSpan = 2, CodeName = CancelListGridHeaderNameConstants.feeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.BookingAmountText), RowSpan = 1, ColSpan = 2, CustomTextFormatDelegate = KoboGridHelper.ToFormatC, AlignCol = AlignColEnum.Right });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.TaxRateText), ColSpan = 1, AlignCol = AlignColEnum.Left, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.TaxAmountText), ColSpan = 1, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.ChargeRateText), ColSpan = 1, AlignCol = AlignColEnum.Left, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.ChargeAmountText), ColSpan = 1, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
            }
            //キャンセル料,売上,消費税
            if ((gridlayouts.Count == 0 && CurrentIndex == 6) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.CancelChargeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["CancelCharge"], RowSpan = 1, ColSpan = 2, CodeName = CancelListGridHeaderNameConstants.CancelChargeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["sales"], RowSpan = 1, ColSpan = 2, CodeName = CancelListGridHeaderNameConstants.salesItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["consumption_tax"], RowSpan = 1, ColSpan = 2, CodeName = CancelListGridHeaderNameConstants.consumption_tax1ItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.CancelRateText), ColSpan = 1, AlignCol = AlignColEnum.Left, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.CancelFeeText), ColSpan = 1, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.CancelTaxRateText), ColSpan = 1, AlignCol = AlignColEnum.Left });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.CancelTaxFeeText), ColSpan = 1, AlignCol = AlignColEnum.Right });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.EmptyValue), ColSpan = 2 });
            }
            //配車・到着
            if ((gridlayouts.Count == 0 && CurrentIndex == 7) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.vehicle_dispatchItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["vehicle_dispatch"] + "・" + Lang["arrival"], RowSpan = 3, CodeName = CancelListGridHeaderNameConstants.vehicle_dispatchItemNm, Width = gridlayouts.Count == 0 ? 200 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.HaiSTimeTextGrid), RowSpan = 1, AlignCol = AlignColEnum.Left });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.TouChTimeTextGrid), RowSpan = 1, AlignCol = AlignColEnum.Left });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.DGInfo), RowSpan = 1, AlignCol = AlignColEnum.Left });
            }
            //団体名,幹事氏名,行き先名
            if ((gridlayouts.Count == 0 && CurrentIndex == 8) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.organization_nameItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["organization_name"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.organization_nameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["secretary_name"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.secretary_nameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["destination_name"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.destination_nameItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.DanTaNm), RowSpan = 1 });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.KanJNm), RowSpan = 1 });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.IkNm), RowSpan = 1 });
            }
            //車種（型)
            if ((gridlayouts.Count == 0 && CurrentIndex == 9) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.vehicle_typeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["vehicle_type"], RowSpan = 3, CodeName = CancelListGridHeaderNameConstants.vehicle_typeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.BusViewDatas), RowSpan = 3, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.BreakListBusViewDatas_BusType, CustomCss = "text-preline" });
            }
            //台数
            if ((gridlayouts.Count == 0 && CurrentIndex == 10) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.number_of_unitsItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["number_of_units"], RowSpan = 3, CodeName = CancelListGridHeaderNameConstants.number_of_unitsItemNm, Width = gridlayouts.Count == 0 ? 50 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.BusViewDatas), RowSpan = 3, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.BreakListBusViewDatas_Daisu_WithSuffix, CustomCss = "text-preline" });
            }
            //乗車人員,プラス人
            if ((gridlayouts.Count == 0 && CurrentIndex == 11) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.boarding_personnelItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["boarding_personnel"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.boarding_personnelItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["plus_people"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.plus_peopleItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = "", RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.nulltext1ItemNm, Width = gridlayouts.Count == 0 ? 100 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.PassengerText), CustomTextFormatDelegate = KoboGridHelper.ToFormatString, AlignCol = AlignColEnum.Right });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.PlusJinText), CustomTextFormatDelegate = KoboGridHelper.ToFormatString, AlignCol = AlignColEnum.Right });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.EmptyValue) });
            }
            //請求書,発行年月日
            if ((gridlayouts.Count == 0 && CurrentIndex == 12) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.invoiceItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["invoice"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.invoiceItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["issue_date"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.issue_dateItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = "", RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.nulltext2ItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.EmptyValue) });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.InvoiceIssueDateText), CustomTextFormatDelegate = KoboGridHelper.ToFormatString, AlignCol = AlignColEnum.Left });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.EmptyValue) });
            }
            //受付営業所,営業担当者,入力担当者
            if ((gridlayouts.Count == 0 && CurrentIndex == 13) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.reception_committee_sales_officeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["reception_committee_sales_office"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.reception_committee_sales_officeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["Staff"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.StaffItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["input_person"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.input_personItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.ReceivedBranch), CustomTextFormatDelegate = KoboGridHelper.ToFormatString, AlignCol = AlignColEnum.Left });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.InChargeStaff2), AlignCol = AlignColEnum.Left, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.InputBy), AlignCol = AlignColEnum.Left });
            }
            //予約区分・種別,受付年月日,受付番号
            if ((gridlayouts.Count == 0 && CurrentIndex == 14) || (gridlayouts.Count != 0 && gridlayouts[CurrentIndex].ItemNm == CancelListGridHeaderNameConstants.BookingTypetypeItemNm))
            {
                headerTemplate.Rows[0].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["BookingType"] + "・" + Lang["type"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.BookingTypetypeItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[1].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["UkeYmd"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.UkeYmdItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });
                headerTemplate.Rows[2].Columns.Add(new ColumnHeaderTemplate() { ColName = Lang["UkeCd"], RowSpan = 1, CodeName = CancelListGridHeaderNameConstants.UkeCdItemNm, Width = gridlayouts.Count == 0 ? 150 : gridlayouts[CurrentIndex].Width });

                bodyTemplate.Rows[0].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.BookingStatusText), CustomTextFormatDelegate = KoboGridHelper.ToFormatString, AlignCol = AlignColEnum.Left });
                bodyTemplate.Rows[1].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.UkeYmdText), AlignCol = AlignColEnum.Left, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                bodyTemplate.Rows[2].Columns.Add(new ColumnBodyTemplate() { DisplayFieldName = nameof(CancelListSearchData.UkeCdText), AlignCol = AlignColEnum.Left, CustomTextFormatDelegate = KoboGridHelper.ToFormatString });
                if (gridlayouts.Count == 0)
                {
                    break;
                }
            }
            CurrentIndex++;
            if (gridlayouts.Count != 0 && CurrentIndex >= gridlayouts.Count)
            {
                break;
            }
        }
        Header = headerTemplate;
        Body = bodyTemplate;
    }
    public async void InitGridLayout()
    {

        await _loadingService.ShowAsync();
        await Task.Run(() =>
        {
            List<TkdGridLy> tkdGridLies = new List<TkdGridLy>();
            RenderGridBySavedLayout(tkdGridLies);
            DeleteSavedGridLayout();
            InvokeAsync(StateHasChanged).Wait();
        });
        await _loadingService.HideAsync();
    }
    private void DeleteSavedGridLayout()
    {
        var isDeleted = GridLayoutService.DeleteSavedGridLayout(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, filterConditionFormName, CancelListGridHeaderNameConstants.GridName).Result;
    }
    protected void HandleItemPerPageChange(byte newItemPerPage)
    {
        RecordsPerPage = newItemPerPage;
        StateHasChanged();
    }

}