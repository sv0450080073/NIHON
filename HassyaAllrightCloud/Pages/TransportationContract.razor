@using DevExpress.XtraPrinting
@using Microsoft.AspNetCore.WebUtilities
@inject CustomHttpClient Http
@inject AppSettingsService AppSettingsService
@inject IBookingTypeListService YoyKbnService
@inject IBusTypeListService BusTypeService
@inject IStaffListService SyainService
@inject ICustomerListService CustomerService
@inject ISaleBranchListService TpmEigyosService
@inject IHikiukeshoReportService HikiukeshoReportService
@inject IJSRuntime JSRuntime
@inject CustomNavigation NavManager
@inject IStringLocalizer<TransportationContract> Lang
@inject IErrorHandlerService errorModalService
@inject IFilterCondition FilterConditionService
@inject IGetFilterDataService GetFilterDataService
@inject IGenerateFilterValueDictionary GenerateFilterValueDictionaryService
@inject IAdvancePaymentDetailsService advancePaymentDetailsService
@using HassyaAllrightCloud.Domain.Dto.CommonComponents
@using HassyaAllrightCloud.IService.CommonComponents
@inject ICustomerComponentService _customerService

<DxPopup @bind-Visible="@DataNotExistPopup">
    <HeaderTemplate>
        <div class="bg-dark text-white p-2">
            <i class="fa fa-info-circle" aria-hidden="true"></i> @Lang["TransportationReport"]
        </div>
    </HeaderTemplate>
    <ChildContent>
        <p>@Lang["MatchedDataNotExist"]</p>
        <div class="text-center">
            <a href="javascript:void(0)" class="btn btn-outline-secondary width--120" @onclick="@(() => DataNotExistPopup = false)">@Lang["OK"]</a>
        </div>
    </ChildContent>
</DxPopup>

<div class="d-flex justify-content-between align-items-center mb-2">
    <h2 class="mb-0">@Lang["TransportationContract"]</h2>
    <button class="btn btn-sm btn-danger btnclear" @onclick="ClearAll">
        <i class="fa fa-refresh" aria-hidden="true"></i>
        @Lang["ClearAll"]
    </button>
</div>

@if (isLoading)
{
    <div id="components-reconnect-modal" style="position: fixed;top: 0px;right: 0px;bottom: 0px;left: 0px;z-index: 10001;display: block;overflow: hidden;background-color: rgb(255, 255, 255);opacity: 0.8;text-align: center;font-weight: bold;justify-content: center;">
        <div style="top: 50%; position: relative;">
            <div class="loader">
                <div class="loader-icon"></div>
            </div>
        </div>
    </div>
}

<EditForm Context="formContext" Model="@transportationContractFormData" id="contract-form">
    <DataAnnotationsValidator />
    <FluentValidator TValidator="ContractFormValidator" />
    <div class="focus-form">
        <div class="border-dotted m-0 pt-3 mb-3" style="margin-top:-1px">
            <h6 class="col ml-3 mb-3">@Lang["displaySetting"]</h6>
            <div class="ml-3">
                <div class="col ml-4">
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["PrintMode"]</label>
                        <div class="col-9 pl-0">
                            <button class="btn-option mx-2 @(transportationContractFormData.PrintMode == (int)PrintMode.Preview ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangePrintMode(e, (int)PrintMode.Preview))">@Lang["Preview"]</button>
                            <button class="btn-option mx-2 @(transportationContractFormData.PrintMode == (int)PrintMode.SaveAsPDF ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangePrintMode(e, (int)PrintMode.SaveAsPDF))">@Lang["PDF"]</button>
                            <button class="btn-option mx-2 @(transportationContractFormData.PrintMode == (int)PrintMode.SaveAsExcel ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangePrintMode(e, (int)PrintMode.SaveAsExcel))">@Lang["SaveAsExcel"]</button>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["OutputUnit"]</label>
                        <div class="col-9 pl-0">
                            <button class="btn-option mx-2 @(transportationContractFormData.OutputUnit == (int)OutputUnit.EachBooking ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeOutputUnit(e, (int)OutputUnit.EachBooking))">@Lang["EachBooking"]</button>
                            <button class="btn-option mx-2 @(transportationContractFormData.OutputUnit == (int)OutputUnit.EachBusTypeBooking ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeOutputUnit(e, (int)OutputUnit.EachBusTypeBooking))">@Lang["EachBusTypeBooking"]</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="border-dotted m-0 pt-3 mb-3" style="margin-top:-1px">
            <h6 class="col ml-3 mb-3">@Lang["SetConditions"]</h6>
            <div class="ml-3" id="canTab">
                <div class="col ml-4">
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["DateType"]</label>
                        <div class="col-4 pl-0">
                            <button class="btn-option mx-2 @(transportationContractFormData.DateTypeContract == (int) DateTypeContract.Dispatch ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeDateTypeContract(e, (int) DateTypeContract.Dispatch))">@Lang["Dispatch"]</button>
                            <button class="btn-option mx-2 @(transportationContractFormData.DateTypeContract == (int) DateTypeContract.Arrival ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeDateTypeContract(e, (int) DateTypeContract.Arrival))">@Lang["Arrival"]</button>
                            <button class="btn-option mx-2 @(transportationContractFormData.DateTypeContract == (int) DateTypeContract.Reservation ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeDateTypeContract(e, (int) DateTypeContract.Reservation))">@Lang["Reservation"]</button>
                        </div>
                        <label class="col-form-label col-1 text-left ml-5">@Lang["ExportDate"]</label>
                        <div class="col-4 ml-5">
                            <button class="btn-option mx-2 @(transportationContractFormData.IsUpdateExportDate ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeIsUpdateExportDate(e, true))">@Lang["Update"]</button>
                            <button class="btn-option mx-2 @(transportationContractFormData.IsUpdateExportDate ? null : "btn-active")" href="javascript:void(0)" @onclick="@(e => ChangeIsUpdateExportDate(e, false))">@Lang["NotUpdate"]</button>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left"></label>
                        <div class="row ml-1">
                            <div class="has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => transportationContractFormData.DateFrom)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxDateEdit Date="@transportationContractFormData.DateFrom"
                                            DateExpression="@(() => transportationContractFormData.DateFrom)"
                                            Format="yyyy/MM/dd"
                                            DateChanged="@((newValue) => OnStartDateChanged(newValue))"
                                            CssClass="width--150 date-sm">
                                </DxDateEdit>
                            </div>
                            <span>&nbsp ～ &nbsp</span>
                            <div class="has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => transportationContractFormData.DateTo)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxDateEdit Date="@transportationContractFormData.DateTo"
                                            DateExpression="@(() => transportationContractFormData.DateTo)"
                                            Format="yyyy/MM/dd"
                                            DateChanged="@((newValue) => OnEndDateChanged(newValue))"
                                            CssClass="width--150 date-sm">
                                </DxDateEdit>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["OutputSelection"]</label>
                        <div class="col-9 pl-0">
                            <button class="btn-option mx-2 @(transportationContractFormData.OutputSelection == (int) OutputSelection.All ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeOutputSelection(e, (int) OutputSelection.All))">@Lang["All"]</button>
                            <button class="btn-option mx-2 @(transportationContractFormData.OutputSelection == (int) OutputSelection.OnlyNotOutputAlready ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeOutputSelection(e, (int) OutputSelection.OnlyNotOutputAlready))">@Lang["OnlyNotOutputAlready"]</button>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["YearlyContract"]</label>
                        <div class="col-9 pl-0">
                            <button class="btn-option mx-2 @(transportationContractFormData.YearlyContract == (int) YearlyContract.Output ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeYearlyContract(e, (int) YearlyContract.Output))">@Lang["WillOutput"]</button>
                            <button class="btn-option mx-2 @(transportationContractFormData.YearlyContract == (int) YearlyContract.NotOutput ? "btn-active" : null)" href="javascript:void(0)" @onclick="@(e => ChangeYearlyContract(e, (int) YearlyContract.NotOutput))">@Lang["WillNotOutput"]</button>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["SaleBranchList"]</label>
                        <DxComboBox CssClass="width--250 MyComboBox"
                                    NullText="@Lang["SaleBranchCode:AbbreviationName"]"
                                    Data="@SaleBranchList"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    FilteringMode="@DataGridFilteringMode.Contains"
                                    AllowUserInput="false"
                                    TextFieldName="Text"
                                    SelectedItemChanged="@(e => OnSelectedSaleBranchChanged(e))"
                                    SelectedItem="@transportationContractFormData.UketsukeEigyoJo"
                                    SelectedItemExpression="@(() => @transportationContractFormData.UketsukeEigyoJo)">
                        </DxComboBox>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["BusinessPIC"]</label>
                        <DxComboBox CssClass="width--250 MyComboBox"
                                    NullText="@Lang["StaffCode:StaffName"]"
                                    Data="@StaffList"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    FilteringMode="@DataGridFilteringMode.Contains"
                                    AllowUserInput="false"
                                    TextFieldName="Text"
                                    SelectedItemChanged="@(e => OnSelectedStaffChanged(e))"
                                    SelectedItem="@transportationContractFormData.EigyoTantoSha"
                                    SelectedItemExpression="@(() => @transportationContractFormData.EigyoTantoSha)">
                        </DxComboBox>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["InputPIC"]</label>
                        <DxComboBox CssClass="width--250 MyComboBox"
                                    NullText="@Lang["StaffCode:StaffName"]"
                                    Data="@StaffList"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    FilteringMode="@DataGridFilteringMode.Contains"
                                    AllowUserInput="false"
                                    TextFieldName="Text"
                                    SelectedItemChanged="@(e => OnSelectedInpStaffChanged(e))"
                                    SelectedItem="@transportationContractFormData.InpSyainCd"
                                    SelectedItemExpression="@(() => @transportationContractFormData.InpSyainCd)">
                        </DxComboBox>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["ReservationNo."]</label>
                        <DxTextBox CssClass="code-number width--250 text-left"
                                   max-length="10"
                                   Text="@CommonUtil.FormatCodeNumber(transportationContractFormData.UkeNumber)"
                                   TextExpression="(() =>transportationContractFormData.UkeNumber)"
                                   TextChanged="@((newValue) => OnUkeNumberChanged(newValue))">
                        </DxTextBox>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["Customer"]</label>
                        <CustomerComponent ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           LangDic="LangDic"
                                           isGyosyaAddNull="true"
                                           SelectedGyosya="@transportationContractFormData.Gyosya"
                                           SelectedGyosyaChanged="e => OnChangeGyosya(e)"
                                           GyosyaExpression="() => transportationContractFormData.Gyosya"
                                           isTokiskAddNull="true"
                                           SelectedTokisk="transportationContractFormData.TokuiSaki"
                                           SelectedTokiskChanged="e => OnChangeTokuiSaki(e)"
                                           TokiskExpression="() => transportationContractFormData.TokuiSaki"
                                           isTokiStAddNull="true"
                                           SelectedTokiSt="transportationContractFormData.TokuiSiten"
                                           SelectedTokiStChanged="e => OnChangeTokuiSiten(e)"
                                           TokiStExpression="() => transportationContractFormData.TokuiSiten"
                                           DefaultGyosya="transportationContractFormData.Gyosya?.GyosyaCdSeq ?? -1"
                                           DefaultTokisk="transportationContractFormData.TokuiSaki?.TokuiSeq ?? 0"
                                           DefaultTokiSt="transportationContractFormData.TokuiSiten?.SitenCdSeq ?? 0">
                        </CustomerComponent>
                    </div>
                    <div class="row mb-3">
                        <label class="col-form-label col-1 text-left">@Lang["ReservationClassification"]</label>
                        <DxListBox Data="@YoyakuKbnList"
                                   TextFieldName="YoyaKbnNm"
                                   ListRenderMode="ListRenderMode.Virtual"
                                   SelectionMode="ListBoxSelectionMode.Multiple"
                                   SelectedItems="@SelectedBookingTypeItems"
                                   SelectedItemsChanged="@SelectedBookingTypeItemsChanged"
                                   SelectedItemsExpression="@(() => transportationContractFormData.YoyakuKbnList)"
                                   ShowCheckboxes="true"
                                   CssClass="custom-dx-listbox width--250">
                        </DxListBox>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>
<div class="text-center mb-3 border-dotted">
    <DxButton CssClass="btnbookingform width--100" SubmitFormOnClick="false" Click="@HandleValidSubmit" Text="@Lang["Output"]"
              IconCssClass="fa fa-check" RenderStyle="@ButtonRenderStyle.Primary">
    </DxButton>
</div>

@code {

    [Parameter] public string Date { get; set; }
    [Parameter] public string Option { get; set; }

    BookingTypeData allBookingType;
    IEnumerable<BookingTypeData> SelectedBookingTypeItems = new List<BookingTypeData>();
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
    public bool checkAll { get; set; } = true;
    List<BookingTypeData> YoyakuKbnList = new List<BookingTypeData>();
    List<SaleBranchData> SaleBranchList = new List<SaleBranchData>();
    List<StaffsData> StaffList = new List<StaffsData>();
    List<LoadCustomerList> CustomerList = new List<LoadCustomerList>();
    private List<CustomerComponentGyosyaData> listGyosya { get; set; }
    private List<CustomerComponentTokiskData> listTokiSaki { get; set; }
    private List<CustomerComponentTokiStData> listTokiSiten { get; set; }
    public TransportationContractFormData transportationContractFormData = new TransportationContractFormData();
    int ReturnRecordNumber;
    bool DataNotExistPopup { get; set; } = false;
    bool isLoading { get; set; }

    private async Task ToggleLoading(bool value)
    {
        isLoading = value;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ToggleLoading(true);
            var dataLang = Lang.GetAllStrings();
            LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);

            var taskGyosya = _customerService.GetListGyosya();
            var taskTokisk = _customerService.GetListTokisk();
            var taskTokist = _customerService.GetListTokiSt();

            await Task.WhenAll(taskGyosya, taskTokisk, taskTokist);

            listGyosya = taskGyosya.Result;
            listTokiSaki = taskTokisk.Result;
            listTokiSiten = taskTokist.Result;

            YoyakuKbnList = await YoyKbnService.GetBySiyoKbn();
            allBookingType = new BookingTypeData() { YoyaKbnSeq = -1, YoyaKbnNm = Lang["All"] };
            YoyakuKbnList.Insert(0, allBookingType);
            SaleBranchList = await TpmEigyosService.Get(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            StaffList = await SyainService.Get(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            CustomerList = await CustomerService.Get(new ClaimModel().TenantID);
            transportationContractFormData = BuildSearchModel(transportationContractFormData).Result;
            SelectedBookingTypeItems = (transportationContractFormData.YoyakuKbnList != null) ? transportationContractFormData.YoyakuKbnList : YoyakuKbnList;
            checkAll = SelectedBookingTypeItems.Any(item => item != null && item.YoyaKbnSeq == -1);

            /*CHECK PARAM*/
            if (!string.IsNullOrWhiteSpace(Date)
                && !string.IsNullOrWhiteSpace(Option)
                && (Option == PrintMode.Preview.ToString() || Option == PrintMode.SaveAsPDF.ToString()))
            {
                NavManager.NavigateTo("/transportationcontract", false);

                if (DateTime.TryParseExact(Date, "yyyyMMdd", null, DateTimeStyles.None, out DateTime outDateTime))
                {
                    transportationContractFormData.DateFrom
                        = transportationContractFormData.DateTo
                        = outDateTime;
                }

                if (Option == PrintMode.Preview.ToString())
                {
                    transportationContractFormData.PrintMode = (int)PrintMode.Preview;
                }
                if (Option == PrintMode.SaveAsPDF.ToString())
                {
                    transportationContractFormData.PrintMode = (int)PrintMode.SaveAsPDF;
                }

                SelectedBookingTypeItemsChanged(SelectedBookingTypeItems);
                HandleValidSubmit(null);
            }
            await ToggleLoading(false);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    /// <summary>
    /// Load javascript of page
    /// </summary>
    protected override void OnParametersSet()
    {
        try
        {
            JSRuntime.InvokeVoidAsync("loadPageScript", "transportationContractPage");
            StateHasChanged();
            base.OnParametersSet();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await JSRuntime.InvokeVoidAsync("focusFirstItem");
            }
            await JSRuntime.InvokeVoidAsync("setEventforCodeNumberFieldV2", ".code-number", true, 10, true);
            await JSRuntime.InvokeVoidAsync("EnterTab", "#canTab");
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    private async Task<TransportationContractFormData> BuildSearchModel(TransportationContractFormData model)
    {
        var filters = await FilterConditionService.GetFilterCondition(FormFilterName.TransportationContract, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
        if (filters.Count() == 0)
        {
            InitializedStateOfFormData();
            model = transportationContractFormData;
        }
        else
        {
            foreach (var item in filters)
            {
                var propertyInfo = model.GetType().GetProperty(item.ItemNm);
                if (propertyInfo != null && !string.IsNullOrEmpty(item.JoInput))
                {
                    switch (item.ItemNm)
                    {
                        case nameof(TransportationContractFormData.PrintMode):
                            propertyInfo.SetValue(model, int.TryParse(item.JoInput, out int print) ? (PrintMode)print : PrintMode.Preview);
                            break;
                        case nameof(TransportationContractFormData.OutputUnit):
                            propertyInfo.SetValue(model, int.TryParse(item.JoInput, out int output) ? (OutputUnit)output : OutputUnit.EachBooking);
                            break;

                        case nameof(TransportationContractFormData.DateTypeContract):
                            propertyInfo.SetValue(model, int.TryParse(item.JoInput, out int dateType) ? (DateTypeContract)dateType : DateTypeContract.Dispatch);
                            break;
                        case nameof(TransportationContractFormData.DateTo):
                        case nameof(TransportationContractFormData.DateFrom):
                            propertyInfo.SetValue(model, DateTime.TryParseExact(item.JoInput, "yyyyMMdd", new CultureInfo("ja-JP"), DateTimeStyles.None, out DateTime selectedDate) ? selectedDate : (DateTime?)null);
                            break;
                        case nameof(TransportationContractFormData.OutputSelection):
                            propertyInfo.SetValue(model, int.TryParse(item.JoInput, out int outputSel) ? (OutputSelection)outputSel : (int)OutputSelection.All);
                            break;
                        case nameof(TransportationContractFormData.YearlyContract):
                            propertyInfo.SetValue(model, int.TryParse(item.JoInput, out int yearlyCtr) ? (YearlyContract)yearlyCtr : YearlyContract.NotOutput);
                            break;
                        case nameof(TransportationContractFormData.UketsukeEigyoJo):
                            var selectedEigyoCdSeq = int.TryParse(item.JoInput, out int selectedE) ? selectedE : 0;
                            var selectedEigyo = SaleBranchList.FirstOrDefault(e => e.EigyoCdSeq == selectedEigyoCdSeq);
                            propertyInfo.SetValue(model, selectedEigyo);
                            break;
                        case nameof(TransportationContractFormData.EigyoTantoSha):
                        case nameof(TransportationContractFormData.InpSyainCd):
                            var selectedPicCdSeq = int.TryParse(item.JoInput, out int selectedP) ? selectedP : 0;
                            var selectedPic = StaffList.FirstOrDefault(e => e.SyainCdSeq == selectedPicCdSeq);
                            propertyInfo.SetValue(model, selectedPic);
                            break;
                        case nameof(TransportationContractFormData.UkeNumber):
                            var ukeNo = int.TryParse(item.JoInput, out int selectedU) ? selectedU.ToString() : "";
                            propertyInfo.SetValue(model, ukeNo);
                            break;
                        case nameof(TransportationContractFormData.Gyosya):
                            var selectedGyosyaCdSeq = int.TryParse(item.JoInput, out int selectedG) ? selectedG : 0;
                            var selectedGyosya = listGyosya.FirstOrDefault(e => e.GyosyaCdSeq == selectedGyosyaCdSeq);
                            propertyInfo.SetValue(model, selectedGyosya);
                            break;
                        case nameof(TransportationContractFormData.TokuiSaki):
                            var selectedTokuiSakiCdSeq = int.TryParse(item.JoInput, out int selectedT) ? selectedT : 0;
                            var selectedTokuiSaki = listTokiSaki.FirstOrDefault(e => e.TokuiSeq == selectedTokuiSakiCdSeq);
                            propertyInfo.SetValue(model, selectedTokuiSaki);
                            break;

                        case nameof(TransportationContractFormData.TokuiSiten):
                            var selectedTokuiSitenCdSeq = int.TryParse(item.JoInput, out int selectedS) ? selectedS : 0;
                            var selectedTokuiSiten = listTokiSiten.FirstOrDefault(e => e.SitenCdSeq == selectedTokuiSitenCdSeq);
                            propertyInfo.SetValue(model, selectedTokuiSiten);
                            break;

                        case nameof(TransportationContractFormData.YoyakuKbnList):
                            var datas1 = item.JoInput.Split(",");
                            var selectedYykKbn = new List<BookingTypeData>();
                            foreach (string data in datas1)
                            {
                                if (!String.IsNullOrEmpty(data))
                                {
                                    var selectYoyKbn = int.TryParse(data, out int selectedY) ? selectedY : 0;
                                    var bookingTypeData = YoyakuKbnList.FirstOrDefault(x => x.YoyaKbnSeq == selectedY && x.TenantCdSeq == new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                                    if (bookingTypeData != null) selectedYykKbn.Add(bookingTypeData);
                                }
                            }
                            propertyInfo.SetValue(model, selectedYykKbn);
                            break;
                        case nameof(TransportationContractFormData.IsUpdateExportDate):
                            bool IsUpdate = bool.Parse(item.JoInput);
                            propertyInfo.SetValue(model, IsUpdate);
                            break;
                    }
                }
            }
        }
        return model;
    }


    void InitializedStateOfFormData()
    {
        try
        {
            transportationContractFormData = new TransportationContractFormData();
            transportationContractFormData.PrintMode = (int)PrintMode.Preview;
            transportationContractFormData.OutputUnit = (int)OutputUnit.EachBooking;
            transportationContractFormData.DateTypeContract = (int)DateTypeContract.Dispatch;
            transportationContractFormData.OutputSelection = (int)OutputSelection.All;
            transportationContractFormData.YearlyContract = (int)YearlyContract.NotOutput;
            transportationContractFormData.DateFrom = DateTime.Today;
            transportationContractFormData.DateTo = DateTime.Today;
            transportationContractFormData.YoyakuKbnList = YoyakuKbnList;
            transportationContractFormData.IsUpdateExportDate = true;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }


    void ChangePrintMode(MouseEventArgs e, int number)
    {
        try
        {
            transportationContractFormData.PrintMode = number;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void ChangeOutputUnit(MouseEventArgs e, int number)
    {
        try
        {
            transportationContractFormData.OutputUnit = number;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void ChangeIsUpdateExportDate(MouseEventArgs e, bool IsUpdate)
    {
        try
        {
            transportationContractFormData.IsUpdateExportDate = IsUpdate;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void ChangeDateTypeContract(MouseEventArgs e, int number)
    {
        try
        {
            transportationContractFormData.DateTypeContract = number;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void ChangeOutputSelection(MouseEventArgs e, int number)
    {
        try
        {
            transportationContractFormData.OutputSelection = number;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void ChangeYearlyContract(MouseEventArgs e, int number)
    {
        try
        {
            transportationContractFormData.YearlyContract = number;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void OnSelectedSaleBranchChanged(SaleBranchData e)
    {
        try
        {
            transportationContractFormData.UketsukeEigyoJo = e;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void OnSelectedStaffChanged(StaffsData e)
    {
        try
        {
            transportationContractFormData.EigyoTantoSha = e;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void OnSelectedInpStaffChanged(StaffsData e)
    {
        try
        {
            transportationContractFormData.InpSyainCd = e;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void OnChangeGyosya(CustomerComponentGyosyaData e)
    {
        try
        {
            transportationContractFormData.Gyosya = e;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void OnChangeTokuiSaki(CustomerComponentTokiskData e)
    {
        try
        {
            transportationContractFormData.TokuiSaki = e;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void OnChangeTokuiSiten(CustomerComponentTokiStData e)
    {
        try
        {
            transportationContractFormData.TokuiSiten = e;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    void OnUkeNumberChanged(string newValue)
    {
        try
        {
            if (int.TryParse(newValue, out int v) && v > 0)
            {
                transportationContractFormData.UkeNumber = (newValue as string).PadLeft(10, '0');
            }
            else
            {
                transportationContractFormData.UkeNumber = null;
            }
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    void SelectedBookingTypeItemsChanged(IEnumerable<BookingTypeData> selectedBookingTypeItems)
    {
        try
        {
            SelectedBookingTypeItems = selectedBookingTypeItems;
            if (checkAll == true && !SelectedBookingTypeItems.Contains(allBookingType))
            {
                SelectedBookingTypeItems = SelectedBookingTypeItems.Take(0);
                checkAll = false;
            }
            if (checkAll == false && SelectedBookingTypeItems.Contains(allBookingType))
            {
                SelectedBookingTypeItems = YoyakuKbnList;
                checkAll = true;
            }
            if (checkAll == true && SelectedBookingTypeItems.Contains(allBookingType) && SelectedBookingTypeItems.Count() < YoyakuKbnList.Count())
            {
                SelectedBookingTypeItems = SelectedBookingTypeItems.Where(t => t.YoyaKbnNm != allBookingType.YoyaKbnNm);
                checkAll = false;
            }
            if (checkAll == false && !SelectedBookingTypeItems.Contains(allBookingType) && SelectedBookingTypeItems.Count() == YoyakuKbnList.Count() - 1)
            {
                SelectedBookingTypeItems = YoyakuKbnList;
                checkAll = true;
            }
            transportationContractFormData.YoyakuKbnList = SelectedBookingTypeItems.ToList();
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }


    private async void OnStartDateChanged(DateTime? newValue)
    {
        try
        {
            transportationContractFormData.DateFrom = newValue;
            transportationContractFormData.DateTo = newValue;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    private async void OnEndDateChanged(DateTime? newValue)
    {
        try
        {
            transportationContractFormData.DateTo = newValue;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }


    async void HandleValidSubmit(MouseEventArgs args)
    {
        try
        {
            await ToggleLoading(true);
            keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForTransportationContract(transportationContractFormData).Result;
            FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.TransportationContract, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();

            TransportationContractFormData transportationContractFormDataClone = (TransportationContractFormData)transportationContractFormData.Clone();
            if (!string.IsNullOrEmpty(transportationContractFormDataClone.UkeNumber))
            {
                transportationContractFormDataClone.UkeNumber = advancePaymentDetailsService.FormatCodeNumber(new ClaimModel().TenantID.ToString()) + CommonUtil.FormatCodeNumber(transportationContractFormDataClone.UkeNumber);
            }

            ReturnRecordNumber = await HikiukeshoReportService.GetHikiukeshoRowResult(transportationContractFormDataClone);

            if (ReturnRecordNumber <= 0)
            {
                DataNotExistPopup = true;
            }
            else
            {
                HikiukeshoReportService.CallReportService(transportationContractFormDataClone, SelectedBookingTypeItems, JSRuntime, 0);
                if (transportationContractFormData.IsUpdateExportDate)
                {
                    await HikiukeshoReportService.UpdateHikiukeshoExportDate(transportationContractFormDataClone);
                }
            }
            await ToggleLoading(false);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    async Task ClearAll(MouseEventArgs args)
    {
        try
        {
            InitializedStateOfFormData();
            SelectedBookingTypeItems = YoyakuKbnList;
            await FilterConditionService.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 0, FormFilterName.TransportationContract);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    CultureInfo ci = new CultureInfo("ja-JP");
}