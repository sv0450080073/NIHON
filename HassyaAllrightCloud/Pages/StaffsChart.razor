@using HassyaAllrightCloud.Pages.Components.StaffsChart
@using Microsoft.Extensions.DependencyInjection
@using System.Threading;
@using Microsoft.Extensions.Configuration
@using HassyaAllrightCloud.Domain.Dto.BillPrint;
@inject IConfiguration Configuration
@inherits OwningComponentBase
@inject IStringLocalizer<StaffsChart> Lang
@inject CustomHttpClient Http
@inject IJSRuntime JSRuntime
@inject AppSettingsService AppSettingsService
@inject BusScheduleHelper BusScheduleHelper
@inject CustomNavigation NavigationManager
@inject BrowserResizeService BrowserResizeService
@inject IStaffListService StaffService
@inject ITPM_CodeKbListService TPM_CodeKbnService
@inject IStaffsChartService StaffsChartService
@inject IVPM_KinKyuDataService VPM_KinKyuDataService
@inject IFilterCondition FilterConditionService
@inject IBusLineCssColorServices BusLineCssColorService
@inject IGenerateFilterValueDictionary GenerateFilterValueDictionaryService
@inject IBusCoordinationReportService BusCoordinationReportService;
@inject IUnkoushijishoReportService UnkoushijishoReportService
@inject CustomNavigation NavManager
@implements IDisposable
<DxPopup CssClass="modal-lg custom-popup" Visible="@(IsOpenEditYykshoBikoNm || IsOpenEditUnkobiBikoNm)" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @if (IsOpenEditYykshoBikoNm)
            {
                @Lang["RemarksInputYyksho"]
            }
            else if (IsOpenEditUnkobiBikoNm)
            {
                @Lang["RemarksInputUnkobi"]
            }
            <a class="close-button oi oi-x text-white" href="javascript:void(0)" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="@(async () => { IsOpenEditYykshoBikoNm = false; IsOpenEditUnkobiBikoNm = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.BookingTabs.BookingRemark UkeNo="@update.BookingId" IsUnkobiBikoNm="IsOpenEditUnkobiBikoNm" UnkRen="update.HaUnkRen"/>
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@IsOpenConfirmTab" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ConfirmInput"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0)" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="@(async () => { IsOpenConfirmTab = false; await reload(""); })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.BookingTabs.ConfirmInputTab UkeNo="@update.BookingId" />
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupFutai" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["AncillaryInput"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(async () => { PopupFutai = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.Futai UkeNo="@update.BookingId" CurrentViewMode="IncidentalViewMode.Futai" />
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupTsumi" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["LoadedProductInput"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(async () => { PopupTsumi = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.Futai UkeNo="@update.BookingId" CurrentViewMode="IncidentalViewMode.Tsumi" />
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-xl custom-popup" @bind-Visible="@PopupTehai" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ArrangementInput"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(async () => { PopupTehai = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.Tehai UkeNo="@update.BookingId" OnClose="@(async () => { PopupTehai = false; })"></HassyaAllrightCloud.Pages.Components.Tehai>
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupJourney" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["menu_journeys"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelJourney())"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <HassyaAllrightCloud.Pages.Components.Journeys ukeNo="@update.BookingId" unkRenparam="@update.HaUnkRen"  teiDanNo="@update.TeiDanNo" bunkRen="@update.BunkRen" OnClose="@((e) => CancelJourney())"></HassyaAllrightCloud.Pages.Components.Journeys>
    </Content>
</DxPopup>
@*Popup Warning*@
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupwndriVisible">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["TitlePopupWarning"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelwnDriver(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-exclamation-triangle text-warning mr-2" aria-hidden="true"></i>
            @(vehicle == 1?Lang["message_warning_driver"]:vehicle == 2?Lang["message_warning_guide"]:Lang["message_warning_moveline"])
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => CancelwnDriver(e))" Text="OK" />
    </FooterTemplate>
</DxPopup>
@* Popup Menu Comment Date *@
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupCommentDate">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["message_popup_commentdate"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelDateComment(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        @if (Ischecktext)
        {
            <span class="validation-errors">@Lang["message_error_limit_character"]</span>
        }
        <div class="d-flex">
            <label class="col-form-label-sm mr-3 width--56 flex">@Lang["remark"]</label>
            <textarea class="flex-grow-1 @(Ischecktext ? "textinvalid" : "")" rows="3" maxlength="100" @bind="@commentdate"></textarea>
        </div>
    </Content>
    <FooterTemplate>

        <button type="button" class="btn btn-sm btn-outline-dark width--140" @onclick="@((e) => CancelDateComment(e))">@Lang["btn_cancel"]</button>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => UpdateDateComment(e))" Text="@Lang["btn_save"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>

<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@IsOpenCancelTab" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["reservation_correction"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="@(async () => { IsOpenCancelTab = false; await reload(""); })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.BookingTabs.CancellationTab UkeNo="@update.BookingId" />
    </ChildContent>
</DxPopup>

@*Popup edit day off*@
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupUpdateStaffDayoff">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["title_PopupUpdateStaffDayoff"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelUpdateStaffdayoff(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        @if (isErrorUpdateStaffDayoff)
        {
            <span class="validation-errors">@Lang["message_warning_time_dayoff"]</span>
        }
        <div class="form-group d-flex flex-nowrap">
            <label class="col-form-label-sm mr-3 width--90">@Lang["vehicle_input"]</label>
            <DxComboBox CssClass="flex-grow-1"
                        Data="@lstStaffsNames"
                        FilteringMode="@DataGridFilteringMode.Contains"
                        SelectedItem="@StaffNameItem"
                        SelectedItemChanged="@SelectBuslineChange"
                        TextFieldName="Text"
                        AllowUserInput="false">
            </DxComboBox>
        </div>
        <div class="form-group d-flex flex-nowrap">
            <label class="col-form-label-sm mr-3 width--90">@Lang["date_off"]</label>
            <DxDateEdit CssClass="@cssclassdate" Date="DateTime.ParseExact(itemstaffchoosemenu.StartDate, dateformat, CultureInfo.InvariantCulture)" DateChanged="@((newValue) => OnDateStartChange(newValue))" Format="yyyy/MM/dd"></DxDateEdit>
            <DxTextBox CssClass="@cssclasstime" Text="@startTime.ToString(@"hh\:mm")" TextChanged="@((newValue) => onStartimechage(newValue))"></DxTextBox>
            <span class="form-text mx-2">～</span>
            <DxDateEdit CssClass="@cssclassdate" Date="DateTime.ParseExact(itemstaffchoosemenu.EndDate, dateformat, CultureInfo.InvariantCulture)" DateChanged="@((newValue) => OnDateEndChange(newValue))" Format="yyyy/MM/dd"></DxDateEdit>
            <DxTextBox CssClass="@cssclasstime" Text="@endTime.ToString(@"hh\:mm")" TextChanged="@((newValue) => onEndtimechage(newValue))"></DxTextBox>
        </div>
        <div class="form-group d-flex flex-nowrap">
            <label class="col-form-label-sm mr-3 width--90">@Lang["dayoff_code"]</label>
            <DxComboBox CssClass="flex-grow-1"
                        Data="@KinKyulst"
                        FilteringMode="@DataGridFilteringMode.Contains"
                        SelectedItem="@CodeKbnItem"
                        SelectedItemChanged="@SelectTypeChange"
                        TextFieldName="Text"
                        AllowUserInput="false">
            </DxComboBox>
        </div>
        <div class="form-group d-flex flex-nowrap">
            <label class="col-form-label-sm mr-3 width--90">@Lang["transfer_date"]</label>
            <DxDateEdit CssClass="width--150" Date="FuriYmd" DateChanged="@((newValue) => OnTransferDateChange(newValue))" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" Format="yyyy/MM/dd"></DxDateEdit>
        </div>
        <div class="form-group d-flex flex-nowrap">
            <label class="col-form-label-sm mr-3 width--90">@Lang["remark"]</label>
            <DxTextBox CssClass="flex-grow-1" Text="@itemstaffchoosemenu.BikoNm" TextChanged="@((newValue) => TextStaffDayoffChange(newValue))"></DxTextBox>
        </div>
    </Content>
    <FooterTemplate>
        <button type="button" class="btn btn-sm btn-outline-dark width--140" @onclick="@((e) => CancelUpdateStaffdayoff(e))">@Lang["btn_cancel"]</button>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => UpdateDayoff(e))" Text="@Lang["btn_register"]" CssClass="width--140" />
    </FooterTemplate>
</DxPopup>
@* Context Menu Comment Date *@
<ContextMenu Id="MenuDate" CssClass="contextmenu">
    <Item Id="menuitem-supermenutype1" OnClick="ItemClick"><i class="fa  fa-home" aria-hidden="true"></i> @Lang["supermenu_reservation"]</Item>
    <Item Id="menuitem-supermenutype2" OnClick="ItemClick"><i class="fa  fa-home" aria-hidden="true"></i> @Lang["supermenu_vehicle"]</Item>
    <Item Id="menuitem-hypermenu" OnClick="ItemClick"><i class="fa  fa-home" aria-hidden="true"></i> @Lang["hypermenu"]</Item>
    <div class="line"></div>
    <Item Id="temporary_car_input" OnClick="ItemClick"><i class="fa fa-book" aria-hidden="true"></i> @Lang["temporary_car_input"]</Item>
    <Item Id="menuitem-busallocation" OnClick="ItemClick"><i class="fa fa-book" aria-hidden="true"></i> @Lang["menu_busallocation"]</Item>
    <Item Id="menuitem-staff" OnClick="ItemClick"><i class="fa fa-id-card-o" aria-hidden="true"></i> @Lang["staff_input"]</Item>
    <div class="line"></div>
    <Item Id="daily_report_vehicle" OnClick="ItemClick"><i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["daily_report_vehicle"]</Item>
    <Item Enabled="false"><i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["list_of_hire_cars"]</Item>
    <div class="line"></div>
    <Item>
        <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["FormInput"]
        <SubMenu>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["BusReport"]
                <SubMenu>
                    <Item Id="downloadBusReport" OnClick="ItemClickBusReport"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="previewBusReport" OnClick="ItemClickBusReport"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report"]
                <SubMenu>
                    <Item Id="downloadReportTenkokiroku" OnClick="ItemClickReport"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="previewReportTenkokiroku" OnClick="ItemClickReport"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item Id="previewUnkoushijishoReport" OnClick="ItemClickReport">
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report_operating_instructions"]
                @*<SubMenu>
                        <Item Id="downloadUnkoushijishoReport" OnClick="ItemClickReport"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                        <Item Id="previewUnkoushijishoReport" OnClick="ItemClickReport"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                    </SubMenu>*@
            </Item>
            <Item Id="previewJomukirokuboReport" OnClick="ItemClickReport">
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report_flight_record_book"]
                @*<SubMenu>
                        <Item Id="downloadJomukirokuboReport" OnClick="ItemClickReport"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                        <Item Id="previewJomukirokuboReport" OnClick="ItemClickReport"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                    </SubMenu>*@
            </Item>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["AdvanceStatement"]
                <SubMenu>
                    <Item Id="AdvanceStatementWeb" OnClick="ItemClick"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="AdvanceStatementPrint" OnClick="ItemClick"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
        </SubMenu>
    </Item>
    <div class="line"></div>
    <Item Id="menuitem-sticker" OnClick="ItemClickSticker"><i class="fa fa-wrench" aria-hidden="true"></i> @Lang["sticker"]</Item>
</ContextMenu>

<DxPopup CssClass="custom-popup" @bind-Visible="@PopupDeleteBusrepair">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["title_PopupDeleteBusrepair"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelBusrepair(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-exclamation-triangle text-warning mr-2" aria-hidden="true"></i> @Lang["text_confirm_delete"]
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Danger" @onclick="@((e) => UpdateStatusBusrepair(e))" Text="@Lang["Yes"]" CssClass="width--75" />
        <DxButton RenderStyle="ButtonRenderStyle.Secondary" @onclick="@((e) => CancelBusrepair(e))" Text="@Lang["No"]" CssClass="width--75" />
    </FooterTemplate>
</DxPopup>
@* Context Menu Repair *@
<ContextMenu Id="MenuRepair" CssClass="contextmenu">
    <Item Id="MenuRepair1" OnClick="OpenPopupDeleteStaffRepair">
        <i class="fa fa-times" aria-hidden="true"></i> @Lang["repair_deletion"]
    </Item>
    <Item Id="MenuRepair2" OnClick="OpenPopupUpdateStaffRepair">
        <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["repair_input"]
    </Item>
</ContextMenu>

@* Context Menu Split *@
<ContextMenu Id="MenuSplit" CssClass="contextmenu" OnAppearing="MenuOnAppearingHandler">
    <Item Id="menuitem-delete" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-trash" aria-hidden="true"></i> @Lang["delete_divided_data"]</Item>
    <Item Id="menuitem-merge" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-chain" aria-hidden="true"></i> @Lang["split_data_combination"]</Item>
    <div class="line"></div>
    <div class="line"></div>
    <Item Id="menuitem-undo" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-mail-reply" aria-hidden="true"></i> @Lang["release_dispatch"]</Item>
    <Item Id="menuitem-simpledispatch" OnClick="@ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-check-square" aria-hidden="true"></i> @Lang["simple_dispatch"]</Item>
    <div class="line"></div>
    <Item Id="menuitem-temporarycarinput" OnClick="OpenBusAllocation" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-book" aria-hidden="true"></i> @Lang["temporary_car_input"]</Item>
    <Item Id="menuitem-busallocation" OnClick="OpenBusAllocation" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-book" aria-hidden="true"></i> @Lang["menu_busallocation"]</Item>
    <Item Id="menuitem-partnerbookinginput" OnClick="OpenPartnerBookingInput" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-coffee" aria-hidden="true"></i> @Lang["CarTransfer"]</Item>
    <Item Id="menuitem-car-cooperation" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-share-alt" aria-hidden="true"></i> @Lang["car_cooperation"]</Item>
    <div class="line"></div>
    <Item Id="menuitem-reservation-correction" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["reservation_correction"]</Item>
    <Item>
        <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ReservationCopy"]
        <SubMenu>
            <Item Id="menuitem-single-copy" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["SingleCopy"]</Item>
            <Item Id="menuitem-multi-copy" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["CalendarCopy"]</Item>
        </SubMenu>
    </Item>
    <Item Id="menuitem-reservation-cancellation" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ReservationCancellation"]</Item>
    <div class="line"></div>
    <Item>
        <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ReservationFormAndOtherInput"]
        <SubMenu>
            <Item Id="6" OnClick="OpenJourneys" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-columns" aria-hidden="true"></i> @Lang["menu_journeys"]</Item>
            <Item OnClick="OpenFutai" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["AncillaryInput"]</Item>
            <Item OnClick="OpenTehai" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ArrangementInput"]</Item>
            <Item OnClick="OpenTsumi" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["LoadedProductInput"]</Item>
            <Item Id="menuitem-confirmation" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ConfirmInput"]</Item>
            <Item Id="menuitem-edityykshobikonm" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["RemarksInputYyksho"]</Item>
            <Item Id="menuitem-editunkobibikonm" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["RemarksInputUnkobi"]</Item>
        </SubMenu>
    </Item>
    <div class="line"></div>
    <Item>
        <i class="fa fa-pencil-square-o" aria-hidden="true"></i>@Lang["FormInput"]
        <SubMenu>
            <Item>
                <i class="fa fa-file-text-o" aria-hidden="true"></i> @Lang["UnderwritingOfCarriage"]
                <SubMenu>
                    <Item Enabled="false"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Enabled="false"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item>
                <i class="fa fa-file-text-o" aria-hidden="true"></i> @Lang["UnderwritingOfTransportation"]
                <SubMenu>
                    <Item Enabled="false"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Enabled="false"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <div class="line"></div>
            <Item>
                <i class="fa fa-pencil-square-o" aria-hidden="true"></i>@Lang["BusArrangement"]
                <SubMenu>
                    <Item Id="BusCoooradination_Download" OnClick="@ItemClickBusCooradinationReport" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="BusCoooradination_Preview" OnClick="@ItemClickBusCooradinationReport" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report_operating_instructions"]
                <SubMenu>
                    <Item OnClick="ItemClick" Id="download_report_operating_instructions" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item OnClick="ItemClick" Id="preview_report_operating_instructions" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report_flight_record_book"]
                <SubMenu>
                    <Item OnClick="ItemClick" Id="download_report_flight_record_book" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item OnClick="ItemClick" Id="preview_report_flight_record_book" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <div class="line"></div>
            <Item Id="menuitem-preview-billprint" OnClick="ItemClick">
                <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["Invoice"]
                @*<SubMenu>
                        <Item Enabled="false"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                        <Item Enabled="false"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                    </SubMenu>*@
            </Item>
            <Item>
                <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["AdvanceStatement"]
                <SubMenu>
                    <Item Enabled="false"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Enabled="false"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
        </SubMenu>
    </Item>
    <div class="line"></div>
    <Item><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["CommentInput"]</Item>
</ContextMenu>

@if (isLoading)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}

<div class="main-top">
    <div class="d-sm-flex justify-content-between align-items-center pb-2">
        <div class="d-flex">
            <h5 class="mb-lg-0">@Lang["Page_title"]</h5>
        </div>
        <div class="d-flex">
            <ListColorChart></ListColorChart>
            <button class="btn btn-sm btn-danger btnclear ml-3" @onclick="ResetForm">
                <i class="fa fa-refresh" aria-hidden="true"></i>
                @Lang["Clear"]
            </button>
        </div>
    </div>

    <div id="control-tab" class="title-section mb-2">
        <i class="fa fa-angle-up" aria-hidden="true"></i> @Lang["condition"]
    </div>

    <div class="express-condition mb-2">
        <DxTabs @bind-ActiveTabIndex="@ActiveTabIndex">
            <DxTab Text="@Lang["tab1"]"></DxTab>
            <DxTab Text="@Lang["tab2"]"></DxTab>
            <DxTab Text="@Lang["tab3"]"></DxTab>
            <DxTab Text="@Lang["tab4"]"></DxTab>
        </DxTabs>
        <div class="card dxbs-border-top-0 dxbs-border-radius-top-0">
            <div class="card-body">
                @switch (ActiveTabIndex)
                {
                    case 0:
                        <div class="d-flex">
                            <div class="mr-3">
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3">@Lang["start_date"]</label>
                                    <div class="d-flex">
                                        <DxDateEdit Date="@Date" DateChanged="@((newValue) => OnDateChanged(newValue))" Format="yyyy/MM/dd" CssClass="width--120 mr-2"></DxDateEdit>
                                        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => TodayClick(e))" Text="@Lang["btn_today"]" CssClass="width--65"></DxButton>
                                    </div>
                                </div>
                            </div>
                            <div class="mr-3">
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--90">@Lang["display_line"]</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.Type == (int)Staffs_Type.Normal ? "active" : null)" @onclick="@(e => OnClickType(e, (int)Staffs_Type.Normal))">@Lang["display_line_normal"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.Type == (int)Staffs_Type.Unassigned ? "active" : null)" @onclick="@(e => OnClickType(e, (int)Staffs_Type.Unassigned))">@Lang["display_line_normal"]+@Lang["display_line_unassigned"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--90">@Lang["grouping"]</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.Grouping == (int)GroupMode.All ? "active" : null)" @onclick="@(e => OnClickGroup(e, (int)GroupMode.All))">@Lang["none"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.Grouping == (int)GroupMode.Branch ? "active" : null)" @onclick="@(e => OnClickGroup(e, (int)GroupMode.Branch))">@Lang["branch"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.Grouping == (int)GroupMode.Company ? "active" : null)" @onclick="@(e => OnClickGroup(e, (int)GroupMode.Company))">@Lang["company"]</a>
                                    </nav>
                                </div>
                            </div>
                            <div class="mr-3">
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3">@Lang["display_range"]</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.DisplayRange == (int)DayMode.OneDay ? "active" : null)" @onclick="@(e => OnClickDisplayRange(e, (int)DayMode.OneDay))">@Lang["oneday"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.DisplayRange == (int)DayMode.ThreeDays ? "active" : null)" @onclick="@(e => OnClickDisplayRange(e, (int)DayMode.ThreeDays))">@Lang["threedays"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.DisplayRange == (int)DayMode.Week ? "active" : null)" @onclick="@(e => OnClickDisplayRange(e, (int)DayMode.Week))">@Lang["oneweek"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.DisplayRange == (int)DayMode.Month ? "active" : null)" @onclick="@(e => OnClickDisplayRange(e, (int)DayMode.Month))">@Lang["onemonth"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3">@Lang["time_range"]</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.TimeRange == (int)TimeMode.Minute ? "active" : null) @(Param.DisplayRange != (int)DayMode.OneDay ? "disabled" : null)" @onclick="@(e => OnClickTimeRange(e, (int)TimeMode.Minute))">@Lang["15minutes"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.TimeRange == (int)TimeMode.OneHour ? "active" : null) @(Param.DisplayRange != (int)DayMode.OneDay ? "disabled" : null)" @onclick="@(e => OnClickTimeRange(e, (int)TimeMode.OneHour))">@Lang["onehour"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.TimeRange == (int)TimeMode.ThreeHours ? "active" : null) @(Param.DisplayRange > (int)DayMode.ThreeDays ? "disabled" : null)" @onclick="@(e => OnClickTimeRange(e, (int)TimeMode.ThreeHours))">@Lang["threehours"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.TimeRange == (int)TimeMode.SixHours ? "active" : null) @(Param.DisplayRange > (int)DayMode.ThreeDays ? "disabled" : null)" @onclick="@(e => OnClickTimeRange(e, (int)TimeMode.SixHours))">@Lang["sixhours"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.TimeRange == (int)TimeMode.Day ? "active" : null) @(Param.DisplayRange < (int)DayMode.Week ? "disabled" : null)" @onclick="@(e => OnClickTimeRange(e, (int)TimeMode.Day))">@Lang["oneday"]</a>
                                    </nav>
                                </div>
                            </div>
                        </div>
                        break;
                    case 2:
                        <div class="d-flex">
                            <div class="mr-5">
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--100">@Lang["orderby_list_crew_members"]</label>
                                    <nav class="nav nav-pills">
                                        <a class="ml-2 nav-link @(Param.OrderbyList == (int)Staffs_OrderbyList.DutyEmployee ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickOrderByList(e, (int)Staffs_OrderbyList.DutyEmployee))">@Lang["duty"]・@Lang["employee_order"]</a>
                                        <a class="ml-2 nav-link @(Param.OrderbyList == (int)Staffs_OrderbyList.BranchEmployee ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickOrderByList(e, (int)Staffs_OrderbyList.BranchEmployee))">@Lang["branch"]・@Lang["employee_order"]</a>
                                        <a class="ml-2 nav-link @(Param.OrderbyList == (int)Staffs_OrderbyList.BranchJob ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickOrderByList(e, (int)Staffs_OrderbyList.BranchJob))">@Lang["branch"]・@Lang["job_order"]</a>
                                        <a class="ml-2 nav-link @(Param.OrderbyList == (int)Staffs_OrderbyList.Rolling ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickOrderByList(e, (int)Staffs_OrderbyList.Rolling))">@Lang["rolling_order"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--100">@Lang["orderby_crew_member_name"]</label>
                                    <nav class="nav nav-pills">
                                        <a class="ml-2 nav-link @(Param.OrderbyName == (int)Staffs_OrderbyName.DutyEmployee ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickOrderByName(e, (int)Staffs_OrderbyName.DutyEmployee))">@Lang["duty"]・@Lang["employee"]</a>
                                        <a class="ml-2 nav-link @(Param.OrderbyName == (int)Staffs_OrderbyName.BranchDuty ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickOrderByName(e, (int)Staffs_OrderbyName.BranchDuty))">@Lang["branch"]・@Lang["duty"]</a>
                                        <a class="ml-2 nav-link @(Param.OrderbyName == (int)Staffs_OrderbyName.BranchEmployee ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickOrderByName(e, (int)Staffs_OrderbyName.BranchEmployee))">@Lang["branch"]・@Lang["employee"]</a>
                                    </nav>
                                </div>
                            </div>
                            <div class="mr-5">
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--100">@Lang["character_display_switching"]</label>
                                    <nav class="nav nav-pills">
                                        <a class="ml-2 nav-link @(Param.DisplayedCharacters == (int)DisplayLineMode.Custom ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDisplayedCharacters(e, (int)DisplayLineMode.Custom))">@Lang["custom_settings"]</a>
                                        <a class="ml-2 nav-link @(Param.DisplayedCharacters == (int)DisplayLineMode.Organization ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDisplayedCharacters(e, (int)DisplayLineMode.Organization))">@Lang["organization_name"]</a>
                                        <a class="ml-2 nav-link @(Param.DisplayedCharacters == (int)DisplayLineMode.Destination ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDisplayedCharacters(e, (int)DisplayLineMode.Destination))">@Lang["destination"]</a>
                                        <a class="ml-2 nav-link @(Param.DisplayedCharacters == (int)DisplayLineMode.Customer ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDisplayedCharacters(e, (int)DisplayLineMode.Customer))">@Lang["customer"]</a>
                                        <a class="ml-2 nav-link @(Param.DisplayedCharacters == (int)DisplayLineMode.None ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDisplayedCharacters(e, (int)DisplayLineMode.None))">@Lang["none"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--100">@Lang["line_width_switching"]</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.DisplayedLineHeight == (int)ViewMode.Large ? "active" : null)" @onclick="@(e => OnClickDisplayedLineHeight(e, (int)ViewMode.Large))">@Lang["large"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.DisplayedLineHeight == (int)ViewMode.Medium ? "active" : null)" @onclick="@(e => OnClickDisplayedLineHeight(e, (int)ViewMode.Medium))">@Lang["medium"]</a>
                                        <a href="javascript:void(0)" class="ml-2 nav-link @(Param.DisplayedLineHeight == (int)ViewMode.Small ? "active" : null)" @onclick="@(e => OnClickDisplayedLineHeight(e, (int)ViewMode.Small))">@Lang["small"]</a>
                                    </nav>
                                </div>
                            </div>
                        </div>
                        break;
                    case 1:
                        <div class="d-flex">
                            <div class="mr-5">
                                <div class="d-flex flex-nowrap">
                                    <div class="form-group d-flex flex-nowrap mr-4">
                                        <label class="col-form-label-sm mr-3">@Lang["company"]</label>
                                        <div class=@("has-tooltip-error custom-listbox-invalid" + (EmptyCompany ? " invalid" : ""))>
                                            @if (EmptyCompany)
                                            {
                                                <Tooltip Lang="@LangDic" ValueExpressions="@(() =>SelectedCompanyItems.FirstOrDefault())"
                                                         Text="@CompanyEmptyMessage" Position="PositionTooltip.top"> </Tooltip>
                                            }
                                            <div class="dropdown dropdown-listbox">
                                                <div class="input-group input-group-sm dx-listbox width--290 multi-combobox dropdown-toggle" id="lstcompany" data-toggle="dropdown">
                                                    <p class="form-control form-control-sm">@showSelectedCompanies</p>
                                                    <div class="form-control form-control-sm input-group-append dxbs-input-group-append dxbs-focus-hidden">
                                                        <button class="btn btn-sm dx-btn  btn-secondary dxbs-edit-btn dropdown-toggle dxbs-dropdown-toggle" type="button">
                                                            <span></span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="dropdown-menu dropdownlist" role="menu" aria-labelledby="lstcompany">
                                                    <DxListBox Data="@tmpcompanychart"
                                                               TextFieldName="TextReport"
                                                               SelectionMode="ListBoxSelectionMode.Multiple"
                                                               SelectedItems="@SelectedCompanyItems"
                                                               SelectedItemsChanged="@OnSelectedCompanyItemsChanged"
                                                               ShowCheckboxes="true"
                                                               CssClass="custom-dx-listbox">
                                                    </DxListBox>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap mr-4">
                                        <label class="col-form-label-sm mr-3">@Lang["branch"]</label>
                                        <div class=@("has-tooltip-error custom-listbox-invalid" + (EmptyBranch ? " invalid" : ""))>
                                            @if (EmptyBranch)
                                            {
                                                <Tooltip Lang="@LangDic" ValueExpressions="@(() =>SelectedBranchItems.FirstOrDefault())"
                                                         Text="@BranchEmptyMessage" Position="PositionTooltip.top"> </Tooltip>
                                            }
                                            <div class="dropdown dropdown-listbox">
                                                <div class="input-group input-group-sm dx-listbox width--290 multi-combobox dropdown-toggle" id="lstbranch" data-toggle="dropdown">
                                                    <p class="form-control form-control-sm">@showSelectedBranches</p>
                                                    <div class="form-control form-control-sm input-group-append dxbs-input-group-append dxbs-focus-hidden">
                                                        <button class="btn btn-sm dx-btn  btn-secondary dxbs-edit-btn dropdown-toggle dxbs-dropdown-toggle" type="button">
                                                            <span></span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="dropdown-menu dropdownlist" role="menu" aria-labelledby="lstbranch">
                                                    <DxListBox DataAsync="@GetBranchListAsync"
                                                               TextFieldName="TextNullbus"
                                                               ListRenderMode="ListRenderMode.Entire"
                                                               SelectionMode="ListBoxSelectionMode.Multiple"
                                                               SelectedItems="@SelectedBranchItems"
                                                               SelectedItemsChanged="@OnSelectedBranchItemsChanged"
                                                               ShowCheckboxes="true"
                                                               CssClass="custom-dx-listbox">
                                                    </DxListBox>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mr-5">
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3">@Lang["booking_category"]</label>
                                    <nav class="nav nav-pills">
                                        @foreach (var i in reservation)
                                        {
                                            <a href="javascript:void(0)" class="ml-2 nav-link @(Param.BookingCategory == i.YoyaKbnSeq ? "active" : null)" @onclick="@(e => OnClickBookingCategory(e, i.YoyaKbnSeq))">@i.YoyaKbnNm</a>
                                        }
                                    </nav>
                                </div>
                                <div class="form-group d-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3">@Lang["duties"]</label>
                                    <nav class="nav nav-pills">
                                        <a class="ml-2 nav-link @(Param.Duties == (int)Staffs_Duties.All ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDuties(e, (int)Staffs_Duties.All))">@Lang["all"]</a>
                                        <a class="ml-2 nav-link @(Param.Duties == (int)Staffs_Duties.Driver ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDuties(e, (int)Staffs_Duties.Driver))">@Lang["driver"]</a>
                                        <a class="ml-2 nav-link @(Param.Duties == (int)Staffs_Duties.Guide ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDuties(e, (int)Staffs_Duties.Guide))">@Lang["guide"]</a>
                                        <a class="ml-2 nav-link @(Param.Duties == (int)Staffs_Duties.OfficeWork ? "active" : null)" href="javascript:void(0)" @onclick="@(e => OnClickDuties(e, (int)Staffs_Duties.OfficeWork))">@Lang["officework"]</a>
                                    </nav>
                                </div>
                            </div>
                        </div>
                        break;
                    case 3:
                        <div class="d-flex">
                            <div class="form-group d-flex flex-nowrap mr-5">
                                <label class="col-form-label-sm mr-3-sm mr-3">@Lang["booking_category"]</label>
                                <DxComboBox Data="@reservation"
                                            TextFieldName="Text"
                                            AllowUserInput="false"
                                            SelectedItem="@currentReservation"
                                            SelectedItemChanged="@OnSelectedReservationChanged"
                                            SelectedItemExpression="@(() => currentReservation)">
                                </DxComboBox>
                            </div>
                            <div class="form-group d-flex flex-nowrap mr-5">
                                <label class="col-form-label-sm mr-3-sm mr-3">@Lang["affiliation_office"]</label>
                                <DxComboBox Data="@tmpbranchchart"
                                            TextFieldName="IDText"
                                            AllowUserInput="false"
                                            SelectedItem="@currentbranchfrom"
                                            SelectedItemChanged="@OnSelectedOfficeFromChanged"
                                            SelectedItemExpression="@(() => currentbranchfrom)">
                                </DxComboBox>
                                <span class="mx-3">～</span>
                                <DxComboBox Data="tmpbranchchart"
                                            TextFieldName="IDText"
                                            AllowUserInput="false"
                                            SelectedItem="@currentbranchto"
                                            SelectedItemChanged="@OnSelectedOfficeToChanged"
                                            SelectedItemExpression="@(() => currentbranchto)">
                                </DxComboBox>
                            </div>
                            <div class="form-group d-flex flex-nowrap align-items-center mr-5">
                                <label class="col-form-label-sm mr-3-sm mr-3">@Lang["unassigned_crew_classification"]</label>
                                <DxCheckBox Checked="@DriverChecked" CheckedChanged="@OnSelectedDriverChecked" CheckedExpression="() => DriverChecked" CssClass="mr-4">@Lang["driver"]</DxCheckBox>
                                <DxCheckBox Checked="@GuideChecked" CheckedChanged="@OnSelectedGuideChecked" CheckedExpression="() => GuideChecked" CssClass="mr-4">@Lang["guide"]</DxCheckBox>
                            </div>
                        </div>
                        <div class="d-flex align-items-end">
                            <EditForm id="" EditContext="@formContextItemStaffChart">
                                <DataAnnotationsValidator />
                                <FluentValidator TValidator="StaffChartSearchValidator" />
                                <div>
                                    <div class="d-flex align-items-center">
                                        <div class="form-group d-flex flex-nowrap mr-5">
                                            <label class="col-form-label-sm mr-3-sm mr-3">@Lang["departure_datetime"]</label>
                                            <div class="d-flex">
                                                <DxDateEdit Date="@departureDateStart" DateChanged="@((newValue) => OnDepartureDateStartChanged(newValue))" DateExpression="() => Param.DepartureDateTimeStart" Format="yyyy/MM/dd" CssClass="width--120"></DxDateEdit>
                                                <HassyaAllrightCloud.Pages.Components.InputTime CssClass="width--65 ml-2"
                                                                                                ValueExpressions="@(() => Param.DepartureTimeStart)"
                                                                                                MyTimeAsString="@departureTimeStart.ToString(@"hh\:mm")"
                                                                                                TimeChanged="@((newValue) => OnDepartureTimeStartChanged(newValue))">
                                                </HassyaAllrightCloud.Pages.Components.InputTime>
                                                <span class="mx-3">～</span>
                                                <div class="has-tooltip-error">
                                                    <Tooltip ValueExpressions="@(() =>Param.DepartureDateTimeEnd)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                                    <DxDateEdit Date="@departureDateEnd"
                                                                DateChanged="@((newValue) => OnDepartureDateEndChanged(newValue))"
                                                                DateExpression="() => Param.DepartureDateTimeEnd"
                                                                Format="yyyy/MM/dd"
                                                                CssClass="width--120"></DxDateEdit>
                                                </div>
                                                <div class="@("has-tooltip-error "+(Param?.DepartureDateTimeEnd !=null?formContextItemStaffChart.GetValidationMessages(() => Param.DepartureDateTimeEnd).FirstOrDefault() != null ? " custom-invalid":"":""))">
                                                    <Tooltip ValueExpressions="@(() =>Param.DepartureDateTimeEnd)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                                    <HassyaAllrightCloud.Pages.Components.InputTime CssClass="width--65 ml-2"
                                                                                                    ValueExpressions="@(() => Param.DepartureTimeEnd)"
                                                                                                    MyTimeAsString="@departureTimeEnd.ToString(@"hh\:mm")"
                                                                                                    TimeChanged="@((newValue) => OnDepartureTimeEndChanged(newValue))">
                                                    </HassyaAllrightCloud.Pages.Components.InputTime>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap mr-5">
                                            <label class="col-form-label-sm mr-3-sm mr-3">@Lang["arrival_date"]</label>
                                            <div class="d-flex">
                                                <DxDateEdit Date="@arrivalDateStart" DateChanged="@((newValue) => OnArrivalDateStartChanged(newValue))" DateExpression="() => Param.ArrivalDateTimeStart" Format="yyyy/MM/dd" CssClass="width--120"></DxDateEdit>
                                                <HassyaAllrightCloud.Pages.Components.InputTime CssClass="width--65 ml-2"
                                                                                                ValueExpressions="@(() => Param.ArrivalTimeStart)"
                                                                                                MyTimeAsString="@arrivalTimeStart.ToString(@"hh\:mm")"
                                                                                                TimeChanged="@((newValue) => OnArrivalTimeStartChanged(newValue))">
                                                </HassyaAllrightCloud.Pages.Components.InputTime>
                                                <span class="mx-3">～</span>
                                                <div class="has-tooltip-error">
                                                    <Tooltip ValueExpressions="@(() =>Param.ArrivalDateTimeEnd)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                                    <DxDateEdit Date="@arrivalDateEnd"
                                                                DateChanged="@((newValue) => OnArrivalDateEndChanged(newValue))"
                                                                DateExpression="() => Param.ArrivalDateTimeEnd"
                                                                Format="yyyy/MM/dd"
                                                                CssClass="width--120"></DxDateEdit>
                                                </div>
                                                <div class="@("has-tooltip-error "+(Param?.ArrivalDateTimeEnd !=null?formContextItemStaffChart.GetValidationMessages(() => Param.ArrivalDateTimeEnd).FirstOrDefault() != null ? " custom-invalid":"":""))">
                                                    <Tooltip ValueExpressions="@(() =>Param.ArrivalDateTimeEnd)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                                    <HassyaAllrightCloud.Pages.Components.InputTime CssClass="width--65 ml-2"
                                                                                                    ValueExpressions="@(() => Param.ArrivalTimeEnd)"
                                                                                                    MyTimeAsString="@arrivalTimeEnd.ToString(@"hh\:mm")"
                                                                                                    TimeChanged="@((newValue) => OnArrivalTimeEndChanged(newValue))">
                                                    </HassyaAllrightCloud.Pages.Components.InputTime>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <div class="form-group d-flex flex-nowrap mr-5">
                                            <label class="col-form-label-sm mr-3-sm mr-3">@Lang["delivery_time"]</label>
                                            <div class="d-flex">
                                                <DxDateEdit Date="@deliveryDateStart" DateChanged="@((newValue) => OnDeliveryDateStartChanged(newValue))" DateExpression="() => Param.DeliveryDateTimeStart" Format="yyyy/MM/dd" CssClass="width--120"></DxDateEdit>
                                                <HassyaAllrightCloud.Pages.Components.InputTime CssClass="width--65 ml-2"
                                                                                                ValueExpressions="@(() => Param.DeliveryTimeStart)"
                                                                                                MyTimeAsString="@deliveryTimeStart.ToString(@"hh\:mm")"
                                                                                                TimeChanged="@((newValue) => OnDeliveryTimeStartChanged(newValue))">
                                                </HassyaAllrightCloud.Pages.Components.InputTime>
                                                <span class="mx-3">～</span>
                                                <div class="has-tooltip-error">
                                                    <Tooltip ValueExpressions="@(() =>Param.DeliveryDateTimeEnd)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                                    <DxDateEdit Date="@deliveryDateEnd" DateChanged="@((newValue) => OnDeliveryDateEndChanged(newValue))" DateExpression="() => Param.DeliveryDateTimeEnd" Format="yyyy/MM/dd" CssClass="width--120"></DxDateEdit>
                                                </div>
                                                <div class="@("has-tooltip-error "+(Param?.DeliveryDateTimeEnd !=null?formContextItemStaffChart.GetValidationMessages(() => Param.DeliveryDateTimeEnd).FirstOrDefault() != null ? " custom-invalid":"":""))">
                                                    <Tooltip ValueExpressions="@(() =>Param.DeliveryDateTimeEnd)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                                    <HassyaAllrightCloud.Pages.Components.InputTime CssClass="width--65 ml-2"
                                                                                                    ValueExpressions="@(() => Param.DeliveryTimeEnd)"
                                                                                                    MyTimeAsString="@deliveryTimeEnd.ToString(@"hh\:mm")"
                                                                                                    TimeChanged="@((newValue) => OnDeliveryTimeEndChanged(newValue))">
                                                    </HassyaAllrightCloud.Pages.Components.InputTime>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group d-flex flex-nowrap mr-5">
                                            <label class="col-form-label-sm mr-3-sm mr-3">@Lang["return_time"]</label>
                                            <div class="d-flex">
                                                <DxDateEdit Date="@returnDateStart" DateChanged="@((newValue) => OnReturnDateStartChanged(newValue))" DateExpression="() => Param.ReturnDateTimeStart" Format="yyyy/MM/dd" CssClass="width--120"></DxDateEdit>
                                                <HassyaAllrightCloud.Pages.Components.InputTime CssClass="width--65 ml-2"
                                                                                                ValueExpressions="@(() => Param.ReturnTimeStart)"
                                                                                                MyTimeAsString="@returnTimeStart.ToString(@"hh\:mm")"
                                                                                                TimeChanged="@((newValue) => OnReturnTimeStartChanged(newValue))">
                                                </HassyaAllrightCloud.Pages.Components.InputTime>
                                                <span class="mx-3">～</span>
                                                <div class="has-tooltip-error">
                                                    <Tooltip ValueExpressions="@(() =>Param.ReturnDateTimeEnd)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                                    <DxDateEdit Date="@returnDateEnd" DateChanged="@((newValue) => OnReturnDateEndChanged(newValue))" DateExpression="() => Param.ReturnDateTimeEnd" Format="yyyy/MM/dd" CssClass="width--120"></DxDateEdit>
                                                </div>
                                                <div class="@("has-tooltip-error "+(Param?.ReturnDateTimeEnd !=null?formContextItemStaffChart.GetValidationMessages(() => Param.ReturnDateTimeEnd).FirstOrDefault() != null ? " custom-invalid":"":""))">
                                                    <Tooltip ValueExpressions="@(() =>Param.ReturnDateTimeEnd)" Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                                    <HassyaAllrightCloud.Pages.Components.InputTime CssClass="width--65 ml-2"
                                                                                                    ValueExpressions="@(() => Param.ReturnTimeEnd)"
                                                                                                    MyTimeAsString="@returnTimeEnd.ToString(@"hh\:mm")"
                                                                                                    TimeChanged="@((newValue) => OnReturnTimeEndChanged(newValue))">
                                                    </HassyaAllrightCloud.Pages.Components.InputTime>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                        break;
                }
            </div>
        </div>
    </div>

    <div class="d-flex align-items-center justify-content-between mb-2">
        <div class="date-section d-flex align-items-center mb-2 mb-lg-0">
            <a class="nav-link py-0 px-0" href="javascript:void(0)" @onclick="@((e) => onPrevious(e))">
                <i class="fa fa-caret-left" aria-hidden="true"></i> @Lang["previous_date"]
            </a>
            <DxDateEdit Date="@Date" DateChanged="@((newValue) => OnDateChanged(newValue))" Format="yyyy/MM/dd" CssClass="width--120 mx-2"></DxDateEdit>
            <a class="nav-link py-0 px-0" href="javascript:void(0)" @onclick="@((e) => onNext(e))">
                @Lang["next_date"] <i class="fa fa-caret-right" aria-hidden="true"></i>
            </a>
        </div>
        <div class="list-button">
            @*<a href="javascript:void(0)" class="btn btn-sm btn-secondary @disableClass @(Param.Mode == (int)BusLineMode.Edit ? "d-none" : null)" @onclick="@((e) => OnEdit(e))">
                <i class="fa fa-pencil" aria-hidden="true"></i>@Lang["btn_edit"]
            </a>
            <a href="javascript:void(0)" class="btn btn-sm btn-danger @(Param.Mode != (int)BusLineMode.Edit ? "d-none" : null)" @onclick="@((e) => OnView(e))">
                <i class="fa fa-pencil" aria-hidden="true"></i> @Lang["btn_edit_back"]
            </a>*@

            <a href="javascript:void(0)" class="btn btn-sm btn-secondary @disableClass @(Param.Mode == (int)BusLineMode.Cut ? "d-none" : null)" @onclick="@((e) => OnSplit(e))">
                <i class="fa fa-scissors" aria-hidden="true"></i> @Lang["btn_split"]
            </a>
            <a href="javascript:void(0)" class="btn btn-sm btn-danger @(Param.Mode != (int)BusLineMode.Cut ? "d-none" : null)" @onclick="@((e) => OnView(e))">
                <i class="fa fa-scissors" aria-hidden="true"></i> @Lang["btn_split_back"]
            </a>

            <a href="javascript:void(0)" class="btn btn-sm btn-secondary @disableClass @(Param.Mode == (int)BusLineMode.Repair ? "d-none" : null)" @onclick="@((e) => OnRepair(e))">
                <i class="fa fa-wrench" aria-hidden="true"></i> @Lang["btn_work_holiday"]
            </a>
            <a href="javascript:void(0)" class="btn btn-sm btn-danger @(Param.Mode != (int)BusLineMode.Repair ? "d-none" : null)" @onclick="@((e) => OnReset(e))">
                <i class="fa fa-times" aria-hidden="true"></i>
            </a>

            @*<a href="javascript:void(0)" class="btn btn-sm btn-secondary @disableClass @(Param.Mode == (int)BusLineMode.Zoom ? "d-none" : null)" @onclick="@((e) => OnZoom(e))">
                <i class="fa fa-search-plus" aria-hidden="true"></i> @Lang["btn_zoom"]
            </a>
            <a href="javascript:void(0)" class="btn btn-sm btn-danger @(Param.Mode != (int)BusLineMode.Zoom ? "d-none" : null)" @onclick="@((e) => OnView(e))">
                <i class="fa fa-search-plus" aria-hidden="true"></i> @Lang["btn_zoom_back"]
            </a>*@

            @*<a href="javascript:void(0)" class="btn btn-sm btn-secondary disabled">
                <i class="fa fa-exclamation" aria-hidden="true"></i> @Lang["btn_check_error"]
            </a>*@

            <a href="busschedule/?date=@Date.ToString("yyyyMMdd")" class="btn btn-sm btn-secondary @disableClass">
                <i class="fa fa-bus" aria-hidden="true"></i> @Lang["btn_separate"]
            </a>

            @*<a href="javascript:void(0)" class="btn btn-sm btn-secondary disabled">
                <i class="fa fa-file-excel-o" aria-hidden="true"></i> @Lang["btn_excel"]
            </a>*@
        </div>
    </div>
</div>

@if (Param.Mode == (int)BusLineMode.Zoom)
{
    <S_Zoom Param="@Param" OnCallBackZoom="OnCallBackZoom"></S_Zoom>
}

@if (Param.Mode == (int)BusLineMode.Repair)
{
    <S_Repair OnCallBackRepair="OnCallBackRepair"></S_Repair>
}


@if (Param.Grouping == (int)GroupMode.All)
{
    <S_Content Param="@Param"
               Date="@Date"
               Width="@Width"
               StaffsName="@lstStaffsNames"
               StaffsNameUnassigned="@lstStaffsNamesUnassigned"
               StaffsLines="@lstStaffsLines"
               Calendlst="@listdatecomment"
               OnShowContextMenuUpdated="HandleShowContextMenu"
               OnRowUpdated="reload"
               CodeKbnItem="@CodeKbnItem"
               OnClickDateComment="ClickHandler"
               listKyoSHebyDate="@KyoSHeDatabyDatelst"
               GroupID="0"
               SelectedBranchItems="@SelectedBranchItems"
               BusLines="@Buslines"
               Busnames="@Busnames"></S_Content>
}

@if (Param.Grouping == (int)GroupMode.Branch)
{
    foreach (var branch in lstStaffsBranch)
    {
        List<StaffData> tmp = new List<StaffData>();
        tmp = lstStaffsNames.Where(t => t.EigyoCdSeq == branch.EigyoCdSeq).ToList();
        List<BusDataType> tmpbranch = new List<BusDataType>();
        tmpbranch = Busnames.Where(t => t.BusBranchID == branch.EigyoCdSeq).OrderBy(t => t.BusVehicle).ToList();
        if (tmp != null)
        {
            <div class="title-section mb-2">
                <i class="fa fa-angle-up" aria-hidden="true"></i> @branch.RyakuNm
            </div>
            <S_Content Param="@Param"
                       Date="@Date"
                       Width="@Width"
                       StaffsName="@tmp"
                       StaffsNameUnassigned="@lstStaffsNamesUnassigned"
                       StaffsLines="@lstStaffsLines"
                       Calendlst="@listdatecomment"
                       OnShowContextMenuUpdated="HandleShowContextMenu"
                       OnRowUpdated="reload"
                       OnClickDateComment="ClickHandler"
                       listKyoSHebyDate="@KyoSHeDatabyDatelst"
                       GroupID="@branch.EigyoCdSeq"
                       SelectedBranchItems="@SelectedBranchItems"
                       BusLines="@Buslines"
                       Busnames="@tmpbranch"></S_Content>
        }
    }
}

@if (Param.Grouping == (int)GroupMode.Company)
{
    foreach (var company in lstStaffCompany)
    {
        List<StaffData> tmp = new List<StaffData>();
        tmp = lstStaffsNames.Where(t => t.CompanyCdSeq == company.CompanyCdSeq).ToList();
        List<BusDataType> tmpcompany = new List<BusDataType>();
        tmpcompany = Busnames.Where(t => t.BusCompanyID == company.CompanyCdSeq).OrderBy(t => t.BusVehicle).ToList();
        if (tmp != null)
        {
            <div class="title-section mb-2">
                <i class="fa fa-angle-up" aria-hidden="true"></i> @company.CompanyNm
            </div>
            <S_Content Param="@Param"
                       Date="@Date"
                       Width="@Width"
                       StaffsName="@tmp"
                       StaffsNameUnassigned="@lstStaffsNamesUnassigned"
                       StaffsLines="@lstStaffsLines"
                       Calendlst="@listdatecomment"
                       OnShowContextMenuUpdated="HandleShowContextMenu"
                       OnRowUpdated="reload"
                       OnClickDateComment="ClickHandler"
                       listKyoSHebyDate="@KyoSHeDatabyDatelst"
                       GroupID="@company.CompanyCdSeq"
                       SelectedBranchItems="@SelectedBranchItems"
                       BusLines="@Buslines"
                       Busnames="@tmpcompany"></S_Content>
        }
    }
}


@code {
    [Parameter] public string date { get; set; }
    DateTime? DateTimeValue { get; set; } = null;
    public ConfigStaffsChart Param { get; set; } = new ConfigStaffsChart();
    EditContext formContextItemStaffChart;
    DateTime Date { get; set; } = DateTime.Today;
    bool IsOpenCancelTab { get; set; } = false;
    bool IsOpenConfirmTab { get; set; } = false;
    bool isLoading { get; set; } = true;
    bool checkCompanyAll { get; set; } = true;
    bool checkBranchAll { get; set; } = true;
    bool DriverChecked { get; set; } = true;
    bool GuideChecked { get; set; } = true;
    bool flagShowClass = false;
    bool PopupCommentDate { get; set; } = false;
    bool Ischecktext { get; set; } = false;
    public double w { get; set; }
    public double Width { get; set; }
    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    string showSelectedCompanies { get; set; }
    string showSelectedBranches { get; set; }
    string commentdate { get; set; }
    string datecommentpopup { get; set; }
    string showClass => flagShowClass ? null : "d-none";
    string disableClass => flagShowClass ? "disabled" : null;
    protected bool PopupDeleteBusrepair { get; set; } = false;
    protected bool PopupUpdateStaffDayoff { get; set; } = false;
    protected bool isErrorUpdateStaffDayoff { get; set; } = false;
    protected bool PopupwndriVisible { get; set; } = false;
    Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
    int vehicle = 0;
    bool isFilterApply;
    private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
    private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
    private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
    private ITPM_CalendDataListService TPM_CalendDataService { get; set; }
    private ITKD_KikyujDataListService TKD_KikyujDataService { get; set; }
    private ITKD_HaishaDataListService TKD_HaishaDataService { get; set; }
    private ITPM_KyoSHeDataListService TPM_KyoSHeDataService { get; set; }
    private ITPM_TokiskDataListService TPM_TokiskDataService { get; set; }
    private ITKD_ShuriDataListService TKD_ShuriDataService { get; set; }
    private IBusDataListService BusDataService { get; set; }
    public ItemStaff itemstaffchoosemenu { get; set; }
    bool EmptyCompany { get; set; } = false;
    bool EmptyBranch { get; set; } = false;
    TimeSpan departureTimeStart;
    TimeSpan departureTimeEnd;
    TimeSpan arrivalTimeStart;
    TimeSpan arrivalTimeEnd;
    TimeSpan deliveryTimeStart;
    TimeSpan deliveryTimeEnd;
    TimeSpan returnTimeStart;
    TimeSpan returnTimeEnd;
    public TimeSpan startTime;
    public TimeSpan endTime;
    public DateTime? FuriYmd;
    public DateTime departureDateStart;
    public DateTime departureDateEnd;
    public DateTime arrivalDateStart;
    public DateTime arrivalDateEnd;
    public DateTime deliveryDateStart;
    public DateTime deliveryDateEnd;
    public DateTime returnDateStart;
    public DateTime returnDateEnd;
    bool checkHasParam = false;
    bool PopupJourney { get; set; } = false;
    bool PopupTehai { get; set; } = false;
    bool PopupFutai { get; set; }
    bool PopupCancel { get; set; }
    bool PopupTsumi { get; set; }
    bool IsOpenEditYykshoBikoNm { get; set; } = false;
    bool IsOpenEditUnkobiBikoNm { get; set; } = false;
    List<StaffData> lstStaffsNames = new List<StaffData>();
    List<StaffData> lstStaffsNamesUnassigned = new List<StaffData>();
    List<ItemStaff> lstStaffsLines = new List<ItemStaff>();
    List<StaffsLines> getdatacheckgrayline = new List<StaffsLines>();
    public StaffData StaffNameItem { get; set; } = new StaffData();
    List<int> lstStaffid = new List<int>();
    List<BranchChartData> tmpbranchchart = new List<BranchChartData>();
    List<CompanyChartData> tmpcompanychart = new List<CompanyChartData>();
    List<StaffDayOff> staffDayOff = new List<StaffDayOff>();
    List<BranchChartData> branchchart;
    List<CompanyChartData> companychart;
    List<ReservationData> reservation;
    IEnumerable<VpmKinKyuData> KinKyulst { get; set; } = new List<VpmKinKyuData>();
    List<int> comlst = new List<int>();
    List<int> branchlst = new List<int>();
    List<TkdCalend> listdatecomment = new List<TkdCalend>();
    List<CheckHaiinData> haiinDatachecklit = new List<CheckHaiinData>();
    IEnumerable<CompanyChartData> lstStaffCompany = new List<CompanyChartData>();
    IEnumerable<BranchChartData> lstStaffsBranch = new List<BranchChartData>();
    IEnumerable<CompanyChartData> SelectedCompanyItems { get; set; }
    IEnumerable<BranchChartData> SelectedBranchItems { get; set; }
    BranchChartData allbranch = new BranchChartData();
    BranchChartData currentbranchto = new BranchChartData();
    BranchChartData currentbranchfrom = new BranchChartData();
    CompanyChartData allcompany = new CompanyChartData();
    ReservationData currentReservation = new ReservationData();
    List<BusDataType> Busnames = new List<BusDataType>();
    List<ItemBus> Buslines = new List<ItemBus>();
    private ILoadBusTooltipListService BusTooltipService { get; set; }
    private IBusBookingDataListService BusBookingDataService { get; set; }
    public VpmKinKyuData CodeKbnItem { get; set; } = new VpmKinKyuData();
    string cssclassdate { get; set; } = "width--130";
    string cssclasstime { get; set; } = "width--75 ml-2 date-sm customTime";
    public string dateformat = "yyyyMMdd";
    public string timeformat = "hhmmss";
    public string CompanyEmptyMessage = "";
    public string BranchEmptyMessage = "";
    List<StaffsLines> lstStafflines = new List<StaffsLines>();
    List<StaffsLines> lstStaffnonassignlines = new List<StaffsLines>();
    List<KyoSHeDatabyDate> KyoSHeDatabyDatelst = new List<KyoSHeDatabyDate>();
    HashSet<int> listexHaiInRen = new HashSet<int>();
    IEnumerable<BusInfoData> busname = new List<BusInfoData>();
    List<TKD_ShuriData> Busrepair = new List<TKD_ShuriData>();
    List<TokiskChartData> Tokisk = new List<TokiskChartData>();
    List<BusBookingData> buslines = new List<BusBookingData>();
    List<TKD_ShuriData> busrepair = new List<TKD_ShuriData>();
    List<BusInfoData> bus = new List<BusInfoData>();
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    private List<CustomFilerModel> ItemList { get; set; }
    private ItemStaff update { get; set; }
    List<TkdInpCon> tkdInpConList;
    private string formName = "KU1300";
    private string formNamedf = "KU1300" + " default";
    #region Component Lifecycle
    private void LocalizationInit()
    {
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
        // CompanyEmptyMessage = @Lang["message_select_company"];
    }
    /// <summary>
    /// Invoked once, after OnInit is finished.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        formContextItemStaffChart = new EditContext(Param);
        TPM_YoyKbnDataService = ScopedServices.GetRequiredService<ITPM_YoyKbnDataListService>();
        TPM_CompnyDataService = ScopedServices.GetRequiredService<ITPM_CompnyDataListService>();
        TPM_EigyosDataService = ScopedServices.GetRequiredService<ITPM_EigyosDataListService>();
        BusTooltipService = ScopedServices.GetRequiredService<ILoadBusTooltipListService>();
        BusBookingDataService = ScopedServices.GetRequiredService<IBusBookingDataListService>();
        TKD_KikyujDataService = ScopedServices.GetRequiredService<ITKD_KikyujDataListService>();
        TKD_HaishaDataService = ScopedServices.GetRequiredService<ITKD_HaishaDataListService>();
        TPM_CalendDataService = ScopedServices.GetRequiredService<ITPM_CalendDataListService>();
        TPM_KyoSHeDataService = ScopedServices.GetRequiredService<ITPM_KyoSHeDataListService>();
        TPM_TokiskDataService = ScopedServices.GetRequiredService<ITPM_TokiskDataListService>();
        TKD_ShuriDataService = ScopedServices.GetRequiredService<ITKD_ShuriDataListService>();
        BusDataService = ScopedServices.GetRequiredService<IBusDataListService>();
        isLoading = true;
        Param = new ConfigStaffsChart();
        Param.Mode = (int)BusLineMode.View;
        Param.Type = (int)Staffs_Type.Normal;
        Param.Grouping = (int)GroupMode.All;
        Param.DisplayRange = (int)DayMode.ThreeDays;
        Param.TimeRange = (int)TimeMode.ThreeHours;
        Param.OrderbyList = (int)Staffs_OrderbyList.DutyEmployee;
        Param.OrderbyName = (int)Staffs_OrderbyName.DutyEmployee;
        Param.DisplayedCharacters = (int)DisplayLineMode.Custom;
        Param.DisplayedLineHeight = (int)ViewMode.Large;
        Param.BookingCategory = 0;
        Param.Duties = (int)Staffs_Duties.All;
        Param.Number_of_days = 3;
        CompanyEmptyMessage = Lang["message_select_company"];
        BranchEmptyMessage = Lang["message_select_branch"];
        branchchart = new List<BranchChartData>();
        reservation = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
        reservation.Insert(0, new ReservationData() { YoyaKbnNm = "すべて" });
        companychart = await TPM_CompnyDataService.GetCompany(new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
        foreach (var i in companychart)
        {
            comlst.Add(i.CompanyCdSeq);
            List<BranchChartData> branchchartlst = new List<BranchChartData>();
            branchchartlst = await TPM_EigyosDataService.GetBranchbyCompany(i.CompanyCdSeq, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            branchchart.AddRange(branchchartlst);
        }
        foreach (var i in branchchart)
        {
            tmpbranchchart.Add(i);
            if (!branchlst.Contains(i.EigyoCdSeq))
            {
                branchlst.Add(i.EigyoCdSeq);
            }
        }

        if (companychart != null)
        {
            tmpcompanychart = companychart;
            tmpcompanychart.Insert(0, allcompany);
        }

        //if (tmpbranchchart != null)
        //{
        //    tmpbranchchart.Insert(0, allbranch);
        //}

        SelectedCompanyItems = tmpcompanychart;
        tmpbranchchart = (await GetBranchListAsync()).ToList();
        SelectedBranchItems = tmpbranchchart;
        Param.DepartureDateStart = Date.ToString("yyyyMMdd");
        Param.ArrivalDateStart = Date.ToString("yyyyMMdd");
        Param.DeliveryDateStart = Date.ToString("yyyyMMdd");
        Param.ReturnDateStart = Date.ToString("yyyyMMdd");
        Param.DepartureDateEnd = Date.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
        Param.ArrivalDateEnd = Date.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
        Param.DeliveryDateEnd = Date.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
        Param.ReturnDateEnd = Date.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
        ItemList = await FilterConditionService.GetCustomFilters(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, formName);
        isFilterApply=true;
        if (ItemList.Count > 0)
        {
            await LoadCustomFilter();
            isFilterApply = false;
        }

        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        _action = PressEsc;
        formContextItemStaffChart = new EditContext(Param);
    }
    protected async Task<IEnumerable<BranchChartData>> GetBranchListAsync(CancellationToken ct = default)
    {
        tmpbranchchart.Clear();
        foreach (var i in SelectedCompanyItems)
        {
            tmpbranchchart.AddRange(await TPM_EigyosDataService.GetBranchbyCompany(i.CompanyCdSeq, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID));
        }
        if (tmpbranchchart.Count() > 0)
        {
            tmpbranchchart.Insert(0, allbranch);
        }
        else
        {
            SelectedBranchItems = SelectedBranchItems.Take(0);
        }
        return tmpbranchchart;
    }
    private async Task LoadCustomFilter()
    {
        if (ItemList.Count > 0)
        {
            tkdInpConList = await FilterConditionService.GetFilterCondition(formName, ItemList.First().FilterId, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
            foreach (var item in tkdInpConList)
            {
                switch (item.ItemNm)
                {
                    case nameof(Param.DepartureDateStart):
                        Param.DepartureDateStart = item.JoInput;
                        break;
                    case nameof(Param.DepartureDateEnd):
                        Param.DepartureDateEnd = item.JoInput;
                        break;
                    case nameof(Param.ArrivalDateStart):
                        Param.ArrivalDateStart = item.JoInput;
                        break;
                    case nameof(Param.ArrivalDateEnd):
                        Param.ArrivalDateEnd = item.JoInput;
                        break;
                    case nameof(Param.DeliveryDateStart):
                        Param.DeliveryDateStart = item.JoInput;
                        break;
                    case nameof(Param.DeliveryDateEnd):
                        Param.DeliveryDateEnd = item.JoInput;
                        break;
                    case nameof(Param.ReturnDateStart):
                        Param.ReturnDateStart = item.JoInput;
                        break;
                    case nameof(Param.ReturnDateEnd):
                        Param.ReturnDateEnd = item.JoInput;
                        break;
                    case nameof(Param.DepartureTimeStart):
                        Param.DepartureTimeStart = item.JoInput;
                        break;
                    case nameof(Param.DepartureTimeEnd):
                        Param.DepartureTimeEnd = item.JoInput;
                        break;
                    case nameof(Param.ArrivalTimeStart):
                        Param.ArrivalTimeStart = item.JoInput;
                        break;
                    case nameof(Param.ArrivalTimeEnd):
                        Param.ArrivalTimeEnd = item.JoInput;
                        break;
                    case nameof(Param.DeliveryTimeStart):
                        Param.DeliveryTimeStart = item.JoInput;
                        break;
                    case nameof(Param.DeliveryTimeEnd):
                        Param.DeliveryTimeEnd = item.JoInput;
                        break;
                    case nameof(Param.ReturnTimeStart):
                        Param.ReturnTimeStart = item.JoInput;
                        break;
                    case nameof(Param.ReturnTimeEnd):
                        Param.ReturnTimeEnd = item.JoInput;
                        break;
                    case nameof(Param.DisplayRange):
                        Param.DisplayRange = int.Parse(item.JoInput);
                        break;

                    case nameof(Param.ReservationClassification):
                        try
                        {
                            currentReservation = reservation.Where(t => t.YoyaKbnSeq == int.Parse(item.JoInput)).First();
                        }
                        catch
                        {
                            currentReservation = reservation.Where(t => t.YoyaKbnSeq == 0).First();
                        }

                        break;
                    case nameof(Param.AffiliationOfficeFrom):
                        try
                        {
                            currentbranchfrom = tmpbranchchart.Where(t => t.EigyoCdSeq == int.Parse(item.JoInput)).First();
                        }
                        catch
                        {
                            currentbranchfrom = tmpbranchchart.Where(t => t.EigyoCdSeq == 0).First();
                        }
                        break;
                    case nameof(Param.AffiliationOfficeTo):
                        try
                        {
                            currentbranchto = tmpbranchchart.Where(t => t.EigyoCdSeq == int.Parse(item.JoInput)).First();
                        }
                        catch
                        {
                            currentbranchto = tmpbranchchart.Where(t => t.EigyoCdSeq == 0).First();
                        }
                        break;
                    case nameof(Param.Driver):
                        DriverChecked = int.Parse(item.JoInput) == 1 ? true : false;
                        break;
                    case nameof(Param.Guide):
                        GuideChecked = int.Parse(item.JoInput) == 1 ? true : false;
                        break;
                    case nameof(Param.Date):
                        Param.Date = item.JoInput;
                        break;
                    case nameof(Param.Type):
                        Param.Type = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.Grouping):
                        Param.Grouping = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.TimeRange):
                        Param.TimeRange = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.Number_of_days):
                        Param.Number_of_days = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.OrderbyList):
                        Param.OrderbyList = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.OrderbyName):
                        Param.OrderbyName = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.DisplayedCharacters):
                        Param.DisplayedCharacters = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.Duties):
                        Param.Duties = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.DisplayedLineHeight):
                        Param.DisplayedLineHeight = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.BookingCategory):
                        Param.BookingCategory = int.Parse(item.JoInput);
                        break;
                    case nameof(Param.ListCom):
                        Param.ListCom = item.JoInput.Remove(item.JoInput.Length - 1, 1);
                        var lstcom = Array.ConvertAll(Param.ListCom.Split(';'), int.Parse).ToList();
                        SelectedCompanyItems = tmpcompanychart.Take(0);
                        SelectedCompanyItems = tmpcompanychart.Where(t => lstcom.Contains(t.CompanyCdSeq)).ToList();
                        OnSelectedCompanyItemsChanged(tmpcompanychart.Where(t => lstcom.Contains(t.CompanyCdSeq)));
                        checkCompanyAll = tmpcompanychart.Count == SelectedCompanyItems.Count();
                        break;
                    case nameof(Param.ListBrch):
                        SelectedBranchItems = tmpbranchchart.Take(0);
                        if (item.JoInput != "")
                        {
                            Param.ListBrch = item.JoInput.Remove(item.JoInput.Length - 1, 1);
                            var lstbrch = Array.ConvertAll(Param.ListBrch.Split(';'), int.Parse).ToList();
                            SelectedBranchItems = tmpbranchchart.Where(t => lstbrch.Contains(t.EigyoCdSeq));
                            OnSelectedBranchItemsChanged(tmpbranchchart.Where(t => lstbrch.Contains(t.EigyoCdSeq)));
                            checkBranchAll = tmpbranchchart.Count == SelectedBranchItems.Count();
                        }
                        break;
                }
            }
        }
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <param name="propName"></param>
    /// <returns></returns>
    protected async Task OnHandleChanged(dynamic value, string propName)
    {
        var classType = Param.GetType();
        var prop = classType.GetProperty(propName);
        keyValueFilterPairs.Clear();
        prop.SetValue(Param, (value as string), null);
        int maxFilterId = FilterConditionService.GetMaxCustomFilerId(formName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
        keyValueFilterPairs.Add(propName, Convert.ToString(value));
        FilterConditionService.SaveCustomFiler(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 0, formName, formNamedf).Wait();
        FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, formName, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="Busline"></param>
    private void SelectBuslineChange(StaffData Staffline)
    {
        itemstaffchoosemenu.BusLine = Staffline.SyainCdSeq.ToString();
        StaffNameItem = lstStaffsNames.Where(t => t.SyainCdSeq.ToString() == itemstaffchoosemenu.BusLine).First();
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task CancelUpdateStaffdayoff(MouseEventArgs e)
    {
        PopupUpdateStaffDayoff = false;
        isErrorUpdateStaffDayoff = false;
        isLoading = true;
        cssclassdate = cssclassdate.Replace("error", "");
        cssclasstime = cssclasstime.Replace("error", "");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="code"></param>
    private void SelectTypeChange(VpmKinKyuData code)
    {
        if (code != null)
        {
            itemstaffchoosemenu.KinKyuCdSeq = code.KinKyuCdSeq;
            itemstaffchoosemenu.KinKyuKbn = code.KinKyuKbn;
            CodeKbnItem = KinKyulst.Where(t => t.KinKyuCdSeq == itemstaffchoosemenu.KinKyuCdSeq).First();
            InvokeAsync(StateHasChanged);
        }

    }
    /// <summary>
    /// /
    /// </summary>
    /// <param name="date"></param>
    private void OnTransferDateChange(DateTime? date)
    {
        if (date != null)
        {
            itemstaffchoosemenu.TransferDate = ((DateTime)date).ToString("yyyyMMdd");
            FuriYmd = (DateTime)date;
        }
        else
        {
            itemstaffchoosemenu.TransferDate = "";
            FuriYmd = null;
        }
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    /// /
    /// </summary>
    /// <param name="date"></param>
    private void OnDateStartChange(DateTime date)
    {
        itemstaffchoosemenu.StartDate = date.ToString("yyyyMMdd");
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    /// /
    /// </summary>
    /// <param name="date"></param>
    private void OnDateEndChange(DateTime date)
    {
        itemstaffchoosemenu.EndDate = date.ToString("yyyyMMdd");
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="starttime"></param>
    private void onStartimechage(string starttime)
    {
        string date = int.Parse(starttime).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            itemstaffchoosemenu.TimeStart = int.Parse(starttime.ToString());
        }
        TimeSpan.TryParseExact(itemstaffchoosemenu.TimeStart.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out startTime);
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="endtime"></param>
    private void onEndtimechage(string endtime)
    {
        string date = int.Parse(endtime).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            itemstaffchoosemenu.TimeEnd = int.Parse(endtime);
        }
        TimeSpan.TryParseExact(itemstaffchoosemenu.TimeEnd.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out endTime);
        InvokeAsync(StateHasChanged);
    }
    private async Task UpdateDayoff(MouseEventArgs e)
    {
        DateTime startdatene;
        DateTime.TryParseExact(itemstaffchoosemenu.StartDate + itemstaffchoosemenu.TimeStart.ToString("D4"),
                       "yyyyMMddHHmm",
                       CultureInfo.CurrentCulture,
                       DateTimeStyles.None,
                       out startdatene);

        DateTime enddatene;
        DateTime.TryParseExact(itemstaffchoosemenu.EndDate + itemstaffchoosemenu.TimeEnd.ToString("D4"),
                       "yyyyMMddHHmm",
                       CultureInfo.CurrentCulture,
                       DateTimeStyles.None,
                       out enddatene);
        if (startdatene > enddatene)
        {
            isErrorUpdateStaffDayoff = true;
            cssclassdate += " error";
            cssclasstime += " error";
        }
        else
        {
            isErrorUpdateStaffDayoff = false;
            PopupUpdateStaffDayoff = false;
            cssclassdate = cssclassdate.Replace("error", "");
            cssclasstime = cssclasstime.Replace("error", "");
            TKD_KikyujDataService.UpdateDayoffData(itemstaffchoosemenu, 1);
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }
    }
    /// <summary>
    /// /
    /// </summary>
    /// <param name="s"></param>
    private void TextStaffDayoffChange(string s)
    {
        itemstaffchoosemenu.BikoNm = s;
        InvokeAsync(StateHasChanged);
    }
    /// <summary>
    /// Invoked after each render of the component.
    /// Called for the first time when the component is initialized - firstRender = true
    /// and then after every re-render - firstRender = false.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "setHeightTopbar");
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 4);
        await JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 5);
        await JSRuntime.InvokeVoidAsync("setEventforTimeInput");
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "unloadScrollBars");
        await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "Roll", 1);
        if (firstRender)
        {
            w = (double)await BrowserResizeService.GetInnerWidth();
            setWidth();
            BrowserResizeService.OnResize += BrowserHasResized;
            await JSRuntime.InvokeAsync<object>("browserResize.registerResizeCallback");
            BrowserResizeService.OnCallbackWidth += BrowserHasCallbackWidth;
            await JSRuntime.InvokeAsync<object>("browserResize.registerWidthCallback");
            StateHasChanged();
        }
    }

    /// <summary>
    /// Load javascript of page
    /// </summary>
    /// <returns></returns>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage");
        JSRuntime.InvokeVoidAsync("setColorFromDb", BusLineCssColorService.GetAllCssColor());
        base.OnParametersSet();
    }
    #endregion
    private async Task updatedate(DateTime newValue)
    {
        departureDateStart = newValue;
        arrivalDateStart = newValue;
        deliveryDateStart = newValue;
        returnDateStart = newValue;
        departureDateEnd = newValue.AddDays(Param.Number_of_days - 1);
        arrivalDateEnd = newValue.AddDays(Param.Number_of_days - 1);
        deliveryDateEnd = newValue.AddDays(Param.Number_of_days - 1);
        returnDateEnd = newValue.AddDays(Param.Number_of_days - 1);
        Param.DepartureDateStart = newValue.ToString("yyyyMMdd");
        Param.ArrivalDateStart = newValue.ToString("yyyyMMdd");
        Param.DeliveryDateStart = newValue.ToString("yyyyMMdd");
        Param.ReturnDateStart = newValue.ToString("yyyyMMdd");
        Param.DepartureDateEnd = newValue.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
        Param.ArrivalDateEnd = newValue.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
        Param.DeliveryDateEnd = newValue.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
        Param.ReturnDateEnd = newValue.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
        await OnHandleChanged(newValue.ToString("yyyyMMdd"), nameof(Param.Date));
        await OnHandleChanged(newValue.ToString("yyyyMMdd"), nameof(Param.DepartureDateStart));
        await OnHandleChanged(newValue.ToString("yyyyMMdd"), nameof(Param.ArrivalDateStart));
        await OnHandleChanged(newValue.ToString("yyyyMMdd"), nameof(Param.DeliveryDateStart));
        await OnHandleChanged(newValue.ToString("yyyyMMdd"), nameof(Param.ReturnDateStart));
        await OnHandleChanged(newValue.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd"), nameof(Param.DepartureDateEnd));
        await OnHandleChanged(newValue.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd"), nameof(Param.ArrivalDateEnd));
        await OnHandleChanged(newValue.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd"), nameof(Param.DeliveryDateEnd));
        await OnHandleChanged(newValue.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd"), nameof(Param.ReturnDateEnd));
    }
    #region Date value changed methods
    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnDateChanged(DateTime newValue)
    {
        checkHasParam = true;
        Date = newValue;
        Param.Date = newValue.ToString("yyyyMMdd");
        isLoading = true;
        await updatedate(newValue);
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }



    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnDepartureDateStartChanged(DateTime newValue)
    {
        if (newValue <= Date.AddDays(-7))
        {
            Param.DepartureDateStart = Date.AddDays(-7).ToString("yyyyMMdd");
            departureDateStart = Date.AddDays(-7);
        }
        else
        {
            departureDateStart = newValue;
            Param.DepartureDateStart = newValue.ToString("yyyyMMdd");
        }
        await OnHandleChanged(departureDateStart.ToString("yyyyMMdd"), nameof(Param.DepartureDateStart));
        formContextItemStaffChart.Validate();
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnDepartureDateEndChanged(DateTime newValue)
    {

        if (newValue >= Date.AddDays(Param.Number_of_days - 1))
        {
            Param.DepartureDateEnd = Date.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
            departureDateEnd = Date.AddDays(Param.Number_of_days - 1);
        }
        else
        {
            departureDateEnd = newValue;
            Param.DepartureDateEnd = newValue.ToString("yyyyMMdd");
        }
        await OnHandleChanged(departureDateEnd.ToString("yyyyMMdd"), nameof(Param.DepartureDateEnd));
        formContextItemStaffChart.Validate();
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnArrivalDateStartChanged(DateTime newValue)
    {
        if (newValue >= Date.AddDays(Param.Number_of_days + 6))
        {
            Param.ArrivalDateStart = Date.AddDays(Param.Number_of_days + 6).ToString("yyyyMMdd");
            arrivalDateStart = Date.AddDays(Param.Number_of_days + 6);
        }
        else
        {
            Param.ArrivalDateStart = newValue.ToString("yyyyMMdd");
            arrivalDateStart = newValue;
        }
        await OnHandleChanged(arrivalDateStart.ToString("yyyyMMdd"), nameof(Param.ArrivalDateStart));
        formContextItemStaffChart.Validate();
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnArrivalDateEndChanged(DateTime newValue)
    {

        if (newValue >= Date.AddDays(Param.Number_of_days + 6))
        {
            Param.ArrivalDateEnd = Date.AddDays(Param.Number_of_days + 6).ToString("yyyyMMdd");
            arrivalDateEnd = Date.AddDays(Param.Number_of_days + 6);
        }
        else
        {
            Param.ArrivalDateEnd = newValue.ToString("yyyyMMdd");
            arrivalDateEnd = newValue;
        }
        await OnHandleChanged(arrivalDateEnd.ToString("yyyyMMdd"), nameof(Param.ArrivalDateEnd));
        formContextItemStaffChart.Validate();
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnDeliveryDateStartChanged(DateTime newValue)
    {
        if (newValue <= Date.AddDays(-7))
        {
            Param.DeliveryDateStart = Date.AddDays(-7).ToString("yyyyMMdd");
            deliveryDateStart = Date.AddDays(-7);
        }
        else
        {
            deliveryDateStart = newValue;
            Param.DeliveryDateStart = newValue.ToString("yyyyMMdd");
        }

        await OnHandleChanged(deliveryDateStart.ToString("yyyyMMdd"), nameof(Param.DeliveryDateStart));
        formContextItemStaffChart.Validate();
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnDeliveryDateEndChanged(DateTime newValue)
    {
        if (newValue >= Date.AddDays(Param.Number_of_days - 1))
        {
            Param.DeliveryDateEnd = Date.AddDays(Param.Number_of_days - 1).ToString("yyyyMMdd");
            deliveryDateEnd = Date.AddDays(Param.Number_of_days - 1);
        }
        else
        {
            deliveryDateEnd = newValue;
            Param.DeliveryDateEnd = newValue.ToString("yyyyMMdd");
        }
        await OnHandleChanged(deliveryDateEnd.ToString("yyyyMMdd"), nameof(Param.DeliveryDateEnd));
        formContextItemStaffChart.Validate();
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnReturnDateStartChanged(DateTime newValue)
    {

        if (newValue >= Date.AddDays(Param.Number_of_days + 6))
        {
            Param.ReturnDateStart = Date.AddDays(Param.Number_of_days + 6).ToString("yyyyMMdd");
            returnDateStart = Date.AddDays(Param.Number_of_days + 6);
        }
        else
        {
            Param.ReturnDateStart = newValue.ToString("yyyyMMdd");
            returnDateStart = newValue;
        }

        await OnHandleChanged(returnDateStart.ToString("yyyyMMdd"), nameof(Param.ReturnDateStart));
        formContextItemStaffChart.Validate();
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Date
    /// </summary>
    /// <param name="newValue"></param>
    private async void OnReturnDateEndChanged(DateTime newValue)
    {
        if (newValue >= Date.AddDays(Param.Number_of_days + 6))
        {
            Param.ReturnDateEnd = Date.AddDays(Param.Number_of_days + 6).ToString("yyyyMMdd");
            returnDateEnd = Date.AddDays(Param.Number_of_days + 6);
        }
        else
        {
            Param.ReturnDateEnd = newValue.ToString("yyyyMMdd");
            returnDateEnd = newValue;
        }
        await OnHandleChanged(returnDateEnd.ToString("yyyyMMdd"), nameof(Param.ReturnDateEnd));
        formContextItemStaffChart.Validate();
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnClick Button Today
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task TodayClick(MouseEventArgs e)
    {
        checkHasParam = true;
        Date = DateTime.Today;
        Param.Date = DateTime.Today.ToString("yyyyMMdd");
        await OnHandleChanged(Param.Date, nameof(Param.Date));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Previous Date
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task onPrevious(MouseEventArgs e)
    {
        checkHasParam = true;
        Date = Date.AddDays(-1);
        Param.Date = Date.ToString("yyyyMMdd");
        await OnHandleChanged(Param.Date, nameof(Param.Date));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// OnChanged Next Date
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task onNext(MouseEventArgs e)
    {
        checkHasParam = true;
        Date = Date.AddDays(1);
        Param.Date = Date.ToString("yyyyMMdd");
        await OnHandleChanged(Param.Date, nameof(Param.Date));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }
    #endregion

    #region Search Condition value changed methods
    /// <summary>
    /// Click select option display line
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async void OnClickType(MouseEventArgs e, int number)
    {
        Param.Type = number;
        await OnHandleChanged(number, nameof(Param.Type));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option grouping
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async void OnClickGroup(MouseEventArgs e, int number)
    {
        Param.Grouping = number;
        await OnHandleChanged(number, nameof(Param.Grouping));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option display range
    /// value 1 : 1day
    /// value 2 : 3days
    /// value 3 : 1week
    /// value 4 : 1month
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async Task OnClickDisplayRange(MouseEventArgs e, int number)
    {
        Param.DisplayRange = number;
        // default click 1day will choose 1hour
        if (number == (int)DayMode.OneDay)
        {
            Param.TimeRange = (int)TimeMode.OneHour;
            Param.Number_of_days = 1;
        }
        // default click 3days will choose 3hours
        if (number == (int)DayMode.ThreeDays)
        {
            Param.TimeRange = (int)TimeMode.ThreeHours;
            Param.Number_of_days = 3;
        }
        // default click 1week will choose 1day
        if (number == (int)DayMode.Week)
        {
            Param.TimeRange = (int)TimeMode.Day;
            Param.Number_of_days = 7;
        }
        // default click 1month will choose 1day
        if (number == (int)DayMode.Month)
        {
            Param.TimeRange = (int)TimeMode.Day;
            Param.Number_of_days = 31;
        }
        setWidth();
        await OnHandleChanged(Param.TimeRange, nameof(Param.TimeRange));
        await OnHandleChanged(Param.Number_of_days, nameof(Param.Number_of_days));
        await OnHandleChanged(Param.DisplayRange, nameof(Param.DisplayRange));
        await updatedate(Date);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option time range
    /// value 0 : 15minute
    /// value 1 : 1hour
    /// value 2 : 3hours
    /// value 3 : 6hours
    /// value 4 : 1day
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async Task OnClickTimeRange(MouseEventArgs e, int number)
    {
        Param.TimeRange = number;
        await OnHandleChanged(Param.TimeRange, nameof(Param.TimeRange));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option order by List of Crew Member
    /// value 1 : order by duty-employee
    /// value 2 : order by branch-employee
    /// value 3 : order by branch-job
    /// value 4 : order by rolling
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async void OnClickOrderByList(MouseEventArgs e, int number)
    {
        Param.OrderbyList = number;
        await OnHandleChanged(Param.OrderbyList, nameof(Param.OrderbyList));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option order by Name Crew Members
    /// value 1 : order by duty-employee
    /// value 2 : order by branch-duty
    /// value 3 : order by branch-employee
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async void OnClickOrderByName(MouseEventArgs e, int number)
    {
        Param.OrderbyName = number;
        await OnHandleChanged(Param.OrderbyName, nameof(Param.OrderbyName));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option displayed characters
    /// value 1 : switch to Custom
    /// value 2 : switch to Organization Name
    /// value 4 : switch to Customer
    /// value 5 : switch to None
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async void OnClickDisplayedCharacters(MouseEventArgs e, int number)
    {
        Param.DisplayedCharacters = number;
        await OnHandleChanged(Param.DisplayedCharacters, nameof(Param.DisplayedCharacters));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option duties
    /// value 1 : all
    /// value 2 : driver
    /// value 3 : guide
    /// value 4 : office work
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async void OnClickDuties(MouseEventArgs e, int number)
    {
        Param.Duties = number;
        await OnHandleChanged(Param.Duties, nameof(Param.Duties));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select option displayed line height
    /// value 1 : switch to Large
    /// value 2 : switch to Medium
    /// value 3 : switch to Small
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async void OnClickDisplayedLineHeight(MouseEventArgs e, int number)
    {
        Param.DisplayedLineHeight = number;
        await OnHandleChanged(Param.DisplayedLineHeight, nameof(Param.DisplayedLineHeight));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Click select booking category
    /// </summary>
    /// <param name="e"></param>
    /// <param name="number"></param>
    async Task OnClickBookingCategory(MouseEventArgs e, int number)
    {
        Param.BookingCategory = number;
        await OnHandleChanged(Param.BookingCategory, nameof(Param.BookingCategory));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// Select Option Company Item
    /// </summary>
    /// <param name="selectedCompanyItems"></param>
    async void OnSelectedCompanyItemsChanged(IEnumerable<CompanyChartData> selectedCompanyItems)
    {
        SelectedCompanyItems = selectedCompanyItems;
        if (!isFilterApply)
        {
            if (checkCompanyAll == true)
            {
                if (!SelectedCompanyItems.Contains(allcompany))
                {
                    SelectedCompanyItems = SelectedCompanyItems.Take(0);
                    checkCompanyAll = false;
                }
                else if (SelectedCompanyItems.Contains(allcompany) && SelectedCompanyItems.Count() < tmpcompanychart.Count())
                {
                    SelectedCompanyItems = SelectedCompanyItems.Where(t => t.CompanyCdSeq != allcompany.CompanyCdSeq);
                    checkCompanyAll = false;
                }
                else
                {
                    SelectedCompanyItems = tmpcompanychart;
                    checkCompanyAll = true;
                }
            }
            else
            {
                if (SelectedCompanyItems.Contains(allcompany) || (!SelectedCompanyItems.Contains(allcompany) && SelectedCompanyItems.Count() == tmpcompanychart.Count() - 1))
                {
                    SelectedCompanyItems = tmpcompanychart;
                    checkCompanyAll = true;
                }
            }
        }
        if (SelectedCompanyItems.Count() == 0)
        {
            EmptyCompany = true;
        }
        else
        {
            EmptyCompany = false;
        }
        tmpbranchchart.Clear();
        foreach (var i in SelectedCompanyItems)
        {
            tmpbranchchart.AddRange(TPM_EigyosDataService.GetBranchbyCompany1(i.CompanyCdSeq, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID));
        }

        if (tmpbranchchart.Count() > 0)
        {
            tmpbranchchart.Insert(0, allbranch);
            SelectedBranchItems = tmpbranchchart;
        }
        else
        {
            SelectedBranchItems = SelectedBranchItems.Take(0);
        }

        OnDisplayLstSelectedCompany();
        OnDisplayLstSelectedBranch();
        await OnHandleChanged(Param.ListCom, nameof(Param.ListCom));
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Select Option Branch Item
    /// </summary>
    /// <param name="selectedBranchItems"></param>
    async void OnSelectedBranchItemsChanged(IEnumerable<BranchChartData> selectedBranchItems)
    {
        SelectedBranchItems = selectedBranchItems;
        if (!isFilterApply)
        {
            if (checkBranchAll == true)
            {
                if (!SelectedBranchItems.Contains(allbranch))
                {
                    SelectedBranchItems = SelectedBranchItems.Take(0);
                    checkBranchAll = false;
                }
                else if (SelectedBranchItems.Contains(allbranch) && SelectedBranchItems.Count() < tmpbranchchart.Count())
                {
                    SelectedBranchItems = SelectedBranchItems.Where(t => t.EigyoCdSeq != allbranch.EigyoCdSeq);
                    checkBranchAll = false;
                }
                else
                {
                    SelectedBranchItems = tmpbranchchart;
                    checkBranchAll = true;
                }
            }
            else
            {
                if (SelectedBranchItems.Contains(allbranch) || (!SelectedBranchItems.Contains(allbranch) && SelectedBranchItems.Count() == tmpbranchchart.Count() - 1))
                {
                    SelectedBranchItems = tmpbranchchart;
                    checkBranchAll = true;
                }
            }
        }

        OnDisplayLstSelectedBranch();
        await OnHandleChanged(Param.ListBrch, nameof(Param.ListBrch));
        branchlst = new List<int>();
        comlst = new List<int>();
        foreach (var i in SelectedBranchItems)
        {
            branchlst.Add(i.EigyoCdSeq);
        }
        foreach (var i in SelectedCompanyItems)
        {
            comlst.Add(i.CompanyCdSeq);
        }
        if (SelectedBranchItems.Count() == 0)
        {
            EmptyBranch = true;
        }
        else
        {
            EmptyBranch = false;
        }
        if (branchlst.Count() == 0 && comlst.Count() == 0)
        {
            StateHasChanged();
        }
        else if (!isFilterApply)
        {
            if(!EmptyBranch&&!EmptyCompany)
            {
                isLoading = true;
                await Task.Run(() =>
                {
                    Loadpage().Wait();
                    isLoading = false;
                });
            }

            InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Display text when click select item in company combobox
    /// No selected item : display 選択項目：0
    /// Selected 1 item: display CompanyNm
    /// Selected more than 1 item: display 選択項目：{number_item}
    /// Selected all: display すべて
    /// </summary>
    void OnDisplayLstSelectedCompany()
    {
        if (SelectedCompanyItems.Count() == 0)
        {
            showSelectedCompanies = "選択項目：0";
        }
        else if (SelectedCompanyItems.Count() == 1)
        {
            foreach (var item in SelectedCompanyItems)
            {
                showSelectedCompanies = item.RyakuNm;
            }
        }
        else if (SelectedCompanyItems.Count() > 1 && SelectedCompanyItems.Count() < tmpcompanychart.Count())
        {
            showSelectedCompanies = "選択項目：" + SelectedCompanyItems.Count().ToString();
        }
        else if (SelectedCompanyItems.Count() == tmpcompanychart.Count())
        {
            showSelectedCompanies = "すべて";
        }
    }

    /// <summary>
    /// Display text when click select item in company combobox
    /// No selected item : display 選択項目：0
    /// Selected 1 item: display RyakuNm
    /// Selected more than 1 item: display 選択項目：{number_item}
    /// Selected all: display すべて
    /// </summary>
    void OnDisplayLstSelectedBranch()
    {
        if (SelectedBranchItems.Count() == 0)
        {
            showSelectedBranches = "選択項目：0";
        }
        else if (SelectedBranchItems.Count() == 1)
        {
            foreach (var item in SelectedBranchItems)
            {
                showSelectedBranches = item.RyakuNm;
            }
        }
        else if (SelectedBranchItems.Count() < tmpbranchchart.Count())
        {
            showSelectedBranches = "選択項目：" + SelectedBranchItems.Count().ToString();
        }
        else if (SelectedBranchItems.Count() == tmpbranchchart.Count())
        {
            showSelectedBranches = "すべて";
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItem"></param>
    async void OnSelectedReservationChanged(ReservationData selectedItem)
    {
        currentReservation = selectedItem;
        await OnHandleChanged(currentReservation.YoyaKbnSeq.ToString(), nameof(Param.ReservationClassification));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItem"></param>
    async void OnSelectedOfficeFromChanged(BranchChartData selectedItem)
    {
        currentbranchfrom = selectedItem;
        await OnHandleChanged(currentbranchfrom.EigyoCdSeq.ToString(), nameof(Param.AffiliationOfficeFrom));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItem"></param>
    async void OnSelectedOfficeToChanged(BranchChartData selectedItem)
    {
        currentbranchto = selectedItem;
        await OnHandleChanged(currentbranchto.EigyoCdSeq.ToString(), nameof(Param.AffiliationOfficeTo));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItem"></param>
    async void OnSelectedDriverChecked(bool selectedItem)
    {
        DriverChecked = selectedItem;
        await OnHandleChanged(DriverChecked == true ? "1" : "0", nameof(Param.Driver));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItem"></param>
    async void OnSelectedGuideChecked(bool selectedItem)
    {
        GuideChecked = selectedItem;
        await OnHandleChanged(GuideChecked == true ? "1" : "0", nameof(Param.Guide));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    /// On Change Departure Time Start
    /// </summary>
    /// <param name="time"></param>
    async void OnDepartureTimeStartChanged(BookingInputHelper.MyTime newTime)
    {
        if (newTime.Str != "--:--")
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

            string date = int.Parse(timeValue).ToString("D4");
            if (BusScheduleHelper.CheckTimeinDay(date))
            {
                TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out departureTimeStart);
                Param.DepartureTimeStart = departureTimeStart.ToString("hhmm");
            }
            else
            {
                TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out departureTimeStart);
                Param.DepartureTimeStart = departureTimeStart.ToString("hhmm");
            }
            await OnHandleChanged(Param.DepartureTimeStart, nameof(Param.DepartureTimeStart));
        }
        //StateHasChanged();
    }

    /// <summary>
    /// On Change Departure Time End
    /// </summary>
    /// <param name="time"></param>
    async void OnDepartureTimeEndChanged(BookingInputHelper.MyTime newTime)
    {
        if (newTime.Str != "--:--")
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

            string date = int.Parse(timeValue).ToString("D4");
            if (BusScheduleHelper.CheckTimeinDay(date))
            {
                TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out departureTimeEnd);
                Param.DepartureTimeEnd = departureTimeEnd.ToString("hhmm");
            }
            else
            {
                TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out departureTimeStart);
                Param.DepartureTimeEnd = departureTimeEnd.ToString("hhmm");
            }
            await OnHandleChanged(Param.DepartureTimeEnd, nameof(Param.DepartureTimeEnd));
        }
        //StateHasChanged();
    }

    /// <summary>
    /// On Change Arrival Time Start
    /// </summary>
    /// <param name="time"></param>
    async void OnArrivalTimeStartChanged(BookingInputHelper.MyTime newTime)
    {
        if (newTime.Str != "--:--")
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

            string date = int.Parse(timeValue).ToString("D4");
            if (BusScheduleHelper.CheckTimeinDay(date))
            {
                TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out arrivalTimeStart);
                Param.ArrivalTimeStart = arrivalTimeStart.ToString("hhmm");
            }
            else
            {
                TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out arrivalTimeStart);
                Param.ArrivalTimeStart = arrivalTimeStart.ToString("hhmm");
            }
            await OnHandleChanged(Param.ArrivalTimeStart, nameof(Param.ArrivalTimeStart));
        }
        // StateHasChanged();
    }

    /// <summary>
    /// On Change Arrival Time End
    /// </summary>
    /// <param name="time"></param>
    async void OnArrivalTimeEndChanged(BookingInputHelper.MyTime newTime)
    {
        if (newTime.Str != "--:--")
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);

            string date = int.Parse(timeValue).ToString("D4");
            if (BusScheduleHelper.CheckTimeinDay(date))
            {
                TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out arrivalTimeEnd);
                Param.ArrivalTimeEnd = arrivalTimeEnd.ToString("hhmm");
            }
            else
            {
                TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out arrivalTimeEnd);
                Param.ArrivalTimeEnd = arrivalTimeEnd.ToString("hhmm");
            }
            await OnHandleChanged(Param.ArrivalTimeEnd, nameof(Param.ArrivalTimeEnd));
        }
        //StateHasChanged();
    }

    /// <summary>
    /// On Change Delivery Time Start
    /// </summary>
    /// <param name="time"></param>
    async void OnDeliveryTimeStartChanged(BookingInputHelper.MyTime newTime)
    {
        if (newTime.Str != "--:--")
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            string date = int.Parse(timeValue).ToString("D4");
            if (BusScheduleHelper.CheckTimeinDay(date))
            {
                TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out deliveryTimeStart);
                Param.DeliveryTimeStart = deliveryTimeStart.ToString("hhmm");
            }
            else
            {
                TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out deliveryTimeStart);
                Param.DeliveryTimeStart = deliveryTimeStart.ToString("hhmm");
            }
            await OnHandleChanged(Param.DeliveryTimeStart, nameof(Param.DeliveryTimeStart));

        }
        //StateHasChanged();
    }

    /// <summary>
    /// On Change Delivery Time End
    /// </summary>
    /// <param name="time"></param>
    async void OnDeliveryTimeEndChanged(BookingInputHelper.MyTime newTime)
    {
        if (newTime.Str != "--:--")
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            string date = int.Parse(timeValue).ToString("D4");
            if (BusScheduleHelper.CheckTimeinDay(date))
            {
                TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out deliveryTimeEnd);
                Param.DeliveryTimeEnd = deliveryTimeEnd.ToString("hhmm");
            }
            else
            {
                TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out deliveryTimeEnd);
                Param.DeliveryTimeEnd = deliveryTimeEnd.ToString("hhmm");
            }
            await OnHandleChanged(Param.DeliveryTimeEnd, nameof(Param.DeliveryTimeEnd));
        }
        //StateHasChanged();
    }

    /// <summary>
    /// On Change Return Time Start
    /// </summary>
    /// <param name="time"></param>
    async void OnReturnTimeStartChanged(BookingInputHelper.MyTime newTime)
    {
        if (newTime.Str != "--:--")
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            string date = int.Parse(timeValue).ToString("D4");
            if (BusScheduleHelper.CheckTimeinDay(date))
            {
                TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out returnTimeStart);
                Param.ReturnTimeStart = returnTimeStart.ToString("hhmm");
            }
            else
            {
                TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out returnTimeStart);
                Param.ReturnTimeStart = returnTimeStart.ToString("hhmm");
            }
            await OnHandleChanged(Param.ReturnTimeStart, nameof(Param.ReturnTimeStart));
        }
        //StateHasChanged();
    }

    /// <summary>
    /// On Change Return Time End
    /// </summary>
    /// <param name="time"></param>
    async void OnReturnTimeEndChanged(BookingInputHelper.MyTime newTime)
    {
        if (newTime.Str != "--:--")
        {
            string timeValue = CommonUtil.MyTimeFormat(newTime.Str, Formats.HHmm);
            string date = int.Parse(timeValue).ToString("D4");
            if (BusScheduleHelper.CheckTimeinDay(date))
            {
                TimeSpan.TryParseExact(date + "00", "hhmmss", CultureInfo.InvariantCulture, out returnTimeEnd);
                Param.ReturnTimeEnd = returnTimeEnd.ToString("hhmm");
            }
            else
            {
                TimeSpan.TryParseExact("000001", "hhmmss", CultureInfo.InvariantCulture, out returnTimeEnd);
                Param.ReturnTimeEnd = returnTimeEnd.ToString("hhmm");
            }
            await OnHandleChanged(Param.ReturnTimeEnd, nameof(Param.ReturnTimeEnd));
        }
        //StateHasChanged();
    }
    #endregion

    #region General
    /// <summary>
    /// set width chart
    /// </summary>
    public void setWidth()
    {
        if (Param.DisplayRange != (int)DayMode.OneDay && Param.TimeRange == (int)TimeMode.Minute ||
            Param.DisplayRange < (int)DayMode.Week && Param.TimeRange == (int)TimeMode.Day)
        {
            Param.TimeRange = (int)TimeMode.OneHour;
        }
        if (Param.DisplayRange == (int)DayMode.OneDay && Param.TimeRange == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.DisplayRange == (int)DayMode.OneDay && Param.TimeRange != (int)TimeMode.Minute ||
            Param.DisplayRange == (int)DayMode.ThreeDays && Param.TimeRange > (int)TimeMode.OneHour ||
            Param.DisplayRange == (int)DayMode.Week && Param.TimeRange == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.DisplayRange == (int)DayMode.ThreeDays && Param.TimeRange == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.DisplayRange == (int)DayMode.Week && Param.TimeRange == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.DisplayRange == (int)DayMode.Week && Param.TimeRange == (int)TimeMode.ThreeHours ||
            Param.DisplayRange == (int)DayMode.Week && Param.TimeRange == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.DisplayRange == (int)DayMode.Month && Param.TimeRange == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.DisplayRange == (int)DayMode.Month && Param.TimeRange == (int)TimeMode.ThreeHours ||
            Param.DisplayRange == (int)DayMode.Month && Param.TimeRange == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.DisplayRange == (int)DayMode.Month && Param.TimeRange == (int)TimeMode.Day)
        {
            Width = Math.Round(w / 7 * 31);
        }
    }

    /// <summary>
    /// set number of date when selected display range
    /// </summary>
    public async void setNumberOfDate()
    {
        if (Param.DisplayRange == (int)DayMode.OneDay)
        {
            Param.Number_of_days = 1;
        }
        else if (Param.DisplayRange == (int)DayMode.ThreeDays)
        {
            Param.Number_of_days = 3;
        }
        else if (Param.DisplayRange == (int)DayMode.Week)
        {
            Param.Number_of_days = 7;
        }
        else if (Param.DisplayRange == (int)DayMode.Month)
        {
            Param.Number_of_days = 31;
        }
        await OnHandleChanged(Param.Number_of_days, nameof(Param.Number_of_days));
    }

    public void OpenJourneys()
    {
        PopupJourney = true;
        StateHasChanged();
    }

    private async Task CancelJourney()
    {
        PopupJourney = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    public void OpenTehai()
    {
        PopupTehai = true;
        StateHasChanged();
    }

    public void OpenFutai()
    {
        PopupFutai = true;
        StateHasChanged();
    }

    public void OpenTsumi()
    {
        PopupTsumi = true;
        StateHasChanged();
    }
    /// <summary>
    /// Call when Browser Has Resized
    /// </summary>
    /// <returns></returns>
    private async Task BrowserHasResized()
    {
        w = (double)await BrowserResizeService.GetInnerWidth();
        setWidth();
        StateHasChanged();
    }

    /// <summary>
    /// Call when Browser Has Callback Width
    /// </summary>
    /// <returns></returns>
    private async Task BrowserHasCallbackWidth()
    {
        w = (double)await BrowserResizeService.GetCallbackInnerWidth();
        setWidth();
        StateHasChanged();
    }

    /// <summary>
    /// Dispose
    /// </summary>
    public void Dispose()
    {
        BrowserResizeService.OnResize -= BrowserHasResized;
        BrowserResizeService.OnCallbackWidth -= BrowserHasCallbackWidth;
    }

    /// <summary>
    /// reRender Chart
    /// </summary>
    /// <returns></returns>
    public async Task Loadpage()
    {
        try
        {
            ItemList = await FilterConditionService.GetCustomFilters(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, formName);
            if (ItemList.Count > 0)
            {
                await LoadCustomFilter();
            }

            DateTime.TryParseExact(Param.DepartureDateStart, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out departureDateStart);
            DateTime.TryParseExact(Param.DepartureDateEnd, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out departureDateEnd);
            DateTime.TryParseExact(Param.ArrivalDateStart, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out arrivalDateStart);
            DateTime.TryParseExact(Param.ArrivalDateEnd, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out arrivalDateEnd);
            DateTime.TryParseExact(Param.DeliveryDateStart, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out deliveryDateStart);
            DateTime.TryParseExact(Param.DeliveryDateEnd, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out deliveryDateEnd);
            DateTime.TryParseExact(Param.ReturnDateStart, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out returnDateStart);
            DateTime.TryParseExact(Param.ReturnDateEnd, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out returnDateEnd);
            DateTime selectDate;
            if (!String.IsNullOrEmpty(date) && !String.IsNullOrWhiteSpace(date) && checkHasParam == false)
            {
                DateTime.TryParseExact(date == null ? DateTime.Today.ToString("yyyyMMdd") : date, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out selectDate);
                Date = selectDate;
                Param.Date = selectDate.ToString("yyyyMMdd");
                await updatedate(selectDate);
                //NavManager.NavigateTo("/StaffsChart", false);
            }
            else
            {
                DateTime.TryParseExact(Param.Date == null ? DateTime.Today.ToString("yyyyMMdd") : Param.Date, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out selectDate);
                Date = selectDate;
                Param.Date = selectDate.ToString("yyyyMMdd");
            }
            departureTimeStart = BusScheduleHelper.ConvertTime(Param.DepartureTimeStart);
            departureTimeEnd = BusScheduleHelper.ConvertTime(Param.DepartureTimeEnd);
            arrivalTimeStart = BusScheduleHelper.ConvertTime(Param.ArrivalTimeStart);
            arrivalTimeEnd = BusScheduleHelper.ConvertTime(Param.ArrivalTimeEnd);
            deliveryTimeStart = BusScheduleHelper.ConvertTime(Param.DeliveryTimeStart);
            deliveryTimeEnd = BusScheduleHelper.ConvertTime(Param.DeliveryTimeEnd);
            returnTimeStart = BusScheduleHelper.ConvertTime(Param.ReturnTimeStart);
            returnTimeEnd = BusScheduleHelper.ConvertTime(Param.ReturnTimeEnd);
            await renderlstStaffsLines();
            await renderlstStaffsNames();
            await reRenderBusLines();
            await reRenderBusNames();
            OnDisplayLstSelectedCompany();
            OnDisplayLstSelectedBranch();
            if (!String.IsNullOrEmpty(date) && !String.IsNullOrWhiteSpace(date) && checkHasParam == false)
            {
                NavManager.NavigateTo("/StaffsChart", false);
                await OnHandleChanged(Param.Date, nameof(Param.Date));

            }

        }
        catch (Exception ex)
        {
            //TODO use logger to log down exception ex.message
        }
    }
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task reRenderBusLines()
    {
        Buslines.Clear();
        buslines.Clear();
        busrepair.Clear();
        DateTime st = Date;
        DateTime end = Date.AddDays(Param.Number_of_days - 1);
        listdatecomment = await TPM_CalendDataService.Getdatabydays(1, 1, st.ToString("yyyyMMdd"), end.ToString("yyyyMMdd"), new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
        buslines = await BusBookingDataService.Getbusdatabooking(st, end, 1, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);

        busrepair = await TKD_ShuriDataService.Getdata(st, end);
        foreach (TKD_ShuriData i in busrepair)
        {
            var codeKbnInfo = await BusBookingDataService.GetCodeKbnByCodeAndTenantId(i.Shuri_ShuriCdSeq, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            TKD_ShuriData newBusrepair = new TKD_ShuriData();

            newBusrepair.Shuri_BikoNm = i.Shuri_BikoNm;
            newBusrepair.Shuri_ShuriCdSeq = i.Shuri_ShuriCdSeq;
            newBusrepair.Shuri_ShuriETime = i.Shuri_ShuriETime;
            newBusrepair.Shuri_ShuriEYmd = i.Shuri_ShuriEYmd;
            newBusrepair.Shuri_ShuriSTime = i.Shuri_ShuriSTime;
            newBusrepair.Shuri_ShuriSYmd = i.Shuri_ShuriSYmd;
            newBusrepair.Shuri_ShuriTblSeq = i.Shuri_ShuriTblSeq;
            newBusrepair.Shuri_SyaRyoCdSeq = i.Shuri_SyaRyoCdSeq;
            //newBusrepair.Text = await BusBookingDataService.Getcodename(i.Shuri_ShuriCdSeq, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            //newBusrepair.CodeKb_Codekbn = await BusBookingDataService.Getcodekbn(i.Shuri_ShuriCdSeq, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            newBusrepair.Text = codeKbnInfo?.CodeKb_RyakuNm ?? string.Empty;
            newBusrepair.CodeKb_Codekbn = codeKbnInfo?.CodeKb_CodeKbn ?? string.Empty;
            DateTime startdatere;
            DateTime.TryParseExact(i.Shuri_ShuriSYmd + i.Shuri_ShuriSTime,
                           "yyyyMMddHHmm",
                           CultureInfo.CurrentCulture,
                           DateTimeStyles.None,
                           out startdatere);

            DateTime enddatere;
            DateTime.TryParseExact(i.Shuri_ShuriEYmd + i.Shuri_ShuriETime,
                           "yyyyMMddHHmm",
                           CultureInfo.CurrentCulture,
                           DateTimeStyles.None,
                           out enddatere);
            object text = new Object();
            text = "<span>期間：" + startdatere.ToString("yyyy/MM/dd (ddd) HH:mm") + "～" + enddatere.ToString("yyyy/MM/dd (ddd) HH:mm") + "</span>";
            //text += "<span>修理内容：" + BusBookingDataService.Getcodekbn(i.Shuri_ShuriCdSeq, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID) + "　" + BusBookingDataService.Getcodename(i.Shuri_ShuriCdSeq, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID) + "</span>";
            text += "<span>内容：" + codeKbnInfo?.CodeKb_CodeKbn ?? string.Empty + "　" + codeKbnInfo?.CodeKb_RyakuNm ?? string.Empty + "</span>";
            text += "<span>備考：" + i.Shuri_BikoNm + "</span>";
            newBusrepair.Tooltip = text;
            newBusrepair.SyaRyo_NinKaKbn = i.SyaRyo_NinKaKbn;
            newBusrepair.Syasyu_KataKbn = i.Syasyu_KataKbn;
            Busrepair.Add(newBusrepair);
        }
        var settingtext = BusTooltipService.GetBustooltip(1);
        foreach (BusBookingData i in buslines)
        {
            ItemBus newBusbookingdata = new ItemBus();

            newBusbookingdata.BookingId = i.Haisha_UkeNo;
            newBusbookingdata.haUnkRen = i.Haisha_UnkRen;
            newBusbookingdata.TeiDanNo = i.Haisha_TeiDanNo;
            newBusbookingdata.BunkRen = i.Haisha_BunkRen;
            newBusbookingdata.HenKai = i.Haisha_HenKai;
            newBusbookingdata.Id = i.Haisha_GoSya;
            newBusbookingdata.UkeCd = i.Yyksho_UkeCd;
            newBusbookingdata.BusLine = i.Haisha_HaiSSryCdSeq.ToString();
            newBusbookingdata.StartDate = i.Haisha_HaiSYmd;
            newBusbookingdata.TimeStart = int.Parse(i.Haisha_HaiSTime);

            DateTime enddatetime = DateTime.ParseExact(i.Haisha_TouYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            DateTime enddatetimemax = DateTime.ParseExact(i.Unkobi_TouYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            string enddatest = i.Haisha_TouYmd;
            string endtime = i.Haisha_TouChTime;

            if (BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Days >= 1)
            {
                enddatest = enddatetime.AddDays(BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Days).ToString("yyyyMMdd");
                endtime = BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Minutes.ToString("D2");
            }
            else
            {
                enddatest = i.Haisha_TouYmd;
                endtime = i.Haisha_TouChTime;
            }
            newBusbookingdata.EndDate = enddatest;
            newBusbookingdata.TimeEnd = int.Parse(endtime);
            //update line caculation time gray
            DateTime enddatetimegray = DateTime.ParseExact(i.Haisha_KikYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            string enddatestrgray = i.Haisha_KikYmd;
            string endtimegray = i.Haisha_KikTime;
            if (BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Days >= 1)
            {
                enddatestrgray = enddatetimegray.AddDays(BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Days).ToString("yyyyMMdd");
                endtimegray = BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Minutes.ToString("D2");
            }
            else
            {
                enddatestrgray = i.Haisha_KikYmd;
                endtimegray = i.Haisha_KikTime;
            }
            newBusbookingdata.StartDateDefault = i.Haisha_SyuKoYmd;
            newBusbookingdata.EndDateDefault = enddatestrgray;
            newBusbookingdata.TimeStartDefault = int.Parse(i.Haisha_SyuKoTime);
            newBusbookingdata.TimeEndDefault = int.Parse(endtimegray);
            newBusbookingdata.JyoSyaJin = i.Haisha_JyoSyaJin;


            if (i.Haisha_DrvJin > 1)
            {
                newBusbookingdata.ColorLine += " border-black";
            }
            newBusbookingdata.Status = 1;
            newBusbookingdata.CCSStyle = "";
            newBusbookingdata.Top = 0.3125;
            newBusbookingdata.Height = 2;
            newBusbookingdata.Name = "";
            newBusbookingdata.Width = BusScheduleHelper.calwidth(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), newBusbookingdata.EndDate, newBusbookingdata.TimeEnd.ToString("D4"), Param.Number_of_days);
            newBusbookingdata.Left = BusScheduleHelper.calleft(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
            newBusbookingdata.WidthDefault = BusScheduleHelper.calwidth(Width, newBusbookingdata.StartDateDefault, newBusbookingdata.TimeStartDefault.ToString("D4"), newBusbookingdata.EndDateDefault, newBusbookingdata.TimeEndDefault.ToString("D4"), Param.Number_of_days);
            newBusbookingdata.LeftDefault = BusScheduleHelper.calleft(Width, newBusbookingdata.StartDateDefault, newBusbookingdata.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
            newBusbookingdata.DanTaNm = i.Unkobi_DanTaNm;
            newBusbookingdata.IkNm = i.Haisha_IkNm;
            newBusbookingdata.TokuiNm = i.TokiSt_RyakuNm;
            newBusbookingdata.NumberDriver = i.Haisha_DrvJin;
            newBusbookingdata.NumberGuider = i.Haisha_GuiSu;
            newBusbookingdata.MinDate = i.Unkobi_HaiSYmd;
            newBusbookingdata.MinTime = int.Parse(i.Unkobi_HaiSTime);
            if (BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Days >= 1)
            {
                newBusbookingdata.Maxdate = enddatetimemax.AddDays(BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Days).ToString("yyyyMMdd");
                newBusbookingdata.MaxTime = int.Parse(BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Minutes.ToString("D2"));
            }
            else
            {
                newBusbookingdata.Maxdate = i.Unkobi_TouYmd;
                newBusbookingdata.MaxTime = int.Parse(i.Unkobi_TouChTime);
            }
            //newBusbookingdata.Maxdate = i.Unkobi_TouYmd;
            //newBusbookingdata.MaxTime = int.Parse(i.Unkobi_TouChTime);

            var codeKbnInfo = await BusBookingDataService.GetCodeKbnByCodeAndTenantId(i.YykSyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);

            newBusbookingdata.HasYmd = i.Haisha_HaiSYmd;
            newBusbookingdata.Zeiritsu = i.Yyksho_Zeiritsu;
            newBusbookingdata.BookingType = i.Yyksho_YoyaKbnSeq;
            //newBusbookingdata.CodeKb_CodeKbn = await BusBookingDataService.Getcodename(i.YykSyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            newBusbookingdata.CodeKb_CodeKbn = codeKbnInfo?.CodeKb_RyakuNm ?? string.Empty;
            newBusbookingdata.KSKbn = i.Haisha_KSKbn;
            newBusbookingdata.YouTblSeq = i.Haisha_YouTblSeq;
            newBusbookingdata.SyaSyu_SyaSyuNm = i.SyaSyu_SyaSyuNm;
            i.SyaSyu_SyaSyuNm_Haisha = newBusbookingdata.SyaSyu_SyaSyuNm_Haisha;
            newBusbookingdata.BusLineType = i.Haisha_UkeNo.ToString() + i.Haisha_TeiDanNo.ToString();
            //newBusbookingdata.BusName = (i.SyaSyu_SyaSyuNm == null ? "指定なし" : i.SyaSyu_SyaSyuNm) + "/" + BusBookingDataService.Getcodename(i.YykSyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            newBusbookingdata.BusName = (i.SyaSyu_SyaSyuNm == null ? "指定なし" : i.SyaSyu_SyaSyuNm) + "/" + codeKbnInfo?.CodeKb_RyakuNm;
            Tokisk = await TPM_TokiskDataService.getdata(newBusbookingdata.Unkobi_StartYmd);
            if (Tokisk.Where(t => t.Tokisk_TokuiSeq == i.Yousha_YouCdSeq && t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).ToList().Count > 0)
            {
                newBusbookingdata.Tokisk_YouSRyakuNm = Tokisk.First(t => t.Tokisk_TokuiSeq == i.Yousha_YouCdSeq).Tokisk_RyakuNm + " " + Tokisk.First(t => t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).TokiSt_RyakuNm;
                newBusbookingdata.Tokisk_SitenCdSeq = Tokisk.First(t => t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).TokiSt_SitenCdSeq;
            }
            newBusbookingdata.Tooltip = "";
            newBusbookingdata.TokiSk_RyakuNm = i.TokiSk_RyakuNm;
            newBusbookingdata.TokiSt_RyakuNm = i.TokiSt_RyakuNm;
            newBusbookingdata.Shuri_ShuriTblSeq = 0;
            //newBusbookingdata.AllowDrop = true;
            newBusbookingdata.SyaSyuRen = i.YykSyu_SyaSyuRen;
            newBusbookingdata.BranchId = 0;
            newBusbookingdata.CompanyId = 0;
            newBusbookingdata.BunKSyuJyn = i.Haisha_BunKSyuJyn;
            newBusbookingdata.SeiTaiYmd = i.Yyksho_SeiTaiYmd;
            if (i.Haisha_BunKSyuJyn == 0)
            {
                newBusbookingdata.CanBeDeleted = false;
            }
            if (i.Haisha_HaiSKbn == 2 || (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) || (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            {
                newBusbookingdata.CanSimpledispatch = false;
            }
            newBusbookingdata.Unkobi_StartYmd = i.Unkobi_HaiSYmd;
            newBusbookingdata.Syasyu_KataKbn = i.Syasyu_KataKbn;
            newBusbookingdata.SyaRyo_NinKaKbn = i.SyaRyo_NinKaKbn;
            Buslines.Add(newBusbookingdata);
        }
    }
    private async Task reRenderBusNames()
    {
        Busnames.Clear();
        bus.Clear();
        bus = await BusDataService.Getbus(Date, 1, comlst.ToArray(), branchlst.ToArray(), new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
        DateTime startDateFilter = Date;
        DateTime endDateFilter = Date;
        BusInfoData itemBusTemp = new BusInfoData();

        List<BusInfoData> listBusTemp = new List<BusInfoData>();

        if (Param.DisplayRange == (int)DayMode.ThreeDays)
        {
            endDateFilter = Date.AddDays(2);
        }
        else if (Param.DisplayRange == (int)DayMode.Week)
        {
            endDateFilter = Date.AddDays(6);
        }
        else if (Param.DisplayRange == (int)DayMode.Week)
        {
            endDateFilter = Date.AddDays(31);
        }
        foreach (var item in bus)
        {
            if (item.StaYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) <= 0
                && item.EndYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) >= 0
                && item.EndYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) <= 0)
            {
                listBusTemp.Add(item);
            }
            if (item.StaYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) >= 0
                && item.EndYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) >= 0
                && item.StaYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) <= 0)
            {
                listBusTemp.Add(item);
            }
            if (item.StaYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) >= 0
                && item.EndYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) <= 0)
            {
                listBusTemp.Add(item);
            }
            if (item.StaYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) <= 0
                && item.EndYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) >= 0)
            {
                listBusTemp.Add(item);
            }
        }
        bus = listBusTemp.Distinct().ToList();
        foreach (var i in bus)
        {
            BusDataType busItem = new BusDataType();
            busItem.BusID = i.SyaRyoCdSeq.ToString();
            busItem.SyaSyuNm = i.SyaSyuNm;
            busItem.SyaRyoNm = i.SyaRyoNm;
            busItem.RyakuNm = i.RyakuNm;
            busItem.EigyoNm = i.EigyoNm;
            busItem.KariSyaRyoNm = i.KariSyaRyoNm;
            //busItem.BusHeight = 2;
            busItem.BusVehicle = 0;
            busItem.BusBranchID = i.EigyoCdSeq;
            busItem.BusCompanyID = i.CompanyCdSeq;
            busItem.SyaSyuCd = i.SyaSyuCd;
            busItem.EigyoCd = i.EigyoCd;
            busItem.SyaRyoCd = i.SyaRyoCd;
            busItem.TenkoNo = i.TenkoNo;
            busItem.StaYmd = i.StaYmd;
            busItem.EndYmd = i.EndYmd;
            busItem.NinkaKbn = i.NinkaKbn;
            busItem.TeiCnt = i.TeiCnt;
            busItem.KataKbn = i.KataKbn;
            busItem.LockYmd = i.LockYmd;
            Busnames.Add(busItem);
        }
        //add busrepair to busline
        if (Busrepair.Count != 0)
        {
            foreach (TKD_ShuriData t in Busrepair)
            {
                ItemBus newBusrepairdata = new ItemBus();
                newBusrepairdata.BookingId = "0";
                newBusrepairdata.haUnkRen = 0;
                newBusrepairdata.TeiDanNo = 0;
                newBusrepairdata.BunkRen = 0;
                newBusrepairdata.HenKai = 0;
                newBusrepairdata.KSKbn = 2;
                newBusrepairdata.Id = "";
                newBusrepairdata.Shuri_ShuriTblSeq = t.Shuri_ShuriTblSeq;
                newBusrepairdata.BusLine = t.Shuri_SyaRyoCdSeq.ToString();
                newBusrepairdata.StartDate = t.Shuri_ShuriSYmd;
                newBusrepairdata.EndDate = t.Shuri_ShuriEYmd;
                newBusrepairdata.TimeStart = int.Parse(t.Shuri_ShuriSTime);
                newBusrepairdata.TimeEnd = int.Parse(t.Shuri_ShuriETime);
                newBusrepairdata.StartDateDefault = t.Shuri_ShuriSYmd; ;
                newBusrepairdata.EndDateDefault = t.Shuri_ShuriEYmd;
                newBusrepairdata.TimeStartDefault = int.Parse(t.Shuri_ShuriSTime);
                newBusrepairdata.TimeEndDefault = int.Parse(t.Shuri_ShuriETime);
                newBusrepairdata.ColorLine = "color-9";
                newBusrepairdata.IsBusRepair = true;
                newBusrepairdata.Status = 1;
                newBusrepairdata.CCSStyle = "";
                newBusrepairdata.Top = 0.3125;
                newBusrepairdata.Height = 2;
                newBusrepairdata.Width = BusScheduleHelper.calwidth(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), newBusrepairdata.EndDate, newBusrepairdata.TimeEnd.ToString("D4"), Param.Number_of_days);
                newBusrepairdata.Left = BusScheduleHelper.calleft(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
                newBusrepairdata.WidthDefault = BusScheduleHelper.calwidth(Width, newBusrepairdata.StartDateDefault, newBusrepairdata.TimeStartDefault.ToString("D4"), newBusrepairdata.EndDateDefault, newBusrepairdata.TimeEndDefault.ToString("D4"), Param.Number_of_days);
                newBusrepairdata.LeftDefault = BusScheduleHelper.calleft(Width, newBusrepairdata.StartDateDefault, newBusrepairdata.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
                newBusrepairdata.DanTaNm = "";
                newBusrepairdata.IkNm = "";
                newBusrepairdata.TokuiNm = "";
                newBusrepairdata.Text = t.Text;
                newBusrepairdata.Tooltip = t.Tooltip;
                newBusrepairdata.AllowDrop = false;
                newBusrepairdata.AllowEdit = false;
                newBusrepairdata.ShuriCdSeq = t.Shuri_ShuriCdSeq;
                newBusrepairdata.BikoNm = t.Shuri_BikoNm;
                newBusrepairdata.Syasyu_KataKbn = t.Syasyu_KataKbn;
                newBusrepairdata.SyaRyo_NinKaKbn = t.SyaRyo_NinKaKbn;
                int brandid = Busnames.Where(x => x.BusID == t.Shuri_SyaRyoCdSeq.ToString()).First().BusBranchID;
                newBusrepairdata.BranchId = brandid;
                newBusrepairdata.CompanyId = branchchart.Where(a => a.EigyoCdSeq == brandid).First().CompanyCdSeq;
                Buslines.Add(newBusrepairdata);
            }
        }
        if (Buslines.Count != 0)
        {
            foreach (var item in Buslines)
            {
                if (item.BusLine != "0" && item.KSKbn == 2 && Busnames.Where(x => x.BusID == item.BusLine).Count() > 0)
                {
                    int brandid = Busnames.Where(x => x.BusID == item.BusLine).First().BusBranchID;
                    item.BranchId = brandid;
                    item.CompanyId = branchchart.Where(a => a.EigyoCdSeq == brandid).First().CompanyCdSeq;

                    // check table lock
                    string lockymd = null; ;
                    if ((lockymd = Busnames.Where(x => x.BusID == item.BusLine).First().LockYmd) != null
                        && DateTime.TryParseExact(lockymd, "yyyyMMdd", null, DateTimeStyles.None, out DateTime lockDate)
                        && DateTime.TryParseExact(item.SeiTaiYmd, "yyyyMMdd", null, DateTimeStyles.None, out DateTime seiTaiDate))
                    {
                        if (seiTaiDate < lockDate)
                        {
                            item.AllowDrop = false;
                            item.AllowEdit = false;
                        }
                    }
                }
            }
        }


        KyoSHeDatabyDatelst.Clear();
        int d = Param.Number_of_days;
        for (int i = 1; i <= d; i++)
        {
            KyoSHeDatabyDate KyoSHeDatabyDateitem = new KyoSHeDatabyDate();
            KyoSHeDatabyDateitem.date = Date.AddDays(i - 1);
            List<TPM_KyoSHeData> KyoSHeData = await TPM_KyoSHeDataService.Getdata(Date.AddDays(i - 1), branchlst.ToArray(), new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            foreach (var item in KyoSHeData)
            {
                KyoSHeData.Where(t => t.SyainCdSeq == item.SyainCdSeq && t.EndYmd == item.EndYmd).First().CompanyCdSeq = branchchart.Where(a => a.EigyoCdSeq == item.EigyoCdSeq).First().CompanyCdSeq;
            }
            KyoSHeDatabyDateitem.KyoSHelst = KyoSHeData;
            int[] iddriver = { 1, 2 };
            int[] idguider = { 3, 4 };
            List<int> SyainCdSeqdriverslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => iddriver.Contains(t.SyokumuKbn)).Select(t => t.SyainCdSeq).ToList();
            List<int> SyainCdSeqguiderslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => idguider.Contains(t.SyokumuKbn)).Select(t => t.SyainCdSeq).ToList();
            SyainCdSeqdriverslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => iddriver.Contains(t.SyokumuKbn)).Select(t => t.SyainCdSeq).ToList();
            SyainCdSeqguiderslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => idguider.Contains(t.SyokumuKbn)).Select(t => t.SyainCdSeq).ToList();
            KyoSHeDatabyDateitem.Kikyujdriverlst = await TPM_KyoSHeDataService.Getdataoff(Date.AddDays(i - 1), SyainCdSeqdriverslt.ToArray());
            KyoSHeDatabyDateitem.Kikyujguiderlst = await TPM_KyoSHeDataService.Getdataoff(Date.AddDays(i - 1), SyainCdSeqguiderslt.ToArray());
            KyoSHeDatabyDateitem.Kobandriverlst = await TPM_KyoSHeDataService.GetdataKoban(Date.AddDays(i - 1), SyainCdSeqdriverslt.ToArray());
            KyoSHeDatabyDateitem.haishadrgdData=await TPM_KyoSHeDataService.Getdatadriandgui(Date.AddDays(i - 1), branchlst.ToArray(), new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            KyoSHeDatabyDatelst.Add(KyoSHeDatabyDateitem);
        }
    }
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task renderlstStaffsNames()
    {
        lstStaffsNamesUnassigned.Clear();
        lstStaffsNames = new List<StaffData>();
        lstStaffid = new List<int>();
        lstStaffsNames = await StaffService.GetStafforStaffChart(Date, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID, comlst, branchlst);
        lstStaffid = lstStaffsNames.Select(t => int.Parse(t.StaffID)).ToList();
        lstStaffsBranch = lstStaffsNames.GroupBy(n => new { n.EigyoCdSeq, n.RyakuNm }).Select(t => new BranchChartData { EigyoCdSeq = t.Key.EigyoCdSeq, RyakuNm = t.Key.RyakuNm });
        lstStaffCompany = lstStaffsNames.GroupBy(n => new { n.CompanyCdSeq, n.CompanyNm }).Select(t => new CompanyChartData { CompanyCdSeq = t.Key.CompanyCdSeq, CompanyNm = t.Key.CompanyNm });

        foreach (var item in haiinDatachecklit)
        {
            var listdrivernonassign = lstStaffnonassignlines.Where(t => (t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen) && (t.Syokum_SyokumuKbn == 1 || t.Syokum_SyokumuKbn == 2)).ToList();
            if (listdrivernonassign.Count() > 0)
            {
                foreach (var itemdriver in listdrivernonassign)
                {
                    StaffData staffDataUnassigned = new StaffData();
                    string text = "";
                    staffDataUnassigned.StaffID = itemdriver.Haisha_UkeNo + itemdriver.Haisha_UnkRen + "1";
                    try
                    {
                        if (Param.DisplayedLineHeight == (int)ViewMode.Large)
                        {
                            text = itemdriver.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Big) + (itemdriver.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Big ? "" : "...");
                        }
                        else if (Param.DisplayedLineHeight == (int)ViewMode.Medium)
                        { text = itemdriver.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Medium) + (itemdriver.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Medium ? "" : "..."); }
                        else
                        {
                            text = itemdriver.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Small) + (itemdriver.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Small ? "" : "...");
                        }
                    }
                    catch
                    {
                        text = itemdriver.Unkobi_DanTaNm;
                    }
                    staffDataUnassigned.StaffName = text + "/" + Lang["driver"];
                    staffDataUnassigned.IsGray = true;
                    staffDataUnassigned.StaffVehicle = 1;
                    if (!lstStaffsNamesUnassigned.Where(t => t.StaffID == staffDataUnassigned.StaffID).Any())
                    {
                        lstStaffsNamesUnassigned.Add(staffDataUnassigned);
                    }
                }
            }
            if (item.Haisha_DrvJin - item.Haiin_CountDriver > 0)
            {
                for (int i = 1; i <= (item.Haisha_DrvJin - item.Haiin_CountDriver); i++)
                {
                    var getdataformchecklst = getdatacheckgrayline.Where(t => t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen).First();
                    StaffData staffDataUnassigned = new StaffData();
                    string text = "";
                    staffDataUnassigned.StaffID = getdataformchecklst.Haisha_UkeNo + getdataformchecklst.Haisha_UnkRen + "1";
                    try
                    {
                        if (Param.DisplayedLineHeight == (int)ViewMode.Large)
                        {
                            text = getdataformchecklst.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Big) + (getdataformchecklst.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Big ? "" : "...");
                        }
                        else if (Param.DisplayedLineHeight == (int)ViewMode.Medium)
                        { text = getdataformchecklst.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Medium) + (getdataformchecklst.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Medium ? "" : "..."); }
                        else
                        {
                            text = getdataformchecklst.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Small) + (getdataformchecklst.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Small ? "" : "...");
                        }
                    }
                    catch
                    {
                        text = getdataformchecklst.Unkobi_DanTaNm;
                    }
                    staffDataUnassigned.StaffName = text + "/" + Lang["driver"];
                    staffDataUnassigned.IsGray = true;
                    staffDataUnassigned.StaffVehicle = 1;
                    if (!lstStaffsNamesUnassigned.Where(t => t.StaffID == staffDataUnassigned.StaffID).Any())
                    {
                        lstStaffsNamesUnassigned.Add(staffDataUnassigned);
                    }
                }
            }
            var listguidenonassign = lstStaffnonassignlines.Where(t => (t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen) && (t.Syokum_SyokumuKbn == 3 || t.Syokum_SyokumuKbn == 4)).ToList();
            if (listguidenonassign.Count() > 0)
            {
                foreach (var itemdriver in listguidenonassign)
                {
                    StaffData staffDataUnassigned = new StaffData();
                    string text = "";
                    staffDataUnassigned.StaffID = itemdriver.Haisha_UkeNo + itemdriver.Haisha_UnkRen + "2";
                    try
                    {
                        if (Param.DisplayedLineHeight == (int)ViewMode.Large)
                        {
                            text = itemdriver.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Big) + (itemdriver.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Big ? "" : "...");
                        }
                        else if (Param.DisplayedLineHeight == (int)ViewMode.Medium)
                        { text = itemdriver.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Medium) + (itemdriver.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Medium ? "" : "..."); }
                        else
                        {
                            text = itemdriver.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Small) + (itemdriver.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Small ? "" : "...");
                        }
                    }
                    catch
                    {
                        text = itemdriver.Unkobi_DanTaNm;
                    }
                    staffDataUnassigned.StaffName = text + "/" + Lang["guide"];
                    staffDataUnassigned.IsGray = true;
                    staffDataUnassigned.StaffVehicle = 2;
                    if (!lstStaffsNamesUnassigned.Where(t => t.StaffID == staffDataUnassigned.StaffID).Any())
                    {
                        lstStaffsNamesUnassigned.Add(staffDataUnassigned);
                    }
                }
            }
            if (item.Haisha_GuiSu - item.Haiin_CountGuide > 0)
            {
                for (int i = 1; i <= (item.Haisha_GuiSu - item.Haiin_CountGuide); i++)
                {
                    var getdataformchecklst = getdatacheckgrayline.Where(t => t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen).First();
                    StaffData staffDataUnassigned = new StaffData();
                    string text = "";
                    staffDataUnassigned.StaffID = getdataformchecklst.Haisha_UkeNo + getdataformchecklst.Haisha_UnkRen + "2";
                    try
                    {
                        if (Param.DisplayedLineHeight == (int)ViewMode.Large)
                        {
                            text = getdataformchecklst.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Big) + (getdataformchecklst.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Big ? "" : "...");
                        }
                        else if (Param.DisplayedLineHeight == (int)ViewMode.Medium)
                        { text = getdataformchecklst.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Medium) + (getdataformchecklst.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Medium ? "" : "..."); }
                        else
                        {
                            text = getdataformchecklst.Unkobi_DanTaNm.Substring(0, (int)ModeNamesUnassigned.Small) + (getdataformchecklst.Unkobi_DanTaNm.Length == (int)ModeNamesUnassigned.Small ? "" : "...");
                        }
                    }
                    catch
                    {
                        text = getdataformchecklst.Unkobi_DanTaNm;
                    }
                    staffDataUnassigned.StaffName = text + "/" + Lang["guide"];
                    staffDataUnassigned.IsGray = true;
                    staffDataUnassigned.StaffVehicle = 2;
                    if (!lstStaffsNamesUnassigned.Where(t => t.StaffID == staffDataUnassigned.StaffID).Any())
                    {
                        lstStaffsNamesUnassigned.Add(staffDataUnassigned);
                    }

                }
            }
        }
        for (var i = 9999999999999991; i < 9999999999999994; i++)
        {
            StaffData datanulldriver = new StaffData()
            {
                StaffID = (i).ToString(),
                StaffName = "",
                IsGray = true,
            };
            lstStaffsNamesUnassigned.Add(datanulldriver);
        }
        KyoSHeDatabyDatelst.Clear();
        int d = Param.Number_of_days;
        for (int i = 1; i <= d; i++)
        {
            KyoSHeDatabyDate KyoSHeDatabyDateitem = new KyoSHeDatabyDate();
            KyoSHeDatabyDateitem.date = Date.AddDays(i - 1);
            List<TPM_KyoSHeData> KyoSHeData = await TPM_KyoSHeDataService.Getdata(Date.AddDays(i - 1), branchlst.ToArray(), new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            foreach (var item in KyoSHeData)
            {
                KyoSHeData.Where(t => t.SyainCdSeq == item.SyainCdSeq && t.EndYmd == item.EndYmd).First().CompanyCdSeq = branchchart.Where(a => a.EigyoCdSeq == item.EigyoCdSeq).First().CompanyCdSeq;
            }
            KyoSHeDatabyDateitem.KyoSHelst = KyoSHeData;
            int[] iddriver = { 1, 2 };
            int[] idguider = { 3, 4 };
            List<int> SyainCdSeqdriverslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => iddriver.Contains(t.SyokumuCdSeq)).Select(t => t.SyainCdSeq).ToList();
            List<int> SyainCdSeqguiderslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => idguider.Contains(t.SyokumuCdSeq)).Select(t => t.SyainCdSeq).ToList();
            SyainCdSeqdriverslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => iddriver.Contains(t.SyokumuCdSeq)).Select(t => t.SyainCdSeq).ToList();
            SyainCdSeqguiderslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => idguider.Contains(t.SyokumuCdSeq)).Select(t => t.SyainCdSeq).ToList();
            KyoSHeDatabyDateitem.Kikyujdriverlst = await TPM_KyoSHeDataService.Getdataoff(Date.AddDays(i - 1), SyainCdSeqdriverslt.ToArray());
            KyoSHeDatabyDateitem.Kikyujguiderlst = await TPM_KyoSHeDataService.Getdataoff(Date.AddDays(i - 1), SyainCdSeqguiderslt.ToArray());
            KyoSHeDatabyDateitem.Kobandriverlst = await TPM_KyoSHeDataService.GetdataKoban(Date.AddDays(i - 1), SyainCdSeqdriverslt.ToArray());
            KyoSHeDatabyDatelst.Add(KyoSHeDatabyDateitem);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task renderlstStaffsLines()
    {
        try {
            lstStaffsNames = new List<StaffData>();
            lstStaffid = new List<int>();
            lstStaffsNames = await StaffService.GetStafforStaffChart(Date, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID, comlst, branchlst);
            lstStaffid = lstStaffsNames.Select(t => int.Parse(t.StaffID)).ToList();
            getdatacheckgrayline = new List<StaffsLines>();
            haiinDatachecklit = new List<CheckHaiinData>();
            DateTime st = Date;
            DateTime end = Date.AddDays(Param.Number_of_days - 1);
            lstStafflines.Clear();
            lstStafflines = await StaffsChartService.GetStaffdatabooking(st, end, 1, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            var settingtext = BusTooltipService.GetStafftooltip(new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            staffDayOff.Clear();
            lstStaffsLines.Clear();
            listdatecomment = await TPM_CalendDataService.Getdatabydays(1, 1, st.ToString("yyyyMMdd"), end.ToString("yyyyMMdd"), new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            staffDayOff = await TKD_KikyujDataService.Getdata(st, end, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID, lstStaffid);
            getdatacheckgrayline = await StaffsChartService.GetStaffdatagraybooking(currentReservation.YoyaKbnSeq, currentbranchfrom.EigyoCdSeq, currentbranchto.EigyoCdSeq, Param, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            lstStaffnonassignlines.Clear();
            lstStaffnonassignlines = await StaffsChartService.GetStaffdatanonassign(st, end, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            foreach (var item in getdatacheckgrayline)
            {
                if (!haiinDatachecklit.Where(t => t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen).Any())

                {
                    CheckHaiinData checkhaiin = new CheckHaiinData();
                    checkhaiin.Haisha_UkeNo = item.Haisha_UkeNo;
                    checkhaiin.Haisha_UnkRen = item.Haisha_UnkRen;
                    checkhaiin.Haisha_BunkRen = item.Haisha_BunkRen;
                    checkhaiin.Haisha_TeiDanNo = item.Haisha_TeiDanNo;
                    checkhaiin.Haisha_DrvJin = item.Haisha_DrvJin;
                    checkhaiin.Haisha_GuiSu = item.Haisha_GuiSu;
                    checkhaiin.Haiin_CountDriver = getdatacheckgrayline.Where(t => t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen && (t.Syokum_SyokumuKbn == 1 || t.Syokum_SyokumuKbn == 2) && item.Haiin_UkeNo != null).Count();
                    checkhaiin.Haiin_CountGuide = getdatacheckgrayline.Where(t => t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen && (t.Syokum_SyokumuKbn == 3 || t.Syokum_SyokumuKbn == 4) && item.Haiin_UkeNo != null).Count();
                    haiinDatachecklit.Add(checkhaiin);
                }
            }

            foreach (var item in lstStafflines)
            {
                ItemStaff staffItem = new ItemStaff();
                staffItem.HaiSKbn = item.Haisha_HaiSKbn;
                staffItem.BookingId = item.Haisha_UkeNo;
                staffItem.HaUnkRen = item.Haisha_UnkRen;
                staffItem.TeiDanNo = item.Haisha_TeiDanNo;
                staffItem.BunkRen = item.Haisha_BunkRen;
                staffItem.HenKai = 1;
                staffItem.Id = item.Yykasho_UkeCd.ToString();
                staffItem.UkeCd = item.Yykasho_UkeCd;
                staffItem.BusLine = item.Haiin_SyainCdSeq.ToString();
                staffItem.StartDate = item.Haisha_HaiSYmd;
                staffItem.TimeStart = int.Parse(item.Haisha_HaiSTime);
                staffItem.EndDate = item.Haisha_TouYmd;
                staffItem.TimeEnd = int.Parse(item.Haisha_TouChTime);
                staffItem.StartDateDefault = item.Haisha_SyuKoYmd;
                staffItem.EndDateDefault = item.Haisha_KikYmd;
                staffItem.TimeStartDefault = int.Parse(item.Haisha_SyuKoTime);
                staffItem.TimeEndDefault = int.Parse(item.Haisha_KikTime);
                staffItem.JyoSyaJin = item.Haisha_JyoSyaJin;
                staffItem.AllowEdit = true;
                var cssColors = await BusLineCssColorService.GetCssColor(item.Haisha_UkeNo, item.Haisha_UnkRen, item.Haisha_TeiDanNo, item.Haisha_BunkRen);
                staffItem.ColorLine = cssColors.cssColor;
                if (cssColors.isLock)
                {
                    staffItem.AllowDrop = false;
                    staffItem.AllowEdit = false;
                    staffItem.AllowCut = false;
                }
                staffItem.Status = 1;
                staffItem.CCSStyle = "";
                staffItem.Top = 0.3125;
                staffItem.Height = 2;
                staffItem.Name = "";
                staffItem.Width = BusScheduleHelper.calwidth(Width, item.Haisha_HaiSYmd, item.Haisha_HaiSTime, item.Haisha_TouYmd, item.Haisha_TouChTime, Param.Number_of_days);
                staffItem.Left = BusScheduleHelper.calleft(Width, item.Haisha_HaiSYmd, item.Haisha_HaiSTime, Param.Number_of_days, Date);
                staffItem.WidthDefault = BusScheduleHelper.calwidth(Width, item.Haisha_SyuKoYmd, item.Haisha_SyuKoTime, item.Haisha_KikYmd, item.Haisha_KikTime, Param.Number_of_days);
                staffItem.LeftDefault = BusScheduleHelper.calleft(Width, item.Haisha_SyuKoYmd, item.Haisha_SyuKoTime, Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, item.Haisha_HaiSYmd, item.Haisha_HaiSTime, Param.Number_of_days, Date);
                staffItem.DanTaNm = item.Unkobi_DanTaNm;
                staffItem.IkNm = item.Haisha_IkNm;
                staffItem.TokuiNm = "";
                staffItem.NumberDriver = item.Haisha_DrvJin;
                staffItem.NumberGuider = item.Haisha_GuiSu;

                staffItem.MinDate = item.Unkobi_HaiSYmd;
                staffItem.MinTime = int.Parse(item.Unkobi_HaiSTime);
                staffItem.Maxdate = item.Unkobi_TouYmd;
                staffItem.MaxTime = int.Parse(item.Unkobi_TouChTime);
                staffItem.HasYmd = item.Haisha_HaiSYmd;
                staffItem.Zeiritsu = 1;
                staffItem.BookingType = 1;
                staffItem.CodeKb_CodeKbn = "";
                staffItem.KSKbn = item.Haisha_KSKbn;
                staffItem.YouTblSeq = 0;
                staffItem.SyaSyu_SyaSyuNm = item.Syasyu_SyaSyuNm;
                staffItem.SyaSyu_SyaSyuNm_Haisha = "";
                staffItem.BusLineType = item.Haisha_UkeNo;
                //staffItem.BusName = item.Syasyu_SyaSyuNm == null ? "指定なし" : item.Syasyu_SyaSyuNm + "/" + BusBookingDataService.Getcodename(item.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                var codeKbnInfo = await BusBookingDataService.GetCodeKbnByCodeAndTenantId(item.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                staffItem.BusName = (item.Syasyu_SyaSyuNm == null ? "指定なし" : item.Syasyu_SyaSyuNm) + "/" + codeKbnInfo?.CodeKb_RyakuNm;
                staffItem.Tokisk_YouSRyakuNm = null;
                staffItem.Tokisk_SitenCdSeq = 0;
                staffItem.TokiSk_RyakuNm = item.Tokisk_RyakuNm;
                staffItem.TokiSt_RyakuNm = item.Tokist_RyakuNm;
                staffItem.Shuri_ShuriTblSeq = 0;
                staffItem.SyaSyuRen = item.Haisha_SyaSyuRen;
                staffItem.BranchId = 0;
                staffItem.CompanyId = 0;
                staffItem.BunKSyuJyn = 1;
                staffItem.UnkoJKbn = item.Unkobi_UnkoJKbn;
                staffItem.unSyuKoYmd = item.Unkobi_SyukoYmd;
                staffItem.unKikYmd = item.Unkobi_KikYmd;
                staffItem.unHaiSYmd = item.Unkobi_HaiSYmd;
                staffItem.unTouYmd = item.Unkobi_TouYmd;
                if (item.Haisha_BunKSyuJyn == 0)
                {
                    staffItem.CanBeDeleted = false;
                }
                if (item.Haisha_HaiSKbn == 2 || (item.Haisha_KSKbn == 1 && item.Haisha_YouTblSeq > 0) || (item.Haisha_KSKbn == 1 && item.Haisha_YouTblSeq == 0))
                {
                    staffItem.CanSimpledispatch = false;
                }
                staffItem.BusVehicle = 0;
                if (item.Syokum_SyokumuKbn == 1 || item.Syokum_SyokumuKbn == 2)
                {
                    staffItem.BusVehicle = 1;
                }
                if (item.Syokum_SyokumuKbn == 3 || item.Syokum_SyokumuKbn == 4)
                {
                    staffItem.BusVehicle = 2;
                }
                staffItem.haiInRen = item.Haiin_HaiInRen;
                if (item.Haisha_GuiSu > 0)
                {
                    staffItem.Text = "G　" + "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                    staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                    staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                    staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                    staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn5) + "</span>";
                }
                else
                {
                    staffItem.Text = "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                    staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                    staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                    staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                    staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(item, settingtext.SyaSenMjPtnKbn5) + "</span>";
                    //newBusbookingdata.Text = "<p style='color:"+settingtext.SyaSenMjPtnCol1+"'>"+getDisplayValue(i, settingtext.SyaSenMjPtnKbn1)+"</p>" + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5);
                }
                object text = new Object();
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn1) != "")
                {
                    text = "<span style=\"color:" + settingtext.SyaSenInfoPtnCol1 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn1) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn1) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn2) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol2 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn2) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn2) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn3) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol3 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn3) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn3) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn4) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol4 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn4) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn4) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn5) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol5 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn5) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn5) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn6) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol6 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn6) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn6) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn7) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol7 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn7) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn7) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn8) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol8 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn8) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn8) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn9) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol9 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn9) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn9) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn10) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol10 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn10) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn10) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn11) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol11 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn11) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn11) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn12) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol12 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn12) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn12) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn13) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol13 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn13) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn13) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn14) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol14 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn14) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn14) + "</span>";
                }
                if (getDisplayText(item, settingtext.SyaSenInfoPtnKbn15) != "")
                {
                    text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol15 + "\">" + getDisplayText(item, settingtext.SyaSenInfoPtnKbn15) + "：" + getDisplayValue(item, settingtext.SyaSenInfoPtnKbn15) + "</span>";
                }
                staffItem.Tooltip = text;
                staffItem.NippoKbn=(byte)item.Haisha_NippoKbn;
                lstStaffsLines.Add(staffItem);
            }
            staffDayOff = await TKD_KikyujDataService.Getdata(st, end, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID, lstStaffid);
            foreach (var item in staffDayOff)
            {
                ItemStaff staffItem = new ItemStaff();
                staffItem.BookingId = "0";
                staffItem.HaUnkRen = 0;
                staffItem.TeiDanNo = 0;
                staffItem.BunkRen = 0;
                staffItem.HenKai = 1;
                staffItem.Id = "";
                staffItem.BusLine = item.Kikyuj_SyainCdSeq.ToString();
                staffItem.StartDate = item.Kikyuj_KinKyuSYmd;
                staffItem.TimeStart = string.IsNullOrWhiteSpace(item.Kikyuj_KinKyuSTime)?0:int.Parse(item.Kikyuj_KinKyuSTime);
                staffItem.EndDate = item.Kikyuj_KinKyuEYmd;
                staffItem.TimeEnd = string.IsNullOrWhiteSpace(item.Kikyuj_KinKyuETime)?0:int.Parse(item.Kikyuj_KinKyuETime);
                staffItem.StartDateDefault = item.Kikyuj_KinKyuSYmd;
                staffItem.EndDateDefault = item.Kikyuj_KinKyuEYmd;
                staffItem.TimeStartDefault = string.IsNullOrWhiteSpace(item.Kikyuj_KinKyuSTime)?0:int.Parse(item.Kikyuj_KinKyuSTime);
                staffItem.TimeEndDefault = string.IsNullOrWhiteSpace(item.Kikyuj_KinKyuETime)?0:int.Parse(item.Kikyuj_KinKyuETime);
                staffItem.AllowEdit = false;
                staffItem.AllowDrop = true;
                staffItem.Status = 1;
                staffItem.CCSStyle = "";
                staffItem.Top = 0.3125;
                staffItem.IsRepair = true;
                staffItem.Height = 2;
                staffItem.Name = "";
                staffItem.Width = BusScheduleHelper.calwidth(Width, item.Kikyuj_KinKyuSYmd, staffItem.TimeStart.ToString("D4"), item.Kikyuj_KinKyuEYmd, staffItem.TimeEnd.ToString("D4"), Param.Number_of_days);
                staffItem.Left = BusScheduleHelper.calleft(Width, item.Kikyuj_KinKyuSYmd, staffItem.TimeStart.ToString("D4"), Param.Number_of_days, Date);
                staffItem.WidthDefault = BusScheduleHelper.calwidth(Width, item.Kikyuj_KinKyuSYmd, staffItem.TimeStartDefault.ToString("D4"), item.Kikyuj_KinKyuEYmd, staffItem.TimeEndDefault.ToString("D4"), Param.Number_of_days);
                staffItem.LeftDefault = BusScheduleHelper.calleft(Width, item.Kikyuj_KinKyuSYmd, staffItem.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, item.Kikyuj_KinKyuSYmd, staffItem.TimeStart.ToString("D4"), Param.Number_of_days, Date);
                staffItem.Text = "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + item.KinKyu_KinKyuNm + "</span>" + "　";
                staffItem.Zeiritsu = 1;
                staffItem.BookingType = 1;
                staffItem.CodeKb_CodeKbn = "";
                staffItem.KSKbn = 2;
                staffItem.YouTblSeq = 0;
                staffItem.SyaSyu_SyaSyuNm_Haisha = "";
                staffItem.Tokisk_YouSRyakuNm = null;
                staffItem.Tokisk_SitenCdSeq = 0;
                object text = new Object();
                DateTime startdatere;
                DateTime.TryParseExact(item.Kikyuj_KinKyuSYmd + staffItem.TimeStartDefault.ToString("D4"),
                               "yyyyMMddHHmm",
                               CultureInfo.CurrentCulture,
                               DateTimeStyles.None,
                               out startdatere);

                DateTime enddatere;
                DateTime.TryParseExact(item.Kikyuj_KinKyuEYmd + staffItem.TimeEndDefault.ToString("D4"),
                               "yyyyMMddHHmm",
                               CultureInfo.CurrentCulture,
                               DateTimeStyles.None,
                               out enddatere);
                text = "<span>期間：" + startdatere.ToString("yyyy/MM/dd (ddd) HH:mm") + "～" + enddatere.ToString("yyyy/MM/dd (ddd) HH:mm") + "</span>";
                text += "<span>内容：" + "</span>";
                text += "<span>備考：" + "</span>";
                staffItem.Tooltip = text;
                staffItem.KinKyuTblCdSeq = item.Kikyuj_KinKyuTblCdSeq;
                staffItem.KinKyuCdSeq = item.Kikyuj_KinKyuCdSeq;
                staffItem.BranchId = item.Eigyos_EigyoCdSeq;
                staffItem.CompanyId = item.Compny_CompanyCdSeq;
                staffItem.BunKSyuJyn = 1;
                if (staffItem.BunKSyuJyn == 0)
                {
                    staffItem.CanBeDeleted = false;
                }
                staffItem.CanSimpledispatch = true;
                staffItem.TransferDate = item.FuriYmd;
                staffItem.UnkoJKbn = 0;
                staffItem.BusVehicle = 0;
                staffItem.AllowCut = false;
                staffItem.ColorLine = item.KinKyu_ColKinKyu != "" ? item.KinKyu_ColKinKyu : "color-dayoff";
                lstStaffsLines.Add(staffItem);

            }

            foreach (var item in haiinDatachecklit)
            {
                var listdrivernonassign = lstStaffnonassignlines.Where(t => (t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen) && (t.Syokum_SyokumuKbn == 1 || t.Syokum_SyokumuKbn == 2)).ToList();
                var listguidenonassign = lstStaffnonassignlines.Where(t => (t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen) && (t.Syokum_SyokumuKbn == 3 || t.Syokum_SyokumuKbn == 4)).ToList();
                if (listdrivernonassign.Count() > 0)
                {
                    foreach (var itemdriver in listdrivernonassign)
                    {
                        ItemStaff staffItem = new ItemStaff();
                        staffItem.HaiSKbn = itemdriver.Haisha_HaiSKbn;
                        staffItem.BookingId = itemdriver.Haisha_UkeNo;
                        staffItem.HaUnkRen = itemdriver.Haisha_UnkRen;
                        staffItem.TeiDanNo = itemdriver.Haisha_TeiDanNo;
                        staffItem.BunkRen = itemdriver.Haisha_BunkRen;
                        staffItem.HenKai = 1;
                        staffItem.Id = itemdriver.Yykasho_UkeCd.ToString();
                        staffItem.UkeCd = itemdriver.Yykasho_UkeCd;
                        staffItem.BusLine = itemdriver.Haisha_UkeNo + itemdriver.Haisha_UnkRen + "1";
                        staffItem.StartDate = itemdriver.Haisha_HaiSYmd;
                        staffItem.TimeStart = int.Parse(itemdriver.Haisha_HaiSTime);
                        staffItem.EndDate = itemdriver.Haisha_TouYmd;
                        staffItem.TimeEnd = int.Parse(itemdriver.Haisha_TouChTime);
                        staffItem.StartDateDefault = itemdriver.Haisha_SyuKoYmd;
                        staffItem.EndDateDefault = itemdriver.Haisha_KikYmd;
                        staffItem.TimeStartDefault = int.Parse(itemdriver.Haisha_SyuKoTime);
                        staffItem.TimeEndDefault = int.Parse(itemdriver.Haisha_KikTime);
                        staffItem.JyoSyaJin = itemdriver.Haisha_JyoSyaJin;
                        staffItem.AllowEdit = true;
                        staffItem.AllowEdit = false;
                        staffItem.ColorLine = "color-1";
                        if (item.Haisha_DrvJin > 1)
                        {
                            staffItem.ColorLine += " border-black";
                        }
                        staffItem.Status = 1;
                        staffItem.CCSStyle = "";
                        staffItem.Top = 0.3125;
                        staffItem.Height = 2;
                        staffItem.Name = "";
                        staffItem.Width = BusScheduleHelper.calwidth(Width, itemdriver.Haisha_HaiSYmd, itemdriver.Haisha_HaiSTime, itemdriver.Haisha_TouYmd, itemdriver.Haisha_TouChTime, Param.Number_of_days);
                        staffItem.Left = BusScheduleHelper.calleft(Width, itemdriver.Haisha_HaiSYmd, itemdriver.Haisha_HaiSTime, Param.Number_of_days, Date);
                        staffItem.WidthDefault = BusScheduleHelper.calwidth(Width, itemdriver.Haisha_SyuKoYmd, itemdriver.Haisha_SyuKoTime, itemdriver.Haisha_KikYmd, itemdriver.Haisha_KikTime, Param.Number_of_days);
                        staffItem.LeftDefault = BusScheduleHelper.calleft(Width, itemdriver.Haisha_SyuKoYmd, itemdriver.Haisha_SyuKoTime, Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, itemdriver.Haisha_HaiSYmd, itemdriver.Haisha_HaiSTime, Param.Number_of_days, Date);
                        staffItem.DanTaNm = itemdriver.Haisha_DanTaNm2;
                        staffItem.IkNm = itemdriver.Haisha_IkNm;
                        staffItem.TokuiNm = "";
                        staffItem.NumberDriver = item.Haisha_DrvJin;
                        staffItem.NumberGuider = item.Haisha_GuiSu;

                        staffItem.MinDate = itemdriver.Unkobi_HaiSYmd;
                        staffItem.MinTime = int.Parse(itemdriver.Unkobi_HaiSTime);
                        staffItem.Maxdate = itemdriver.Unkobi_TouYmd;
                        staffItem.MaxTime = int.Parse(itemdriver.Unkobi_TouChTime);
                        staffItem.HasYmd = itemdriver.Haisha_HaiSYmd;
                        staffItem.Zeiritsu = 1;
                        staffItem.BookingType = 1;
                        staffItem.CodeKb_CodeKbn = "";
                        staffItem.KSKbn = itemdriver.Haisha_KSKbn;
                        staffItem.YouTblSeq = 0;
                        staffItem.SyaSyu_SyaSyuNm = itemdriver.Syasyu_SyaSyuNm;
                        staffItem.SyaSyu_SyaSyuNm_Haisha = "";
                        staffItem.BusLineType = item.Haisha_UkeNo;
                        var codeKbnInfo = await BusBookingDataService.GetCodeKbnByCodeAndTenantId(itemdriver.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                        staffItem.BusName = (itemdriver.Syasyu_SyaSyuNm == null ? "指定なし" : itemdriver.Syasyu_SyaSyuNm) + "/" + codeKbnInfo?.CodeKb_RyakuNm;
                        //staffItem.BusName = itemstaff.Syasyu_SyaSyuNm == null ? "指定なし" : itemstaff.Syasyu_SyaSyuNm + "/" + BusBookingDataService.Getcodename(itemstaff.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID); ;
                        staffItem.Tokisk_YouSRyakuNm = null;
                        staffItem.Tokisk_SitenCdSeq = 0;
                        staffItem.TokiSk_RyakuNm = itemdriver.Tokisk_RyakuNm;
                        staffItem.TokiSt_RyakuNm = itemdriver.Tokist_RyakuNm;
                        staffItem.Shuri_ShuriTblSeq = 0;
                        staffItem.SyaSyuRen = itemdriver.Haisha_SyaSyuRen;
                        staffItem.BranchId = 0;
                        staffItem.CompanyId = 0;
                        staffItem.BunKSyuJyn = 1;
                        if (staffItem.BunKSyuJyn == 0)
                        {
                            staffItem.CanBeDeleted = false;
                        }
                        staffItem.CanSimpledispatch = true;
                        staffItem.BusVehicle = 1;
                        staffItem.UnkoJKbn = itemdriver.Unkobi_UnkoJKbn;
                        staffItem.unSyuKoYmd = itemdriver.Unkobi_SyukoYmd;
                        staffItem.unKikYmd = itemdriver.Unkobi_KikYmd;
                        staffItem.unHaiSYmd = itemdriver.Unkobi_HaiSYmd;
                        staffItem.unTouYmd = itemdriver.Unkobi_TouYmd;
                        staffItem.haiInRen = itemdriver.Haiin_HaiInRen;
                        staffItem.isGray = true;
                        if (item.Haisha_GuiSu > 0)
                        {
                            staffItem.Text = "G　" + "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn5) + "</span>";
                        }
                        else
                        {
                            staffItem.Text = "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn5) + "</span>";
                            //newBusbookingdata.Text = "<p style='color:"+settingtext.SyaSenMjPtnCol1+"'>"+getDisplayValue(i, settingtext.SyaSenMjPtnKbn1)+"</p>" + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5);
                        }
                        object text = new Object();
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn1) != "")
                        {
                            text = "<span style=\"color:" + settingtext.SyaSenInfoPtnCol1 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn1) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn1) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn2) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol2 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn2) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn2) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn3) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol3 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn3) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn3) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn4) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol4 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn4) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn4) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn5) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol5 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn5) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn5) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn6) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol6 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn6) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn6) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn7) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol7 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn7) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn7) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn8) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol8 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn8) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn8) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn9) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol9 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn9) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn9) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn10) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol10 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn10) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn10) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn11) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol11 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn11) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn11) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn12) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol12 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn12) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn12) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn13) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol13 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn13) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn13) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn14) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol14 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn14) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn14) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn15) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol15 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn15) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn15) + "</span>";
                        }
                        staffItem.Tooltip = text;
                        listexHaiInRen.Add(staffItem.haiInRen);
                        lstStaffsLines.Add(staffItem);
                    }
                }
                listexHaiInRen = new HashSet<int>();
                for (int i = 1; i <= item.Haiin_CountDriver + item.Haiin_CountGuide + listdrivernonassign.Count(); i++)
                {
                    listexHaiInRen.Add(i);
                }
                if (item.Haisha_DrvJin - (item.Haiin_CountDriver + listdrivernonassign.Count()) > 0)
                {
                    for (int i = 1; i <= (item.Haisha_DrvJin - (item.Haiin_CountDriver + listdrivernonassign.Count())); i++)
                    {
                        var itemstaff = getdatacheckgrayline.Where(t => t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen).First();
                        ItemStaff staffItem = new ItemStaff();
                        staffItem.HaiSKbn = itemstaff.Haisha_HaiSKbn;
                        staffItem.BookingId = itemstaff.Haisha_UkeNo;
                        staffItem.HaUnkRen = itemstaff.Haisha_UnkRen;
                        staffItem.TeiDanNo = itemstaff.Haisha_TeiDanNo;
                        staffItem.BunkRen = itemstaff.Haisha_BunkRen;
                        staffItem.HenKai = 1;
                        staffItem.Id = itemstaff.Yykasho_UkeCd.ToString();
                        staffItem.UkeCd = itemstaff.Yykasho_UkeCd;
                        staffItem.BusLine = itemstaff.Haisha_UkeNo + itemstaff.Haisha_UnkRen + "1";
                        staffItem.StartDate = itemstaff.Haisha_HaiSYmd;
                        staffItem.TimeStart = int.Parse(itemstaff.Haisha_HaiSTime);
                        staffItem.EndDate = itemstaff.Haisha_TouYmd;
                        staffItem.TimeEnd = int.Parse(itemstaff.Haisha_TouChTime);
                        staffItem.StartDateDefault = itemstaff.Haisha_SyuKoYmd;
                        staffItem.EndDateDefault = itemstaff.Haisha_KikYmd;
                        staffItem.TimeStartDefault = int.Parse(itemstaff.Haisha_SyuKoTime);
                        staffItem.TimeEndDefault = int.Parse(itemstaff.Haisha_KikTime);
                        staffItem.JyoSyaJin = itemstaff.Haisha_JyoSyaJin;
                        staffItem.AllowEdit = true;
                        staffItem.AllowEdit = false;
                        staffItem.ColorLine = "color-1";
                        if (item.Haisha_DrvJin > 1)
                        {
                            staffItem.ColorLine += " border-black";
                        }
                        staffItem.Status = 1;
                        staffItem.CCSStyle = "";
                        staffItem.Top = 0.3125;
                        staffItem.Height = 2;
                        staffItem.Name = "";
                        staffItem.Width = BusScheduleHelper.calwidth(Width, itemstaff.Haisha_HaiSYmd, itemstaff.Haisha_HaiSTime, itemstaff.Haisha_TouYmd, itemstaff.Haisha_TouChTime, Param.Number_of_days);
                        staffItem.Left = BusScheduleHelper.calleft(Width, itemstaff.Haisha_HaiSYmd, itemstaff.Haisha_HaiSTime, Param.Number_of_days, Date);
                        staffItem.WidthDefault = BusScheduleHelper.calwidth(Width, itemstaff.Haisha_SyuKoYmd, itemstaff.Haisha_SyuKoTime, itemstaff.Haisha_KikYmd, itemstaff.Haisha_KikTime, Param.Number_of_days);
                        staffItem.LeftDefault = BusScheduleHelper.calleft(Width, itemstaff.Haisha_SyuKoYmd, itemstaff.Haisha_SyuKoTime, Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, itemstaff.Haisha_HaiSYmd, itemstaff.Haisha_HaiSTime, Param.Number_of_days, Date);
                        staffItem.DanTaNm = itemstaff.Haisha_DanTaNm2;
                        staffItem.IkNm = itemstaff.Haisha_IkNm;
                        staffItem.TokuiNm = "";
                        staffItem.NumberDriver = item.Haisha_DrvJin;
                        staffItem.NumberGuider = item.Haisha_GuiSu;
                        if (item.Haisha_GuiSu > 0)
                        {
                            staffItem.Text = "G　" + "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn5) + "</span>";
                        }
                        else
                        {
                            staffItem.Text = "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn5) + "</span>";
                            //newBusbookingdata.Text = "<p style='color:"+settingtext.SyaSenMjPtnCol1+"'>"+getDisplayValue(i, settingtext.SyaSenMjPtnKbn1)+"</p>" + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5);
                        }
                        staffItem.MinDate = itemstaff.Unkobi_HaiSYmd;
                        staffItem.MinTime = int.Parse(itemstaff.Unkobi_HaiSTime);
                        staffItem.Maxdate = itemstaff.Unkobi_TouYmd;
                        staffItem.MaxTime = int.Parse(itemstaff.Unkobi_TouChTime);
                        staffItem.HasYmd = itemstaff.Haisha_HaiSYmd;
                        staffItem.Zeiritsu = 1;
                        staffItem.BookingType = 1;
                        staffItem.CodeKb_CodeKbn = "";
                        staffItem.KSKbn = itemstaff.Haisha_KSKbn;
                        staffItem.YouTblSeq = 0;
                        staffItem.SyaSyu_SyaSyuNm = itemstaff.Syasyu_SyaSyuNm;
                        staffItem.SyaSyu_SyaSyuNm_Haisha = "";
                        staffItem.BusLineType = item.Haisha_UkeNo;
                        var codeKbnInfo = await BusBookingDataService.GetCodeKbnByCodeAndTenantId(itemstaff.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                        staffItem.BusName = (itemstaff.Syasyu_SyaSyuNm == null ? "指定なし" : itemstaff.Syasyu_SyaSyuNm) + "/" + codeKbnInfo?.CodeKb_RyakuNm;
                        //staffItem.BusName = itemstaff.Syasyu_SyaSyuNm == null ? "指定なし" : itemstaff.Syasyu_SyaSyuNm + "/" + BusBookingDataService.Getcodename(itemstaff.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID); ;
                        staffItem.Tokisk_YouSRyakuNm = null;
                        staffItem.Tokisk_SitenCdSeq = 0;
                        object text = new Object();
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn1) != "")
                        {
                            text = "<span style=\"color:" + settingtext.SyaSenInfoPtnCol1 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn1) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn1) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn2) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol2 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn2) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn2) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn3) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol3 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn3) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn3) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn4) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol4 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn4) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn4) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn5) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol5 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn5) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn5) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn6) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol6 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn6) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn6) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn7) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol7 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn7) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn7) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn8) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol8 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn8) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn8) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn9) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol9 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn9) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn9) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn10) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol10 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn10) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn10) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn11) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol11 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn11) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn11) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn12) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol12 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn12) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn12) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn13) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol13 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn13) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn13) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn14) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol14 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn14) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn14) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn15) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol15 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn15) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn15) + "</span>";
                        }
                        staffItem.Tooltip = text;
                        staffItem.TokiSk_RyakuNm = itemstaff.Tokisk_RyakuNm;
                        staffItem.TokiSt_RyakuNm = itemstaff.Tokist_RyakuNm;
                        staffItem.Shuri_ShuriTblSeq = 0;
                        staffItem.SyaSyuRen = itemstaff.Haisha_SyaSyuRen;
                        staffItem.BranchId = 0;
                        staffItem.CompanyId = 0;
                        staffItem.BunKSyuJyn = 1;
                        if (staffItem.BunKSyuJyn == 0)
                        {
                            staffItem.CanBeDeleted = false;
                        }
                        staffItem.CanSimpledispatch = true;
                        staffItem.BusVehicle = 1;
                        staffItem.UnkoJKbn = itemstaff.Unkobi_UnkoJKbn;
                        staffItem.unSyuKoYmd = itemstaff.Unkobi_SyukoYmd;
                        staffItem.unKikYmd = itemstaff.Unkobi_KikYmd;
                        staffItem.unHaiSYmd = itemstaff.Unkobi_HaiSYmd;
                        staffItem.unTouYmd = itemstaff.Unkobi_TouYmd;
                        staffItem.haiInRen = GetRamdomHaiInRen(listexHaiInRen);
                        staffItem.isGray = true;
                        listexHaiInRen.Add(staffItem.haiInRen);
                        lstStaffsLines.Add(staffItem);
                    }
                }
                if (listguidenonassign.Count() > 0)
                {
                    foreach (var itemdriver in listguidenonassign)
                    {
                        ItemStaff staffItem = new ItemStaff();
                        staffItem.HaiSKbn = itemdriver.Haisha_HaiSKbn;
                        staffItem.BookingId = itemdriver.Haisha_UkeNo;
                        staffItem.HaUnkRen = itemdriver.Haisha_UnkRen;
                        staffItem.TeiDanNo = itemdriver.Haisha_TeiDanNo;
                        staffItem.BunkRen = itemdriver.Haisha_BunkRen;
                        staffItem.HenKai = 1;
                        staffItem.Id = itemdriver.Yykasho_UkeCd.ToString();
                        staffItem.UkeCd = itemdriver.Yykasho_UkeCd;
                        staffItem.BusLine = itemdriver.Haisha_UkeNo + itemdriver.Haisha_UnkRen + "2";
                        staffItem.StartDate = itemdriver.Haisha_HaiSYmd;
                        staffItem.TimeStart = int.Parse(itemdriver.Haisha_HaiSTime);
                        staffItem.EndDate = itemdriver.Haisha_TouYmd;
                        staffItem.TimeEnd = int.Parse(itemdriver.Haisha_TouChTime);
                        staffItem.StartDateDefault = itemdriver.Haisha_SyuKoYmd;
                        staffItem.EndDateDefault = itemdriver.Haisha_KikYmd;
                        staffItem.TimeStartDefault = int.Parse(itemdriver.Haisha_SyuKoTime);
                        staffItem.TimeEndDefault = int.Parse(itemdriver.Haisha_KikTime);
                        staffItem.JyoSyaJin = itemdriver.Haisha_JyoSyaJin;
                        staffItem.AllowEdit = true;
                        staffItem.AllowEdit = false;
                        staffItem.ColorLine = "color-1";
                        if (item.Haisha_DrvJin > 1)
                        {
                            staffItem.ColorLine += " border-black";
                        }
                        staffItem.Status = 1;
                        staffItem.CCSStyle = "";
                        staffItem.Top = 0.3125;
                        staffItem.Height = 2;
                        staffItem.Name = "";
                        staffItem.Width = BusScheduleHelper.calwidth(Width, itemdriver.Haisha_HaiSYmd, itemdriver.Haisha_HaiSTime, itemdriver.Haisha_TouYmd, itemdriver.Haisha_TouChTime, Param.Number_of_days);
                        staffItem.Left = BusScheduleHelper.calleft(Width, itemdriver.Haisha_HaiSYmd, itemdriver.Haisha_HaiSTime, Param.Number_of_days, Date);
                        staffItem.WidthDefault = BusScheduleHelper.calwidth(Width, itemdriver.Haisha_SyuKoYmd, itemdriver.Haisha_SyuKoTime, itemdriver.Haisha_KikYmd, itemdriver.Haisha_KikTime, Param.Number_of_days);
                        staffItem.LeftDefault = BusScheduleHelper.calleft(Width, itemdriver.Haisha_SyuKoYmd, itemdriver.Haisha_SyuKoTime, Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, itemdriver.Haisha_HaiSYmd, itemdriver.Haisha_HaiSTime, Param.Number_of_days, Date);
                        staffItem.DanTaNm = itemdriver.Haisha_DanTaNm2;
                        staffItem.IkNm = itemdriver.Haisha_IkNm;
                        staffItem.TokuiNm = "";
                        staffItem.NumberDriver = item.Haisha_DrvJin;
                        staffItem.NumberGuider = item.Haisha_GuiSu;
                        if (item.Haisha_GuiSu > 0)
                        {
                            staffItem.Text = "G　" + "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn5) + "</span>";
                        }
                        else
                        {
                            staffItem.Text = "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(itemdriver, settingtext.SyaSenMjPtnKbn5) + "</span>";
                            //newBusbookingdata.Text = "<p style='color:"+settingtext.SyaSenMjPtnCol1+"'>"+getDisplayValue(i, settingtext.SyaSenMjPtnKbn1)+"</p>" + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5);
                        }
                        staffItem.MinDate = itemdriver.Unkobi_HaiSYmd;
                        staffItem.MinTime = int.Parse(itemdriver.Unkobi_HaiSTime);
                        staffItem.Maxdate = itemdriver.Unkobi_TouYmd;
                        staffItem.MaxTime = int.Parse(itemdriver.Unkobi_TouChTime);
                        staffItem.HasYmd = itemdriver.Haisha_HaiSYmd;
                        staffItem.Zeiritsu = 1;
                        staffItem.BookingType = 1;
                        staffItem.CodeKb_CodeKbn = "";
                        staffItem.KSKbn = itemdriver.Haisha_KSKbn;
                        staffItem.YouTblSeq = 0;
                        staffItem.SyaSyu_SyaSyuNm = itemdriver.Syasyu_SyaSyuNm;
                        staffItem.SyaSyu_SyaSyuNm_Haisha = "";
                        staffItem.BusLineType = item.Haisha_UkeNo;
                        var codeKbnInfo = await BusBookingDataService.GetCodeKbnByCodeAndTenantId(itemdriver.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                        staffItem.BusName = (itemdriver.Syasyu_SyaSyuNm == null ? "指定なし" : itemdriver.Syasyu_SyaSyuNm) + "/" + codeKbnInfo?.CodeKb_RyakuNm;
                        //staffItem.BusName = itemstaff.Syasyu_SyaSyuNm == null ? "指定なし" : itemstaff.Syasyu_SyaSyuNm + "/" + BusBookingDataService.Getcodename(itemstaff.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID); ;
                        staffItem.Tokisk_YouSRyakuNm = null;
                        staffItem.Tokisk_SitenCdSeq = 0;
                        object text = new Object();
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn1) != "")
                        {
                            text = "<span style=\"color:" + settingtext.SyaSenInfoPtnCol1 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn1) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn1) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn2) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol2 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn2) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn2) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn3) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol3 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn3) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn3) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn4) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol4 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn4) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn4) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn5) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol5 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn5) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn5) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn6) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol6 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn6) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn6) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn7) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol7 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn7) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn7) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn8) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol8 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn8) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn8) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn9) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol9 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn9) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn9) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn10) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol10 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn10) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn10) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn11) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol11 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn11) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn11) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn12) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol12 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn12) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn12) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn13) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol13 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn13) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn13) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn14) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol14 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn14) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn14) + "</span>";
                        }
                        if (getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn15) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol15 + "\">" + getDisplayText(itemdriver, settingtext.SyaSenInfoPtnKbn15) + "：" + getDisplayValue(itemdriver, settingtext.SyaSenInfoPtnKbn15) + "</span>";
                        }
                        staffItem.Tooltip = text;
                        staffItem.TokiSk_RyakuNm = itemdriver.Tokisk_RyakuNm;
                        staffItem.TokiSt_RyakuNm = itemdriver.Tokist_RyakuNm;
                        staffItem.Shuri_ShuriTblSeq = 0;
                        staffItem.SyaSyuRen = itemdriver.Haisha_SyaSyuRen;
                        staffItem.BranchId = 0;
                        staffItem.CompanyId = 0;
                        staffItem.BunKSyuJyn = 1;
                        if (staffItem.BunKSyuJyn == 0)
                        {
                            staffItem.CanBeDeleted = false;
                        }
                        staffItem.CanSimpledispatch = true;
                        staffItem.BusVehicle = 2;
                        staffItem.UnkoJKbn = itemdriver.Unkobi_UnkoJKbn;
                        staffItem.unSyuKoYmd = itemdriver.Unkobi_SyukoYmd;
                        staffItem.unKikYmd = itemdriver.Unkobi_KikYmd;
                        staffItem.unHaiSYmd = itemdriver.Unkobi_HaiSYmd;
                        staffItem.unTouYmd = itemdriver.Unkobi_TouYmd;
                        staffItem.haiInRen = itemdriver.Haiin_HaiInRen;
                        staffItem.isGray = true;
                        listexHaiInRen.Add(staffItem.haiInRen);
                        lstStaffsLines.Add(staffItem);
                    }
                }
                if (item.Haisha_GuiSu - (item.Haiin_CountGuide + listguidenonassign.Count()) > 0)
                {
                    for (int i = 1; i <= (item.Haisha_GuiSu - (item.Haiin_CountGuide + listguidenonassign.Count())); i++)
                    {
                        var itemstaff = getdatacheckgrayline.Where(t => t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_UkeNo == item.Haisha_UkeNo && t.Haisha_TeiDanNo == item.Haisha_TeiDanNo && t.Haisha_BunkRen == item.Haisha_BunkRen).First();
                        ItemStaff staffItem = new ItemStaff();
                        staffItem.HaiSKbn = itemstaff.Haisha_HaiSKbn;
                        staffItem.BookingId = itemstaff.Haisha_UkeNo;
                        staffItem.HaUnkRen = itemstaff.Haisha_UnkRen;
                        staffItem.TeiDanNo = itemstaff.Haisha_TeiDanNo;
                        staffItem.BunkRen = itemstaff.Haisha_BunkRen;
                        staffItem.HenKai = 1;
                        staffItem.Id = itemstaff.Yykasho_UkeCd.ToString();
                        staffItem.UkeCd = itemstaff.Yykasho_UkeCd;
                        staffItem.BusLine = itemstaff.Haisha_UkeNo + itemstaff.Haisha_UnkRen + "2";
                        staffItem.StartDate = itemstaff.Haisha_HaiSYmd;
                        staffItem.TimeStart = int.Parse(itemstaff.Haisha_HaiSTime);
                        staffItem.EndDate = itemstaff.Haisha_TouYmd;
                        staffItem.TimeEnd = int.Parse(itemstaff.Haisha_TouChTime);
                        staffItem.StartDateDefault = itemstaff.Haisha_SyuKoYmd;
                        staffItem.EndDateDefault = itemstaff.Haisha_KikYmd;
                        staffItem.TimeStartDefault = int.Parse(itemstaff.Haisha_SyuKoTime);
                        staffItem.TimeEndDefault = int.Parse(itemstaff.Haisha_KikTime);
                        staffItem.JyoSyaJin = itemstaff.Haisha_JyoSyaJin;
                        staffItem.AllowEdit = true;
                        staffItem.AllowEdit = false;
                        staffItem.ColorLine = "color-1";
                        if (item.Haisha_DrvJin > 1)
                        {
                            staffItem.ColorLine += " border-black";
                        }
                        staffItem.Status = 1;
                        staffItem.CCSStyle = "";
                        staffItem.Top = 0.3125;
                        staffItem.Height = 2;
                        staffItem.Name = "";
                        staffItem.Width = BusScheduleHelper.calwidth(Width, itemstaff.Haisha_HaiSYmd, itemstaff.Haisha_HaiSTime, itemstaff.Haisha_TouYmd, itemstaff.Haisha_TouChTime, Param.Number_of_days);
                        staffItem.Left = BusScheduleHelper.calleft(Width, itemstaff.Haisha_HaiSYmd, itemstaff.Haisha_HaiSTime, Param.Number_of_days, Date);
                        staffItem.WidthDefault = BusScheduleHelper.calwidth(Width, itemstaff.Haisha_SyuKoYmd, itemstaff.Haisha_SyuKoTime, itemstaff.Haisha_KikYmd, itemstaff.Haisha_KikTime, Param.Number_of_days);
                        staffItem.LeftDefault = BusScheduleHelper.calleft(Width, itemstaff.Haisha_SyuKoYmd, itemstaff.Haisha_SyuKoTime, Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, itemstaff.Haisha_HaiSYmd, itemstaff.Haisha_HaiSTime, Param.Number_of_days, Date);
                        staffItem.DanTaNm = itemstaff.Haisha_DanTaNm2;
                        staffItem.IkNm = itemstaff.Haisha_IkNm;
                        staffItem.TokuiNm = "";
                        staffItem.NumberDriver = item.Haisha_DrvJin;
                        staffItem.NumberGuider = item.Haisha_GuiSu;
                        if (item.Haisha_GuiSu > 0)
                        {
                            staffItem.Text = "G　" + "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn5) + "</span>";
                        }
                        else
                        {
                            staffItem.Text = "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                            staffItem.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(itemstaff, settingtext.SyaSenMjPtnKbn5) + "</span>";
                            //newBusbookingdata.Text = "<p style='color:"+settingtext.SyaSenMjPtnCol1+"'>"+getDisplayValue(i, settingtext.SyaSenMjPtnKbn1)+"</p>" + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5);
                        }
                        staffItem.MinDate = itemstaff.Unkobi_HaiSYmd;
                        staffItem.MinTime = int.Parse(itemstaff.Unkobi_HaiSTime);
                        staffItem.Maxdate = itemstaff.Unkobi_TouYmd;
                        staffItem.MaxTime = int.Parse(itemstaff.Unkobi_TouChTime);
                        staffItem.HasYmd = itemstaff.Haisha_HaiSYmd;
                        staffItem.Zeiritsu = 1;
                        staffItem.BookingType = 1;
                        staffItem.CodeKb_CodeKbn = "";
                        staffItem.KSKbn = itemstaff.Haisha_KSKbn;
                        staffItem.YouTblSeq = 0;
                        staffItem.SyaSyu_SyaSyuNm = itemstaff.Syasyu_SyaSyuNm;
                        staffItem.SyaSyu_SyaSyuNm_Haisha = "";
                        staffItem.BusLineType = item.Haisha_UkeNo;
                        var codeKbnInfo = await BusBookingDataService.GetCodeKbnByCodeAndTenantId(itemstaff.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
                        staffItem.BusName = (itemstaff.Syasyu_SyaSyuNm == null ? "指定なし" : itemstaff.Syasyu_SyaSyuNm) + "/" + codeKbnInfo?.CodeKb_RyakuNm;
                        //staffItem.BusName = itemstaff.Syasyu_SyaSyuNm == null ? "指定なし" : itemstaff.Syasyu_SyaSyuNm + "/" + BusBookingDataService.Getcodename(itemstaff.Yyksyu_KataKbn, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID); ;
                        staffItem.Tokisk_YouSRyakuNm = null;
                        staffItem.Tokisk_SitenCdSeq = 0;
                        object text = new Object();
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn1) != "")
                        {
                            text = "<span style=\"color:" + settingtext.SyaSenInfoPtnCol1 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn1) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn1) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn2) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol2 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn2) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn2) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn3) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol3 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn3) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn3) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn4) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol4 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn4) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn4) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn5) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol5 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn5) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn5) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn6) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol6 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn6) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn6) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn7) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol7 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn7) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn7) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn8) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol8 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn8) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn8) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn9) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol9 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn9) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn9) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn10) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol10 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn10) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn10) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn11) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol11 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn11) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn11) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn12) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol12 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn12) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn12) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn13) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol13 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn13) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn13) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn14) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol14 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn14) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn14) + "</span>";
                        }
                        if (getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn15) != "")
                        {
                            text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol15 + "\">" + getDisplayText(itemstaff, settingtext.SyaSenInfoPtnKbn15) + "：" + getDisplayValue(itemstaff, settingtext.SyaSenInfoPtnKbn15) + "</span>";
                        }
                        staffItem.Tooltip = text;
                        staffItem.TokiSk_RyakuNm = itemstaff.Tokisk_RyakuNm;
                        staffItem.TokiSt_RyakuNm = itemstaff.Tokist_RyakuNm;
                        staffItem.Shuri_ShuriTblSeq = 0;
                        staffItem.SyaSyuRen = itemstaff.Haisha_SyaSyuRen;
                        staffItem.BranchId = 0;
                        staffItem.CompanyId = 0;
                        staffItem.BunKSyuJyn = 1;
                        staffItem.CanBeDeleted = false;
                        staffItem.CanSimpledispatch = true;
                        staffItem.UnkoJKbn = 0;
                        staffItem.BusVehicle = 2;
                        staffItem.UnkoJKbn = itemstaff.Unkobi_UnkoJKbn;
                        staffItem.unSyuKoYmd = itemstaff.Unkobi_SyukoYmd;
                        staffItem.unKikYmd = itemstaff.Unkobi_KikYmd;
                        staffItem.unHaiSYmd = itemstaff.Unkobi_HaiSYmd;
                        staffItem.unTouYmd = itemstaff.Unkobi_TouYmd;
                        staffItem.haiInRen = GetRamdomHaiInRen(listexHaiInRen);
                        staffItem.isGray = true;
                        listexHaiInRen.Add(staffItem.haiInRen);
                        lstStaffsLines.Add(staffItem);
                    }
                }
            }
        }
        catch(Exception ex)
        {  }
    }
    private static Action _action;
    [JSInvokable]
    public static void pressKeyStaffsChart()
    {
        _action.Invoke();
    }

    private void PressEsc()
    {
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = false;
        StateHasChanged();
    }
    public int GetRamdomHaiInRen(HashSet<int> exlist)
    {
        //var exclude = new HashSet<int>() { 5, 7, 17, 23 };
        var exclude = exlist;
        var range = Enumerable.Range(1, 10).Where(i => !exclude.Contains(i));

        var rand = new System.Random();
        int index = rand.Next(0, 10 - exclude.Count);
        return range.ElementAt(index);
    }
    #endregion
    /// <summary>
    ///
    /// </summary>
    /// <param name="i"></param>
    /// <param name="SyaSenMjPtnKbn1"></param>
    /// <returns></returns>
    public string getDisplayText(StaffsLines i, int SyaSenMjPtnKbn1)
    {
        var jsonString = Newtonsoft.Json.JsonConvert.SerializeObject(i);
        var obj = JObject.Parse(jsonString);
        string textcont = "";
        if (LineInfoListData.lineInfoItem.Where(t => t.Id == SyaSenMjPtnKbn1).ToList().Count() > 0)
        {
            textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).text;
        }
        return textcont;
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="i"></param>
    /// <param name="SyaSenMjPtnKbn1"></param>
    /// <returns></returns>
    public string getDisplayValue(StaffsLines i, int SyaSenMjPtnKbn1)
    {
        var jsonString = Newtonsoft.Json.JsonConvert.SerializeObject(i);
        var obj = JObject.Parse(jsonString);
        string text = "";
        if (SyaSenMjPtnKbn1 == 5)
        {
            if (i.Haisha_SyuEigCdSeq != 0)
            {
                text = TPM_EigyosDataService.Getbranchbyid(i.Haisha_SyuEigCdSeq);
            }
            else
            {
                text = TPM_EigyosDataService.Getbranchbyid(i.Yykasho_UkeEigCdSeq);
            }

        }
         else if(SyaSenMjPtnKbn1 == 9)
        {
            text=i.Tokisk_RyakuNm+"  "+i.Tokist_RyakuNm;
        }
        else if(SyaSenMjPtnKbn1 == 11||SyaSenMjPtnKbn1 == 12||SyaSenMjPtnKbn1 == 14||SyaSenMjPtnKbn1 == 18||SyaSenMjPtnKbn1 == 21||SyaSenMjPtnKbn1 == 23||SyaSenMjPtnKbn1 == 27)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            string somestring = (string)obj.SelectToken(textcont);
            if(!string.IsNullOrWhiteSpace(somestring))
            {
                string newhour = somestring.Substring(0, 2);
                string newmun = somestring.Substring(2, 2);
                text = newhour + ":" + newmun;;
            }
            else
            {
                text ="";
            }
        }
        else if(SyaSenMjPtnKbn1 == 10||SyaSenMjPtnKbn1 == 13||SyaSenMjPtnKbn1 == 20||SyaSenMjPtnKbn1 == 22)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            string somestring = (string)obj.SelectToken(textcont);
            if(!string.IsNullOrWhiteSpace(somestring))
            {
                string newyear = somestring.Substring(0, 4);
                string newmonth = somestring.Substring(4, 2);
                string newday = somestring.Substring(6, 2);
                text = newyear + "/" + newmonth+"/"+newday;
            }
            else
            {
                text ="";
            }
        }
        else if (SyaSenMjPtnKbn1 == 47)
        {
            text = (i.Yykasho_UkeCd.ToString("D10") + "-" + i.Haisha_UnkRen.ToString("D3") + "-" + i.Haisha_TeiDanNo.ToString("D3") + "-" + i.Haisha_BunkRen.ToString("D3"));
        }
        else if (SyaSenMjPtnKbn1 == 57)
        {
            string somestring = i.Haisha_HaiSTime;
            string newhour = somestring.Substring(0, 2);
            string newmun = somestring.Substring(2, 2);
            text = newhour + ":" + newmun + "（" + i.Haisha_HaiSNm + "）";
        }
        else if (SyaSenMjPtnKbn1 == 58)
        {
            string somestring = i.Haisha_TouChTime;
            string newhour = somestring.Substring(0, 2);
            string newmun = somestring.Substring(2, 2);
            text = newhour + ":" + newmun + "（" + i.Haisha_TouNm + "）";
        }
         else if(SyaSenMjPtnKbn1 == 37)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            text = (string)obj.SelectToken(textcont);
            text = "￥" + string.Format("{0:#,0}", double.Parse(text));
        }
        else if (SyaSenMjPtnKbn1 == 60)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            text = (string)obj.SelectToken(textcont);
            if (text != null)
            {
                text = "￥" + string.Format("{0:#,0}", double.Parse(text));
            }
            else
            { text = ""; }
        }
        else
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            if (textcont != "")
            {
                text = (string)obj.SelectToken(textcont);
            }
        }
        return text;
    }

    #region Context Menu
    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public void ItemOnAppearingHandler(ItemAppearingEventArgs e)
    {
        try
        {
            var currentBookingItem = e.Data as ItemStaff;
            update = new ItemStaff();
            update = e.Data as ItemStaff;
            switch (e.MenuItem.Id)
            {
                case "menuitem-reservation-copy":
                    e.IsEnabled = false;
                    break;
                case "3":
                    e.IsEnabled = false;
                    break;
                case "10":
                    e.IsEnabled = false;
                    break;
                case "9":
                    e.IsEnabled = false;
                    break;
                case "menuitem-delete":
                    e.IsEnabled = currentBookingItem.CanBeDeleted;
                    break;
                case "menuitem-merge":
                    e.IsEnabled = currentBookingItem.CanBeDeleted;
                    break;
                case "menuitem-simpledispatch":
                    e.IsEnabled = currentBookingItem.CanSimpledispatch;
                    if (currentBookingItem.ColorLine == "color-8")
                    {
                        e.IsEnabled = false;
                    }
                    break;
                case "menuitem-undo":
                    if (currentBookingItem.KSKbn == 1 && currentBookingItem.YouTblSeq == 0 || currentBookingItem.KSKbn == 1 && currentBookingItem.YouTblSeq > 0)
                    {
                        e.IsEnabled = currentBookingItem.CanSimpledispatch;
                    }
                    else
                    {
                        e.IsEnabled = !currentBookingItem.CanSimpledispatch;
                    }
                    if (currentBookingItem.ColorLine == "color-8")
                    {
                        e.IsEnabled = false;
                    }
                    break;
                case "menuitem-car-cooperation":
                    if (currentBookingItem.YouTblSeq != 0)
                    {
                        e.IsVisible = true;
                    }
                    else
                    {
                        e.IsVisible = false;
                    }
                    break;
                case "menuitem-temporarycarinput":
                    if (currentBookingItem.HaiSKbn != 2)
                    {
                        e.IsEnabled = true;
                    }
                    else
                    {
                        e.IsEnabled = false;
                    }
                    break;
            }
        }
        catch (Exception)
        {
            //TODO logging exception
            e.IsEnabled = false;
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public async void ItemClick(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = "";
        switch (e.MenuItem.Id)
        {
            case "menuitem-delete":
                TKD_HaishaDataService.Updatebusdeletedata(update.BookingId, update.HaUnkRen, update.TeiDanNo, update.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
                BusBookingDataService.UpdateBunKSyuJyndata(update.BookingId, update.HaUnkRen, update.TeiDanNo,  new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
                BusBookingDataService.UpdateUnkobi(update.BookingId, update.HaUnkRen,formName);
                BusBookingDataService.UpdateYyksho(update.BookingId,new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID,formName);
                break;
            case "menuitem-merge":
                await Task.Run(() =>
                {
                    TKD_HaishaDataService.UpdatebusMergedata(update.BookingId, update.HaUnkRen, update.TeiDanNo, update.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, update,formName,update.NippoKbn);
                });
                break;
            case "menuitem-simpledispatch":
                TKD_HaishaDataService.UpdatebusSimpledata(update.BookingId, update.HaUnkRen, update.TeiDanNo, update.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
                //BusBookingDataService.UpdateHaiSha(update.BookingId, update.HaUnkRen,update.TeiDanNo,update.BunkRen);
                BusBookingDataService.UpdateUnkobi(update.BookingId, update.HaUnkRen,formName);
                BusBookingDataService.UpdateYyksho(update.BookingId,new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID,formName);
                break;
            case "menuitem-undo":
                TimeBooking timeBooking = new TimeBooking();
                timeBooking.HaiSTime = update.TimeStart.ToString("D4");
                timeBooking.SyuPaTime = update.TimeStartDefault.ToString("D4");
                timeBooking.SyuKoTime = update.TimeStartDefault.ToString("D4");
                timeBooking.TouChTime = update.TimeEnd.ToString("D4");
                timeBooking.KikTime = update.TimeEndDefault.ToString("D4");
                timeBooking.SyuKoYmd = update.StartDateDefault;
                timeBooking.HaiSYmd = update.StartDate;
                timeBooking.TouYmd = update.EndDate;
                timeBooking.KikYmd = update.EndDateDefault;
                TKD_HaishaDataService.UpdatebusUndodata(update.BookingId, update.HaUnkRen, update.TeiDanNo, update.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,timeBooking);
                //BusBookingDataService.UpdateHaiSha(update.BookingId, update.HaUnkRen,update.TeiDanNo,update.BunkRen);
                BusBookingDataService.UpdateUnkobi(update.BookingId, update.HaUnkRen,formName);
                BusBookingDataService.UpdateYyksho(update.BookingId,new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID,formName);
                break;
            case "menuitem-reservation-correction":
                NavigationManager.NavigateTo(string.Format("bookinginput?UkeCd={0}", update.BookingId.Substring(5)));
                break;
            case "menuitem-single-copy":
                NavigationManager.NavigateTo(string.Format("bookinginput/?UkeCd={0}&action=copy", update.BookingId.Substring(5)), true);
                return;
            case "menuitem-multi-copy":
                NavigationManager.NavigateTo(string.Format("/bookinginputmulticopy?UkeCd={0}", update.BookingId.Substring(5)), true);
                return;
            case "menuitem-reservation-cancellation":
                IsOpenCancelTab = true;
                await InvokeAsync(StateHasChanged);
                return;
            case "menuitem-staff":
                NavigationManager.NavigateTo($"Staff?SelectedDate={e.Data}", true);
                break;
            case "menuitem-buscoordination":
                NavigationManager.NavigateTo("buscoordination", true);
                break;
            //case "download_report_operating_instructions":
            //    url = baseUrl + "/OperatingInstructionReportNew";
            //    url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Download, update.BookingId, update.TeiDanNo, update.HaUnkRen, update.BunkRen, 1);
            //    JSRuntime.InvokeVoidAsync("open", url, "_blank");
            //    break;
            //case "preview_report_operating_instructions":
            //    url = baseUrl + "/OperatingInstructionReportNew";
            //    url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Preview, update.BookingId, update.TeiDanNo, update.HaUnkRen, update.BunkRen, 1);
            //    JSRuntime.InvokeVoidAsync("open", url, "_blank");
            //    break;
            //case "download_report_flight_record_book":
            //    url = baseUrl + "/OperatingInstructionReportNew";
            //    url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Download, update.BookingId, update.TeiDanNo, update.HaUnkRen, update.BunkRen, 2);
            //    JSRuntime.InvokeVoidAsync("open", url, "_blank");
            //    break;
            //case "preview_report_flight_record_book":
            //    url = baseUrl + "/OperatingInstructionReportNew";
            //    url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Preview, update.BookingId, update.TeiDanNo, update.HaUnkRen, update.BunkRen, 2);
            //    JSRuntime.InvokeVoidAsync("open", url, "_blank");
            //    break;
            case "download_report_operating_instructions":
                UnkoushijishoReportService.ExportReportDateAsPdf(update.BookingId, update.TeiDanNo, update.HaUnkRen, update.BunkRen,new DateTime().ToString("yyyyMMdd"), JSRuntime);
                //url = baseUrl + "/OperatingInstructionReport";
                //url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Download, update.BookingId, update.TeiDanNo, update.haUnkRen, update.BunkRen, 1);
                //JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "preview_report_operating_instructions":
                url = baseUrl + "/OperatingInstructionReportPreviewNew";
                url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}&Date={6}&IsLoadDefault={7}", OptionReport.Preview, update.BookingId, update.TeiDanNo, update.HaUnkRen, update.BunkRen, 1,new DateTime(), 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "download_report_flight_record_book":
                UnkoushijishoReportService.ExportReportdriDateAsPdf(update.BookingId, update.TeiDanNo, update.HaUnkRen, update.BunkRen,update.StartDateDefault, JSRuntime);
                //url = baseUrl + "/OperatingInstructionReport";
                //url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Download, update.BookingId, update.TeiDanNo, update.haUnkRen, update.BunkRen, 2);
                //JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "preview_report_flight_record_book":
                url = baseUrl + "/OperatingInstructionReportPreviewNew";
                url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}&Date={6}&IsLoadDefault={7}", OptionReport.Preview, update.BookingId, update.TeiDanNo, update.HaUnkRen, update.BunkRen, 2,update.StartDateDefault, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-busallocation":
                url = baseUrl + "/busallocation";
                url = url + string.Format("/?date={0}", e.Data);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "temporary_car_input":
                url = baseUrl + "/busallocation";
                url = url + string.Format("/?date={0}&HaiSKbn={1}", e.Data, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-hypermenu":
                url = baseUrl + "/hypermenu";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-supermenutype1":
                url = baseUrl + "/supermenu?&type=1";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-supermenutype2":
                url = baseUrl + "/supermenu?&type=2";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "daily_report_vehicle":
                url = baseUrl + "/vehicledailyreport";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "AdvanceStatementWeb":
                url = baseUrl + "/advancepaymentdetails";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "AdvanceStatementPrint":
                url = baseUrl + "/advancepaymentdetails";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-confirmation":
                IsOpenConfirmTab = true;
                await InvokeAsync(StateHasChanged);
                return;
            case "menuitem-edityykshobikonm":
                IsOpenEditYykshoBikoNm = true;
                await InvokeAsync(StateHasChanged);
                return;
            case "menuitem-editunkobibikonm":
                IsOpenEditUnkobiBikoNm = true;
                await InvokeAsync(StateHasChanged);
                return;
            case "menuitem-preview-billprint":
                List<OutDataTable> lstPrint = new List<OutDataTable>() { new OutDataTable { UkeNo = update.BookingId, supOutSiji = 2 } };
                OutDataTableModel outDataTableModel = new OutDataTableModel() { outDataTables = lstPrint };
                var billParams = EncryptHelper.EncryptToUrl(outDataTableModel);
                url = baseUrl + "/billprint";
                url = url + string.Format("/?lstInfo={0}", billParams);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                return;
        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public async void ItemClickReport(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = "";
        switch (e.MenuItem.Id)
        {
            case "previewReportTenkokiroku":
                url = baseUrl + "/attendanceconfirmreportpreview";
                url = url + string.Format("/?Option={0}&Date={1}&IsLoadDefault={2}", OptionReport.Preview, Date, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadReportTenkokiroku":
                url = baseUrl + "/attendanceconfirmreport";
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Download, Date);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "previewUnkoushijishoReport":
                url = baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Preview, Date, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadUnkoushijishoReport":
                url = baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Download, Date, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;

            case "previewJomukirokuboReport":
                url = baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Preview, Date, 2);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadJomukirokuboReport":
                url = baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Download, Date, 2);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    public async void ItemClickBusReport(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = "";
        switch (e.MenuItem.Id)
        {
            case "previewBusReport":
                url = baseUrl + "/busreportspreview";
                url = url + string.Format("/?Option={0}&Date={1}&IsLoadDefault={2}", OptionReport.Preview, Date, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadBusReport":
                url = baseUrl + "/busreports";
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Download, Date);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    public async void ItemClickSticker(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = Configuration["ServiceUrls:StickerService"];
        string url = baseUrl + "/Sticker";
        url = url + string.Format("/?Date={0}", Date);
        JSRuntime.InvokeVoidAsync("open", url, "_blank");

    }
    public async void ItemClickBusCooradinationReport(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        BusCoordinationSearchParam report = new BusCoordinationSearchParam();
        string url = baseUrl + "";
        switch (e.MenuItem.Id)
        {
            case "BusCoooradination_Preview":
                url = url + string.Format("/buscoordinationreportpreview/?Option={0}&UnkobiDate={1}&Ukeno={2}&UnkRen={3}&IsLoadDefault=1", OptionReport.Preview, update.unSyuKoYmd, update.UkeCd, update.HaUnkRen);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "BusCoooradination_Download":
                BusCoordinationReportService.ExportPdfFiles(update.unSyuKoYmd, update.UkeCd.ToString(), update.HaUnkRen.ToString(), JSRuntime);
                //url = url + string.Format("/buscoordination/?Option={0}&UnkobiDate={1}&Ukeno={2}&UnkRen={3}", OptionReport.Download, update.Unkobi_StartYmd, update.UkeCd, update.haUnkRen);
                //JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    public async void OpenPartnerBookingInput(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = baseUrl + "/partnerbookinginput";
        switch (e.MenuItem.Id)
        {
            case "menuitem-partnerbookinginput":
                url = url + string.Format("/?UkeCd={0}&UnkRen={1}", update.UkeCd.ToString("D10"), update.HaUnkRen);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    #endregion

    #region Button Action
    /// <summary>
    /// Change to mode Zoom
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnZoom(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.Zoom;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode Split
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnSplit(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.Cut;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode View
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnView(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public void OpenBusAllocation(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = baseUrl + "/busallocation";
        switch (e.MenuItem.Id)
        {
            case "menuitem-busallocation":
                url = url + string.Format("/?date={0}&bookingid={1}", update.unHaiSYmd, update.UkeCd);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-temporarycarinput":
                url = url + string.Format("/?date={0}&bookingid={1}&HaiSKbn={2}", update.unHaiSYmd, update.UkeCd, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    /// <summary>
    /// Change to mode Edit
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnEdit(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.Edit;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode Reset
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnReset(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Change to mode Repair
    /// </summary>
    /// <param name="e"></param>
    private async Task OnRepair(MouseEventArgs e)
    {
        isLoading = true;
        Param.Mode = (int)BusLineMode.Repair;
        flagShowClass = !flagShowClass;
        await JSRuntime.InvokeVoidAsync("loadPageScript", "staffsChartPage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    void HandleShowContextMenu(ItemStaff item)
    {
        itemstaffchoosemenu = new ItemStaff();
        itemstaffchoosemenu = item;
    }
    /// <summary>
    /// Open Popup Delete Staff Repair
    /// </summary>
    private async Task OpenPopupDeleteStaffRepair()
    {
        PopupDeleteBusrepair = true;
        await InvokeAsync(StateHasChanged);
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="a"></param>
    /// <returns></returns>
    private async Task reload(string a)
    {
        if (a == "reloadgrid")
        {
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }
        else if (a == "warningDriver")
        {
            PopupwndriVisible = true;
            vehicle = 1;
        }
        else if (a == "warningGuide")
        {
            PopupwndriVisible = true;
            vehicle = 2;
        }
        else if (a == "warningMoveLine")
        {
            PopupwndriVisible = true;
            vehicle = 3;
        }
        //StateHasChanged();
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task CancelwnDriver(MouseEventArgs e)
    {
        PopupwndriVisible = false;
        vehicle = 0;
        isLoading = true;
        Ischecktext = false;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    /// <summary>
    /// Open Popup Update Staff Repair
    /// </summary>
    /// <returns></returns>
    private async Task OpenPopupUpdateStaffRepair()
    {
        PopupUpdateStaffDayoff = true;
        KinKyulst = new List<VpmKinKyuData>();
        KinKyulst = await VPM_KinKyuDataService.GetDataKinKyu();
        CodeKbnItem = KinKyulst.Where(t => t.KinKyuCdSeq == itemstaffchoosemenu.KinKyuCdSeq).First();
        lstStaffsNames = await StaffService.GetStafforStaffChart(Date, new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID, comlst, branchlst);
        StaffNameItem = lstStaffsNames.Where(t => t.SyainCdSeq.ToString() == itemstaffchoosemenu.BusLine).First();
        TimeSpan.TryParseExact(itemstaffchoosemenu.TimeStart.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out startTime);
        TimeSpan.TryParseExact(itemstaffchoosemenu.TimeEnd.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out endTime);
        FuriYmd = null;
        if (!string.IsNullOrWhiteSpace(itemstaffchoosemenu.TransferDate.Trim()))
        {
            FuriYmd = DateTime.ParseExact(itemstaffchoosemenu.TransferDate, dateformat, CultureInfo.InvariantCulture);
        }
        if (CodeKbnItem == null)
        {
            CodeKbnItem = KinKyulst.First();
        }
        StateHasChanged();
    }

    /// <summary>
    /// Open Zoom
    /// </summary>
    public async Task OnCallBackZoom(string text)
    {
        string[] arrListStr = text.Split(',');
        Param.DisplayRange = int.Parse(arrListStr[0]);
        Param.TimeRange = int.Parse(arrListStr[1]);
        // default click 1day will choose 1hour
        if (Param.DisplayRange == (int)DayMode.OneDay)
        {
            Param.Number_of_days = 1;
        }
        // default click 3days will choose 3hours
        if (Param.DisplayRange == (int)DayMode.ThreeDays)
        {
            Param.Number_of_days = 3;
        }
        // default click 1week will choose 1day
        if (Param.DisplayRange == (int)DayMode.Week)
        {
            Param.Number_of_days = 7;
        }
        // default click 1month will choose 1day
        if (Param.DisplayRange == (int)DayMode.Month)
        {
            Param.Number_of_days = 31;
        }
        setWidth();
        await OnHandleChanged(Param.TimeRange, nameof(Param.TimeRange));
        await OnHandleChanged(Param.Number_of_days, nameof(Param.Number_of_days));
        await OnHandleChanged(Param.DisplayRange, nameof(Param.DisplayRange));
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    /// Open Repair
    /// </summary>
    public async Task OnCallBackRepair(VpmKinKyuData code)
    {
        CodeKbnItem = code;
        StateHasChanged();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task UpdateDateComment(MouseEventArgs e)
    {
        bool check = TPM_CalendDataService.UpdateCommentDate(datecommentpopup, commentdate, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, 1, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,formName);
        if (!check)
        {
            Ischecktext = true;
            StateHasChanged();
        }
        else
        {
            PopupCommentDate = false;
            Ischecktext = false;
            datecommentpopup = "";
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="newMessage"></param>
    void ClickHandler(string newMessage)
    {
        datecommentpopup = newMessage;
        commentdate = TPM_CalendDataService.Getdatabydate(1, 1, datecommentpopup) == null ? "" : TPM_CalendDataService.Getdatabydate(1, 1, datecommentpopup).CalenCom;
        if (commentdate.Length > 100)
        {
            commentdate = "";
        }
        PopupCommentDate = true;
        StateHasChanged();
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task CancelDateComment(MouseEventArgs e)
    {
        commentdate = "";
        PopupCommentDate = false;
        isLoading = true;
        Ischecktext = false;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task CancelBusrepair(MouseEventArgs e)
    {
        PopupDeleteBusrepair = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task UpdateStatusBusrepair(MouseEventArgs e)
    {
        PopupDeleteBusrepair = false;
        TKD_KikyujDataService.DeleteDayoff(itemstaffchoosemenu.KinKyuTblCdSeq, 1);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    #endregion
    void MenuOnAppearingHandler(MenuAppearingEventArgs e)
    {
        if (e.Data != null)
        {
            var currentBookingItem = e.Data as ItemStaff;
            e.PreventShow = !currentBookingItem.CanShowMenu;
        }
    }
    private async void ResetForm()
    {
        FilterConditionService.DeleteFilter(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 0, formName).Wait();
        FilterConditionService.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 0, formName).Wait();
        NavigationManager.NavigateTo("StaffsChart", true);
    }
}
