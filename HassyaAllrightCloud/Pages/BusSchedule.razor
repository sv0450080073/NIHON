@using System.Threading;
@using Microsoft.Extensions.DependencyInjection;
@using BlazorDownloadFile;
@using HassyaAllrightCloud.Commons.Helpers.ExcelExport;
@using Microsoft.Extensions.Configuration
@using HassyaAllrightCloud.Domain.Dto.BillPrint;
@inject IConfiguration Configuration
@inherits OwningComponentBase
@inject BusScheduleHelper BusScheduleHelper
@inject CustomHttpClient Http
@inject AppSettingsService AppSettingsService
@inject BrowserResizeService BrowserResizeService
@inject IJSRuntime JSRuntime
@inject IBusLineCssColorServices BusLineCssColorService
@implements IDisposable
@inject IStringLocalizer<BusSchedule> Lang
@inject IStringLocalizer<Index> IndexLang

@inject CustomNavigation NavigationManager
@inject IFilterCondition FilterServices
@inject CustomNavigation NavManager
@inject IHikiukeshoReportService HikiukeshoReportService
@inject IAdvancePaymentDetailsService advancePaymentDetailsService
@inject IReportLayoutSettingService reportLayoutSettingService
@inject IBillPrintService _billPrintService
@inject IBusCoordinationReportService BusCoordinationReportService;
@inject IUnkoushijishoReportService UnkoushijishoReportService
@inject ICarCooperationListService CarCooperationService
@inject IErrorHandlerService ErrorService
@inject IGenerateFilterValueDictionary GenerateFilterValueDictionaryService

<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupCarCooperation" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["car_cooperation"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(async () => { PopupCarCooperation = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.CarCooperation UkeNo="@update.BookingId" UnkRen="@update.haUnkRen" YouTblSeq="@update.YouTblSeq" OnClosePopup="ClosePopupCarCooperation"></HassyaAllrightCloud.Pages.Components.CarCooperation>

    </ChildContent>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupMessageCarCooperation" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @popupTitle
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => PopupMessageCarCooperation = false)"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x @popupicon mr-2" aria-hidden="true"></i>@popupContent
        </div>
    </ChildContent>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => PopupMessageCarCooperation = false)" Text="@Lang["btn_no"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupFutai" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["AncillaryInput"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(async () => { PopupFutai = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.Futai UkeNo="@update.BookingId" CurrentViewMode="IncidentalViewMode.Futai" />
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupTsumi" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["LoadedProductInput"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(async () => { PopupTsumi = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.Futai UkeNo="@update.BookingId" CurrentViewMode="IncidentalViewMode.Tsumi" />
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-xl custom-popup" @bind-Visible="@PopupTehai" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ArrangementInput"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(async () => { PopupTehai = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.Tehai UkeNo="@update.BookingId" OnClose="@(async () => { PopupTehai = false; })"></HassyaAllrightCloud.Pages.Components.Tehai>
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupJourney" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["menu_journeys"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelJourney())"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <HassyaAllrightCloud.Pages.Components.Journeys ukeNo="@update.BookingId" unkRenparam="@update.haUnkRen" teiDanNo="@update.TeiDanNo" bunkRen="@update.BunkRen" OnClose="@((e) => CancelJourney())"></HassyaAllrightCloud.Pages.Components.Journeys>
    </Content>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupCommentdate" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["message_popup_commentdate"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelDateComment(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        @if (Ischecktext)
        {
            <span class="validation-errors">@Lang["message_error_limit_character"]</span>
        }
        <div class="d-flex">
            <label class="col-form-label-sm mr-3 width--56 flex">@Lang["remark"]：</label>
            <textarea class="flex-grow-1 @(Ischecktext ? "textinvalid" : "")" rows="3" maxlength="100" @bind="@commentdate"></textarea>
        </div>
    </Content>
    <FooterTemplate>
        <button type="button" class="btn btn-sm btn-outline-dark width--140" @onclick="@((e) => CancelDateComment(e))">@Lang["btn_cancel"]</button>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => UpdateDateComment(e))" Text="@Lang["btn_save"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupDeleteBusrepair" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["title_PopupDeleteBusrepair"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelBusrepair(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-exclamation-triangle text-warning mr-2" aria-hidden="true"></i> @Lang["text_confirm_delete"]
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Danger" @onclick="@((e) => UpdateStatusBusrepair(e))" Text="@Lang["Yes"]" CssClass="width--75" />
        <DxButton RenderStyle="ButtonRenderStyle.Secondary" @onclick="@((e) => CancelBusrepair(e))" Text="@Lang["No"]" CssClass="width--75" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@Dropunable" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["title_PopupDeleteBusrepair"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelDropunable(e))"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-exclamation-triangle text-warning mr-2" aria-hidden="true"></i> @Lang["message_drop_unable"]
        </div>
    </ChildContent>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => CancelDropunable(e))" Text="@Lang["btn_no"]" CssClass="width--75" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@Popupupdatebus" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["update_line_noti_header"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelUpdateBus(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-info-circle" aria-hidden="true"></i> @((MarkupString)string.Format(Lang["update_line_noti"], JyoSyaJin, TeiCnt))
        </div>

    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => UpdateBus(e))" Text="@Lang["Yes"]" CssClass="width--75" />
        <DxButton RenderStyle="ButtonRenderStyle.Secondary" @onclick="@((e) => CancelUpdateBus(e))" Text="@Lang["No"]" CssClass="width--75" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@updategreenline" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["update_line_noti_header"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelUpdateGreenline(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-info-circle" aria-hidden="true"></i> @((MarkupString)string.Format(Lang["updategreenline"], tokisk_YouSRyakuNm))
        </div>

    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@((e) => UpdateBus(e))" Text="@Lang["Yes"]" CssClass="width--75" />
        <DxButton RenderStyle="ButtonRenderStyle.Secondary" @onclick="@((e) => CancelUpdateGreenline(e))" Text="@Lang["No"]" CssClass="width--75" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@PopupUpdateBusRepair">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["title_PopupUpdateBusRepair"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => CancelUpdateBusrp(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        @if (isErrorUpdateBusrp)
        {
            <span class="validation-errors">@Lang["message_warning_time_repair"]</span>
        }
        <div class="form-group d-flex flex-nowrap">
            <label class="col-form-label-sm mr-3 width--75">@Lang["vehicle_input"]</label>
            <DxComboBox CssClass="flex-grow-1"
                        Data="@busname"
                        FilteringMode="@DataGridFilteringMode.Contains"
                        SelectedItem="@BusNameItem"
                        SelectedItemChanged="@SelectBuslineChange"
                        TextFieldName="Text"
                        AllowUserInput="false">
            </DxComboBox>
        </div>
        <div class="form-group d-flex flex-nowrap @("has-tooltip-error "+(popuprpcheck ? " custom-invalid ":""))">
            @if (popuprpcheck)
            {
                <HassyaAllrightCloud.Pages.Components.Tooltip ValueExpressions="@(() => itembuschoosemenu.StartDate)"
                                                              Lang="@LangDic" Text="@repairperiodMessage" Position="PositionTooltip.top">
                </HassyaAllrightCloud.Pages.Components.Tooltip>
                <HassyaAllrightCloud.Pages.Components.Tooltip ValueExpressions="@(() => startTime)"
                                                              Lang="@LangDic" Text="@repairperiodMessage" Position="PositionTooltip.top">
                </HassyaAllrightCloud.Pages.Components.Tooltip>
                <HassyaAllrightCloud.Pages.Components.Tooltip ValueExpressions="@(() => itembuschoosemenu.EndDate)"
                                                              Lang="@LangDic" Text="@repairperiodMessage" Position="PositionTooltip.top">
                </HassyaAllrightCloud.Pages.Components.Tooltip>
                <HassyaAllrightCloud.Pages.Components.Tooltip ValueExpressions="@(() => endTime)"
                                                              Lang="@LangDic" Text="@repairperiodMessage" Position="PositionTooltip.top">
                </HassyaAllrightCloud.Pages.Components.Tooltip>
            }
            <label class="col-form-label-sm mr-3 width--75">@Lang["repair_period"]</label>
            <DxDateEdit CssClass="@cssclassdate" Date="DateTime.ParseExact(itembuschoosemenu.StartDate, dateformat, CultureInfo.InvariantCulture)" DateChanged="@((newValue) => OnDateStartChange(newValue))" Format="yyyy/MM/dd"
                                                        @oninput='(newValue) => OnDateStartChange(CommonHelper.ConvertToDateTime((string)newValue.Value))'
                        ></DxDateEdit>
            <DxTextBox CssClass="@cssclasstime" Text="@startTime.ToString(@"hh\:mm")" TextChanged="@((newValue) => onStartimechage(newValue))"></DxTextBox>
            <span class="form-text mx-2">～</span>
            <DxDateEdit CssClass="@cssclassdate" Date="DateTime.ParseExact(itembuschoosemenu.EndDate, dateformat, CultureInfo.InvariantCulture)" DateChanged="@((newValue) => OnDateEndChange(newValue))" Format="yyyy/MM/dd"
                                                        @oninput='(newValue) => OnDateStartChange(CommonHelper.ConvertToDateTime((string)newValue.Value))'
                        ></DxDateEdit>
            <DxTextBox CssClass="@cssclasstime" Text="@endTime.ToString(@"hh\:mm")" TextChanged="@((newValue) => onEndtimechage(newValue))"></DxTextBox>
        </div>
        <div class="form-group d-flex flex-nowrap">
            <label class="col-form-label-sm mr-3 width--75">@Lang["repair_code"]</label>
            <DxComboBox CssClass="flex-grow-1"
                        Data="@CodeKbnlst"
                        FilteringMode="@DataGridFilteringMode.Contains"
                        SelectedItem="@CodeKbnItem"
                        SelectedItemChanged="@SelectTypeChange"
                        TextFieldName="Text"
                        AllowUserInput="false">
            </DxComboBox>
        </div>
        <div class="form-group d-flex flex-nowrap">
            <label class="col-form-label-sm mr-3 width--75">@Lang["remark"]</label>
            <DxTextBox CssClass="flex-grow-1" Text="@itembuschoosemenu.BikoNm" TextChanged="@((newValue) => TextBusrpChange(newValue))"></DxTextBox>
        </div>
    </Content>
    <FooterTemplate>
        <button type="button" class="btn btn-sm btn-outline-dark width--140" @onclick="@((e) => CancelUpdateBusrp(e))">@Lang["btn_cancel"]</button>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" Enabled="@(!popuprpcheck)" @onclick="@((e) => UpdateBusrepair(e))" Text="@Lang["btn_register"]" CssClass="width--140" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupNotCreateline" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ConfirmationNew"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => PopupNotCreateline = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-exclamation-triangle text-warning mr-2" aria-hidden="true"></i> @Lang["message_warning_PopupNotCreateline"]
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => PopupNotCreateline = false)" Text="@Lang["OK"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup modal-lg mxw-50rem" @bind-Visible="@PopupUpdateRowVisible">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["title_PopupUpdateRowVisible"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => Closepopup(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        @if (isErrorActive)
        {
            <span class="validation-errors">@Lang["message_error_car_exits"]</span>
        }
        <div class="form-group d-flex custom-validate">
            <label class="col-form-label-sm mr-3 width--56 flex">@Lang["servant_first"]：<span style="color:red">*</span></label>
            <HassyaAllrightCloud.Pages.Components.CommonComponents.CustomerComponent IsGyoSyaNotNull="true" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                         RenderMode="ListRenderMode.Virtual"
                                                                                         LangDic="LangDic"
                                                                                         VehicleClassification="1"
                                                                                         DefaultGyosya="0"
                                                                                         GyosyaExpression="() => Model.SelectedGyosya"
                                                                                         SelectedGyosya="Model.SelectedGyosya"
                                                                                         SelectedGyosyaChanged="(val) => OnModelChanged(nameof(CustomerModel.SelectedGyosya), val, false)"
                                                                                         GyosyaTextError="@(isGyosyaNull ? Lang["vendor_required_1"] : string.Empty)"
                                                                                         TokiskExpression="() => Model.SelectedTokisk"
                                                                                         SelectedTokisk="Model.SelectedTokisk"
                                                                                         SelectedTokiskChanged="(val) => OnModelChanged(nameof(CustomerModel.SelectedTokisk), val, false)"
                                                                                         TokiskTextError="@(isTokiskNull ? Lang["customer_required_1"] : string.Empty)"
                                                                                         TokiStExpression="() => Model.SelectedTokiSt"
                                                                                         SelectedTokiSt="Model.SelectedTokiSt"
                                                                                         SelectedTokiStChanged="(val) => OnModelChanged(nameof(CustomerModel.SelectedTokiSt), val, false)"
                                                                                         TokiStTextError="@(isTokiStNull ? Lang["customer_branch_required_1"] : string.Empty)">
                </HassyaAllrightCloud.Pages.Components.CommonComponents.CustomerComponent>
            @*<DxComboBox CssClass="flex-grow-1" NullText="傭車先コード：傭車先名　支店コード：傭車先支店名"
                        Data="@CustomerList"
                        FilteringMode="@DataGridFilteringMode.Contains"
                        SelectedItem="@CustomerItem"
                        SelectedItemChanged="@SelectedCustomerItemChanged"
                        TextFieldName="Text"
                        AllowUserInput="false">
            </DxComboBox>*@
        </div>
    </Content>
    <FooterTemplate>
        <a href="javascript:void(0)" class="btn btn-sm btn-outline-dark width--140" @onclick="@((e) => Closepopup(e))">@Lang["btn_cancel"]</a>
        <button type="button" disabled="@IsDisabled" class="btn btn-sm btn-primary width--140" @onclick="@((e) => OnUpdateLineGreen(e))">@Lang["btn_register"]</button>
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupVisiblenew" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ConfirmationInfo"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => PopupVisiblenew = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-exclamation-triangle text-warning mr-2" aria-hidden="true"></i>  @Lang["message_select_company"]
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => PopupVisiblenew = false)" Text="@Lang["btn_no"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@Popupunsave" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["title_PopupWarning"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => Popupunsave = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-info-circle" aria-hidden="true"></i>  @Lang["CommonError"]
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() =>  Popupunsave= false)" Text="@Lang["btn_no"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupVisibleBranchnew" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ConfirmationInfo"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => PopupVisiblenew = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-info-circle" aria-hidden="true"></i>  @Lang["message_enter_branch_name"]
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => PopupVisibleBranchnew = false)" Text="@Lang["btn_no"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup mxw-50rem" @bind-Visible="@PopupVisible">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["title_PopupReservastionLine"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@((e) => OnCancel(e))"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="form-group d-flex">
            <label class="col-form-label-sm mr-3 width--56 flex">@Lang["complacent"]：<span style="color:red">*</span></label>
            <div class="custom-validate">
                <HassyaAllrightCloud.Pages.Components.CommonComponents.CustomerComponent IsGyoSyaNotNull="true" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                         RenderMode="ListRenderMode.Virtual"
                                                                                         LangDic="LangDic"
                                                                                         DefaultGyosya="0"
                                                                                         GyosyaExpression="() => Model.SelectedGyosya"
                                                                                         SelectedGyosya="Model.SelectedGyosya"
                                                                                         SelectedGyosyaChanged="(val) => OnModelChanged(nameof(CustomerModel.SelectedGyosya), val, true)"
                                                                                         GyosyaTextError="@(isGyosyaNull ? Lang["vendor_required"] : string.Empty)"
                                                                                         TokiskExpression="() => Model.SelectedTokisk"
                                                                                         SelectedTokisk="Model.SelectedTokisk"
                                                                                         SelectedTokiskChanged="(val) => OnModelChanged(nameof(CustomerModel.SelectedTokisk), val, true)"
                                                                                         TokiskTextError="@(isTokiskNull ? Lang["customer_required"] : string.Empty)"
                                                                                         TokiStExpression="() => Model.SelectedTokiSt"
                                                                                         SelectedTokiSt="Model.SelectedTokiSt"
                                                                                         SelectedTokiStChanged="(val) => OnModelChanged(nameof(CustomerModel.SelectedTokiSt), val, true)"
                                                                                         TokiStTextError="@(isTokiStNull ? Lang["customer_branch_required"] : string.Empty)">
                </HassyaAllrightCloud.Pages.Components.CommonComponents.CustomerComponent>
            </div>
            
            @*<div class="@("has-tooltip-error "+(cbbisnull ? " custom-invalid ":""))">
            @if (cbbisnull)
            {
                <HassyaAllrightCloud.Pages.Components.Tooltip ValueExpressions="@(() => CustomerItem)"
                                                              Lang="@LangDic" Text="@customerEmptyMessage" Position="PositionTooltip.top">
                </HassyaAllrightCloud.Pages.Components.Tooltip>
            }

            <DxComboBox CssClass="flex-grow-1" NullText="得意先コード：得意先名　支店コード：得意先支店名"
                        Data="@CustomerList"
                        FilteringMode="@DataGridFilteringMode.Contains"
                        SelectedItem="@CustomerItem"
                        SelectedItemChanged="@SelectedCustomerItemChangedInsert"
                        TextFieldName="Text"
                        AllowUserInput="false">
            </DxComboBox>
        </div>*@
        </div>
        <div class="form-group d-flex">
            <label class="col-form-label-sm mr-3 width--56">@Lang["organization_name"]：</label>
            <div class="@("has-tooltip-error "+(nameisnull ? " custom-invalid ":""))">
                @if (nameisnull)
                {
                    <HassyaAllrightCloud.Pages.Components.Tooltip ValueExpressions="@(() => CustomerItem)"
                                                                  Lang="@LangDic" Text="@organizationEmptyMessage" Position="PositionTooltip.top">
                    </HassyaAllrightCloud.Pages.Components.Tooltip>
                }
                <DxTextBox CssClass="flex-grow-1 length100" TextChanged="@((newValue) => BookingNameTextChage(newValue))"></DxTextBox>
            </div>
        </div>
        <div class="form-group form-row">
            <div class="col-6 form-group d-flex">
                <label class="col-form-label-sm mr-3 width--56">@Lang["driver"]：</label>
                <div class="@("has-tooltip-error "+(drivernumisnull || driverisnotfull ? " custom-invalid ":""))">
                    @if (drivernumisnull || driverisnotfull)
                    {
                        @if (drivernumisnull)
                        {
                            <HassyaAllrightCloud.Pages.Components.Tooltip ValueExpressions="@(() => CustomerItem)"
                                                                          Lang="@LangDic" Text="@drivernumEmptyMessage" Position="PositionTooltip.top">
                            </HassyaAllrightCloud.Pages.Components.Tooltip>
                        }
                        @if (driverisnotfull)
                        {
                            <HassyaAllrightCloud.Pages.Components.Tooltip ValueExpressions="@(() => CustomerItem)"
                                                                          Lang="@LangDic" Text="@driverisnotfullMessage" Position="PositionTooltip.top">
                            </HassyaAllrightCloud.Pages.Components.Tooltip>
                        }
                    }
                    <DxTextBox CssClass="width--120 number mr-2 length2" TextChanged="@((newValue) => DriverNumTextChange(newValue))"></DxTextBox>
                </div>
                <span class="form-text">@Lang["people"]</span>

            </div>
            <div class="col-6 form-group d-flex">
                <label class="col-form-label-sm mr-3 width--56">@Lang["guide"]：</label>
                <DxTextBox CssClass="width--120 number mr-2 length2" TextChanged="@((newValue) => GuiderNumTextChange(newValue))"></DxTextBox>
                <span class="form-text">@Lang["people"]</span>
            </div>
        </div>
    </Content>
    <FooterTemplate>
        <a href="javascript:void(0)" class="btn btn-sm btn-outline-dark width--140" @onclick="@((e) => OnCancel(e))">@Lang["btn_cancel"]</a>
        <button type="button" class="btn btn-sm btn-primary width--140" @onclick="@((e) => OnSave(e))">@Lang["btn_register"]</button>
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@IsOpenCancelTab" Scrollable="false">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["reservation_correction"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="@(async () => { IsOpenCancelTab = false; await reload(""); })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.BookingTabs.CancellationTab UkeNo="@update.BookingId" OnSubmit="async () => await HandleSaveCancelData()" />
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" @bind-Visible="@IsOpenConfirmTab" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @Lang["ConfirmInput"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0)" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="@(async () => { IsOpenConfirmTab = false; await reload(""); })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.BookingTabs.ConfirmInputTab UkeNo="@update.BookingId" />
    </ChildContent>
</DxPopup>
<DxPopup CssClass="modal-lg custom-popup" Visible="@(IsOpenEditYykshoBikoNm || IsOpenEditUnkobiBikoNm)" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @if (IsOpenEditYykshoBikoNm)
            {
                @Lang["RemarksInputYyksho"]
            }
            else if (IsOpenEditUnkobiBikoNm)
            {
                @Lang["RemarksInputUnkobi"]
            }
            <a class="close-button oi oi-x text-white" href="javascript:void(0)" aria-hidden="true" role="button" aria-label="Close popup"
               @onclick="@(async () => { IsOpenEditYykshoBikoNm = false; IsOpenEditUnkobiBikoNm = false; })"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <HassyaAllrightCloud.Pages.Components.BookingTabs.BookingRemark IsOpenEditYykshoBikoNm="IsOpenEditYykshoBikoNm" IsOpenEditUnkobiBikoNm="IsOpenEditUnkobiBikoNm" UkeNo="@update.BookingId" IsUnkobiBikoNm="IsOpenEditUnkobiBikoNm" UnkRen="update.haUnkRen" />
    </ChildContent>
</DxPopup>

<DxPopup CssClass="custom-popup" @bind-Visible="@PopupHaiTaCheckFail" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @IndexLang["Information"]
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => PopupHaiTaCheckFail = false)"></a>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-info-circle mr-2" aria-hidden="true"></i>@IndexLang["BI_T023"]
        </div>
    </ChildContent>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => PopupHaiTaCheckFail = false)" Text="@IndexLang["OK"]" CssClass="width--90" />
    </FooterTemplate>
</DxPopup>

@if (isLoading)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}

<div class="main-top">
    <div class="d-sm-flex justify-content-between align-items-center pb-2">
        <div class="d-flex">
            <h5 class="mb-lg-0">@Lang["Page_title"]</h5>
        </div>
        <div class="d-flex">
            <ListColorChart></ListColorChart>
            <button class="btn btn-sm btn-danger btnclear ml-3" @onclick="ResetForm">
                <i class="fa fa-refresh" aria-hidden="true"></i>
                @Lang["Clear"]
            </button>
        </div>
    </div>
    <ul class="text-danger">
        @if (!valueHaitaCheck)
        {
            <li class="validation-message">@Lang["CM_T002"].ToString().Replace("UkeNo", ukeNo)</li>
        }
    </ul>

    <div id="control-tab" class="title-section mb-2">
        <i class="fa fa-angle-up" aria-hidden="true"></i> @Lang["Conditionsetting"]
    </div>

    <div class="express-condition mb-2">
        <DxTabs @bind-ActiveTabIndex="@ActiveTabIndex">
            <DxTab Text="@Lang["general"]"></DxTab>
            <DxTab Text="@Lang["show_settings"]"></DxTab>
            <DxTab Text="@Lang["condition"]"></DxTab>
        </DxTabs>
        <div class="card dxbs-border-top-0 dxbs-border-radius-top-0">
            <div class="card-body">
                @switch (ActiveTabIndex)
                {
                    case 0:
                        <div class="d-flex justify-content-between">
                            <div>
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3">@Lang["start_date"]：</label>
                                    <div class="d-flex">
                                        <DxDateEdit Date="@Date" DateChanged="@((newValue) => OnDateChanged(newValue))" Format="yyyy/MM/dd" CssClass="width--120 date-sm"
                                                    ></DxDateEdit>
                                        <button type="button" class="btn btn-secondary btn-sm mx-2 text-nowrap" @onclick="@((e) => TodayClick(e))">@Lang["btn_today"]</button>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--90">@Lang["line_drawing"]：</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link @(Param.ActiveL == (int)LineDrawMode.Normal ? "active" : null)" @onclick="@(e => clickL(e, (int)LineDrawMode.Normal))">@Lang["line_drawing_normal"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveL == (int)LineDrawMode.RentalBus ? "active" : null)" @onclick="@(e => clickL(e, (int)LineDrawMode.RentalBus))">@Lang["line_drawing_rentalBus"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.ActiveL == (int)LineDrawMode.SpareBus ? "active" : null)" @onclick="@(e => clickL(e, (int)LineDrawMode.SpareBus))">@Lang["line_drawing_spareBus"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveL == (int)LineDrawMode.All ? "active" : null)" @onclick="@(e => clickL(e, (int)LineDrawMode.All))">@Lang["all"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--90">@Lang["grouping"]：</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link @(Param.ActiveG == (int)GroupMode.All ? "active" : null)" @onclick="@(e => clickG(e, (int)GroupMode.All))">@Lang["group_all"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveG == (int)GroupMode.Branch ? "active" : null)" @onclick="@(e => clickG(e, (int)GroupMode.Branch))">@Lang["group_branch"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveG == (int)GroupMode.Company ? "active" : null)" @onclick="@(e => clickG(e, (int)GroupMode.Company))">@Lang["group_company"]</a>
                                    </nav>
                                </div>
                            </div>
                            <div>
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3">@Lang["display_range"]：</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "active": null) @(Param.ActiveP == (int)DayMode.OneDay ? "active" : null)" @onclick="@(e => clickP(e, (int)DayMode.OneDay))">@Lang["oneday"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveP == (int)DayMode.ThreeDays ? "active" : null)" @onclick="@(e => clickP(e, (int)DayMode.ThreeDays))">@Lang["threedays"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveP == (int)DayMode.Week ? "active" : null)" @onclick="@(e => clickP(e, (int)DayMode.Week))">@Lang["oneweek"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveP == (int)DayMode.Month ? "active" : null)" @onclick="@(e => clickP(e, (int)DayMode.Month))">@Lang["onemonth"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3">@Lang["time_range"]：</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveCPT == (int)TimeMode.Minute ? "active" : null) @(Param.ActiveP != (int)DayMode.OneDay ? "disabled" : null)" @onclick="@(e => clickCPT(e, (int)TimeMode.Minute))">@Lang["15minutes"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveCPT == (int)TimeMode.OneHour ? "active" : null) @(Param.ActiveP == (int)DayMode.ThreeDays || Param.ActiveP == (int)DayMode.Week || Param.ActiveP == (int)DayMode.Month ? "disabled" : null)" @onclick="@(e => clickCPT(e, (int)TimeMode.OneHour))">@Lang["onehour"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveCPT == (int)TimeMode.ThreeHours ? "active" : null) @(Param.ActiveP == (int)DayMode.Week || Param.ActiveP == (int)DayMode.Month ? "disabled" : null)" @onclick="@(e => clickCPT(e, (int)TimeMode.ThreeHours))">@Lang["threehours"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "active": null) @(Param.ActiveCPT == (int)TimeMode.SixHours ? "active" : null) @(Param.ActiveP == (int)DayMode.Week || Param.ActiveP == (int)DayMode.Month ? "disabled" : null)" @onclick="@(e => clickCPT(e, (int)TimeMode.SixHours))">@Lang["sixhours"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveCPT == (int)TimeMode.Day ? "active" : null) @(Param.ActiveP == (int)DayMode.OneDay || Param.ActiveP == (int)DayMode.ThreeDays ? "disabled" : null)" @onclick="@(e => clickCPT(e, (int)TimeMode.Day))">@Lang["oneday"]</a>
                                    </nav>
                                </div>
                            </div>
                        </div>
                        break;
                    case 2:
                        <div class="form-row">
                            <div class="col-sm-6">
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--100">@Lang["vehicle_row"]：</label>
                                    <nav class="nav nav-pills">
                                        <a class="nav-link @(Param.ActiveS1 == (int)SortVehicleLineMode.Model_Branch ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS1(e, (int)SortVehicleLineMode.Model_Branch))">@Lang["model_branch"]</a>
                                        <a class="nav-link @(Param.ActiveS1 == (int)SortVehicleLineMode.Model_Vehicle ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS1(e, (int)SortVehicleLineMode.Model_Vehicle))">@Lang["model_vehicle"]</a>
                                        <a class="nav-link @(Param.ActiveS1 == (int)SortVehicleLineMode.Branch_Vehicle ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS1(e, (int)SortVehicleLineMode.Branch_Vehicle))">@Lang["branch_vehicle"]</a>
                                        <a class="nav-link @(Param.ActiveS1 == (int)SortVehicleLineMode.Branch_Model ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS1(e, (int)SortVehicleLineMode.Branch_Model))">@Lang["branch_model"]</a>
                                        <a class="nav-link @(Param.ActiveS1 == (int)SortVehicleLineMode.Rollcall ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS1(e, (int)SortVehicleLineMode.Rollcall))">@Lang["rollcall"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--100">@Lang["vehicle_display_name_order"]：</label>
                                    <nav class="nav nav-pills">
                                        <a class="nav-link @(Param.ActiveS2 == (int)SortVehicleNameMode.Model_Vehicle ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS2(e, (int)SortVehicleNameMode.Model_Vehicle))">@Lang["model_vehicle"]</a>
                                        <a class="nav-link @(Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Model ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS2(e, (int)SortVehicleNameMode.Branch_Model))">@Lang["branch_model"]</a>
                                        <a class="nav-link @(Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Temporary_Vehicle ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS2(e, (int)SortVehicleNameMode.Branch_Temporary_Vehicle))">@Lang["branch_temporary_vehicle"]</a>
                                        <a class="nav-link @(Param.ActiveS2 == (int)SortVehicleNameMode.Branch_Vehicle ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS2(e, (int)SortVehicleNameMode.Branch_Vehicle))">@Lang["branch_vehicle"]</a>
                                    </nav>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--100">@Lang["character_display_switching"]：</label>
                                    <nav class="nav nav-pills">
                                        <a class="nav-link @(Param.ActiveS3 == (int)DisplayLineMode.Custom ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS3(e, (int)DisplayLineMode.Custom))">@Lang["DisplayLineMode.Custom"]</a>
                                        <a class="nav-link @(Param.ActiveS3 == (int)DisplayLineMode.Organization ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS3(e, (int)DisplayLineMode.Organization))">@Lang["DisplayLineMode.Organization"]</a>
                                        <a class="nav-link @(Param.ActiveS3 == (int)DisplayLineMode.Destination ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS3(e, (int)DisplayLineMode.Destination))">@Lang["DisplayLineMode.Destination"]</a>
                                        <a class="nav-link @(Param.ActiveS3 == (int)DisplayLineMode.Customer ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS3(e, (int)DisplayLineMode.Customer))">@Lang["DisplayLineMode.Customer"]</a>
                                        <a class="nav-link @(Param.ActiveS3 == (int)DisplayLineMode.None ? "active" : null)" href="javascript:void(0)" @onclick="@(e => clickS3(e, (int)DisplayLineMode.None))">@Lang["DisplayLineMode.None"]</a>
                                    </nav>
                                </div>
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3-sm mr-3 width--100">@Lang["wire_drawing_width_switching"]：</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveV == (int)ViewMode.Large ? "active" : null)" @onclick="@(e => clickV(e, (int)ViewMode.Large))">@Lang["large"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "active": null) @(Param.ActiveV == (int)ViewMode.Medium ? "active" : null)" @onclick="@(e => clickV(e, (int)ViewMode.Medium))">@Lang["medium"]</a>
                                        <a href="javascript:void(0)" class="nav-link @(Param.IsDivided == true ? "disabled": null) @(Param.ActiveV == (int)ViewMode.Small ? "active" : null)" @onclick="@(e => clickV(e, (int)ViewMode.Small))">@Lang["small"]</a>
                                    </nav>
                                </div>
                            </div>
                        </div>
                        break;
                    case 1:
                        <div class="form-row">
                            <div class="col-sm-6">
                                <div class="d-flex flex-nowrap">
                                    <div class="form-group d-flex flex-nowrap mr-4">
                                        <label class="col-form-label-sm mr-3">@Lang["company"]：</label>
                                        <div class="dropdown dropdown-listbox">
                                            <div class=@("has-tooltip-error custom-listbox-invalid" + (EmptyCompany ? " invalid" : ""))>
                                                @if (EmptyCompany)
                                                {
                                                    <HassyaAllrightCloud.Pages.Components.Tooltip Lang="@LangDic" ValueExpressions="@(() =>SelectedCompanyItems.FirstOrDefault())"
                                                                                                  Text="@CompanyEmptyMessage" Position="PositionTooltip.top"> </HassyaAllrightCloud.Pages.Components.Tooltip>
                                                }
                                                <div class="input-group input-group-sm dx-listbox mw-10rem multi-combobox dropdown-toggle" id="lstcompany" data-toggle="dropdown">
                                                    <p class="form-control form-control-sm text-overflow">@showSelectedCompanies</p>
                                                    <div class="form-control form-control-sm input-group-append dxbs-input-group-append dxbs-focus-hidden">
                                                        <button class="btn btn-sm dx-btn  btn-secondary dxbs-edit-btn dropdown-toggle dxbs-dropdown-toggle" type="button">
                                                            <span></span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="dropdown-menu dropdownlist" role="menu" aria-labelledby="lstcompany">
                                                    <DxListBox Data="@tmpcompanychart"
                                                               TextFieldName="TextReport"
                                                               ListRenderMode="ListRenderMode.Entire"
                                                               SelectionMode="ListBoxSelectionMode.Multiple"
                                                               SelectedItems="@SelectedCompanyItems"
                                                               SelectedItemsChanged="@SelectedCompanyItemsChanged"
                                                               ShowCheckboxes="true"
                                                               CssClass="custom-dx-listbox">
                                                    </DxListBox>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex flex-nowrap mr-4">
                                        <label class="col-form-label-sm mr-3">@Lang["sales_office"]：</label>
                                        <div class="dropdown dropdown-listbox">
                                            <div class=@("has-tooltip-error custom-listbox-invalid" + (EmptyBranch ? " invalid" : ""))>
                                                @if (EmptyBranch)
                                                {
                                                    <HassyaAllrightCloud.Pages.Components.Tooltip Lang="@LangDic" ValueExpressions="@(() =>SelectedBranchItems.FirstOrDefault())"
                                                                                                  Text="@BranchEmptyMessage" Position="PositionTooltip.top"> </HassyaAllrightCloud.Pages.Components.Tooltip>
                                                }
                                                <div class="input-group input-group-sm dx-listbox mw-10rem multi-combobox dropdown-toggle" id="lstbranch" data-toggle="dropdown">
                                                    <p class="form-control form-control-sm text-overflow">@showSelectedBranches</p>
                                                    <div class="form-control form-control-sm input-group-append dxbs-input-group-append dxbs-focus-hidden">
                                                        <button class="btn btn-sm dx-btn  btn-secondary dxbs-edit-btn dropdown-toggle dxbs-dropdown-toggle" type="button">
                                                            <span></span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="dropdown-menu dropdownlist" role="menu" aria-labelledby="lstbranch">
                                                    <DxListBox DataAsync="@GetBranchListAsync"
                                                               TextFieldName="TextNullbus"
                                                               ListRenderMode="ListRenderMode.Entire"
                                                               SelectionMode="ListBoxSelectionMode.Multiple"
                                                               SelectedItems="@SelectedBranchItems"
                                                               SelectedItemsChanged="@SelectedBranchItemsChanged"
                                                               ShowCheckboxes="true"
                                                               CssClass="custom-dx-listbox">
                                                    </DxListBox>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group d-sm-flex flex-nowrap">
                                    <label class="col-form-label-sm mr-3">@Lang["reservation_classification"]：</label>
                                    <nav class="nav nav-pills">
                                        <a href="javascript:void(0)" class="nav-link @(Param.ActiveR == 0 ? "active" : null)" @onclick="@(e => clickR(e, 0))">@Lang["all"]</a>
                                        @foreach (var i in reservation)
                                        {
                                            <a href="javascript:void(0)" class="nav-link @(Param.ActiveR == i.YoyaKbnSeq ? "active" : null)" @onclick="@(e => clickR(e, i.YoyaKbnSeq))">@i.YoyaKbnNm</a>
                                        }
                                    </nav>
                                </div>
                            </div>
                        </div>
                        break;
                }
            </div>
        </div>
    </div>

    <div class="d-sm-flex align-items-center justify-content-between mb-2">
        <div class="date-section d-flex align-items-center mb-2 mb-lg-0">
            <a class="nav-link py-0 px-0" href="javascript:void(0)" @onclick="@((e) => onPrevious(e))">
                <i class="fa fa-caret-left" aria-hidden="true"></i> @Lang["onedayago"]
            </a>
            <DxDateEdit Date="@Date" DateChanged="@((newValue) => OnDateChanged(newValue))" Format="yyyy/MM/dd" CssClass="width--120 mx-2"
                        ></DxDateEdit>
            <a class="nav-link py-0 px-0" href="javascript:void(0)" @onclick="@((e) => onNext(e))">
                @Lang["onedaylater"] <i class="fa fa-caret-right" aria-hidden="true"></i>
            </a>
        </div>
        <div class="list-button">
            <!-- Button Divided into 4 -->
            <button @onclick="@((e) => onDivided(e))" disabled="@disableClass" class="btn btn-sm btn-secondary mb-1 mb-lg-0 @(Param.IsDivided == true ? "d-none" : null)">
                <i class="fa fa-object-group" aria-hidden="true"></i> @Lang["btn_divided"]
            </button>
            <button @onclick="@((e) => onCombine(e))" disabled="@disableClass" class="btn btn-sm btn-secondary mb-1 mb-lg-0 @(!Param.IsDivided == true ? "d-none" : null)">
                <i class="fa fa-newspaper-o" aria-hidden="true"></i> @Lang["btn_divided_back"]
            </button>

            <!-- Create Button -->
            <button @onclick="@((e) => onCreate(e))" disabled="@disableClass" class='btn btn-sm btn-secondary mb-1 mb-lg-0 @(Param.Mode == (int)BusLineMode.Create ? "d-none" : null)'>
                <i class="fa fa-plus" aria-hidden="true"></i> @Lang["btn_create"]
            </button>
            <button type="button" @onclick="@((e) => OnInsert(e))" class="btn btn-sm btn-primary @(Param.Mode != (int)BusLineMode.Create ? "d-none" : null)">
                <i class="fa fa-floppy-o" aria-hidden="true"></i>
            </button>
            <button type="button" @onclick="@((e) => OnReset(e))" class="btn btn-sm btn-danger @(Param.Mode != (int)BusLineMode.Create ? "d-none" : null)">
                <i class="fa fa-times" aria-hidden="true"></i>
            </button>

            <!-- Edit Button -->
            @*<button @onclick="@((e) => onEdit(e))" disabled="@disableClass" class="btn btn-sm btn-secondary mb-1 mb-lg-0 @(Param.Mode == (int)BusLineMode.Edit ? "d-none" : null)">
                    <i class="fa fa-pencil" aria-hidden="true"></i> @Lang["btn_edit"]
                </button>
                <button @onclick="@((e) => onView(e))" class="btn btn-sm btn-secondary mb-1 mb-lg-0 btn-danger @(Param.Mode != (int)BusLineMode.Edit ? "d-none" : null)">
                    <i class="fa fa-pencil" aria-hidden="true"></i> @Lang["btn_edit_back"]
                </button>*@

            <!-- Button -->
            <button @onclick="@((e) => onClickStaffChart(e))" class="btn btn-sm btn-secondary mb-1 mb-lg-0">
                <i class="fa fa-users" aria-hidden="true"></i> @Lang["btn_crew"]
            </button>

            <!-- Cut Button -->
            <button @onclick="@((e) => onCut(e))" disabled="@disableClass" class="btn btn-sm btn-secondary mb-1 mb-lg-0 @(Param.Mode == (int)BusLineMode.Cut ? "d-none" : null)">
                <i class="fa fa-scissors" aria-hidden="true"></i> @Lang["btn_split"]
            </button>
            <button @onclick="@((e) => onView(e))" class="btn btn-sm btn-secondary mb-1 mb-lg-0 btn-danger @(Param.Mode != (int)BusLineMode.Cut ? "d-none" : null)">
                <i class="fa fa-scissors" aria-hidden="true"></i> @Lang["btn_split_back"]
            </button>

            <!-- Repair Button -->
            <button @onclick="@((e) => onRepair(e))" disabled="@disableClass" class="btn btn-sm btn-secondary mb-1 mb-lg-0 @(Param.Mode == (int)BusLineMode.Repair ? "d-none" : null)">
                <i class="fa fa-wrench" aria-hidden="true"></i> @Lang["btn_repair"]
            </button>

            <button type="button" @onclick="@((e) => OnReset(e))" class="btn btn-sm btn-danger @(Param.Mode != (int)BusLineMode.Repair ? "d-none" : null)">
                <i class="fa fa-times" aria-hidden="true"></i>
            </button>

            <!-- Button -->
            @*<button disabled="disabled" class="btn btn-sm btn-secondary mb-1 mb-lg-0">
                    <i class="fa fa-exclamation" aria-hidden="true"></i> @Lang["btn_error_checking"]
                </button>*@

            <!-- Zoom Button -->
            @*<button @onclick="@((e) => onZoom(e))" disabled="@(Param.IsDivided == true ? "disabled" : disableClass)" class="btn btn-sm btn-secondary mb-1 mb-lg-0  @(Param.Mode == (int)BusLineMode.Zoom ? "d-none" : null)">
                    <i class="fa fa-search-plus" aria-hidden="true"></i> @Lang["btn_zoom"]
                </button>
                <button @onclick="@((e) => onView(e))" class="btn btn-sm btn-secondary mb-1 mb-lg-0 btn-danger @(Param.Mode != (int)BusLineMode.Zoom ? "d-none" : null)">
                    <i class="fa fa-search-plus" aria-hidden="true"></i> @Lang["btn_zoom_back"]
                </button>*@

            <!-- Button -->
            <button class="btn btn-sm btn-secondary mb-1 mb-lg-0" @onclick="DownloadExcel">
                <i class="fa fa-file-excel-o" aria-hidden="true"></i>
                @Lang["Excel出力"]
            </button>
        </div>
    </div>
</div>
<HassyaAllrightCloud.Pages.Components.Zoom Param="@Param" OnCallBackUpdatedZoom="HandleUpdateZoom"></HassyaAllrightCloud.Pages.Components.Zoom>
@if (Param.Mode == (int)BusLineMode.Repair)
{
    <HassyaAllrightCloud.Pages.Components.BusRepair OnCallBackIdCode="OnCallBackIdCode"></HassyaAllrightCloud.Pages.Components.BusRepair>
}
@if (Param.ActiveG == (int)GroupMode.All)
{
    Busnames = Busnames.OrderBy(t => t.BusVehicle).ToList();
    if (Busnames == null)
    {
        <p><i class="fa fa-spinner"></i> Loading</p>
    }
    else
    {
        <HassyaAllrightCloud.Pages.Components.Bus ValueCheckHaitaBusSchedule="@ValueCheckHaitaBusSchedule" UpYmdTimes="@UpYmdTimes" Param="@Param" Width="@Width" Date="@Date" Busnames="@Busnames" BusLines="@Buslines" Busgreen="@Busgreen" Busgray="@Busgray" OnRowUpdated="reload" updateitem="OnRowUpdatedGreen" Businsert="@businsert" BusInfo="@bus" OnShowContextMenuUpdated="HandleShowContextMenu" listKyoSHebyDate="@KyoSHeDatabyDatelst" GroupID="0" OnClickDateComment="ClickHandler" Calendlst="@listdatecomment" CodeKbnItem="@CodeKbnItem" SelectedBranchItems="@SelectedBranchItems"></HassyaAllrightCloud.Pages.Components.Bus>
    }
}
else if (Param.ActiveG == (int)GroupMode.Branch)
{
    foreach (var company in lstBusBranchType)
    {
        List<BusDataType> tmp = new List<BusDataType>();
        tmp = Busnames.Where(t => t.BusBranchID == company.BusBranchID).OrderBy(t => t.BusVehicle).ToList();
        if (tmp == null)
        {
            <p><i class="fa fa-spinner"></i> Loading</p>
        }
        else
        {
            <div class="title-section mb-2">
                <i class="fa fa-angle-up" aria-hidden="true"></i> @company.BusBranchName
            </div>
            <HassyaAllrightCloud.Pages.Components.Bus ValueCheckHaitaBusSchedule="@ValueCheckHaitaBusSchedule" UpYmdTimes="@UpYmdTimes" Param="@Param" Width="@Width" Date="@Date" Busnames="@tmp" BusLines="@Buslines" Busgreen="@Busgreen" Busgray="@Busgray" OnRowUpdated="reload" updateitem="OnRowUpdatedGreen" OnShowContextMenuUpdated="HandleShowContextMenu" listKyoSHebyDate="@KyoSHeDatabyDatelst" GroupID="@company.BusBranchID" OnClickDateComment="ClickHandler" Calendlst="@listdatecomment" CodeKbnItem="@CodeKbnItem" SelectedBranchItems="@SelectedBranchItems"></HassyaAllrightCloud.Pages.Components.Bus>
        }
    }
}
else if (Param.ActiveG == (int)GroupMode.Company)
{
    foreach (var company in lstBusCompanyType)
    {
        List<BusDataType> tmp = new List<BusDataType>();
        tmp = Busnames.Where(t => t.BusCompanyID == company.BusCompanyID).OrderBy(t => t.BusVehicle).ToList();
        if (tmp == null)
        {
            <p><i class="fa fa-spinner"></i> Loading</p>
        }
        else
        {
            <div class="title-section mb-2">
                <i class="fa fa-angle-up" aria-hidden="true"></i> @company.BusCompanyName
            </div>
            <HassyaAllrightCloud.Pages.Components.Bus ValueCheckHaitaBusSchedule="@ValueCheckHaitaBusSchedule" UpYmdTimes="@UpYmdTimes" Param="@Param" Width="@Width" Date="@Date" Busnames="@tmp" BusLines="@Buslines" Busgreen="@Busgreen" Busgray="@Busgray" OnRowUpdated="reload" updateitem="OnRowUpdatedGreen" OnShowContextMenuUpdated="HandleShowContextMenu" listKyoSHebyDate="@KyoSHeDatabyDatelst" GroupID="@company.BusCompanyID" OnClickDateComment="ClickHandler" Calendlst="@listdatecomment" CodeKbnItem="@CodeKbnItem" SelectedBranchItems="@SelectedBranchItems"></HassyaAllrightCloud.Pages.Components.Bus>
        }
    }
}

<BlazorContextMenu.ContextMenu Id="myMenuBusRepair" CssClass="contextmenu" OnAppearing="MenuOnAppearingHandler">
    <Item Id="1" OnClick="@(Openpopupdelete)" OnAppearing="ItemOnAppearingHandler"> <i class="fa fa-times" aria-hidden="true"></i> @Lang["repair_deletion"] </Item>
    <Item Id="2" OnClick="@(OpenPopupUpdateBusrp)" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["repair_input"]</Item>
</BlazorContextMenu.ContextMenu>

<BlazorContextMenu.ContextMenu Id="myMenuCutline" CssClass="contextmenu" OnAppearing="MenuOnAppearingHandler">
    <Item Id="menuitem-delete" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-trash" aria-hidden="true"></i> @Lang["delete_divided_data"]</Item>
    <Item Id="menuitem-merge" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-chain" aria-hidden="true"></i> @Lang["split_data_combination"]</Item>
    <div class="line"></div>
    <Item Id="menuitem-undo" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-mail-reply" aria-hidden="true"></i> @Lang["release_dispatch"]</Item>
    <Item Id="menuitem-simpledispatch" OnClick="@ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-check-square" aria-hidden="true"></i> @Lang["simple_dispatch"]</Item>
    <div class="line"></div>
    <Item Id="menuitem-temporarycarinput" OnClick="OpenBusAllocation" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-book" aria-hidden="true"></i> @Lang["temporary_car_input"]</Item>
    <Item Id="menuitem-busallocation" OnClick="OpenBusAllocation" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-book" aria-hidden="true"></i> @Lang["menu_busallocation"]</Item>
    <Item Id="menuitem-partnerbookinginput" OnClick="OpenPartnerBookingInput" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-coffee" aria-hidden="true"></i> @Lang["CarTransfer"]</Item>
    <Item Id="menuitem-car-cooperation" OnClick="OpenCarCooperation" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-share-alt" aria-hidden="true"></i> @Lang["car_cooperation"]</Item>
    <div class="line"></div>
    <Item Id="menuitem-reservation-correction" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["reservation_correction"]</Item>
    <Item>
        <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ReservationCopy"]
        <SubMenu>
            <Item Id="menuitem-single-copy" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["SingleCopy"]</Item>
            <Item Id="menuitem-multi-copy" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["CalendarCopy"]</Item>
        </SubMenu>
    </Item>
    <Item Id="menuitem-reservation-cancellation" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ReservationCancellation"]</Item>
    <div class="line"></div>
    <Item>
        <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ReservationFormAndOtherInput"]
        <SubMenu>
            <Item Id="6" OnClick="OpenJourneys" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-columns" aria-hidden="true"></i> @Lang["menu_journeys"]</Item>
            <Item OnClick="OpenFutai" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["AncillaryInput"]</Item>
            <Item OnClick="OpenTehai" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ArrangementInput"]</Item>
            <Item OnClick="OpenTsumi" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["LoadedProductInput"]</Item>
            <Item Id="menuitem-confirmation" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["ConfirmInput"]</Item>
            <Item Id="menuitem-edityykshobikonm" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["RemarksInputYyksho"]</Item>
            <Item Id="menuitem-editunkobibikonm" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["RemarksInputUnkobi"]</Item>
        </SubMenu>
    </Item>
    <div class="line"></div>
    <Item>
        <i class="fa fa-pencil-square-o" aria-hidden="true"></i>@Lang["FormInput"]
        <SubMenu>
            <Item>
                <i class="fa fa-file-text-o" aria-hidden="true"></i> @Lang["UnderwritingOfCarriage"]
                <SubMenu>
                    <Item Id="menuitem-savepdf-reservation" OnClick="ItemClick"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="menuitem-preview-reservation" OnClick="ItemClick"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item>
                <i class="fa fa-file-text-o" aria-hidden="true"></i> @Lang["UnderwritingOfTransportation"]
                <SubMenu>
                    <Item Id="menuitem-savepdf-reservationtype" OnClick="ItemClick"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="menuitem-preview-reservationtype" OnClick="ItemClick"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <div class="line"></div>
            <Item>
                <i class="fa fa-pencil-square-o" aria-hidden="true"></i>@Lang["BusArrangement"]
                <SubMenu>
                    <Item Id="BusCoooradination_Download" OnClick="@ItemClickBusCooradinationReport" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="BusCoooradination_Preview" OnClick="@ItemClickBusCooradinationReport" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report_operating_instructions"]
                <SubMenu>
                    <Item OnClick="ItemClick" Id="download_report_operating_instructions" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item OnClick="ItemClick" Id="preview_report_operating_instructions" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report_flight_record_book"]
                <SubMenu>
                    <Item OnClick="ItemClick" Id="download_report_flight_record_book" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item OnClick="ItemClick" Id="preview_report_flight_record_book" OnAppearing="ItemOnAppearingHandler"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <div class="line"></div>
            <Item Id="menuitem-preview-billprint" OnClick="ItemClick">
                <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["Invoice"]
                @*<SubMenu>
                        <Item Id="menuitem-savepdf-billprint" OnClick="ItemClick"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                        <Item Id="menuitem-preview-billprint" OnClick="ItemClick"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                    </SubMenu>*@
            </Item>
            <Item>
                <i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["AdvanceStatement"]
                <SubMenu>
                    <Item Id="menuitem-savepdf-advancepayment" OnClick="ItemClick"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="menuitem-preview-advancepayment" OnClick="ItemClick"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
        </SubMenu>
    </Item>
    <div class="line"></div>
    <Item><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["CommentInput"]</Item>
</BlazorContextMenu.ContextMenu>

<BlazorContextMenu.ContextMenu Id="menuDate" CssClass="contextmenu">
    <Item Id="menuitem-supermenutype1" OnClick="ItemClick"><i class="fa  fa-home" aria-hidden="true"></i> @Lang["supermenu_reservation"]</Item>
    <Item Id="menuitem-supermenutype2" OnClick="ItemClick"><i class="fa  fa-home" aria-hidden="true"></i> @Lang["supermenu_vehicle"]</Item>
    <Item Id="menuitem-hypermenu" OnClick="ItemClick"><i class="fa  fa-home" aria-hidden="true"></i> @Lang["hypermenu"]</Item>
    <div class="line"></div>
    <Item Id="temporary_car_input" OnClick="ItemClick"><i class="fa fa-book" aria-hidden="true"></i> @Lang["temporary_car_input"]</Item>
    <Item Id="menuitem-busallocation" OnClick="ItemClick"><i class="fa fa-book" aria-hidden="true"></i> @Lang["menu_busallocation"]</Item>
    <Item Id="menuitem-staff" OnClick="ItemClick"><i class="fa fa-id-card-o" aria-hidden="true"></i> @Lang["staff_input"]</Item>
    <div class="line"></div>
    <Item Id="daily_report_vehicle" OnClick="ItemClick"><i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["daily_report_vehicle"]</Item>
    <Item Enabled="false"><i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["list_of_hire_cars"]</Item>
    <div class="line"></div>
    <Item>
        <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["FormInput"]
        <SubMenu>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["BusReport"]
                <SubMenu>
                    <Item Id="downloadBusReport" OnClick="ItemClickBusReport"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="previewBusReport" OnClick="ItemClickBusReport"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report"]
                <SubMenu>
                    <Item Id="downloadReportTenkokiroku" OnClick="ItemClickReport"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="previewReportTenkokiroku" OnClick="ItemClickReport"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
            <Item Id="previewUnkoushijishoReport" OnClick="ItemClickReport">
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report_operating_instructions"]
                @*<SubMenu>
                        <Item Id="downloadUnkoushijishoReport" OnClick="ItemClickReport"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                        <Item Id="previewUnkoushijishoReport" OnClick="ItemClickReport"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                    </SubMenu>*@
            </Item>
            <Item Id="previewJomukirokuboReport" OnClick="ItemClickReport">
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["report_flight_record_book"]
                @*<SubMenu>
                        <Item Id="downloadJomukirokuboReport" OnClick="ItemClickReport"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                        <Item Id="previewJomukirokuboReport" OnClick="ItemClickReport"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                    </SubMenu>*@
            </Item>
            <Item>
                <i class="fa fa-list-alt" aria-hidden="true"></i> @Lang["AdvanceStatement"]
                <SubMenu>
                    <Item Id="AdvanceStatementWeb" OnClick="ItemClick"><i class="fa fa-print" aria-hidden="true"></i> @Lang["report_web"]</Item>
                    <Item Id="AdvanceStatementPrint" OnClick="ItemClick"><i class="fa fa-desktop" aria-hidden="true"></i> @Lang["report_pdf"]</Item>
                </SubMenu>
            </Item>
        </SubMenu>
    </Item>
    <div class="line"></div>
    <Item Id="menuitem-sticker" OnClick="ItemClickSticker"><i class="fa fa-wrench" aria-hidden="true"></i> @Lang["sticker"]</Item>
</BlazorContextMenu.ContextMenu>
@using HassyaAllrightCloud.Domain.Dto.CommonComponents
@code {
    [Inject] public IBusScheduleService _busScheduleService { get; set; }
    [Inject] protected IErrorHandlerService _errorModalService { get; set; }
    [Parameter] public string date { get; set; }
    public OperatingInstructionReportData reportData = new OperatingInstructionReportData();
    List<ReservationData> reservation;
    List<BranchChartData> branchchart;
    List<CompanyChartData> companychart;
    List<BranchChartData> tmpbranchchart = new List<BranchChartData>();
    BranchChartData allbranch = new BranchChartData() { EigyoCdSeq = 0, RyakuNm = "すべて", CompanyCdSeq = -1 };
    List<CompanyChartData> tmpcompanychart = new List<CompanyChartData>();
    CompanyChartData allcompany = new CompanyChartData() { CompanyCdSeq = 0, CompanyNm = "すべて" };
    List<BusDataType> Busnames = new List<BusDataType>();
    List<BusDataType> Busgreen = new List<BusDataType>();
    List<BusDataType> Busgray = new List<BusDataType>();
    List<BusInfoData> bus = new List<BusInfoData>();
    List<ItemBus> Buslines = new List<ItemBus>();
    IEnumerable<BusInfoData> busname = new List<BusInfoData>();
    List<TKD_ShuriData> Busrepair = new List<TKD_ShuriData>();
    List<TokiskChartData> Tokisk = new List<TokiskChartData>();
    List<BusBookingData> buslines = new List<BusBookingData>();
    List<TKD_ShuriData> busrepair = new List<TKD_ShuriData>();
    List<LoadCustomerList> CustomerList = new List<LoadCustomerList>();
    List<LoadCustomerList> CustomerListlinegreen = new List<LoadCustomerList>();
    List<TkdKaknin> KakninLst = new List<TkdKaknin>();
    List<KyoSHeDatabyDate> KyoSHeDatabyDatelst = new List<KyoSHeDatabyDate>();
    IEnumerable<BusCompanyType> lstBusBranchType = new List<BusCompanyType>();
    IEnumerable<BusCompanyType> lstBusCompanyType = new List<BusCompanyType>();
    IEnumerable<VPM_RepairData> CodeKbnlst = new List<VPM_RepairData>();
    BusscheduleData BusscheduleInsert = new BusscheduleData();
    IEnumerable<CompanyChartData> SelectedCompanyItems { get; set; }
    IEnumerable<BranchChartData> SelectedBranchItems { get; set; }
    DateTime Date { get; set; } = DateTime.Today;
    public ConfigBusSchedule Param;
    private LoadCustomerList CustomerItem { get; set; }
    public List<int> comlst = new List<int>();
    public List<int> branchlst = new List<int>();
    public List<ItemBus> businsert = new List<ItemBus>();
    public List<TkdCalend> listdatecomment = new List<TkdCalend>();
    public ItemBus itembuschoosemenu { get; set; }
    public BusInfoData BusNameItem { get; set; } = new BusInfoData();
    public VPM_RepairData CodeKbnItem { get; set; } = new VPM_RepairData();
    public BusScheduleFilter ScheduleFilter = new BusScheduleFilter();
    private List<ResponseHaiTaCheck> UpYmdTimes = new List<ResponseHaiTaCheck>();
    private List<ResponseHaiTaCheck> UpYmdTimeNews = new List<ResponseHaiTaCheck>();
    private ResponseHaiTaCheck UpYmdTime = new ResponseHaiTaCheck();
    public double w { get; set; } = 1920;
    public double Width { get; set; }
    bool PopupUpdateRowVisible { get; set; } = false;
    bool PopupJourney { get; set; } = false;
    bool PopupTehai { get; set; } = false;
    bool PopupFutai { get; set; }
    bool PopupCancel { get; set; }
    bool PopupTsumi { get; set; }
    bool PopupVisible { get; set; } = false;
    bool PopupVisiblenew { get; set; } = false;
    bool Popupunsave { get; set; } = false;
    bool PopupVisibleBranchnew { get; set; } = false;
    bool PopupCommentdate { get; set; } = false;
    bool EmptyCompany { get; set; } = false;
    bool EmptyBranch { get; set; } = false;
    private bool flagShowClass = false;
    private string showClass => flagShowClass ? null : "d-none";
    private string disableClass => flagShowClass ? "disabled" : null;
    private ItemBus updatebusgreen { get; set; }
    private ItemBus update { get; set; }
    protected bool IsDisabled { get; set; } = true;
    protected bool IsDisabledinsert { get; set; } = true;
    protected bool PopupDeleteBusrepair { get; set; } = false;
    protected bool Popupupdatebus { get; set; } = false;
    protected bool updategreenline { get; set; } = false;
    bool Ischecktext { get; set; } = false;
    bool isLoading { get; set; } = true;
    bool showCheckboxes = true;
    bool isFilterApply;
    bool ShowCheckboxes { get => showCheckboxes; set { showCheckboxes = value; StateHasChanged(); } }
    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    bool isErrorActive { get; set; } = false;
    bool isErrorUpdateBusrp { get; set; } = false;
    bool cbbisnull { get; set; } = false;
    bool nameisnull { get; set; } = false;
    bool drivernumisnull { get; set; } = false;
    bool driverisnotfull { get; set; } = false;
    bool PopupNotCreateline { get; set; } = false;
    bool popuprpcheck { get; set; } = false;
    string bookingname { get; set; }
    string drivernum { get; set; }
    string guidernum { get; set; }
    public bool checkCompanyAll { get; set; } = true;
    public bool checkBranchAll { get; set; } = true;
    public bool PopupUpdateBusRepair { get; set; }
    public bool Dropunable { get; set; } = false;
    public string dateformat = "yyyyMMdd";
    public string timeformat = "hhmmss";
    public string CompanyEmptyMessage = "";
    public string BranchEmptyMessage = "";
    public string customerEmptyMessage = "";
    public string organizationEmptyMessage = "";
    public string drivernumEmptyMessage = "";
    public string driverisnotfullMessage = "";
    public string repairperiodMessage = "";
    public string commentdate = "";
    public TimeSpan startTime;
    public TimeSpan endTime;
    string cssclassdate { get; set; } = "width--130";
    string cssclasstime { get; set; } = "width--75 ml-2 date-sm customTime";
    string datecommentpopup { get; set; } = "";
    int TeiCnt { get; set; } = 0;
    int JyoSyaJin { get; set; } = 0;
    string tokisk_YouSRyakuNm { get; set; } = "";
    private ITPM_YoyKbnDataListService TPM_YoyKbnDataService { get; set; }
    private ITPM_CompnyDataListService TPM_CompnyDataService { get; set; }
    private ITPM_EigyosDataListService TPM_EigyosDataService { get; set; }
    private IBusDataListService BusDataService { get; set; }
    private IBusBookingDataListService BusBookingDataService { get; set; }
    private ILoadBusTooltipListService BusTooltipService { get; set; }
    private ITPM_TokiskDataListService TPM_TokiskDataService { get; set; }
    private ITKD_YoshaDataListService TKD_YoshaDataService { get; set; }
    private ITKD_HaishaDataListService TKD_HaishaDataService { get; set; }
    private ITKD_ShuriDataListService TKD_ShuriDataService { get; set; }
    private ITPM_CodeKbListService TPM_CodeKbnService { get; set; }
    private ITPM_KyoSHeDataListService TPM_KyoSHeDataService { get; set; }
    private ITKD_KakninDataListService TKD_KakninDataService { get; set; }
    private ITPM_CalendDataListService TPM_CalendDataService { get; set; }
    private IVPM_SyaRyoListService TPM_SyaRyoService { get; set; }
    private IBookingTypeListService YoyKbnService { get; set; }
    private List<ResponseHaiTaCheck> UpYmdTimeAfters { get; set; }
    bool PopupCarCooperation { get; set; } = false;
    bool IsOpenCancelTab { get; set; } = false;
    bool IsOpenConfirmTab { get; set; } = false;
    bool IsOpenEditYykshoBikoNm { get; set; } = false;
    bool IsOpenEditUnkobiBikoNm { get; set; } = false;
    bool PopupMessageCarCooperation { get; set; } = false;
    bool isGyosyaNull = false;
    bool isTokiskNull = false;
    bool isTokiStNull = false;
    bool isFirstSetGyosya = true;
    bool isFirstSetTokisk = true;
    bool isFirstSetTokiSt = true;
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    string showSelectedCompanies = "";
    string showSelectedBranches = "";
    string filterConditionFormName = "KU0100";
    private bool valueHaitaCheck { get; set; } = true;
    private string ukeNo { get; set; }
    private ActionBusSchedule actionBusSchedule { get; set; } = ActionBusSchedule.None;
    //popup
    string popupTitle { get; set; }
    string popupContent { get; set; }
    string popupiconinfo = "fa-info-circle";
    string popupiconerror = "fa fa-times text-danger";
    string popupicon { get; set; }
    bool PopupHaiTaCheckFail { get; set; } = false;
    public class CustomerModel {
        public CustomerComponentGyosyaData SelectedGyosya { get; set; }
        public CustomerComponentTokiskData SelectedTokisk { get; set; }
        public CustomerComponentTokiStData SelectedTokiSt { get; set; }
    }
    public CustomerModel Model { get; set; } = new CustomerModel();
    /// <summary>
    /// Load javascript of page
    /// </summary>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage");
        JSRuntime.InvokeVoidAsync("setColorFromDb", BusLineCssColorService.GetAllCssColor());
        base.OnParametersSet();
    }
    private void LocalizationInit()
    {
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
        CompanyEmptyMessage = Lang["message_select_company"];
        BranchEmptyMessage = Lang["message_enter_branch_name"];
        customerEmptyMessage = Lang["message_enter_customer_code"];
        organizationEmptyMessage = Lang["message_enter_organization_name"];
        drivernumEmptyMessage = Lang["message_enter_number_of_drivers"];
        driverisnotfullMessage = Lang["message_incorrect_number_of_drivers"];
        repairperiodMessage = Lang["repair_period_Message"];
        DateTime selectDate;
        if (!String.IsNullOrEmpty(date) && !String.IsNullOrWhiteSpace(date))
        {
            DateTime.TryParseExact(date == null ? DateTime.Today.ToString("yyyyMMdd") : date, "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out selectDate);
            Date = selectDate;
            NavManager.NavigateTo("/BusSchedule", false);
        }

    }
    void ClickHandler(string newMessage)
    {
        datecommentpopup = newMessage;
        commentdate = TPM_CalendDataService.Getdatabydate(1, 1, datecommentpopup) == null ? "" : TPM_CalendDataService.Getdatabydate(1, 1, datecommentpopup).CalenCom;
        if (commentdate.Length > 100)
        {
            commentdate = "";
        }
        PopupCommentdate = true;
        StateHasChanged();
    }
    private async Task CancelDateComment(MouseEventArgs e)
    {
        commentdate = "";
        PopupCommentdate = false;
        isLoading = true;
        Ischecktext = false;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task UpdateDateComment(MouseEventArgs e)
    {

        bool check = TPM_CalendDataService.UpdateCommentDate(datecommentpopup, commentdate, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID, 1, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, filterConditionFormName);
        if (!check)
        {
            Ischecktext = true;
            StateHasChanged();
        }
        else
        {
            PopupCommentdate = false;
            Ischecktext = false;
            datecommentpopup = "";
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }

    }
    void OnModelChanged(string propertyName, dynamic val, bool isItemChangedInsert) {
        var propertyInfo = Model.GetType().GetProperty(propertyName);
        propertyInfo.SetValue(Model, val);
        if(propertyName == nameof(CustomerModel.SelectedGyosya))
        {
            isGyosyaNull = isFirstSetGyosya ? false : val == null;
            isFirstSetGyosya = false;
        }

        if(propertyName == nameof(CustomerModel.SelectedTokisk))
        {
            isTokiskNull = isFirstSetTokisk ? false : val == null;
            isFirstSetTokisk = false;
        }

        if (propertyName == nameof(CustomerModel.SelectedTokiSt))
        {
            if(val != null) {
                CustomerItem = new LoadCustomerList()
                {
                    TokuiSeq = Model.SelectedTokiSt.TokuiSeq,
                    SitenCdSeq = Model.SelectedTokiSt.SitenCdSeq,
                    TokuiTel = Model.SelectedTokiSt.TelNo,
                    TokuiTanNm = Model.SelectedTokiSt.TokuiTanNm,
                    TokuiFax = Model.SelectedTokiSt.FaxNo,
                    TokuiMail = Model.SelectedTokiSt.TokuiMail,
                    TesuRitu = Model.SelectedTokiSt.TesuRitu
                };
            } else CustomerItem = null;
            isTokiStNull = isFirstSetTokiSt ? false : val == null;
            isFirstSetTokiSt = false;
            if (isItemChangedInsert)
            {
                BusscheduleInsert.Customerlst = CustomerItem;
                cbbisnull = CustomerItem == null;
            }
            else
            {
                IsDisabled = CustomerItem == null;
            }
        }
        StateHasChanged();
    }
    //private void SelectedCustomerItemChanged(LoadCustomerList customer)
    //{
    //    IsDisabled = false;
    //    CustomerItem = customer;
    //    StateHasChanged();
    //}

    //private void SelectedCustomerItemChangedInsert(LoadCustomerList customer)
    //{
    //    CustomerItem = customer;
    //    BusscheduleInsert.Customerlst = customer;
    //    cbbisnull = false;
    //    StateHasChanged();
    //}

    private async Task OnUpdateLineGreen(MouseEventArgs e)
    {
        IsDisabled = true;
        var lstcus = await TKD_YoshaDataService.Getdata(CustomerItem.TokuiSeq, CustomerItem.SitenCdSeq, updatebusgreen.BookingId);
        var listgreen = Buslines.Where(t => t.YouTblSeq != 0 && t.BookingId == updatebusgreen.BookingId).ToList();
        if (listgreen.Count == 0)
        {
            TKD_HaishaDataService.Updatebusdatagreen(updatebusgreen, new ClaimModel().SyainCdSeq, CustomerItem.TokuiSeq, CustomerItem.SitenCdSeq);
            PopupUpdateRowVisible = false;
            isErrorActive = false;
            IsDisabled = true;
        }
        else
        {
            if (lstcus.Count() == 0)
            {
                PopupUpdateRowVisible = false;

                TKD_HaishaDataService.Updatebusdatagreen(updatebusgreen, new ClaimModel().SyainCdSeq, CustomerItem.TokuiSeq, CustomerItem.SitenCdSeq);
                isErrorActive = false;
                IsDisabled = true;

            }
            else
            {
                List<DatetimeData> datelist = new List<DatetimeData>();
                foreach (var item in listgreen)
                {
                    DateTime startdatene;
                    DateTime.TryParseExact(item.TimeStartString.ToString(),
                                   "yyyyMMddHHmm",
                                   CultureInfo.CurrentCulture,
                                   DateTimeStyles.None,
                                   out startdatene);

                    DateTime enddatene;
                    DateTime.TryParseExact(item.TimeEndString.ToString(),
                                   "yyyyMMddHHmm",
                                   CultureInfo.CurrentCulture,
                                   DateTimeStyles.None,
                                   out enddatene);
                    DatetimeData newdates = new DatetimeData();
                    newdates.DateStart = startdatene;
                    newdates.DateEnd = enddatene;
                    datelist.Add(newdates);
                }
                DateTime startdatetmp;
                DateTime.TryParseExact(updatebusgreen.TimeStartString.ToString(),
                               "yyyyMMddHHmm",
                               CultureInfo.CurrentCulture,
                               DateTimeStyles.None,
                               out startdatetmp);

                DateTime enddatetmp;
                DateTime.TryParseExact(updatebusgreen.TimeEndString.ToString(),
                               "yyyyMMddHHmm",
                               CultureInfo.CurrentCulture,
                               DateTimeStyles.None,
                               out enddatetmp);
                DatetimeData newdate = new DatetimeData();
                newdate.DateStart = startdatetmp;
                newdate.DateEnd = enddatetmp;
                if (BusScheduleHelper.compairdate(datelist.OrderBy(t => t.DateStart).ToList(), newdate))
                {
                    PopupUpdateRowVisible = false;
                    TKD_HaishaDataService.Updatebusdatagreen(updatebusgreen, new ClaimModel().SyainCdSeq, CustomerItem.TokuiSeq, CustomerItem.SitenCdSeq);
                    isErrorActive = false;
                    IsDisabled = true;
                }
                else
                {
                    isErrorActive = true;
                    IsDisabled = true;
                }
            }

        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task Closepopup(MouseEventArgs e)
    {
        isErrorActive = false;
        IsDisabled = false;
        PopupUpdateRowVisible = false;
        Model = new CustomerModel();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    void BookingNameTextChage(String value)
    {

        BusscheduleInsert.BookingName = value;
        if (!String.IsNullOrEmpty(value))
        {
            nameisnull = false;
        }
        else
        {
            nameisnull = true;
        }
        InvokeAsync(StateHasChanged);
    }

    void DriverNumTextChange(String value)
    {
        short newValue;
        bool checkParse = short.TryParse(value, out newValue);
        if (checkParse)
        {
            BusscheduleInsert.BusdriverNum = newValue;
        }
        else
        {
            BusscheduleInsert.BusdriverNum = 1;
        }
        if (newValue < BusscheduleInsert.Itembus.Count())
        {
            driverisnotfull = true;
        }
        else
        {
            driverisnotfull = false;
        }
        drivernumisnull = false;
        InvokeAsync(StateHasChanged);
    }

    void GuiderNumTextChange(String value)
    {
        short newValue;
        bool checkParse = short.TryParse(value, out newValue);
        if (checkParse)
        {
            BusscheduleInsert.BusGuideNum = newValue;
        }
        InvokeAsync(StateHasChanged);
    }
    private void SelectBuslineChange(BusInfoData Busline)
    {
        itembuschoosemenu.BusLine = Busline.SyaRyoCdSeq.ToString();
        BusNameItem = busname.Where(t => t.SyaRyoCdSeq.ToString() == itembuschoosemenu.BusLine).First();
        InvokeAsync(StateHasChanged);
    }
    private void SelectTypeChange(VPM_RepairData code)
    {
        if (code != null)
        {
            itembuschoosemenu.ShuriCdSeq = code.RepairCdSeq;
            CodeKbnItem = CodeKbnlst.Where(t => t.RepairCdSeq == itembuschoosemenu.ShuriCdSeq).First();
            InvokeAsync(StateHasChanged);
        }

    }
    private void TextBusrpChange(string s)
    {
        itembuschoosemenu.BikoNm = s;
        InvokeAsync(StateHasChanged);
    }
    private void OnDateStartChange(DateTime? date)
    {
        if(date == null)
            return;
        itembuschoosemenu.StartDate = ((DateTime)date).ToString("yyyyMMdd");
        checkTimebusRepair(itembuschoosemenu.StartDate, itembuschoosemenu.EndDate, itembuschoosemenu.TimeStart.ToString("D4"), itembuschoosemenu.TimeEnd.ToString("D4"));

        InvokeAsync(StateHasChanged);
    }
    private void OnDateEndChange(DateTime? date)
    {
        if (date == null)
            return;
        itembuschoosemenu.EndDate = ((DateTime)date).ToString("yyyyMMdd");
        checkTimebusRepair(itembuschoosemenu.StartDate, itembuschoosemenu.EndDate, itembuschoosemenu.TimeStart.ToString("D4"), itembuschoosemenu.TimeEnd.ToString("D4"));
        InvokeAsync(StateHasChanged);
    }
    private void onStartimechage(string starttime)
    {
        string date = int.Parse(starttime).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            itembuschoosemenu.TimeStart = int.Parse(starttime.ToString());
        }
        TimeSpan.TryParseExact(itembuschoosemenu.TimeStart.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out startTime);
        checkTimebusRepair(itembuschoosemenu.StartDate, itembuschoosemenu.EndDate, itembuschoosemenu.TimeStart.ToString("D4"), itembuschoosemenu.TimeEnd.ToString("D4"));
        InvokeAsync(StateHasChanged);
    }
    private void onEndtimechage(string endtime)
    {
        string date = int.Parse(endtime).ToString("D4");
        if (BusScheduleHelper.CheckTimeinDay(date))
        {
            itembuschoosemenu.TimeEnd = int.Parse(endtime);
        }
        TimeSpan.TryParseExact(itembuschoosemenu.TimeEnd.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out endTime);
        checkTimebusRepair(itembuschoosemenu.StartDate, itembuschoosemenu.EndDate, itembuschoosemenu.TimeStart.ToString("D4"), itembuschoosemenu.TimeEnd.ToString("D4"));
        InvokeAsync(StateHasChanged);
    }
    private void checkTimebusRepair(string startdate, string enddate, string starttime, string endtime)
    {
        DateTime startdatene;
        DateTime.TryParseExact(startdate + starttime,
                       "yyyyMMddHHmm",
                       CultureInfo.CurrentCulture,
                       DateTimeStyles.None,
                       out startdatene);

        DateTime enddatene;
        DateTime.TryParseExact(enddate + endtime,
                       "yyyyMMddHHmm",
                       CultureInfo.CurrentCulture,
                       DateTimeStyles.None,
                       out enddatene);
        if (startdatene > enddatene)
        {
            popuprpcheck = true;
        }
        else
        { popuprpcheck = false; }
    }
    private async Task OpenPopupUpdateBusrp()
    {
        PopupUpdateBusRepair = true;
        CodeKbnlst = new List<VPM_RepairData>();
        CodeKbnlst = await TPM_CodeKbnService.GetDataBusRepairType(new ClaimModel().TenantID);
        CodeKbnItem = CodeKbnlst.Where(t => t.RepairCdSeq == itembuschoosemenu.ShuriCdSeq).First();
        busname = await BusDataService.Getbusrp(Date, 1, comlst.ToArray(), branchlst.ToArray(), new ClaimModel().TenantID);
        BusNameItem = busname.Where(t => t.SyaRyoCdSeq.ToString() == itembuschoosemenu.BusLine).First();
        TimeSpan.TryParseExact(itembuschoosemenu.TimeStart.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out startTime);
        TimeSpan.TryParseExact(itembuschoosemenu.TimeEnd.ToString("D4") + "00", timeformat, CultureInfo.InvariantCulture, out endTime);
        if (CodeKbnItem == null)
        {
            CodeKbnItem = CodeKbnlst.First();
        }
        StateHasChanged();
    }
    private async Task CancelUpdateBusrp(MouseEventArgs e)
    {
        PopupUpdateBusRepair = false;
        isErrorUpdateBusrp = false;
        isLoading = true;
        cssclassdate = cssclassdate.Replace("error", "");
        cssclasstime = cssclasstime.Replace("error", "");
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task UpdateBusrepair(MouseEventArgs e)
    {
        DateTime startdatene;
        DateTime.TryParseExact(itembuschoosemenu.StartDate + itembuschoosemenu.TimeStart.ToString("D4"),
                       "yyyyMMddHHmm",
                       CultureInfo.CurrentCulture,
                       DateTimeStyles.None,
                       out startdatene);

        DateTime enddatene;
        DateTime.TryParseExact(itembuschoosemenu.EndDate + itembuschoosemenu.TimeEnd.ToString("D4"),
                       "yyyyMMddHHmm",
                       CultureInfo.CurrentCulture,
                       DateTimeStyles.None,
                       out enddatene);
        if (startdatene > enddatene)
        {
            isErrorUpdateBusrp = true;
            cssclassdate += " error";
            cssclasstime += " error";
        }
        else
        {
            isErrorUpdateBusrp = false;
            PopupUpdateBusRepair = false;
            cssclassdate = cssclassdate.Replace("error", "");
            cssclasstime = cssclasstime.Replace("error", "");
            TKD_ShuriDataService.UpdateBusRepair(itembuschoosemenu, 1);
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }
    }
    private async Task Openpopupdelete()
    {
        PopupDeleteBusrepair = true;
        await InvokeAsync(StateHasChanged);
    }
    private async Task UpdateStatusBusrepair(MouseEventArgs e)
    {
        PopupDeleteBusrepair = false;
        TKD_ShuriDataService.UpdateStatusBusRepair(itembuschoosemenu.Shuri_ShuriTblSeq, 1);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    private async Task CancelDropunable(MouseEventArgs e)
    {
        Dropunable = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task CancelBusrepair(MouseEventArgs e)
    {
        PopupDeleteBusrepair = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task UpdateBus(MouseEventArgs e)
    {
        Popupupdatebus = false;
        updategreenline = false;
        TKD_HaishaDataService.Updatebusdata(updatebusgreen, new ClaimModel().SyainCdSeq);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task CancelUpdateBus(MouseEventArgs e)
    {
        Popupupdatebus = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task CancelUpdateGreenline(MouseEventArgs e)
    {
        updategreenline = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    private async Task OnSave(MouseEventArgs e)
    {
        isTokiStNull = Model.SelectedTokiSt == null;
        isTokiskNull = Model.SelectedTokisk == null;
        isGyosyaNull = Model.SelectedGyosya == null;
        if (BusscheduleInsert.Customerlst == null)
        {
            cbbisnull = true;
        }

        if (string.IsNullOrWhiteSpace(BusscheduleInsert.BookingName))
        {
            nameisnull = true;
        }
        if (string.IsNullOrWhiteSpace(BusscheduleInsert.BusdriverNum.ToString()))
        {
            drivernumisnull = true;
        }
        else
        {
            if (BusscheduleInsert.BusdriverNum < BusscheduleInsert.Itembus.Count())
            {
                driverisnotfull = true;
            }
            else
            {
                driverisnotfull = false;
            }
        }
        if (cbbisnull == false && nameisnull == false && drivernumisnull == false && driverisnotfull == false)
        {
            if(BusscheduleInsert.BusdriverNum>99||BusscheduleInsert.BusGuideNum>99||BusscheduleInsert.BookingName.Length>100)
            {
                PopupVisible = false;
                Popupunsave=true;
            }
            else
            {
                PopupVisible = false;
                var client = await Http.GetHttpClient();
                string baseUrl = AppSettingsService.GetBaseUrl();
                HttpResponseMessage response = await client.PostAsync($"{baseUrl}/api/Busschedule/", Http.getStringContentFromObject(BusscheduleInsert));
                businsert.Clear();
                Param.Mode = (int)BusLineMode.View;
                flagShowClass = !flagShowClass;
                BusscheduleInsert = new BusscheduleData();
                BusscheduleInsert.BranchID = 1;
                BusscheduleInsert.CompanyID = 1;
                BusscheduleInsert.Loginuser = 1;
                BusscheduleInsert.Itembus = businsert;
                isLoading = true;
                await Task.Run(() =>
                {
                    Loadpage().Wait();
                    isLoading = false;
                });
            }

        }
    }

    private async Task OnCancel(MouseEventArgs e)
    {
        PopupVisible = false;
        nameisnull = false;
        cbbisnull = false;
        drivernumisnull = false;
        driverisnotfull = false;
        isLoading = true;
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        businsert.Clear();
        BusscheduleInsert = new BusscheduleData();
        BusscheduleInsert.BranchID = 1;
        BusscheduleInsert.CompanyID = 1;
        BusscheduleInsert.Loginuser = 1;
        BusscheduleInsert.Itembus = businsert;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async void OnDateChanged(DateTime? newValue)
    {
        if(newValue == null)
            return;
        Date = (DateTime)newValue;
        OnGetListDate();
        if (!isFilterApply)
        {
            isLoading = true;
            await InvokeAsync(StateHasChanged);
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
            StateHasChanged();
        }
    }

    private void OnGetListDate()
    {
        Param.ListDate.Clear();
        Param.TotalDays = 0;

        var currentMonth = Date;
        var listDate = new List<DateTime>();
        for(int i = 0; i < 31; i++)
        {
            var date = Date.AddDays(i);
            if(date.Month != currentMonth.Month)
            {
                currentMonth = date;
                Param.ListDate.Add(listDate);
                listDate = new List<DateTime>();
            }
            listDate.Add(date);
            if(i == 30)
            {
                Param.ListDate.Add(listDate);
            }
        }
        Param.TotalDays = 31;
    }

    private async Task onPrevious(MouseEventArgs e)
    {
        Date = Date.AddDays(-1);
        OnGetListDate();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task onNext(MouseEventArgs e)
    {
        Date = Date.AddDays(1);
        OnGetListDate();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    private async Task TodayClick(MouseEventArgs e)
    {
        Date = DateTime.Today;
        OnGetListDate();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    void clickV(MouseEventArgs e, int number)
    {
        Param.ActiveV = number;
        if (!isFilterApply)
        {
            Task.Run(async () =>
            {
                await SaveCurrentFilter();
            });
        }
    }

    void clickL(MouseEventArgs e, int number)
    {
        Param.ActiveL = number;
        if (!isFilterApply)
        {
            Task.Run(async () =>
            {
                await SaveCurrentFilter();
            });
        }
    }

    void clickG(MouseEventArgs e, int number)
    {
        Param.ActiveG = number;
        if (!isFilterApply)
        {
            Task.Run(async () =>
            {
                await SaveCurrentFilter();
            });
        }
    }

    void clickS1(MouseEventArgs e, int number)
    {
        Param.ActiveS1 = number;
        if (!isFilterApply)
        {
            Task.Run(async () =>
            {
                await SaveCurrentFilter();
            });
        }
    }

    void clickS2(MouseEventArgs e, int number)
    {
        Param.ActiveS2 = number;
        if (!isFilterApply)
        {
            Task.Run(async () =>
            {
                await SaveCurrentFilter();
            });
        }
    }

    void clickS3(MouseEventArgs e, int number)
    {
        Param.ActiveS3 = number;
        if (!isFilterApply)
        {
            Task.Run(async () =>
            {
                await SaveCurrentFilter();
            });
        }
    }

    private async Task clickR(MouseEventArgs e, int number)
    {
        Param.ActiveR = number;
        if (!isFilterApply)
        {
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
            StateHasChanged();
        }
    }

    private async Task clickP(MouseEventArgs e, int number)
    {
        Param.ActiveP = number;
        //        _disable = number;

        if (number == (int)DayMode.OneDay)
        {
            Param.Number_of_days = 1;
        }
        else if (number == (int)DayMode.ThreeDays)
        {
            Param.Number_of_days = 3;
        }
        else if (number == (int)DayMode.Week)
        {
            Param.Number_of_days = 7;
        }
        else if (number == (int)DayMode.Month)
        {
            Param.Number_of_days = 31;
            OnGetListDate();
        }

        /*if (number != 1 && Param.ActiveCPT == (int)TimeMode.Minute || number < 3 && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Param.ActiveCPT = (int)TimeMode.OneHour;
        }*/

        // default click 1day will choose 1hour
        if (number == (int)DayMode.OneDay)
        {
            Param.ActiveCPT = (int)TimeMode.OneHour;
        }
        // default click 1week or 1month will choose 1day
        if (number == (int)DayMode.Week || number == (int)DayMode.Month)
        {
            Param.ActiveCPT = (int)TimeMode.Day;
        }
        // default click 3days will choose 3hours
        if (number == (int)DayMode.ThreeDays)
        {
            Param.ActiveCPT = (int)TimeMode.ThreeHours;
        }

        if (number == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (number == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
            number == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
            number == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (number == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (number == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (number == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            number == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (number == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (number == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            number == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (number == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }

        if (!isFilterApply)
        {
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
            StateHasChanged();
        }
    }

    private async Task clickCPT(MouseEventArgs e, int number)
    {
        Param.ActiveCPT = number;

        if (Param.ActiveP == (int)DayMode.OneDay && number == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && number != (int)TimeMode.Minute ||
            Param.ActiveP == (int)DayMode.ThreeDays && number > (int)TimeMode.OneHour ||
            Param.ActiveP == (int)DayMode.Week && number == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.ActiveP == (int)DayMode.ThreeDays && number == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.ActiveP == (int)DayMode.Week && number == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.ActiveP == (int)DayMode.Week && number == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Week && number == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.ActiveP == (int)DayMode.Month && number == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.ActiveP == (int)DayMode.Month && number == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Month && number == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.ActiveP == (int)DayMode.Month && number == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (!isFilterApply)
        {
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
            StateHasChanged();
        }
    }

    void SelectedCompanyItemsChanged(IEnumerable<CompanyChartData> selectedCompanyItems)
    {
        SelectedCompanyItems = selectedCompanyItems;
        if (!isFilterApply)
        {
            if (checkCompanyAll == true)
            {
                if (!SelectedCompanyItems.Contains(allcompany))
                {
                    SelectedCompanyItems = SelectedCompanyItems.Take(0);
                    checkCompanyAll = false;
                }
                else if (SelectedCompanyItems.Contains(allcompany) && SelectedCompanyItems.Count() < tmpcompanychart.Count())
                {
                    SelectedCompanyItems = SelectedCompanyItems.Where(t => t.CompanyCdSeq != allcompany.CompanyCdSeq);
                    checkCompanyAll = false;
                }
            }
            else
            {
                if (SelectedCompanyItems.Contains(allcompany) || (!SelectedCompanyItems.Contains(allcompany) && SelectedCompanyItems.Count() == tmpcompanychart.Count() - 1))
                {
                    SelectedCompanyItems = tmpcompanychart;
                    checkCompanyAll = true;
                }
            }
        }

        if (SelectedCompanyItems.Count() == 0)
        {
            EmptyCompany = true;
        }
        else
        {
            EmptyCompany = false;
        }

        tmpbranchchart.Clear();
        foreach (var i in SelectedCompanyItems)
        {
            tmpbranchchart.AddRange(TPM_EigyosDataService.GetBranchbyCompany1(i.CompanyCdSeq, new ClaimModel().TenantID));
        }

        if (tmpbranchchart.Count() > 0)
        {
            tmpbranchchart.Insert(0, allbranch);
            SelectedBranchItems = tmpbranchchart;
        }
        else
        {
            SelectedBranchItems = SelectedBranchItems.Take(0);
        }

        DisplayLstSelectedCompany();
        DisplayLstSelectedBranch();
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    async void SelectedBranchItemsChanged(IEnumerable<BranchChartData> selectedBranchItems)
    {
        SelectedBranchItems = selectedBranchItems;
        if (!isFilterApply)
        {
            if (checkBranchAll == true)
            {
                if (!SelectedBranchItems.Contains(allbranch))
                {
                    SelectedBranchItems = SelectedBranchItems.Take(0);
                    checkBranchAll = false;
                }
                else if (SelectedBranchItems.Contains(allbranch) && SelectedBranchItems.Count() < tmpbranchchart.Count())
                {
                    SelectedBranchItems = SelectedBranchItems.Where(t => t.EigyoCdSeq != allbranch.EigyoCdSeq);
                    checkBranchAll = false;
                }
            }
            else
            {
                if (SelectedBranchItems.Contains(allbranch) || (!SelectedBranchItems.Contains(allbranch) && SelectedBranchItems.Count() == tmpbranchchart.Count() - 1))
                {
                    SelectedBranchItems = tmpbranchchart;
                    checkBranchAll = true;
                }
            }
        }
        if (SelectedBranchItems.Count() == 0)
        {
            EmptyBranch = true;
            //PopupVisibleBranchnew = true;
        }
        else
        {
            EmptyBranch = false;
            //PopupVisibleBranchnew = false;
        }
        DisplayLstSelectedBranch();
        branchlst = new List<int>();
        comlst = new List<int>();
        foreach (var i in SelectedBranchItems)
        {
            branchlst.Add(i.EigyoCdSeq);
        }
        foreach (var i in SelectedCompanyItems)
        {
            comlst.Add(i.CompanyCdSeq);
        }
        if (branchlst.Count() == 0 && comlst.Count() == 0)
        {
            //PopupVisiblenew = true;
            StateHasChanged();
        }
        else if (!isFilterApply)
        {
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
            StateHasChanged();
        }
        if (!isFilterApply) StateHasChanged();
    }



    private async Task onDivided(MouseEventArgs e)
    {
        Param.IsDivided = true;
        Param.ActiveL = (int)LineDrawMode.Normal;
        Param.ActiveG = (int)GroupMode.All;
        Param.ActiveP = (int)DayMode.OneDay;
        Param.ActiveCPT = (int)TimeMode.SixHours;
        Param.ActiveV = (int)ViewMode.Medium;
        Param.Number_of_days = 1;
        Width = ((w + 320) / 4 - 162);
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task onCombine(MouseEventArgs e)
    {
        Param.IsDivided = false;
        Param.ActiveV = (int)ViewMode.Large;
        Param.ActiveP = (int)DayMode.ThreeDays;
        Param.ActiveCPT = (int)TimeMode.ThreeHours;
        Param.Number_of_days = 3;
        Width = w;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }


    private async Task onCreate(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Create;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task OnInsert(MouseEventArgs e)
    {
        if (BusscheduleInsert.Itembus.Count() == 0)
        {
            PopupNotCreateline = true;
        }
        else
        {
            CustomerList = new List<LoadCustomerList>();
            isGyosyaNull = isTokiskNull = isTokiStNull = false;
            isFirstSetGyosya = isFirstSetTokisk = isFirstSetTokiSt = true;
            PopupVisible = true;
            Model = new CustomerModel();
            string baseUrl = AppSettingsService.GetBaseUrl();
            CustomerList = await Http.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/get");
            CustomerItem = null;
        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        StateHasChanged();
    }

    private async Task OnReset(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        PopupVisible = false;
        businsert.Clear();
        isLoading = true;
        //businsert.Clear();
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        StateHasChanged();
    }

    private async Task onEdit(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Edit;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }
    private async Task onClickStaffChart(MouseEventArgs e)
    {
        string url = "";
        string baseUrl = AppSettingsService.GetBaseUrl();
        url = baseUrl + "/StaffsChart";
        url = url + string.Format("/?date={0}", Date.ToString("yyyyMMdd"));
        JSRuntime.InvokeVoidAsync("open", url, "_self");
    }

    private async Task onView(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        await JSRuntime.InvokeVoidAsync("removeTooltip");
        StateHasChanged();
    }

    private async Task onCut(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Cut;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task onRepair(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Repair;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task onZoom(MouseEventArgs e)
    {
        Param.Mode = (int)BusLineMode.Zoom;
        flagShowClass = !flagShowClass;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "pressEsc");
        await JSRuntime.InvokeVoidAsync("removeTooltip");
    }

    private async Task OnRowUpdatedGreen(ItemBus updatebus)
    {

        if (updatebus.BusLine == "-4" || updatebus.BusLine == "-5" || updatebus.BusLine == "-6" || updatebus.BusVehicle == 2)
        {
            if (updatebus.BookingId != "-1" && updatebus.haUnkRen != 0)
            {
                BusBookingDataService.UpdateHaiSha(updatebus.BookingId, updatebus.haUnkRen, updatebus.TeiDanNo, updatebus.BunkRen, filterConditionFormName, updatebus.HasYmd);
                BusBookingDataService.UpdateUnkobi(updatebus.BookingId, updatebus.haUnkRen, filterConditionFormName);
                BusBookingDataService.UpdateYyksho(updatebus.BookingId, new ClaimModel().TenantID, filterConditionFormName);
            }
            TKD_HaishaDataService.Updatebusdatagray(updatebus, new ClaimModel().SyainCdSeq);
            isLoading = true;
            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
        }
        else if (updatebus.BusLine == "-1" || updatebus.BusLine == "-2" || updatebus.BusLine == "-3" || updatebus.BusVehicle == 1)
        {
            if (updatebus.YouTblSeq == 0)
            {
                CustomerList = new List<LoadCustomerList>();
                updatebusgreen = new ItemBus();
                string baseUrl = AppSettingsService.GetBaseUrl();
                CustomerList = await Http.GetJsonAsync<List<LoadCustomerList>>(baseUrl + "/api/Customer/getbytenantiddate/" + new ClaimModel().TenantID + "/" + updatebus.HasYmd);
                CustomerItem = null;
                isTokiStNull = isTokiskNull = isGyosyaNull = false;
                isFirstSetGyosya = isFirstSetTokisk = isFirstSetTokiSt = true;
                PopupUpdateRowVisible = true;
                Model = new CustomerModel();
                IsDisabled = true;
                updatebusgreen = updatebus;
            }
            if (updatebus.BookingId != "-1" && updatebus.haUnkRen != 0)
            {
                BusBookingDataService.UpdateHaiSha(updatebus.BookingId, updatebus.haUnkRen, updatebus.TeiDanNo, updatebus.BunkRen, filterConditionFormName, updatebus.HasYmd);
                BusBookingDataService.UpdateUnkobi(updatebus.BookingId, updatebus.haUnkRen, filterConditionFormName);
                BusBookingDataService.UpdateYyksho(updatebus.BookingId, new ClaimModel().TenantID, filterConditionFormName);
            }
        }
        else if (updatebus.BookingId != "0")
        {

            if (updatebus.BookingId != "-1" && updatebus.haUnkRen != 0)
            {
                BusBookingDataService.UpdateHaiSha(updatebus.BookingId, updatebus.haUnkRen, updatebus.TeiDanNo, updatebus.BunkRen, filterConditionFormName, updatebus.HasYmd);
                BusBookingDataService.UpdateUnkobi(updatebus.BookingId, updatebus.haUnkRen, filterConditionFormName);
                BusBookingDataService.UpdateYyksho(updatebus.BookingId, new ClaimModel().TenantID, filterConditionFormName);
            }
            if (updatebus.YouTblSeq != 0 && BusBookingDataService.CheckGreenline(updatebus.BookingId, updatebus.haUnkRen) > 1)
            {
                updategreenline = true;
                tokisk_YouSRyakuNm = updatebus.Tokisk_YouSRyakuNm;
                updatebusgreen = updatebus;
            }
            else
            {
                int branchid = TPM_EigyosDataService.GetBranchbyBusId(int.Parse(updatebus.BusLine), updatebus.EndDate);
                if (branchid == 0)
                {
                    Dropunable = true;
                }
                DateTime startdate;
                DateTime enddate;
                DateTime.TryParseExact(updatebus.TimeStartString.ToString(), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out startdate);
                DateTime.TryParseExact(updatebus.TimeEndString.ToString(), "yyyyMMddHHmm", CultureInfo.InvariantCulture, DateTimeStyles.None, out enddate);
                DateTime fromdatemindt;
                DateTime todatemaxdt;
                string fromdatemin = Busnames.Where(t => t.BusID == updatebus.BusLine && t.EndYmd.CompareTo(startdate.ToString("yyyyMMdd")) >= 0).First().StaYmd;
                string todatemax = Busnames.Where(t => t.BusID == updatebus.BusLine && t.EndYmd.CompareTo(startdate.ToString("yyyyMMdd")) >= 0).First().EndYmd;
                DateTime.TryParseExact(fromdatemin != null ? fromdatemin.ToString() : "19700101", "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out fromdatemindt);
                DateTime.TryParseExact(todatemax != null ? todatemax.ToString() : "22223112", "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None, out todatemaxdt);
                if (enddate > todatemaxdt || startdate < fromdatemindt)
                {
                    Dropunable = true;
                }
                else
                {
                    JyoSyaJin = updatebus.JyoSyaJin;
                    TeiCnt = Busnames.Where(t => t.BusID == updatebus.BusLine).First().TeiCnt;

                    if (JyoSyaJin > TeiCnt)
                    {
                        updatebusgreen = new ItemBus();
                        Popupupdatebus = true;
                        updatebusgreen = updatebus;
                    }
                    else
                    {
                        TKD_HaishaDataService.Updatebusdata(updatebus, new ClaimModel().SyainCdSeq);
                        isLoading = true;
                        await Task.Run(() =>
                        {
                            Loadpage().Wait();
                            isLoading = false;
                        });
                    }
                }
            }

        }
        else
        {
        }

    }

    private async Task reload(string a)
    {
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    void HandleShowContextMenu(ItemBus item)
    {
        itembuschoosemenu = new ItemBus();
        itembuschoosemenu = item;
    }

    public async Task Loadpage()
    {
        try
        {
            await Task.Run(async () =>
            {
                await SaveCurrentFilter();
            });
            await reRenderBusLines();
            await reRenderBusNames();
            GetUpdYmdInits().Wait();
            UpYmdTimeNews = UpYmdTimes;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            GetUpdYmdInits().Wait();
            UpYmdTimeNews = UpYmdTimes;
            Console.WriteLine(ex.Message);
            //TODO use logger to log down exception ex.message
        }
    }

    private async Task reRenderBusLines()
    {
        Buslines.Clear();
        buslines.Clear();
        busrepair.Clear();
        Busrepair.Clear();
        DateTime st = Date;
        DateTime end = Date.AddDays(Param.Number_of_days - 1);
        listdatecomment = await TPM_CalendDataService.Getdatabydays(1, 1, st.ToString("yyyyMMdd"), end.ToString("yyyyMMdd"), new ClaimModel().TenantID);
        buslines = await BusBookingDataService.Getbusdatabooking(st, end, 1, new ClaimModel().TenantID);

        busrepair = await TKD_ShuriDataService.Getdata(st, end);
        foreach (TKD_ShuriData i in busrepair)
        {
            var codeKbnInfo = await BusBookingDataService.GetrepairAndTenantId(i.Shuri_ShuriCdSeq, new ClaimModel().TenantID);
            TKD_ShuriData newBusrepair = new TKD_ShuriData();

            newBusrepair.Shuri_BikoNm = i.Shuri_BikoNm;
            newBusrepair.Shuri_ShuriCdSeq = i.Shuri_ShuriCdSeq;
            newBusrepair.Shuri_ShuriETime = i.Shuri_ShuriETime;
            newBusrepair.Shuri_ShuriEYmd = i.Shuri_ShuriEYmd;
            newBusrepair.Shuri_ShuriSTime = i.Shuri_ShuriSTime;
            newBusrepair.Shuri_ShuriSYmd = i.Shuri_ShuriSYmd;
            newBusrepair.Shuri_ShuriTblSeq = i.Shuri_ShuriTblSeq;
            newBusrepair.Shuri_SyaRyoCdSeq = i.Shuri_SyaRyoCdSeq;
            //newBusrepair.Text = await BusBookingDataService.Getcodename(i.Shuri_ShuriCdSeq, new ClaimModel().TenantID);
            //newBusrepair.CodeKb_Codekbn = await BusBookingDataService.Getcodekbn(i.Shuri_ShuriCdSeq, new ClaimModel().TenantID);
            newBusrepair.Text = codeKbnInfo?.RepairRyakuNm ?? string.Empty;
            newBusrepair.CodeKb_Codekbn = codeKbnInfo?.RepairCdSeq.ToString() ?? string.Empty;
            DateTime startdatere;
            DateTime.TryParseExact(i.Shuri_ShuriSYmd + i.Shuri_ShuriSTime,
                           "yyyyMMddHHmm",
                           CultureInfo.CurrentCulture,
                           DateTimeStyles.None,
                           out startdatere);

            DateTime enddatere;
            DateTime.TryParseExact(i.Shuri_ShuriEYmd + i.Shuri_ShuriETime,
                           "yyyyMMddHHmm",
                           CultureInfo.CurrentCulture,
                           DateTimeStyles.None,
                           out enddatere);
            object text = new Object();
            text = "<span>修理期間：" + startdatere.ToString("yyyy/MM/dd (ddd) HH:mm") + "～" + enddatere.ToString("yyyy/MM/dd (ddd) HH:mm") + "</span>";
            //text += "<span>修理内容：" + BusBookingDataService.Getcodekbn(i.Shuri_ShuriCdSeq, new ClaimModel().TenantID) + "　" + BusBookingDataService.Getcodename(i.Shuri_ShuriCdSeq, new ClaimModel().TenantID) + "</span>";
            text += "<span>修理内容：" + (codeKbnInfo?.RepairCd.ToString() ?? string.Empty) + "　" + (codeKbnInfo?.RepairRyakuNm ?? string.Empty) + "</span>";
            text += "<span>備考　　：" + i.Shuri_BikoNm + "</span>";
            newBusrepair.Tooltip = text;
            newBusrepair.SyaRyo_NinKaKbn = i.SyaRyo_NinKaKbn;
            newBusrepair.Syasyu_KataKbn = i.Syasyu_KataKbn;
            Busrepair.Add(newBusrepair);
        }
        var settingtext = BusTooltipService.GetBustooltip(new ClaimModel().CompanyID);
        foreach (BusBookingData i in buslines)
        {
            ItemBus newBusbookingdata = new ItemBus();

            newBusbookingdata.BookingId = i.Haisha_UkeNo;
            newBusbookingdata.haUnkRen = i.Haisha_UnkRen;
            newBusbookingdata.TeiDanNo = i.Haisha_TeiDanNo;
            newBusbookingdata.BunkRen = i.Haisha_BunkRen;
            newBusbookingdata.HenKai = i.Haisha_HenKai;
            newBusbookingdata.Id = i.Haisha_GoSya;
            newBusbookingdata.UkeCd = i.Yyksho_UkeCd;
            newBusbookingdata.BusLine = i.Haisha_HaiSSryCdSeq.ToString();
            newBusbookingdata.StartDate = i.Haisha_HaiSYmd;
            newBusbookingdata.TimeStart = int.Parse(i.Haisha_HaiSTime);
            newBusbookingdata.Unkobi_StartYmd = i.Unkobi_HaiSYmd;
            DateTime enddatetime = DateTime.ParseExact(i.Haisha_TouYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            DateTime enddatetimemax = DateTime.ParseExact(i.Unkobi_TouYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            string enddatest = i.Haisha_TouYmd;
            string endtime = i.Haisha_TouChTime;

            if (BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Days >= 1)
            {
                enddatest = enddatetime.AddDays(BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Days).ToString("yyyyMMdd");
                endtime = BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Haisha_TouChTime).Minutes.ToString("D2");
            }
            else
            {
                enddatest = i.Haisha_TouYmd;
                endtime = i.Haisha_TouChTime;
            }
            newBusbookingdata.EndDate = enddatest;
            newBusbookingdata.TimeEnd = int.Parse(endtime);
            //update line caculation time gray
            DateTime enddatetimegray = DateTime.ParseExact(i.Haisha_KikYmd, "yyyyMMdd", CultureInfo.InvariantCulture);
            string enddatestrgray = i.Haisha_KikYmd;
            string endtimegray = i.Haisha_KikTime;
            if (BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Days >= 1)
            {
                enddatestrgray = enddatetimegray.AddDays(BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Days).ToString("yyyyMMdd");
                endtimegray = BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Haisha_KikTime).Minutes.ToString("D2");
            }
            else
            {
                enddatestrgray = i.Haisha_KikYmd;
                endtimegray = i.Haisha_KikTime;
            }
            newBusbookingdata.StartDateDefault = i.Haisha_SyuKoYmd;
            newBusbookingdata.EndDateDefault = enddatestrgray;
            newBusbookingdata.TimeStartDefault = int.Parse(i.Haisha_SyuKoTime);
            newBusbookingdata.TimeEndDefault = int.Parse(endtimegray);
            newBusbookingdata.JyoSyaJin = i.Haisha_JyoSyaJin;

            var cssColors = await BusLineCssColorService.GetCssColor(i.Haisha_UkeNo, i.Haisha_UnkRen, i.Haisha_TeiDanNo, i.Haisha_BunkRen);
            newBusbookingdata.ColorLine = cssColors.cssColor;
            if (cssColors.isLock)
            {
                newBusbookingdata.AllowDrop = false;
                newBusbookingdata.AllowEdit = false;
                newBusbookingdata.AllowCut = false;
            }

            //if (i.Haisha_NippoKbn == 2 && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            //{
            //    newBusbookingdata.ColorLine = "color-8";
            //    newBusbookingdata.AllowDrop = false;
            //}
            //else if (i.Haisha_HaiIKbn == 2 && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            //{
            //    newBusbookingdata.ColorLine = "color-6";
            //}
            //else if (i.Haisha_HaiSKbn == 2 && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            //{
            //    newBusbookingdata.ColorLine = "color-5";
            //}
            //else if (((!string.IsNullOrWhiteSpace(i.Yyksho_KaktYmd) && (i.Haisha_KSKbn != 1 && i.Haisha_YouTblSeq == 0)) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0)) || (KakninLst.Select(t => t.UkeNo).ToArray().Contains(i.Haisha_UkeNo)))
            //{
            //    if (KakninLst.Select(t => t.UkeNo).ToArray().Contains(i.Haisha_UkeNo))
            //    {
            //        newBusbookingdata.ColorLine = "color-greenlight";
            //    }
            //    if ((!string.IsNullOrWhiteSpace(i.Yyksho_KaktYmd) && (i.Haisha_KSKbn != 1 && i.Haisha_YouTblSeq == 0)) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) && !(i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            //    {
            //        newBusbookingdata.ColorLine = "color-4";
            //    }
            //}
            //else
            //{
            //    newBusbookingdata.ColorLine = "color-2";
            //}
            //if (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0)
            //{
            //    newBusbookingdata.AllowEdit = false;
            //    newBusbookingdata.ColorLine = "color-1";
            //}
            //if ((i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0))
            //{

            //    newBusbookingdata.ColorLine = "color-green";
            //    newBusbookingdata.AllowEdit = false;
            //}
            if (i.Haisha_DrvJin > 1)
            {
                newBusbookingdata.ColorLine += " border-black";
            }
            newBusbookingdata.Status = 1;
            newBusbookingdata.CCSStyle = "";
            newBusbookingdata.Top = 0.3125;
            newBusbookingdata.Height = 2;
            newBusbookingdata.Name = "";
            newBusbookingdata.Width = BusScheduleHelper.calwidth(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), newBusbookingdata.EndDate, newBusbookingdata.TimeEnd.ToString("D4"), Param.Number_of_days);
            newBusbookingdata.Left = BusScheduleHelper.calleft(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
            newBusbookingdata.WidthDefault = BusScheduleHelper.calwidth(Width, newBusbookingdata.StartDateDefault, newBusbookingdata.TimeStartDefault.ToString("D4"), newBusbookingdata.EndDateDefault, newBusbookingdata.TimeEndDefault.ToString("D4"), Param.Number_of_days);
            newBusbookingdata.LeftDefault = BusScheduleHelper.calleft(Width, newBusbookingdata.StartDateDefault, newBusbookingdata.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, newBusbookingdata.StartDate, newBusbookingdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
            newBusbookingdata.DanTaNm = i.Unkobi_DanTaNm;
            newBusbookingdata.IkNm = i.Haisha_IkNm;
            newBusbookingdata.TokuiNm = i.TokiSt_RyakuNm;
            newBusbookingdata.NumberDriver = i.Haisha_DrvJin;
            newBusbookingdata.NumberGuider = i.Haisha_GuiSu;
            newBusbookingdata.MinDate = i.Unkobi_HaiSYmd;
            newBusbookingdata.MinTime = int.Parse(i.Unkobi_HaiSTime);
            if (BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Days >= 1)
            {
                newBusbookingdata.Maxdate = enddatetimemax.AddDays(BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Days).ToString("yyyyMMdd");
                newBusbookingdata.MaxTime = int.Parse(BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Hours.ToString("D2") + BusScheduleHelper.ConvertTime(i.Unkobi_TouChTime).Minutes.ToString("D2"));
            }
            else
            {
                newBusbookingdata.Maxdate = i.Unkobi_TouYmd;
                newBusbookingdata.MaxTime = int.Parse(i.Unkobi_TouChTime);
            }
            //newBusbookingdata.Maxdate = i.Unkobi_TouYmd;
            //newBusbookingdata.MaxTime = int.Parse(i.Unkobi_TouChTime);

            var codeKbnInfo = await BusBookingDataService.GetCodeKbnByCodeAndTenantId(i.YykSyu_KataKbn, new ClaimModel().TenantID);
            newBusbookingdata.YykSyu_KataKbn = i.YykSyu_KataKbn;
            newBusbookingdata.HasYmd = i.Haisha_HaiSYmd;
            newBusbookingdata.Zeiritsu = i.Yyksho_Zeiritsu;
            newBusbookingdata.BookingType = i.Yyksho_YoyaKbnSeq;
            //newBusbookingdata.CodeKb_CodeKbn = await BusBookingDataService.Getcodename(i.YykSyu_KataKbn, new ClaimModel().TenantID);
            newBusbookingdata.CodeKb_CodeKbn = codeKbnInfo?.CodeKb_RyakuNm ?? string.Empty;
            newBusbookingdata.KSKbn = i.Haisha_KSKbn;
            newBusbookingdata.YouTblSeq = i.Haisha_YouTblSeq;
            newBusbookingdata.SyaSyu_SyaSyuNm = i.SyaSyu_SyaSyuNm;
            newBusbookingdata.SyaSyu_SyaSyuNm_Haisha = await TPM_SyaRyoService.getSyaSyuNm(i.SyaSyu_SyaSyuCdSeq, new ClaimModel().TenantID);
            i.SyaSyu_SyaSyuNm_Haisha = newBusbookingdata.SyaSyu_SyaSyuNm_Haisha;
            newBusbookingdata.BusLineType = i.Haisha_UkeNo.ToString() + i.Haisha_TeiDanNo.ToString();
            //newBusbookingdata.BusName = (i.SyaSyu_SyaSyuNm == null ? "指定なし" : i.SyaSyu_SyaSyuNm) + "/" + BusBookingDataService.Getcodename(i.YykSyu_KataKbn, new ClaimModel().TenantID);
            newBusbookingdata.BusName = (i.SyaSyu_SyaSyuNm == null ? "指定なし" : i.SyaSyu_SyaSyuNm) + "/" + codeKbnInfo?.CodeKb_RyakuNm;
            Tokisk = await TPM_TokiskDataService.getdata(newBusbookingdata.Unkobi_StartYmd);
            if (Tokisk.Where(t => t.Tokisk_TokuiSeq == i.Yousha_YouCdSeq && t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).ToList().Count > 0)
            {
                newBusbookingdata.Tokisk_YouSRyakuNm = Tokisk.First(t => t.Tokisk_TokuiSeq == i.Yousha_YouCdSeq).Tokisk_RyakuNm + " " + Tokisk.First(t => t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).TokiSt_RyakuNm;
                newBusbookingdata.Tokisk_SitenCdSeq = Tokisk.First(t => t.TokiSt_SitenCdSeq == i.Yousha_YouSitCdSeq).TokiSt_SitenCdSeq;
            }

            newBusbookingdata.TokiSk_RyakuNm = i.TokiSk_RyakuNm;
            newBusbookingdata.TokiSt_RyakuNm = i.TokiSt_RyakuNm;
            newBusbookingdata.Shuri_ShuriTblSeq = 0;
            //newBusbookingdata.AllowDrop = true;
            newBusbookingdata.SyaSyuRen = i.YykSyu_SyaSyuRen;
            newBusbookingdata.BranchId = 0;
            newBusbookingdata.CompanyId = 0;
            newBusbookingdata.BunKSyuJyn = i.Haisha_BunKSyuJyn;
            newBusbookingdata.SeiTaiYmd = i.Yyksho_SeiTaiYmd;
            if (i.Haisha_BunKSyuJyn == 0)
            {
                newBusbookingdata.CanBeDeleted = false;
            }
            if (i.Haisha_HaiSKbn == 2 || (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq > 0) || (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0))
            {
                newBusbookingdata.CanSimpledispatch = false;
            }
            newBusbookingdata.Unkobi_StartYmd = i.Unkobi_HaiSYmd;
            newBusbookingdata.Syasyu_KataKbn = i.Syasyu_KataKbn;
            newBusbookingdata.SyaRyo_NinKaKbn = i.SyaRyo_NinKaKbn;
            newBusbookingdata.HaiSKbn = i.Haisha_HaiSKbn;
            if (i.Haisha_GuiSu > 0)
            {
                newBusbookingdata.Text = "G　" + "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5) + "</span>";
            }
            else
            {
                newBusbookingdata.Text = "<span style=\"color:" + settingtext.SyaSenMjPtnCol1 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol2 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol3 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol4 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + settingtext.SyaSenMjPtnCol5 + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5) + "</span>";
                //newBusbookingdata.Text = "<p style='color:"+settingtext.SyaSenMjPtnCol1+"'>"+getDisplayValue(i, settingtext.SyaSenMjPtnKbn1)+"</p>" + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "　" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5);
            }
            if (i.Haisha_KSKbn == 1 && i.Haisha_YouTblSeq == 0)
            {
                newBusbookingdata.Text = "<span style=\"color:" + changeColorLineGray(settingtext.SyaSenMjPtnCol1) + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn1) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + changeColorLineGray(settingtext.SyaSenMjPtnCol2) + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn2) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + changeColorLineGray(settingtext.SyaSenMjPtnCol3) + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn3) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + changeColorLineGray(settingtext.SyaSenMjPtnCol4) + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn4) + "</span>" + "　";
                newBusbookingdata.Text += "<span style=\"color:" + changeColorLineGray(settingtext.SyaSenMjPtnCol5) + "\">" + getDisplayValue(i, settingtext.SyaSenMjPtnKbn5) + "</span>";
            }
            object text = new Object();
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn1) != "")
            {
                text = "<span style=\"color:" + settingtext.SyaSenInfoPtnCol1 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn1) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn1) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn2) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol2 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn2) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn2) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn3) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol3 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn3) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn3) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn4) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol4 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn4) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn4) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn5) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol5 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn5) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn5) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn6) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol6 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn6) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn6) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn7) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol7 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn7) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn7) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn8) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol8 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn8) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn8) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn9) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol9 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn9) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn9) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn10) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol10 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn10) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn10) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn11) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol11 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn11) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn11) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn12) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol12 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn12) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn12) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn13) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol13 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn13) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn13) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn14) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol14 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn14) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn14) + "</span>";
            }
            if (getDisplayText(i, settingtext.SyaSenInfoPtnKbn15) != "")
            {
                text += "<span style=\"color:" + settingtext.SyaSenInfoPtnCol15 + "\">" + getDisplayText(i, settingtext.SyaSenInfoPtnKbn15) + "：" + getDisplayValue(i, settingtext.SyaSenInfoPtnKbn15) + "</span>";
            }
            newBusbookingdata.Tooltip = text;
            newBusbookingdata.NippoKbn=(byte)i.Haisha_NippoKbn;
            Buslines.Add(newBusbookingdata);
        }
    }

    public string getDisplayText(BusBookingData i, int SyaSenMjPtnKbn1)
    {
        var jsonString = Newtonsoft.Json.JsonConvert.SerializeObject(i);
        var obj = JObject.Parse(jsonString);
        string textcont = "";
        if (LineInfoListData.lineInfoItem.Where(t => t.Id == SyaSenMjPtnKbn1).ToList().Count() > 0)
        {
            textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).text;
        }
        return textcont;
    }
    public string changeColorLineGray(string SyaSenMjPtnCol)
    {
        if (SyaSenMjPtnCol == "Black" || SyaSenMjPtnCol == "black" || SyaSenMjPtnCol == "000000" || SyaSenMjPtnCol == "rgb(0,0,0)")
        {
            return "White";
        }
        else
            return SyaSenMjPtnCol;
    }

    public string getDisplayValue(BusBookingData i, int SyaSenMjPtnKbn1)
    {
        var jsonString = Newtonsoft.Json.JsonConvert.SerializeObject(i);
        var obj = JObject.Parse(jsonString);
        string text = "";
        if (SyaSenMjPtnKbn1 == 5)
        {
            if (i.Haisha_SyuEigCdSeq != 0)
            {
                text = TPM_EigyosDataService.Getbranchbyid(i.Haisha_SyuEigCdSeq);
            }
            else
            {
                text = TPM_EigyosDataService.Getbranchbyid(i.Yyksho_UkeEigCdSeq);
            }

        }
        else if(SyaSenMjPtnKbn1 == 9)
        {
            text=i.TokiSk_RyakuNm+"  "+i.TokiSt_RyakuNm;
        }
        else if (SyaSenMjPtnKbn1 == 47)
        {
            text = (i.Yyksho_UkeCd.ToString("D10") + "-" + i.Haisha_UnkRen.ToString("D3") + "-" + i.Haisha_TeiDanNo.ToString("D3") + "-" + i.Haisha_BunkRen.ToString("D3"));
        }
        else if(SyaSenMjPtnKbn1 == 11||SyaSenMjPtnKbn1 == 12||SyaSenMjPtnKbn1 == 14||SyaSenMjPtnKbn1 == 18||SyaSenMjPtnKbn1 == 21||SyaSenMjPtnKbn1 == 23||SyaSenMjPtnKbn1 == 27)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            string somestring = (string)obj.SelectToken(textcont);
            if(!string.IsNullOrWhiteSpace(somestring))
            {
                string newhour = somestring.Substring(0, 2);
                string newmun = somestring.Substring(2, 2);
                text = newhour + ":" + newmun;;
            }
            else
            {
                text ="";
            }
        }
        else if(SyaSenMjPtnKbn1 == 10||SyaSenMjPtnKbn1 == 13||SyaSenMjPtnKbn1 == 20||SyaSenMjPtnKbn1 == 22)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            string somestring = (string)obj.SelectToken(textcont);
            if(!string.IsNullOrWhiteSpace(somestring))
            {
                string newyear = somestring.Substring(0, 4);
                string newmonth = somestring.Substring(4, 2);
                string newday = somestring.Substring(6, 2);
                text = newyear + "/" + newmonth+"/"+newday;
            }
            else
            {
                text ="";
            }
        }
        else if (SyaSenMjPtnKbn1 == 57)
        {
            string somestring = i.Haisha_HaiSTime;
            string newhour = somestring.Substring(0, 2);
            string newmun = somestring.Substring(2, 2);
            text = newhour + ":" + newmun + "（" + i.Haisha_HaiSNm + "）";
        }
        else if (SyaSenMjPtnKbn1 == 58)
        {
            string somestring = i.Haisha_TouChTime;
            string newhour = somestring.Substring(0, 2);
            string newmun = somestring.Substring(2, 2);
            text = newhour + ":" + newmun + "（" + i.Haisha_TouNm + "）";
        }
        else if(SyaSenMjPtnKbn1 == 37)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            text = (string)obj.SelectToken(textcont);
            text = "￥" + string.Format("{0:#,0}", double.Parse(text));
        }
        else if (SyaSenMjPtnKbn1 == 60)
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            text = (string)obj.SelectToken(textcont);
            text = "￥" + string.Format("{0:#,0}", double.Parse(text));
        }
        else
        {
            string textcont = LineInfoListData.lineInfoItem.First(t => t.Id == SyaSenMjPtnKbn1).fieldname;
            if (textcont == string.Empty) return "";
            text = (string)obj.SelectToken(textcont);
        }
        return text;
    }

    private async Task reRenderBusNames()
    {
        Busnames.Clear();
        bus.Clear();
        bus = await BusDataService.Getbus(Date, 1, comlst.ToArray(), branchlst.ToArray(), new ClaimModel().TenantID);
        DateTime startDateFilter = Date;
        DateTime endDateFilter = Date;
        BusInfoData itemBusTemp = new BusInfoData();

        List<BusInfoData> listBusTemp = new List<BusInfoData>();

        if (Param.ActiveP == (int)DayMode.ThreeDays)
        {
            endDateFilter = Date.AddDays(2);
        }
        else if (Param.ActiveP == (int)DayMode.Week)
        {
            endDateFilter = Date.AddDays(6);
        }
        else if (Param.ActiveP == (int)DayMode.Week)
        {
            endDateFilter = Date.AddDays(31);
        }
        foreach (var item in bus)
        {
            if (item.StaYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) <= 0
                && item.EndYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) >= 0
                && item.EndYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) <= 0)
            {
                listBusTemp.Add(item);
            }
            if (item.StaYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) >= 0
                && item.EndYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) >= 0
                && item.StaYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) <= 0)
            {
                listBusTemp.Add(item);
            }
            if (item.StaYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) >= 0
                && item.EndYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) <= 0)
            {
                listBusTemp.Add(item);
            }
            if (item.StaYmd.CompareTo(startDateFilter.ToString("yyyyMMdd")) <= 0
                && item.EndYmd.CompareTo(endDateFilter.ToString("yyyyMMdd")) >= 0)
            {
                listBusTemp.Add(item);
            }
        }
        bus = listBusTemp.Distinct().ToList();
        foreach (var i in bus)
        {
            if (!Busnames.Where(t => t.BusID == i.SyaRyoCdSeq.ToString()).Any())
            {
                BusDataType busItem = new BusDataType();
                busItem.BusID = i.SyaRyoCdSeq.ToString();
                busItem.SyaSyuNm = i.SyaSyuNm;
                busItem.SyaRyoNm = i.SyaRyoNm;
                busItem.RyakuNm = i.RyakuNm;
                busItem.EigyoNm = i.EigyoNm;
                busItem.KariSyaRyoNm = i.KariSyaRyoNm;
                //busItem.BusHeight = 2;
                busItem.BusVehicle = 0;
                busItem.BusBranchID = i.EigyoCdSeq;
                busItem.BusCompanyID = i.CompanyCdSeq;
                busItem.SyaSyuCd = i.SyaSyuCd;
                busItem.EigyoCd = i.EigyoCd;
                busItem.SyaRyoCd = i.SyaRyoCd;
                busItem.TenkoNo = i.TenkoNo;
                if (bus.Where(t => t.SyaRyoCdSeq == i.SyaRyoCdSeq).Count() >= 2)
                {
                    busItem.StaYmd = bus.OrderBy(t => t.EndYmd).Where(t => t.SyaRyoCdSeq == i.SyaRyoCdSeq).First().StaYmd;
                    busItem.EndYmd = bus.OrderBy(t => t.EndYmd).Where(t => t.SyaRyoCdSeq == i.SyaRyoCdSeq).Last().EndYmd;
                }
                else
                {
                    busItem.StaYmd = i.StaYmd;
                    busItem.EndYmd = i.EndYmd;
                }
                busItem.NinkaKbn = i.NinkaKbn;
                busItem.TeiCnt = i.TeiCnt;
                busItem.KataKbn = i.KataKbn;
                busItem.LockYmd = i.LockYmd;
                Busnames.Add(busItem);
            }
        }
        lstBusBranchType = bus.GroupBy(n => new { n.EigyoCdSeq, n.RyakuNm }).Select(t => new BusCompanyType { BusBranchID = t.Key.EigyoCdSeq, BusBranchName = t.Key.RyakuNm });
        lstBusCompanyType = bus.GroupBy(n => new { n.CompanyCdSeq, n.CompanyNm }).Select(t => new BusCompanyType { BusCompanyID = t.Key.CompanyCdSeq, BusCompanyName = t.Key.CompanyNm });

        Busgreen.Clear();
        foreach (var i in Buslines.Where(t => t.YouTblSeq != 0).OrderBy(t => t.TimeStart).ThenBy(t => t.StartDate).ToList())
        {
            BusDataType busItem = new BusDataType();
            busItem.BusID = i.BookingId + i.TeiDanNo.ToString();
            busItem.BusName = i.Tokisk_YouSRyakuNm;
            busItem.SitenCdSeq = i.Tokisk_SitenCdSeq;
            busItem.BookingID = i.BookingId;
            busItem.BusVehicle = 1;
            if (!Busgreen.Select(t => t.BusName).ToList().Contains(busItem.BusName))
            {
                Busgreen.Add(busItem);
            }
        }
        for (var i = 1; i < 4; i++)
        {
            BusDataType datanull = new BusDataType()
            {
                BusID = (-i).ToString(),
                BusName = "",
                BookingID = (-i).ToString(),
            };
            Busgreen.Add(datanull);
        }

        Busgray.Clear();
        foreach (var i in Buslines.Where(t => t.KSKbn == 1 && t.YouTblSeq == 0).OrderBy(t => t.TimeStart).ThenBy(t => t.StartDate).ToList())
        {
            BusDataType busItem = new BusDataType();
            busItem.BusID = i.BookingId;
            busItem.BusName = (i.SyaSyu_SyaSyuNm == null ? "指定なし" : i.SyaSyu_SyaSyuNm) + "/" + i.CodeKb_CodeKbn;
            busItem.BookingID = i.BookingId;
            busItem.BusVehicle = 2;
            if (!Busgray.Select(t => t.BusName).ToList().Contains(busItem.BusName))
            {
                Busgray.Add(busItem);
            }
        }

        if (Param.IsDivided == true)
        {
            for (var i = 4; i < 10; i++)
            {
                BusDataType datanull = new BusDataType()
                {
                    BusID = (-i).ToString(),
                    BusName = "",
                    BookingID = (-i).ToString(),
                };
                Busgray.Add(datanull);
            }
        }
        else
        {
            for (var i = 4; i < 7; i++)
            {
                BusDataType datanull = new BusDataType()
                {
                    BusID = (-i).ToString(),
                    BusName = "",
                    BookingID = (-i).ToString(),
                };
                Busgray.Add(datanull);
            }
        }
        //add busrepair to busline
        if (Busrepair.Count != 0)
        {
            foreach (TKD_ShuriData t in Busrepair)
            {
                ItemBus newBusrepairdata = new ItemBus();
                newBusrepairdata.BookingId = "0";
                newBusrepairdata.haUnkRen = 0;
                newBusrepairdata.TeiDanNo = 0;
                newBusrepairdata.BunkRen = 0;
                newBusrepairdata.HenKai = 0;
                newBusrepairdata.KSKbn = 2;
                newBusrepairdata.Id = "";
                newBusrepairdata.Shuri_ShuriTblSeq = t.Shuri_ShuriTblSeq;
                newBusrepairdata.BusLine = t.Shuri_SyaRyoCdSeq.ToString();
                newBusrepairdata.StartDate = t.Shuri_ShuriSYmd;
                newBusrepairdata.EndDate = t.Shuri_ShuriEYmd;
                newBusrepairdata.TimeStart = int.Parse(t.Shuri_ShuriSTime);
                newBusrepairdata.TimeEnd = int.Parse(t.Shuri_ShuriETime);
                newBusrepairdata.StartDateDefault = t.Shuri_ShuriSYmd;
                newBusrepairdata.EndDateDefault = t.Shuri_ShuriEYmd;
                newBusrepairdata.TimeStartDefault = int.Parse(t.Shuri_ShuriSTime);
                newBusrepairdata.TimeEndDefault = int.Parse(t.Shuri_ShuriETime);
                newBusrepairdata.ColorLine = "color-9";
                newBusrepairdata.IsBusRepair = true;
                newBusrepairdata.Status = 1;
                newBusrepairdata.CCSStyle = "";
                newBusrepairdata.Top = 0.3125;
                newBusrepairdata.Height = 2;
                newBusrepairdata.Width = BusScheduleHelper.calwidth(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), newBusrepairdata.EndDate, newBusrepairdata.TimeEnd.ToString("D4"), Param.Number_of_days);
                newBusrepairdata.Left = BusScheduleHelper.calleft(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
                newBusrepairdata.WidthDefault = BusScheduleHelper.calwidth(Width, newBusrepairdata.StartDateDefault, newBusrepairdata.TimeStartDefault.ToString("D4"), newBusrepairdata.EndDateDefault, newBusrepairdata.TimeEndDefault.ToString("D4"), Param.Number_of_days);
                newBusrepairdata.LeftDefault = BusScheduleHelper.calleft(Width, newBusrepairdata.StartDateDefault, newBusrepairdata.TimeStartDefault.ToString("D4"), Param.Number_of_days, Date) - BusScheduleHelper.calleft(Width, newBusrepairdata.StartDate, newBusrepairdata.TimeStart.ToString("D4"), Param.Number_of_days, Date);
                newBusrepairdata.DanTaNm = "";
                newBusrepairdata.IkNm = "";
                newBusrepairdata.TokuiNm = "";
                newBusrepairdata.Text = t.Text;
                newBusrepairdata.Tooltip = t.Tooltip;
                newBusrepairdata.AllowDrop = false;
                newBusrepairdata.AllowEdit = false;
                newBusrepairdata.ShuriCdSeq = t.Shuri_ShuriCdSeq;
                newBusrepairdata.BikoNm = t.Shuri_BikoNm;
                newBusrepairdata.Syasyu_KataKbn = t.Syasyu_KataKbn;
                newBusrepairdata.SyaRyo_NinKaKbn = t.SyaRyo_NinKaKbn;
                //int brandid = Busnames.Where(x => x.BusID == t.Shuri_SyaRyoCdSeq.ToString()).First().BusBranchID;
                //newBusrepairdata.BranchId = brandid;
                //newBusrepairdata.CompanyId = branchchart.Where(a => a.EigyoCdSeq == brandid).First().CompanyCdSeq;
                Buslines.Add(newBusrepairdata);
            }
        }
        if (Buslines.Count != 0)
        {
            foreach (var item in Buslines)
            {
                if (item.BusLine != "0" && item.KSKbn == 2 && Busnames.Where(x => x.BusID == item.BusLine).Count() > 0)
                {
                    int brandid = Busnames.Where(x => x.BusID == item.BusLine).FirstOrDefault()?.BusBranchID ?? 0;
                    item.BranchId = brandid;
                    item.CompanyId = branchchart.Where(a => a.EigyoCdSeq == brandid).FirstOrDefault()?.CompanyCdSeq ?? 0;

                    // check table lock
                    string lockymd = null;
                    if ((lockymd = Busnames.Where(x => x.BusID == item.BusLine).FirstOrDefault()?.LockYmd ?? null) != null
                        && DateTime.TryParseExact(lockymd, "yyyyMMdd", null, DateTimeStyles.None, out DateTime lockDate)
                        && DateTime.TryParseExact(item.SeiTaiYmd, "yyyyMMdd", null, DateTimeStyles.None, out DateTime seiTaiDate))
                    {
                        if (seiTaiDate < lockDate)
                        {
                            item.AllowDrop = false;
                            item.AllowEdit = false;
                        }
                    }
                }
            }
        }


        KyoSHeDatabyDatelst.Clear();
        int d = Param.Number_of_days;
        for (int i = 1; i <= d; i++)
        {
            KyoSHeDatabyDate KyoSHeDatabyDateitem = new KyoSHeDatabyDate();
            KyoSHeDatabyDateitem.date = Date.AddDays(i - 1);
            List<TPM_KyoSHeData> KyoSHeData = await TPM_KyoSHeDataService.Getdata(Date.AddDays(i - 1), branchlst.ToArray(), new ClaimModel().TenantID);
            foreach (var item in KyoSHeData)
            {
                KyoSHeData.Where(t => t.SyainCdSeq == item.SyainCdSeq && t.EndYmd == item.EndYmd).First().CompanyCdSeq = branchchart.Where(a => a.EigyoCdSeq == item.EigyoCdSeq).First().CompanyCdSeq;
            }
            KyoSHeDatabyDateitem.KyoSHelst = KyoSHeData;
            int[] iddriver = { 1, 2 };
            int[] idguider = { 3, 4 };
            List<int> SyainCdSeqdriverslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => iddriver.Contains(t.SyokumuKbn)).Select(t => t.SyainCdSeq).ToList();
            List<int> SyainCdSeqguiderslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => idguider.Contains(t.SyokumuKbn)).Select(t => t.SyainCdSeq).ToList();
            SyainCdSeqdriverslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => iddriver.Contains(t.SyokumuKbn)).Select(t => t.SyainCdSeq).ToList();
            SyainCdSeqguiderslt = KyoSHeDatabyDateitem.KyoSHelst.Where(t => idguider.Contains(t.SyokumuKbn)).Select(t => t.SyainCdSeq).ToList();
            KyoSHeDatabyDateitem.Kikyujdriverlst = await TPM_KyoSHeDataService.Getdataoff(Date.AddDays(i - 1), SyainCdSeqdriverslt.ToArray());
            KyoSHeDatabyDateitem.Kikyujguiderlst = await TPM_KyoSHeDataService.Getdataoff(Date.AddDays(i - 1), SyainCdSeqguiderslt.ToArray());
            KyoSHeDatabyDateitem.Kobandriverlst = await TPM_KyoSHeDataService.GetdataKoban(Date.AddDays(i - 1), SyainCdSeqdriverslt.ToArray());
            KyoSHeDatabyDateitem.haishadrgdData = await TPM_KyoSHeDataService.Getdatadriandgui(Date.AddDays(i - 1), branchlst.ToArray(), new ClaimModel().TenantID);
            KyoSHeDatabyDatelst.Add(KyoSHeDatabyDateitem);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"OnInitializedAsync() Start");
            TPM_YoyKbnDataService = ScopedServices.GetRequiredService<ITPM_YoyKbnDataListService>();
            TPM_CompnyDataService = ScopedServices.GetRequiredService<ITPM_CompnyDataListService>();
            TPM_EigyosDataService = ScopedServices.GetRequiredService<ITPM_EigyosDataListService>();
            BusDataService = ScopedServices.GetRequiredService<IBusDataListService>();
            BusBookingDataService = ScopedServices.GetRequiredService<IBusBookingDataListService>();
            BusTooltipService = ScopedServices.GetRequiredService<ILoadBusTooltipListService>();
            TPM_TokiskDataService = ScopedServices.GetRequiredService<ITPM_TokiskDataListService>();
            TKD_YoshaDataService = ScopedServices.GetRequiredService<ITKD_YoshaDataListService>();
            TKD_HaishaDataService = ScopedServices.GetRequiredService<ITKD_HaishaDataListService>();
            TKD_ShuriDataService = ScopedServices.GetRequiredService<ITKD_ShuriDataListService>();
            TPM_CodeKbnService = ScopedServices.GetRequiredService<ITPM_CodeKbListService>();
            TPM_KyoSHeDataService = ScopedServices.GetRequiredService<ITPM_KyoSHeDataListService>();
            TKD_KakninDataService = ScopedServices.GetRequiredService<ITKD_KakninDataListService>();
            TPM_CalendDataService = ScopedServices.GetRequiredService<ITPM_CalendDataListService>();
            TPM_SyaRyoService = ScopedServices.GetRequiredService<IVPM_SyaRyoListService>();
            YoyKbnService = ScopedServices.GetRequiredService<IBookingTypeListService>();
            branchchart = new List<BranchChartData>();
            Param = new ConfigBusSchedule();
            Param.Mode = (int)BusLineMode.View;
            Param.ActiveV = (int)ViewMode.Large;
            Param.ActiveG = (int)GroupMode.All;
            Param.ActiveP = (int)DayMode.ThreeDays;
            Param.ActiveCPT = (int)TimeMode.ThreeHours;
            Param.ActiveL = (int)LineDrawMode.Normal;
            Param.ActiveS1 = (int)SortVehicleLineMode.Model_Vehicle;
            Param.ActiveS2 = (int)SortVehicleNameMode.Model_Vehicle;
            Param.ActiveS3 = (int)DisplayLineMode.Custom;
            Param.ActiveR = 0;
            valueHaitaCheck = true;
            if (Param.ActiveP == (int)DayMode.OneDay)
            {
                Param.Number_of_days = 1;
            }
            else if (Param.ActiveP == (int)DayMode.ThreeDays)
            {
                Param.Number_of_days = 3;
            }
            else if (Param.ActiveP == (int)DayMode.Week)
            {
                Param.Number_of_days = 7;
            }
            else if (Param.ActiveP == (int)DayMode.Month)
            {
                Param.Number_of_days = 31;
            }
            BusscheduleInsert.BranchID = 1;
            BusscheduleInsert.CompanyID = 1;
            BusscheduleInsert.Loginuser = 1;
            BusscheduleInsert.Itembus = businsert;
            isLoading = true;
            reservation = await TPM_YoyKbnDataService.GetYoyKbn();
            companychart = await TPM_CompnyDataService.GetCompany(new ClaimModel().TenantID);
            KakninLst = await TKD_KakninDataService.GetData();
            foreach (var i in companychart)
            {
                comlst.Add(i.CompanyCdSeq);
                List<BranchChartData> branchchartlst = new List<BranchChartData>();
                branchchartlst = await TPM_EigyosDataService.GetBranchbyCompany(i.CompanyCdSeq, new ClaimModel().TenantID);
                branchchart.AddRange(branchchartlst);
            }
            foreach (var i in branchchart)
            {
                tmpbranchchart.Add(i);
                if (!branchlst.Contains(i.EigyoCdSeq))
                {
                    branchlst.Add(i.EigyoCdSeq);
                }
            }

            if (companychart != null)
            {
                tmpcompanychart = companychart;
                tmpcompanychart.Insert(0, allcompany);
            }

            //if (tmpbranchchart != null)
            //{
            //    tmpbranchchart.Insert(0, allbranch);
            //}

            SelectedCompanyItems = tmpcompanychart;
            tmpbranchchart = (await GetBranchListAsync()).ToList();
            SelectedBranchItems = tmpbranchchart;
            await ApplyFilter();
            //DisplayLstSelectedCompany();
            //DisplayLstSelectedBranch();

            await Task.Run(() =>
            {
                Loadpage().Wait();
                isLoading = false;
            });
            _action = PressEsc;
            LocalizationInit();
            Console.WriteLine($"OnInitializedAsync() Start");


            Console.WriteLine($"OnInitializedAsync() end");
            //N.T.Hieu Kobo
            await GetUpdYmdInits();
        }
        catch (Exception ex)
        {
            isLoading = false;
            ErrorService.ShowErrorPopup("Error", ex.Message);
        }
    }

    protected async Task GetUpdYmdInits()
    {
        if (buslines.Any())
        {
            var dataParam = buslines?.Select(_ => new ParamHaiTaCheck
            {
                UkeNo = _.Haisha_UkeNo,
                UnkRen = _.Haisha_UnkRen,
                TeiDanNo = _.Haisha_TeiDanNo,
                BunkRen = _.Haisha_BunkRen,
                SyaSyuRen = _.YykSyu_SyaSyuRen
            }).ToList();
            if (dataParam.Any())
                UpYmdTimes = await _busScheduleService.GetUpYmdTimes(dataParam);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"OnAfterRenderAsync(bool {firstRender}) Start");
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "onInit");
        await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "unloadScrollBars");
        //await JSRuntime.InvokeVoidAsync("loadPageScript", "busSchedulePage", "drawLineInsert");
        await JSRuntime.InvokeVoidAsync("setEventforCurrencyField");
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 5);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 2);
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 100);
        await JSRuntime.InvokeVoidAsync("setEventforTimeInput");
        if (Param.Mode == (int)BusLineMode.View || Param.Mode == (int)BusLineMode.Zoom)
        {
            await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "Roll", 1);

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("loadComponentScript", "busComponent", "Roll", 2);
        }
        if (firstRender)
        {
            w = (double)await BrowserResizeService.GetInnerWidth();
            if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
            {
                Width = 5760;
            }
            if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
                Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
                Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
            {
                Width = w;
            }
            if (Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
            {
                Width = w * 3;
            }
            if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
            {
                Width = w * 7;
            }
            if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
                Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
            {
                Width = Math.Round(w / 3 * 7);
            }
            if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
            {
                Width = w * 31;
            }
            if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
                Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
            {
                Width = Math.Round(w / 3 * 31);
            }
            if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
            {
                Width = w;
            }
            BrowserResizeService.OnResize += BrowserHasResized;
            await JSRuntime.InvokeAsync<object>("browserResize.registerResizeCallback");
            BrowserResizeService.OnCallbackWidth += BrowserHasCallbackWidth;
            await JSRuntime.InvokeAsync<object>("browserResize.registerWidthCallback");
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            if (actionBusSchedule == ActionBusSchedule.Move || actionBusSchedule == ActionBusSchedule.Cut ||
                actionBusSchedule == ActionBusSchedule.Merge || actionBusSchedule == ActionBusSchedule.Delete
                || actionBusSchedule == ActionBusSchedule.SimpleDispatch || actionBusSchedule == ActionBusSchedule.Undo)
                UpYmdTimes = UpYmdTimeNews;
        }
        Console.WriteLine($"OnAfterRenderAsync(bool {firstRender}) End");
    }

    private async Task BrowserHasResized()
    {
        w = (double)await BrowserResizeService.GetInnerWidth();
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
            Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        StateHasChanged();
    }

    private async Task BrowserHasCallbackWidth()
    {
        w = (double)await BrowserResizeService.GetCallbackInnerWidth();
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
            Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        StateHasChanged();
    }
    public async Task ItemClick(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = "";
        bool isGetUpdYmds = false;
        switch (e.MenuItem.Id)
        {
            case "menuitem-delete":
                {
                    var isValid = HaiTaCheck();
                    valueHaitaCheck = isValid.Result;
                    if (valueHaitaCheck)
                    {

                        TKD_HaishaDataService.Updatebusdeletedata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
                        BusBookingDataService.UpdateUnkobi(update.BookingId, update.haUnkRen, filterConditionFormName);
                        BusBookingDataService.UpdateYyksho(update.BookingId, new ClaimModel().TenantID, filterConditionFormName);
                        BusBookingDataService.UpdateBunKSyuJyndata(update.BookingId, update.haUnkRen, update.TeiDanNo,  new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
                        actionBusSchedule = ActionBusSchedule.Delete;
                        isGetUpdYmds = true;
                    }
                }
                break;
            case "menuitem-merge":
                await Task.Run(() =>
                {
                    var isValid = HaiTaCheck();
                    valueHaitaCheck = isValid.Result;
                    if (isValid.Result)
                    {
                        ItemStaff itemStaff = new ItemStaff();
                        TKD_HaishaDataService.UpdatebusMergedata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, itemStaff, filterConditionFormName,update.NippoKbn);
                        actionBusSchedule = ActionBusSchedule.Merge;
                        isGetUpdYmds = true;
                    }
                });
                break;
            case "menuitem-simpledispatch":
                {
                    var isValid = HaiTaCheck();
                    valueHaitaCheck = isValid.Result;
                    if (valueHaitaCheck)
                    {
                        TKD_HaishaDataService.UpdatebusSimpledata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
                        //BusBookingDataService.UpdateHaiSha(update.BookingId, update.haUnkRen,update.TeiDanNo,update.BunkRen);
                        BusBookingDataService.UpdateUnkobi(update.BookingId, update.haUnkRen, filterConditionFormName);
                        BusBookingDataService.UpdateYyksho(update.BookingId, new ClaimModel().TenantID, filterConditionFormName);
                        actionBusSchedule = ActionBusSchedule.SimpleDispatch;
                        isGetUpdYmds = true;
                    }
                }
                break;
            case "menuitem-undo":
                {
                    await Task.Run(() =>
                    {
                        var isValid = HaiTaCheck();
                        valueHaitaCheck = isValid.Result;
                        if (valueHaitaCheck)
                        {
                            TimeBooking timeBooking=new TimeBooking();
                            timeBooking.HaiSTime=update.TimeStart.ToString("D4");
                            timeBooking.SyuPaTime=update.TimeStartDefault.ToString("D4");
                            timeBooking.SyuKoTime=update.TimeStartDefault.ToString("D4");
                            timeBooking.TouChTime=update.TimeEnd.ToString("D4");
                            timeBooking.KikTime=update.TimeEndDefault.ToString("D4");
                            timeBooking.SyuKoYmd=update.StartDateDefault;
                            timeBooking.HaiSYmd=update.StartDate;
                            timeBooking.TouYmd=update.EndDate;
                            timeBooking.KikYmd=update.EndDateDefault;
                            TKD_HaishaDataService.UpdatebusUndodata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,timeBooking);
                            //BusBookingDataService.UpdateHaiSha(update.BookingId, update.haUnkRen,update.TeiDanNo,update.BunkRen);
                            BusBookingDataService.UpdateUnkobi(update.BookingId, update.haUnkRen, filterConditionFormName);
                            BusBookingDataService.UpdateYyksho(update.BookingId, new ClaimModel().TenantID, filterConditionFormName);
                            actionBusSchedule = ActionBusSchedule.Undo;
                            isGetUpdYmds = true;
                        }
                    });
                }
                break;
            case "menuitem-reservation-correction":
                var u = NavigationManager.BaseUri;
                NavigationManager.NavigateTo(string.Format("bookinginput?UkeCd={0}", update.BookingId.Substring(5)));
                break;
            case "menuitem-single-copy":
                NavigationManager.NavigateTo(string.Format("bookinginput/?UkeCd={0}&action=copy", update.BookingId.Substring(5)), true);
                return;
            case "menuitem-multi-copy":
                NavigationManager.NavigateTo(string.Format("/bookinginputmulticopy?UkeCd={0}", update.BookingId.Substring(5)), true);
                return;
            case "menuitem-reservation-cancellation":
                IsOpenCancelTab = true;
                await InvokeAsync(StateHasChanged);
                return;
            case "menuitem-confirmation":
                IsOpenConfirmTab = true;
                await InvokeAsync(StateHasChanged);
                return;
            case "menuitem-edityykshobikonm":
                IsOpenEditYykshoBikoNm = true;
                IsOpenEditUnkobiBikoNm = false;
                await InvokeAsync(StateHasChanged);
                return;
            case "menuitem-editunkobibikonm":
                IsOpenEditUnkobiBikoNm = true;
                IsOpenEditYykshoBikoNm = false;
                await InvokeAsync(StateHasChanged);
                return;
            case "menuitem-savepdf-reservation":
                var SelectedReceiptNumber = new List<string> { update.BookingId };
                var SelectedUnkRen = new List<string> { update.haUnkRen.ToString() };
                HikiukeshoReportService.transportationContractReport(OptionReport.Download.ToString(), SelectedReceiptNumber, SelectedUnkRen, "1", JSRuntime, YoyKbnService, 1);
                return;
            case "menuitem-preview-reservation":
                var SelectedReceiptNumberPreview = new List<string> { update.BookingId };
                var SelectedUnkRenPreview = new List<string> { update.haUnkRen.ToString() };
                HikiukeshoReportService.transportationContractReport(OptionReport.Preview.ToString(), SelectedReceiptNumberPreview, SelectedUnkRenPreview, "1", JSRuntime, YoyKbnService, 1);
                return;
            case "menuitem-savepdf-reservationtype":
                var SelectedReceiptNumberTwo = new List<string> { update.BookingId };
                var SelectedUnkRenTwo = new List<string> { update.haUnkRen.ToString() };
                HikiukeshoReportService.transportationContractReport(OptionReport.Download.ToString(), SelectedReceiptNumberTwo, SelectedUnkRenTwo, "2", JSRuntime, YoyKbnService, 1);
                return;
            case "menuitem-preview-reservationtype":
                var SelectedReceiptNumberTwoPreview = new List<string> { update.BookingId };
                var SelectedUnkRenTwoPreview = new List<string> { update.haUnkRen.ToString() };
                HikiukeshoReportService.transportationContractReport(OptionReport.Preview.ToString(), SelectedReceiptNumberTwoPreview, SelectedUnkRenTwoPreview, "2", JSRuntime, YoyKbnService, 1);
                return;
            case "menuitem-savepdf-advancepayment":
                AdvancePaymentDetailsSearchParam searchPDFParams = new AdvancePaymentDetailsSearchParam();
                searchPDFParams.OutputSetting = (byte)PrintMode.SaveAsPDF;
                searchPDFParams.PaperSize = new PaperSizeDropdown();
                searchPDFParams.PaperSize.Value = (byte)PaperSize.A4;
                searchPDFParams.ScheduleYmdStart = DateTime.ParseExact(update.StartDate, "yyyyMMdd", null);
                searchPDFParams.ScheduleYmdEnd = DateTime.ParseExact(update.EndDate, "yyyyMMdd", null);
                searchPDFParams.TenantCdSeq = new ClaimModel().TenantID;
                await advancePaymentDetailsService.OnExportPdf(searchPDFParams.OutputSetting, searchPDFParams, JSRuntime, reportLayoutSettingService, 0);
                return;
            case "menuitem-preview-advancepayment":
                AdvancePaymentDetailsSearchParam searchParams = new AdvancePaymentDetailsSearchParam();
                searchParams.OutputSetting = (byte)PrintMode.Preview;
                searchParams.PaperSize = new PaperSizeDropdown();
                searchParams.PaperSize.Value = (byte)PaperSize.A4;
                searchParams.ScheduleYmdStart = DateTime.ParseExact(update.StartDate, "yyyyMMdd", null);
                searchParams.ScheduleYmdEnd = DateTime.ParseExact(update.EndDate, "yyyyMMdd", null);
                searchParams.TenantCdSeq = new ClaimModel().TenantID;
                await advancePaymentDetailsService.OnExportPdf(searchParams.OutputSetting, searchParams, JSRuntime, reportLayoutSettingService, 0);
                return;
            case "menuitem-preview-billprint":
                List<OutDataTable> lstPrint = new List<OutDataTable>() { new OutDataTable { UkeNo = update.BookingId, supOutSiji = 2 } };
                OutDataTableModel outDataTableModel = new OutDataTableModel() { outDataTables = lstPrint };
                var billParams = EncryptHelper.EncryptToUrl(outDataTableModel);
                url = baseUrl + "/billprint";
                url = url + string.Format("/?lstInfo={0}", billParams);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                return;
            case "menuitem-staff":
                NavigationManager.NavigateTo($"Staff?SelectedDate={e.Data}", true);
                break;
            case "menuitem-buscoordination":
                NavigationManager.NavigateTo("buscoordination", true);
                break;
            case "download_report_operating_instructions":
                UnkoushijishoReportService.ExportReportDateAsPdf(update.BookingId, update.TeiDanNo, update.haUnkRen, update.BunkRen, new DateTime().ToString("yyyyMMdd"), JSRuntime);
                //url = baseUrl + "/OperatingInstructionReport";
                //url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Download, update.BookingId, update.TeiDanNo, update.haUnkRen, update.BunkRen, 1);
                //JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "preview_report_operating_instructions":
                url = baseUrl + "/OperatingInstructionReportPreviewNew";
                url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}&Date={6}&IsLoadDefault={7}", OptionReport.Preview, update.BookingId, update.TeiDanNo, update.haUnkRen, update.BunkRen, 1, update.StartDateDefault, 1);

                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "download_report_flight_record_book":
                UnkoushijishoReportService.ExportReportdriDateAsPdf(update.BookingId, update.TeiDanNo, update.haUnkRen, update.BunkRen, update.StartDateDefault, JSRuntime);
                //url = baseUrl + "/OperatingInstructionReport";
                //url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}", OptionReport.Download, update.BookingId, update.TeiDanNo, update.haUnkRen, update.BunkRen, 2);
                //JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "preview_report_flight_record_book":
                url = baseUrl + "/OperatingInstructionReportPreviewNew";
                url = url + string.Format("/?Option={0}&BookingID={1}&TeiDanNo={2}&UnkRen={3}&BunkRen={4}&Mode={5}&Date={6}&IsLoadDefault={7}", OptionReport.Preview, update.BookingId, update.TeiDanNo, update.haUnkRen, update.BunkRen, 2, update.StartDateDefault, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-busallocation":
                url = baseUrl + "/busallocation";
                url = url + string.Format("/?date={0}", e.Data);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "temporary_car_input":
                url = baseUrl + "/busallocation";
                url = url + string.Format("/?date={0}&HaiSKbn={1}", e.Data, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-hypermenu":
                url = baseUrl + "/hypermenu";
                MoveToSuperMenu(0, e.Data.ToString());
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-supermenutype1":
                url = baseUrl + "/supermenu?&type=1";
                MoveToSuperMenu(1, e.Data.ToString());
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-supermenutype2":
                url = baseUrl + "/supermenu?&type=2";
                MoveToSuperMenu(2, e.Data.ToString());
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "daily_report_vehicle":
                url = baseUrl + "/vehicledailyreport";
                MoveToVehicleDailyReport(e.Data.ToString());
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "AdvanceStatementWeb":
                url = baseUrl + "/advancepaymentdetails";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "AdvanceStatementPrint":
                url = baseUrl + "/advancepaymentdetails";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-sticker":
                url = baseUrl + "/sticker";
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            //GetUpdYmdInits().Wait();
            //UpYmdTimeNews = UpYmdTimes;
            isLoading = false;
        });

        StateHasChanged();
    }

    private void MoveToSuperMenu(byte type, string date)
    {
        HyperFormData hyperData = new HyperFormData();
        hyperData.HaishaBiFrom = DateTime.ParseExact(date, CommonConstants.FormatYMD, CultureInfo.InvariantCulture);
        hyperData.HaishaBiTo = DateTime.ParseExact(date, CommonConstants.FormatYMD, CultureInfo.InvariantCulture);
        Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
        keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForHyperFormData(hyperData).Result;
        string formName = type == 0 ? FormFilterName.HyperMenu : type == 1 ? FormFilterName.SuperMenuReservation : FormFilterName.SuperMenuVehicle;
        FilterServices.SaveFilterCondtion(keyValueFilterPairs, formName, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
    }

    private void MoveToVehicleDailyReport(string date)
    {
        VehicleDailyReportSearchParam data = new VehicleDailyReportSearchParam();
        data.ScheduleYmdStart = DateTime.ParseExact(date, CommonConstants.FormatYMD, CultureInfo.InvariantCulture);
        data.ScheduleYmdEnd = DateTime.ParseExact(date, CommonConstants.FormatYMD, CultureInfo.InvariantCulture);
        data.OutputKbn = new VehicleSearchDropdown() { Value = 1, Text = string.Empty };
        Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
        keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForVehicleDailyReport(data).Result;
        FilterServices.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.VehicleDailyReport, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
    }

    private async Task<bool> HaiTaCheck()
    {
        try
        {
            if (buslines.Any())
            {
                var dataParam = buslines?.Select(_ => new ParamHaiTaCheck
                {
                    UkeNo = _.Haisha_UkeNo,
                    UnkRen = _.Haisha_UnkRen,
                    TeiDanNo = _.Haisha_TeiDanNo,
                    BunkRen = _.Haisha_BunkRen,
                    SyaSyuRen = _.YykSyu_SyaSyuRen
                }).ToList();
                if (dataParam.Any())
                    UpYmdTimeAfters = await _busScheduleService.GetUpYmdTimes(dataParam);
            }

            var upYmdTimeInitSelectd = UpYmdTimes.FirstOrDefault(_ => _.UkeNo == update.BookingId && _.UnkRen == update.haUnkRen
                                  && _.TeiDanNo == update.TeiDanNo && _.BunkRen == update.BunkRen);

            var upYmdTimeAfterSelectd = UpYmdTimeAfters.FirstOrDefault(_ => _.UkeNo == update.BookingId && _.UnkRen == update.haUnkRen
                                       && _.TeiDanNo == update.TeiDanNo && _.BunkRen == update.BunkRen);

            var upYmdTimeInitJson = JsonConvert.SerializeObject(upYmdTimeInitSelectd?.UpYmdTimes);
            var upYmdTimeAfterJson = JsonConvert.SerializeObject(upYmdTimeAfterSelectd?.UpYmdTimes);

            ukeNo = update?.BookingId?.Substring(5, 10);

            return upYmdTimeInitJson == upYmdTimeAfterJson ? true : false;
        }
        catch (Exception ex)
        {
            _errorModalService.HandleError(ex);
        }
        return true;
    }

    public async void Simpledispatch(ItemClickEventArgs e)
    {
        ItemBus currentBooking = e.Data as ItemBus;
        await Task.Run(() =>
        {
            ItemStaff itemStaff = new ItemStaff();
            TKD_HaishaDataService.UpdatebusMergedata(update.BookingId, update.haUnkRen, update.TeiDanNo, update.BunkRen, 1, itemStaff, filterConditionFormName,update.NippoKbn);
        });
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }
    public void Dispose()
    {
        BrowserResizeService.OnResize -= BrowserHasResized;
        BrowserResizeService.OnCallbackWidth -= BrowserHasCallbackWidth;
    }
    void MenuOnAppearingHandler(MenuAppearingEventArgs e)
    {
        if (e.Data != null)
        {
            var currentBookingItem = e.Data as ItemBus;
            e.PreventShow = !currentBookingItem.CanShowMenu;
        }
    }
    void ItemOnAppearingHandler(ItemAppearingEventArgs e)
    {
        try
        {
            var currentBookingItem = e.Data as ItemBus;
            update = new ItemBus();
            update = e.Data as ItemBus;
            switch (e.MenuItem.Id)
            {
                case "3":
                    e.IsEnabled = false;
                    break;
                case "10":
                    e.IsEnabled = false;
                    break;
                case "9":
                    e.IsEnabled = false;
                    break;
                case "menuitem-delete":
                    e.IsEnabled = currentBookingItem.CanBeDeleted &&
                                  (update.ColorLine == BusCssClass.NippozumiColor || update.ColorLine == BusCssClass.SimezumiColor
                                  ? false : true);
                    break;
                case "menuitem-merge":
                    e.IsEnabled = currentBookingItem.CanBeDeleted &&
                                  (update.ColorLine == BusCssClass.NippozumiColor || update.ColorLine == BusCssClass.SimezumiColor
                                  ? false : (Buslines.Any(_ => _.BookingId == update.BookingId &&
                                  (_.ColorLine == BusCssClass.NippozumiColor || _.ColorLine == BusCssClass.SimezumiColor)) ? false : true));
                    break;
                case "menuitem-simpledispatch":
                    e.IsEnabled = currentBookingItem.CanSimpledispatch;
                    if (currentBookingItem.ColorLine == "color-8")
                    {
                        e.IsEnabled = false;
                    }
                    break;
                case "menuitem-undo":
                    if (currentBookingItem.KSKbn == 1 && currentBookingItem.YouTblSeq == 0 || currentBookingItem.KSKbn == 1 && currentBookingItem.YouTblSeq > 0)
                    {
                        e.IsEnabled = currentBookingItem.CanSimpledispatch;
                    }
                    else
                    {
                        e.IsEnabled = !currentBookingItem.CanSimpledispatch;
                    }
                    if (currentBookingItem.ColorLine == "color-8")
                    {
                        e.IsEnabled = false;
                    }
                    break;
                case "menuitem-car-cooperation":
                    if (currentBookingItem.YouTblSeq != 0)
                    {
                        e.IsVisible = true;
                        if (CarCooperationService.CheckDataYoushaNotice(new ClaimModel().TenantID, currentBookingItem.BookingId, currentBookingItem.haUnkRen, currentBookingItem.YouTblSeq))
                        {
                            e.IsEnabled = false;
                        }
                    }
                    else
                    {
                        e.IsVisible = false;
                    }
                    break;
                case "menuitem-temporarycarinput":
                    if (currentBookingItem.HaiSKbn != 2)
                    {
                        e.IsEnabled = true;
                    }
                    else
                    {
                        e.IsEnabled = false;
                    }
                    break;
            }
        }
        catch (Exception)
        {
            //TODO logging exception
            e.IsEnabled = false;
        }
    }

    private static Action _action;
    [JSInvokable]
    public static void pressKey()
    {
        _action.Invoke();
    }

    private void PressEsc()
    {
        Param.Mode = (int)BusLineMode.View;
        flagShowClass = false;
        StateHasChanged();
    }

    public void OpenBusAllocation(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = baseUrl + "/busallocation";
        switch (e.MenuItem.Id)
        {
            case "menuitem-busallocation":
                url = url + string.Format("/?date={0}&bookingid={1}", update.Unkobi_StartYmd, update.UkeCd);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "menuitem-temporarycarinput":
                url = url + string.Format("/?date={0}&bookingid={1}&HaiSKbn={2}", update.Unkobi_StartYmd, update.UkeCd, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }

    public async Task OnCallBackIdCode(VPM_RepairData code)
    {
        CodeKbnItem = code;
        StateHasChanged();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }
    public async Task HandleUpdateZoom(string text)
    {
        setWidth();
        setNumberOfDate();
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
    }

    public void setWidth()
    {
        if (Param.ActiveP != (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute || Param.ActiveP < (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Param.ActiveCPT = (int)TimeMode.OneHour;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT == (int)TimeMode.Minute)
        {
            Width = 5760;
        }
        if (Param.ActiveP == (int)DayMode.OneDay && Param.ActiveCPT != (int)TimeMode.Minute ||
            Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT > (int)TimeMode.OneHour ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
        if (Param.ActiveP == (int)DayMode.ThreeDays && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 3;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 7;
        }
        if (Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Week && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 7);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.OneHour)
        {
            Width = w * 31;
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.ThreeHours ||
            Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.SixHours)
        {
            Width = Math.Round(w / 3 * 31);
        }
        if (Param.ActiveP == (int)DayMode.Month && Param.ActiveCPT == (int)TimeMode.Day)
        {
            Width = w;
        }
    }

    public void setNumberOfDate()
    {
        if (Param.ActiveP == (int)DayMode.OneDay)
        {
            Param.Number_of_days = 1;
        }
        else if (Param.ActiveP == (int)DayMode.ThreeDays)
        {
            Param.Number_of_days = 3;
        }
        else if (Param.ActiveP == (int)DayMode.Week)
        {
            Param.Number_of_days = 7;
        }
        else if (Param.ActiveP == (int)DayMode.Month)
        {
            Param.Number_of_days = 31;
        }
    }

    public void OpenJourneys()
    {
        PopupJourney = true;
        StateHasChanged();
    }

    private async Task CancelJourney()
    {
        PopupJourney = false;
        isLoading = true;
        await Task.Run(() =>
        {
            Loadpage().Wait();
            isLoading = false;
        });
        StateHasChanged();
    }

    public void OpenTehai()
    {
        PopupTehai = true;
        StateHasChanged();
    }

    public void OpenFutai()
    {
        PopupFutai = true;
        StateHasChanged();
    }

    public void OpenTsumi()
    {
        PopupTsumi = true;
        StateHasChanged();
    }

    private void DisplayLstSelectedCompany()
    {
        if (SelectedCompanyItems.Count() == 0)
        {
            showSelectedCompanies = "選択項目：0";
        }
        else if (SelectedCompanyItems.Count() == 1)
        {
            foreach (var item in SelectedCompanyItems)
            {
                showSelectedCompanies = item.CompanyNm;
            }
        }
        else if (SelectedCompanyItems.Count() > 1 && SelectedCompanyItems.Count() < tmpcompanychart.Count())
        {
            showSelectedCompanies = "選択項目：" + SelectedCompanyItems.Count().ToString();
        }
        else if (SelectedCompanyItems.Count() == tmpcompanychart.Count())
        {
            showSelectedCompanies = "すべて";
        }
    }

    private void DisplayLstSelectedBranch()
    {
        if (SelectedBranchItems.Count() == 0)
        {
            showSelectedBranches = "選択項目：0";
        }
        else if (SelectedBranchItems.Count() == 1)
        {
            foreach (var item in SelectedBranchItems)
            {
                showSelectedBranches = item.RyakuNm;
            }
        }
        else if (SelectedBranchItems.Count() < tmpbranchchart.Count())
        {
            showSelectedBranches = "選択項目：" + SelectedBranchItems.Count().ToString();
        }
        else if (SelectedBranchItems.Count() == tmpbranchchart.Count())
        {
            showSelectedBranches = "すべて";
        }
    }

    public async void ItemClickReport(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = "";
        switch (e.MenuItem.Id)
        {
            case "previewReportTenkokiroku":
                url = baseUrl + "/attendanceconfirmreportpreview";
                url = url + string.Format("/?Option={0}&Date={1}&IsLoadDefault={2}", OptionReport.Preview, Date, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadReportTenkokiroku":
                url = baseUrl + "/attendanceconfirmreport";
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Download, Date);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "previewUnkoushijishoReport":
                url = baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Preview, Date, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadUnkoushijishoReport":
                url = baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Download, Date, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;

            case "previewJomukirokuboReport":
                url = baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Preview, Date, 2);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadJomukirokuboReport":
                url = baseUrl + "/OperatingInstructionReport";
                url = url + string.Format("/?Option={0}&Date={1}&Mode={2}", OptionReport.Download, Date, 2);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    public async void ItemClickBusReport(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = "";
        switch (e.MenuItem.Id)
        {
            case "previewBusReport":
                url = baseUrl + "/busreportspreview";
                url = url + string.Format("/?Option={0}&Date={1}&IsLoadDefault={2}", OptionReport.Preview, Date, 1);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "downloadBusReport":
                url = baseUrl + "/busreports";
                url = url + string.Format("/?Option={0}&Date={1}", OptionReport.Download, Date);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    public async void ItemClickSticker(ItemClickEventArgs e)
    {
        string Date = e.Data as string;
        string baseUrl = Configuration["ServiceUrls:StickerService"];
        string url = baseUrl + "/Sticker";
        url = url + string.Format("/?Date={0}", Date);
        JSRuntime.InvokeVoidAsync("open", url, "_blank");

    }
    public async void ItemClickBusCooradinationReport(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        BusCoordinationSearchParam report = new BusCoordinationSearchParam();
        string url = baseUrl + "";
        switch (e.MenuItem.Id)
        {
            case "BusCoooradination_Preview":
                url = url + string.Format("/buscoordinationreportpreview/?Option={0}&UnkobiDate={1}&Ukeno={2}&UnkRen={3}&IsLoadDefault=1", OptionReport.Preview, update.Unkobi_StartYmd, update.UkeCd, update.haUnkRen);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
            case "BusCoooradination_Download":
                BusCoordinationReportService.ExportPdfFiles(update.Unkobi_StartYmd, update.UkeCd.ToString(), update.haUnkRen.ToString(), JSRuntime);
                //url = url + string.Format("/buscoordination/?Option={0}&UnkobiDate={1}&Ukeno={2}&UnkRen={3}", OptionReport.Download, update.Unkobi_StartYmd, update.UkeCd, update.haUnkRen);
                //JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }
    public async void OpenPartnerBookingInput(ItemClickEventArgs e)
    {
        string baseUrl = AppSettingsService.GetBaseUrl();
        string url = baseUrl + "/partnerbookinginput";
        switch (e.MenuItem.Id)
        {
            case "menuitem-partnerbookinginput":
                url = url + string.Format("/?UkeCd={0}&UnkRen={1}", update.UkeCd.ToString("D10"), update.haUnkRen);
                JSRuntime.InvokeVoidAsync("open", url, "_blank");
                break;
        }
    }

    protected async Task<IEnumerable<BranchChartData>> GetBranchListAsync(CancellationToken ct = default)
    {
        tmpbranchchart.Clear();
        foreach (var i in SelectedCompanyItems)
        {
            tmpbranchchart.AddRange(await TPM_EigyosDataService.GetBranchbyCompany(i.CompanyCdSeq, new ClaimModel().TenantID));
        }
        if (tmpbranchchart.Count() > 0)
        {
            tmpbranchchart.Insert(0, allbranch);
        }
        else
        {
            SelectedBranchItems = SelectedBranchItems.Take(0);
        }
        return tmpbranchchart;
    }

    public void OpenCarCooperation()
    {
        PopupCarCooperation = true;
        StateHasChanged();
    }

    public void ClosePopupCarCooperation(Dictionary<string, dynamic> parameters)
    {
        PopupCarCooperation = false;
        if ((bool)parameters["OpenPopup"])
        {
            if (parameters["Status"] == "Error")
            {
                popupTitle = Lang["title_PopupError"];
                popupContent = Lang["CommonError"];
                popupicon = popupiconerror;
            }
            else
            {
                popupTitle = Lang["title_PopupInfo"];
                popupContent = Lang["mesage_car_cooperation"];
                popupicon = popupiconinfo;
            }
            PopupMessageCarCooperation = true;
        }
        StateHasChanged();
    }

    private Dictionary<string, string> GetFieldValues()
    {
        var result = new Dictionary<string, string>();
        ScheduleFilter.ScheduleDate = Date;
        ScheduleFilter.LineDrawMode = Param.ActiveL;
        ScheduleFilter.GroupMode = Param.ActiveG;
        ScheduleFilter.DayMode = Param.ActiveP;
        ScheduleFilter.TimeMode = Param.ActiveCPT;
        ScheduleFilter.SortVehicleLineMode = Param.ActiveS1;
        ScheduleFilter.SortVehicleNameMode = Param.ActiveS2;
        ScheduleFilter.DisplayLineMode = Param.ActiveS3;
        ScheduleFilter.ViewMode = Param.ActiveV;
        ScheduleFilter.CompanyCdSeqList = SelectedCompanyItems.Select(c => c.CompanyCdSeq).ToList();
        ScheduleFilter.EigyoCdSeqList = SelectedBranchItems.Select(c => c.EigyoCdSeq).ToList();
        ScheduleFilter.ReservationYoyaKbnSeq = Param.ActiveR;
        result = BusBookingDataService.GetFieldValues(ScheduleFilter);
        return result;
    }

    private async Task SaveCurrentFilter()
    {
        await FilterServices.SaveCustomFilterAndConditions(GetFieldValues(), filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
    }

    private async Task ApplyFilter()
    {
        var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq)).ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues();
        if (filterValues.Count > 0)
        {
            isFilterApply = true;
            BusBookingDataService.ApplyFilter(ref ScheduleFilter, filterValues);

            clickL(null, ScheduleFilter.LineDrawMode);
            clickG(null, ScheduleFilter.GroupMode);
            clickS1(null, ScheduleFilter.SortVehicleLineMode);
            clickS2(null, Param.ActiveS2 = ScheduleFilter.SortVehicleNameMode);
            clickS3(null, ScheduleFilter.DisplayLineMode);
            clickV(null, ScheduleFilter.ViewMode);
            OnDateChanged(ScheduleFilter.ScheduleDate);
            await clickP(null, ScheduleFilter.DayMode);
            await clickCPT(null, ScheduleFilter.TimeMode);

            await clickR(null, ScheduleFilter.ReservationYoyaKbnSeq);
            SelectedCompanyItemsChanged(tmpcompanychart.Where(c => c.CompanyCdSeq > 0).Count() == SelectedCompanyItems.Count() ?
                                        tmpcompanychart.Where(c => ScheduleFilter.CompanyCdSeqList.Contains(c.CompanyCdSeq)) :
                                        tmpcompanychart);
            SelectedBranchItemsChanged(tmpbranchchart.Where(b => b.EigyoCdSeq > 0).Count() == SelectedBranchItems.Count() ?
                                        tmpbranchchart.Where(c => ScheduleFilter.EigyoCdSeqList.Contains(c.EigyoCdSeq)) :
                                        tmpbranchchart);
            isFilterApply = false;
            //isLoading = true;
            //await Task.Run(() =>
            //{
            //    Loadpage().Wait();
            //    isLoading = false;
            //    isFilterApply = false;
            //    InvokeAsync(StateHasChanged);
            //});
        }
        else
        {
            SelectedCompanyItemsChanged(tmpcompanychart.Where(c => c.CompanyCdSeq > 0).Count() == SelectedCompanyItems.Count() ?
                                        tmpcompanychart.Where(c => ScheduleFilter.CompanyCdSeqList.Contains(c.CompanyCdSeq)) :
                                        tmpcompanychart);
            SelectedBranchItemsChanged(tmpbranchchart.Where(b => b.EigyoCdSeq > 0).Count() == SelectedBranchItems.Count() ?
                                        tmpbranchchart.Where(c => ScheduleFilter.EigyoCdSeqList.Contains(c.EigyoCdSeq)) :
                                        tmpbranchchart);
        }

    }

    [Inject] public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    int BufferSize = 32768;

    private async Task DownloadExcel()
    {
        var colorRef = await BusLineCssColorService.GetAllCssColor();
        var excelPackage = ExcelExportScheduleHelper.GenerateBusSchedule(Date, Param, Busnames, Buslines, Busrepair, colorRef);
        var Base64Nyan = excelPackage.GetAsByteArray();
        await BlazorDownloadFileService.DownloadFile("example.xlsx", Base64Nyan, BufferSize, "application/octet-stream");
    }
    private async void ResetForm()
    {
        FilterServices.DeleteFilter(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName).Wait();
        FilterServices.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName).Wait();
        NavigationManager.NavigateTo("BusSchedule", true);
    }

    public async Task ValueCheckHaitaBusSchedule(DataInit item)
    {
        if (item != null)
        {
            valueHaitaCheck = item.IsValid;
            if (valueHaitaCheck)
            {
                await GetUpdYmdInits();
                UpYmdTimeNews = UpYmdTimes;
            }
            else
                UpYmdTimeNews = item.ResponseHaiTaCheckInit;
            ukeNo = item.UkeNo;
            actionBusSchedule = item.ActionBusSchedule;
            await OnAfterRenderAsync(false);
        }
    }

    protected async Task HandleSaveCancelData()
    {
        IsOpenCancelTab = false;
        PopupHaiTaCheckFail = true;
        await InvokeAsync(StateHasChanged);
    }
}