@using DevExpress.XtraReports.UI
@using DevExpress.XtraPrinting
@inject IAdvancePaymentDetailsService advancePaymentDetailsService
@inject IReportLayoutSettingService reportLayoutSettingService
@inject IJSRuntime JSRuntime
@inject CustomNavigation NavManager
@inject IStringLocalizer<AdvancePaymentDetails> lang
@inject IErrorHandlerService errorModalService
@inject IFilterCondition FilterConditionService
@inject IGetFilterDataService GetFilterDataService
@inject IGenerateFilterValueDictionary GenerateFilterValueDictionaryService
@using HassyaAllrightCloud.Pages.Components.CommonComponents;

<DxPopup @bind-Visible="@isDataNotFound">
    <HeaderTemplate>
        <div class="bg-dark text-white p-2">
            <i class="fa fa-info-circle" aria-hidden="true"></i> @lang["advancePaymentDetailsOutput"]
        </div>
    </HeaderTemplate>
    <ChildContent>
        <p>@lang["correspondingDataNotExist"]</p>
        <div class="text-center">
            <a href="javascript:void(0)" class="btn btn-outline-secondary width--120" @onclick="@(() => isDataNotFound = false)">@lang["ok"]</a>
        </div>
    </ChildContent>
</DxPopup>

<EditForm Context="editContext" EditContext="@searchForm">
    <DataAnnotationsValidator />
    <FluentValidator TValidator="AdvancePaymentDetailsSearchValidator" />
    <div class="detailAdvanceAmount">
        <div class="mb-3 search-panel">
            <div class="row mb-2">
                <div class="col-6">
                    <h5>@lang["advancePaymentDetailsOutput"]</h5>
                </div>
                <div class="col-6 text-right">
                    <button class="btn btn-sm btn-danger" @onclick="@(() => OnResetSearchData())">
                        <i class="fa fa-refresh" aria-hidden="true"></i> &nbsp;&nbsp; @lang["deleteAll"]
                    </button>
                </div>
            </div>
            <div class="border-dotted m-0 pt-3 mb-3" style="margin-top:-1px">
                <h6 class="col ml-3 mb-3">@lang["displaySetting"]</h6>
                <div class="ml-3">
                    <div class="col ml-4">
                        <div class="form-group d-flex flex-nowrap mb-3">
                            <label class="col-form-label col-1 text-left pl-0">@lang["outputInstruction"]</label>
                            <div class="col-9 pl-0">
                                <button class="@string.Format("btn-option mx-2 {0}", searchParams.OutputSetting == (byte) PrintMode.Preview ? "btn-active" : string.Empty)"
                                        type="button" @onclick="@(() => OnOutputSetting((byte) PrintMode.Preview))">
                                    @lang["preview"]
                                </button>
                                <button class="@string.Format("btn-option mx-2 {0}", searchParams.OutputSetting == (byte) PrintMode.SaveAsPDF ? "btn-active" : string.Empty)"
                                        type="button" @onclick="@(() => OnOutputSetting((byte) PrintMode.SaveAsPDF))">
                                    @lang["pdf"]
                                </button>
                            </div>
                        </div>
                        <div class="form-group d-flex flex-nowrap mb-3">
                            <label class="col-form-label col-1 text-left mt-2 pl-0">@lang["output_classification"]</label>
                            <div class="row pl-0 border-dotted">
                                <label class="col-form-label col-2 text-left mr-3 ml-3 pl-0">@lang["paperSize"]</label>
                                <DxComboBox Data="listPaperSize"
                                            FilteringMode="@DataGridFilteringMode.Contains"
                                            AllowUserInput="false"
                                            CssClass="w-50 width--150 mr-3 ml-5"
                                            TextFieldName="Text"
                                            SelectedItem="searchParams.PaperSize"
                                            SelectedItemExpression="@(() => searchParams.PaperSize)"
                                            SelectedItemChanged="@(async e => await OnHandleChanged(e, nameof(searchParams.PaperSize)))">
                                </DxComboBox>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="border-dotted m-0 pt-3" style="margin-top:-1px">
                <h6 class="col ml-3 mb-3">@lang["condition_setting"]</h6>
                <div class="ml-3">
                    <div class="col ml-4">
                        <div class="row mb-3 ml-1">
                            <label class="col-form-label col-1 text-left pl-0">@lang["reservationNumber"]</label>
                            <div class="col-11">
                                <div class="row">
                                    <div class="col-2">
                                        <DxTextBox CssClass="code-number"
                                                   maxlength="10"
                                                   Text="@CommonUtil.FormatCodeNumber(searchParams.ReceptionNumber)"
                                                   TextExpression="@(() => searchParams.ReceptionNumber)"
                                                   TextChanged="@(async v => await OnHandleChanged(v, nameof(searchParams.ReceptionNumber)))"
                                                   ClearButtonDisplayMode="@DataEditorClearButtonDisplayMode.Auto">
                                        </DxTextBox>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3 ml-1">
                            <label class="col-form-label col-1 text-left pl-0">@lang["departureDate"]</label>
                            <div class="col-11">
                                <div class="row">
                                    <div class="col-2">
                                        <DxDateEdit Date="searchParams.ScheduleYmdStart"
                                                    DateExpression="@(() => searchParams.ScheduleYmdStart)"
                                                    DateChanged="@(async v => await OnHandleChanged(v, nameof(searchParams.ScheduleYmdStart)))"
                                                    DisplayFormat="yyyy/MM/dd">
                                        </DxDateEdit>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3 ml-1">
                            <label class="col-form-label col-1 text-left pl-0">@lang["arrivalDate"]</label>
                            <div class="col-11">
                                <div class="row">
                                    <div class="col-2">
                                        <DxDateEdit Date="searchParams.ScheduleYmdEnd"
                                                    DateExpression="@(() => searchParams.ScheduleYmdEnd)"
                                                    DateChanged="@(async v => await OnHandleChanged(v, nameof(searchParams.ScheduleYmdEnd)))"
                                                    DisplayFormat="yyyy/MM/dd">
                                        </DxDateEdit>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3 ml-1">
                            <label class="col-form-label col-1 text-left pl-0">@lang["billingAddressSelect"]</label>
                            <div class="col-11">
                                <div class="row">
                                    <div class="col-2">
                                        <DxComboBox Data="listAddressSpectify"
                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                    AllowUserInput="false"
                                                    TextFieldName="Text"
                                                    SelectedItem="searchParams.AddressSpectify"
                                                    SelectedItemExpression="@(() => searchParams.AddressSpectify)"
                                                    SelectedItemChanged="@(async e => await OnHandleChanged(e, nameof(searchParams.AddressSpectify)))"
                                                    ClearButtonDisplayMode="@DataEditorClearButtonDisplayMode.Auto">
                                        </DxComboBox>
                                    </div>
                                    <div class="custom-validate col-10">

                                        <CustomerComponent @ref="CustomerFromRef" VehicleClassification="1" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                           RenderMode="ListRenderMode.Virtual"
                                                           LangDic="LangDic"
                                                           isGyosyaAddNull="true"
                                                           isTokiskAddNull="true"
                                                           isTokiStAddNull="true"
                                                           DefaultGyosyaNullText="@(searchParams?.AddressSpectify?.Value != null ? lang["DefaultNullTextBillGyosya"] : "")"
                                                           ReadOnlyGyosya="isDisableCombobox"
                                                           ReadOnlyTokisk="isDisableCombobox"
                                                           ReadOnlyTokiSt="isDisableCombobox"
                                                           GyosyaExpression="() => searchParams.CustomerModelFrom.SelectedGyosya"
                                                           SelectedGyosya="searchParams.CustomerModelFrom.SelectedGyosya"
                                                           SelectedGyosyaChanged="(val) => OnModelChanged(nameof(searchParams.CustomerModelFrom.SelectedGyosya), val ,true)"
                                                           DefaultGyosya="DefaultValueFrom.GyosyaCdSeq"
                                                           GyosyaTextError="@(!isGyosyaValid ? lang["BI_T001"] : string.Empty)"
                                                           TokiskExpression="() => searchParams.CustomerModelFrom.SelectedTokisk"
                                                           SelectedTokisk="searchParams.CustomerModelFrom.SelectedTokisk"
                                                           SelectedTokiskChanged="(val) => OnModelChanged(nameof(searchParams.CustomerModelFrom.SelectedTokisk), val,true)"
                                                           DefaultTokisk="DefaultValueFrom.TokiskCdSeq"
                                                           DefaultTokiskNullText="@(searchParams?.AddressSpectify?.Value == 1 ? lang["DefaultNullTextBillAddress"] : searchParams?.AddressSpectify?.Value == 2 ? lang["DefaultNullTextCustomer"] : "")"
                                                           TokiskTextError="@(!isTokiskValid ? lang["BI_T001"] : string.Empty)"
                                                           TokiStExpression="() => searchParams.CustomerModelFrom.SelectedTokiSt"
                                                           SelectedTokiSt="searchParams.CustomerModelFrom.SelectedTokiSt"
                                                           SelectedTokiStChanged="(val) => OnModelChanged(nameof(searchParams.CustomerModelFrom.SelectedTokiSt), val,true)"
                                                           DefaultTokiSt="DefaultValueFrom.TokiStCdSeq"
                                                           TokiStTextError="@(!isTokistValid ? lang["BI_T001"] : string.Empty)"
                                                           DefaultTokiStNullText="@(searchParams?.AddressSpectify?.Value != null ? lang["DefaultNullTextTokuiSt"] : "")">
                                        </CustomerComponent>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3 ml-1">
                            <label class="col-form-label col-1 text-left pl-0">～</label>
                            <div class="col-11">
                                <div class="row">
                                    <div class="col-2"></div>
                                    <div class="custom-validate col-10">
                                        <CustomerComponent @ref="CustomerToRef" VehicleClassification="1" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                           RenderMode="ListRenderMode.Virtual"
                                                           LangDic="LangDic"
                                                           isGyosyaAddNull="true"
                                                           isTokiskAddNull="true"
                                                           isTokiStAddNull="true"
                                                           ReadOnlyGyosya="isDisableCombobox"
                                                           ReadOnlyTokisk="isDisableCombobox"
                                                           ReadOnlyTokiSt="isDisableCombobox"
                                                           DefaultGyosyaNullText="@(searchParams?.AddressSpectify?.Value != null ? lang["DefaultNullTextBillGyosya"] : "")"
                                                           GyosyaExpression="() => searchParams.CustomerModelTo.SelectedGyosya"
                                                           SelectedGyosya="searchParams.CustomerModelTo.SelectedGyosya"
                                                           SelectedGyosyaChanged="(val) => OnModelChanged(nameof(searchParams.CustomerModelTo.SelectedGyosya), val, false)"
                                                           DefaultGyosya="DefaultValueTo.GyosyaCdSeq"
                                                           DefaultTokiskNullText="@(searchParams?.AddressSpectify?.Value == 1 ? lang["DefaultNullTextBillAddress"] : searchParams?.AddressSpectify?.Value == 2 ? lang["DefaultNullTextCustomer"] : "")"
                                                           GyosyaTextError="@(!isGyosyaValid ? lang["BI_T001"] : string.Empty)"
                                                           TokiskExpression="() => searchParams.CustomerModelTo.SelectedTokisk"
                                                           SelectedTokisk="searchParams.CustomerModelTo.SelectedTokisk"
                                                           SelectedTokiskChanged="(val) => OnModelChanged(nameof(searchParams.CustomerModelTo.SelectedTokisk), val, false)"
                                                           DefaultTokisk="DefaultValueTo.TokiskCdSeq"
                                                           TokiskTextError="@(!isTokiskValid ? lang["BI_T001"] : string.Empty)"
                                                           TokiStExpression="() => searchParams.CustomerModelTo.SelectedTokiSt"
                                                           SelectedTokiSt="searchParams.CustomerModelTo.SelectedTokiSt"
                                                           SelectedTokiStChanged="(val) => OnModelChanged(nameof(searchParams.CustomerModelTo.SelectedTokiSt), val, false)"
                                                           DefaultTokiSt="DefaultValueTo.TokiStCdSeq"
                                                           DefaultTokiStNullText="@(searchParams?.AddressSpectify?.Value != null ? lang["DefaultNullTextTokuiSt"] : "")"
                                                           TokiStTextError="@(!isTokistValid ? lang["BI_T001"] : string.Empty)">
                                        </CustomerComponent>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 text-center mt-3 border-dotted">
                <button class="@(isDisableButton == false ? "btn btn-sm width--100 btn-primary mb-2" : "btn btn-sm width--100 btn-secondary mb-2")" @onclick="OnNavigate" disabled="@isDisableButton">@lang["output"]</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public string DateFrom { get; set; }
    [Parameter] public string DateTo { get; set; }
    [Parameter] public string Option { get; set; }

    List<int> listCompany = new List<int>();

    public EditContext searchForm { get; set; }
    public AdvancePaymentDetailsSearchParam searchParams { get; set; } = new AdvancePaymentDetailsSearchParam();
    public List<PaymentSearchDropdown> listAddressSpectify { get; set; } = new List<PaymentSearchDropdown>();
    public List<PaperSizeDropdown> listPaperSize { get; set; } = new List<PaperSizeDropdown>();
    public List<SeikyuSakiSearch> listAddress { get; set; } = new List<SeikyuSakiSearch>();
    public Dictionary<string, string> LangDic = new Dictionary<string, string>();
    Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
    public bool isDisableButton { get; set; } = false;
    public bool isDataNotFound { get; set; } = false;
    public bool isDisableCombobox { get; set; } = true;
    public CustomerComponent CustomerFromRef { get; set; }
    public CustomerComponent CustomerToRef { get; set; }
    public DefaultCustomerData DefaultValueFrom { get; set; } = new DefaultCustomerData();
    public DefaultCustomerData DefaultValueTo { get; set; } = new DefaultCustomerData();
    public bool isGyosyaValid { get; set; } = true;
    public bool isTokiskValid { get; set; } = true;
    public bool isTokistValid { get; set; } = true;
    protected bool IsFirstRender { get; set; } = true;
    protected bool isCustomerLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await OnInitDataAsync();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        try
        {
            JSRuntime.InvokeVoidAsync("setEventforCodeNumberFieldV2", ".code-number", true, 10, true);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    private async Task OnInitDataAsync()
    {
        try
        {
            IsFirstRender = true;
            var dataLang = lang.GetAllStrings();
            LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
            searchParams = new AdvancePaymentDetailsSearchParam();

            searchParams.OutputSetting = (byte)PrintMode.Preview;
            searchParams.PaperSize = new PaperSizeDropdown() { Value = (byte)PaperSize.A4, Text = lang["A4"] };

            listAddressSpectify = new List<PaymentSearchDropdown>();
            listAddressSpectify.Add(new PaymentSearchDropdown() { Value = 1, Text = lang["billAddress"] });
            listAddressSpectify.Add(new PaymentSearchDropdown() { Value = 2, Text = lang["customerAddress"] });
            listPaperSize.Add(new PaperSizeDropdown() { Value = (byte)PaperSize.A4, Text = lang["A4"] });
            listPaperSize.Add(new PaperSizeDropdown() { Value = (byte)PaperSize.A3, Text = lang["A3"] });
            listPaperSize.Add(new PaperSizeDropdown() { Value = (byte)PaperSize.B4, Text = lang["B4"] });
            //listAddress = await advancePaymentDetailsService.GetListAddressForSearch(searchParams.TenantCdSeq);
            //searchParams = GetFilterDataService.GetAdvancePaymentFormData(filterValues, listPaperSize, listAddressSpectify, listAddress);
            var filterValues = FilterConditionService.GetFilterCondition(FormFilterName.AdvancePaymentDetails, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
            if (filterValues != null && filterValues.Any())
            {
                searchParams = GetFilterDataService.GetAdvancePaymentFormData(filterValues, listPaperSize, listAddressSpectify, listAddress);

                var customerModelFrom = (filterValues.FirstOrDefault(x => x.ItemNm == nameof(searchParams.CustomerModelFrom))?.JoInput)?.Split(',');
                var customerModelTo = (filterValues.FirstOrDefault(x => x.ItemNm == nameof(searchParams.CustomerModelTo))?.JoInput)?.Split(',');
                DefaultValueFrom.GyosyaCdSeq = int.Parse(customerModelFrom != null ? customerModelFrom[0] : "-1");
                DefaultValueFrom.TokiskCdSeq = int.Parse(customerModelFrom != null ? customerModelFrom[1] : "-1");
                DefaultValueFrom.TokiStCdSeq = int.Parse(customerModelFrom != null ? customerModelFrom[2] : "-1");
                DefaultValueTo.GyosyaCdSeq = int.Parse(customerModelTo != null ? customerModelTo[0] : "-1");
                DefaultValueTo.TokiskCdSeq = int.Parse(customerModelTo != null ? customerModelTo[1] : "-1");
                DefaultValueTo.TokiStCdSeq = int.Parse(customerModelTo != null ? customerModelTo[2] : "-1");
            }
            if (searchParams.AddressSpectify != null)
            {
                isDisableCombobox = false;
            }

            /*CHECK PARAM*/
            if (!string.IsNullOrWhiteSpace(DateFrom)
            && !string.IsNullOrWhiteSpace(DateTo)
            && !string.IsNullOrWhiteSpace(Option)
            && (Option == PrintMode.Preview.ToString() || Option == PrintMode.SaveAsPDF.ToString()))
            {
                NavManager.NavigateTo("/advancepaymentdetails", false);

                if (DateTime.TryParseExact(DateFrom, "yyyyMMdd", null, DateTimeStyles.None, out DateTime outDateTime))
                {
                    searchParams.ScheduleYmdStart = outDateTime;
                }
                if (DateTime.TryParseExact(DateTo, "yyyyMMdd", null, DateTimeStyles.None, out outDateTime))
                {
                    searchParams.ScheduleYmdEnd = outDateTime;
                }

                if (Option == PrintMode.Preview.ToString())
                {
                    searchParams.OutputSetting = (int)PrintMode.Preview;
                }
                if (Option == PrintMode.SaveAsPDF.ToString())
                {
                    searchParams.OutputSetting = (int)PrintMode.SaveAsPDF;
                }

                await OnNavigate();
            }

            searchForm = new EditContext(searchParams);
            searchParams.CustomerModelFrom = new CustomerModel();
            searchParams.CustomerModelTo = new CustomerModel();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    private async Task OninitCustomer(bool isSelecteAddressSpectify)
    {
        searchParams.CustomerModelFrom = new CustomerModel();
        searchParams.CustomerModelTo = new CustomerModel();

        if (CustomerFromRef != null && CustomerToRef != null)
        {
            if (isSelecteAddressSpectify)
            {
                DefaultValueFrom.GyosyaCdSeq = DefaultValueTo.GyosyaCdSeq = -1;
                await CustomerFromRef.SetNullComponent(true);
                await CustomerToRef.SetNullComponent(true);
            }
            else
            {
                await CustomerFromRef.SetNullComponent(false);
                await CustomerToRef.SetNullComponent(false);
            }
        }
    }

    protected async Task OnHandleChanged(dynamic value, string propName)
    {
        try
        {
            var classType = searchParams.GetType();
            var prop = classType.GetProperty(propName);

            switch (propName)
            {
                case "ReceptionNumber":

                    if (!String.IsNullOrEmpty(value) && (int.TryParse(value, out int v) && v > 0))
                    {
                        prop.SetValue(searchParams, (value as string).PadLeft(10, '0'), null);
                    }
                    else
                    {
                        prop.SetValue(searchParams, String.Empty, null);
                    }
                    break;
                case "ScheduleYmdStart":
                case "ScheduleYmdEnd":
                    prop.SetValue(searchParams, (value as DateTime?), null);
                    break;
                case "AddressSpectify":
                    prop.SetValue(searchParams, (value as PaymentSearchDropdown), null);
                    if (value != null)
                    {
                        isDisableCombobox = false;
                        await OninitCustomer(true);
                    }
                    else
                    {
                        isDisableCombobox = true;
                        await OninitCustomer(false);
                    }
                    break;
                case "StartAddress":
                case "EndAddress":
                    prop.SetValue(searchParams, (value as SeikyuSakiSearch), null);
                    break;
                case "PaperSize":
                    prop.SetValue(searchParams, (value as PaperSizeDropdown), null);
                    break;
            }
            StateHasChanged();
            isDisableButton = true ? searchForm.GetValidationMessages().Any() : false;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task OnResetSearchData()
    {
        try
        {
            searchParams = new AdvancePaymentDetailsSearchParam();
            searchParams.OutputSetting = 1;
            searchParams.PaperSize = new PaperSizeDropdown() { Value = 1, Text = lang["A4"] }; ;
            searchParams.ReceptionNumber = null;
            searchParams.ScheduleYmdStart = null;
            searchParams.ScheduleYmdEnd = null;
            searchParams.AddressSpectify = null;
            isDisableCombobox = true;
            await OninitCustomer(false);
            await OnSaveFilterCondition();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void OnOutputSetting(byte value)
    {
        try
        {
            searchParams.OutputSetting = value;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected void OnPaperSizeSetting(PaperSizeDropdown value)
    {
        try
        {
            searchParams.PaperSize = value;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    protected async Task OnNavigate()
    {
        try
        {
            AdvancePaymentDetailsSearchParam searchParamsClone = (AdvancePaymentDetailsSearchParam)searchParams.Clone();
            if (!string.IsNullOrEmpty(searchParamsClone.ReceptionNumber))
            {
                searchParamsClone.ReceptionNumber = advancePaymentDetailsService.FormatCodeNumber(new ClaimModel().TenantID.ToString()) + searchParamsClone.ReceptionNumber;
            }

            keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForAdvancedPayment(searchParams).Result;
            FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.AdvancePaymentDetails, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();

            int ReturnRecordNumber = await advancePaymentDetailsService.GetAdvancePaymentDetailRowResult(searchParamsClone);
            if (ReturnRecordNumber == 0)
            {
                isDataNotFound = true;
            }
            else
            {
                await advancePaymentDetailsService.OnExportPdf(searchParamsClone.OutputSetting, searchParamsClone, JSRuntime, reportLayoutSettingService, 0);
                await OnSaveFilterCondition();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task OnModelChanged(string propertyName, dynamic val, bool isFrom)
    {
        var propertyFromInfo = searchParams.CustomerModelFrom.GetType().GetProperty(propertyName);
        var propertyToInfo = searchParams.CustomerModelTo.GetType().GetProperty(propertyName);

        if (propertyFromInfo != null && isFrom)
            propertyFromInfo.SetValue(searchParams.CustomerModelFrom, val);

        if (propertyToInfo != null && !isFrom)
            propertyToInfo.SetValue(searchParams.CustomerModelTo, val);

        if (IsFirstRender)
        {
            if (propertyName == nameof(searchParams.CustomerModelFrom.SelectedTokiSt) && !isFrom)
            {
                IsFirstRender = false;
                if (searchParams.AddressSpectify == null)
                    await OninitCustomer(false);
            }
            return;
        }
        else if (!IsFirstRender)
        {
            if (searchParams.CustomerModelFrom?.SelectedGyosya?.GyosyaCd > searchParams.CustomerModelTo?.SelectedGyosya?.GyosyaCd)
                isGyosyaValid = false;
            else
                isGyosyaValid = true;

            if ((searchParams.CustomerModelFrom?.SelectedGyosya?.GyosyaCd == searchParams.CustomerModelTo?.SelectedGyosya?.GyosyaCd) && (searchParams.CustomerModelFrom?.SelectedTokisk?.TokuiCd > searchParams.CustomerModelTo?.SelectedTokisk?.TokuiCd))
                isTokiskValid = false;
            else
                isTokiskValid = true;

            if ((searchParams.CustomerModelFrom?.SelectedGyosya?.GyosyaCd == searchParams.CustomerModelTo?.SelectedGyosya?.GyosyaCd) && (searchParams.CustomerModelFrom?.SelectedTokisk?.TokuiCd == searchParams.CustomerModelTo?.SelectedTokisk?.TokuiCd)
            && (searchParams.CustomerModelFrom?.SelectedTokiSt?.SitenCd > searchParams.CustomerModelTo?.SelectedTokiSt?.SitenCd))
                isTokistValid = false;
            else
                isTokistValid = true;
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task OnSaveFilterCondition()
    {
        keyValueFilterPairs = await GenerateFilterValueDictionaryService.GenerateForAdvancedPayment(searchParams);
        await FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.AdvancePaymentDetails, 0, new ClaimModel().SyainCdSeq);
    }
}
