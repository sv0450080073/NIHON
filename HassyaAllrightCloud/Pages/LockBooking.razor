@page "/lockbooking"
@inject IStringLocalizer<LockBooking> Lang
@inject ITPM_EigyosDataListService TPM_EigyosDataService
@inject CustomHttpClient HttpClient
@inject AppSettingsService AppSettingsService
@inject IFilterCondition FilterServices

@if (IsLoading)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="d-flex">
            <h5>@Lang["PageTitle"]</h5>
            <p class="ml-4 text-danger">@NoteMessage</p>
        </div>
        <button class="btn btn-sm btn-danger btnclear" @onclick="ResetForm">
            <i class="fa fa-refresh" aria-hidden="true"></i>
            @Lang["Clear"]
        </button>
    </div>    

    <EditForm EditContext="@FormContext">
        <DataAnnotationsValidator />
        <FluentValidator TValidator="LockBookingValidator" />
        <div class="d-flex">
            <div class="form-group d-flex flex-nowrap mr-5">
                <label class="col-form-label-sm mr-3">@Lang["ProcessingDate"]</label>
                <DxDateEdit Date="LockData.ProcessingDate"
                            Format="yyyy/MM/dd"
                            DateChanged="newValue => OnStartDateChanged(newValue)"
                            DateExpression="() => LockData.ProcessingDate">
                </DxDateEdit>
            </div>
            <div class="form-group d-flex flex-nowrap flex-grow-1">
                <label class="col-form-label-sm mr-3">@Lang["SalesOfficeCode"]</label>
                <div class="@("has-tooltip-error "+( BranchEmpty ? " custom-invalid": ""))">
                    <Tooltip ValueExpressions="@(() =>LockData.SalesOffice)" Lang="@LangDic"
                             Text="@(BranchEmpty?  emptyItemMessage[nameof(MessageBranchEmpty)] :"")" Position="PositionTooltip.top">
                    </Tooltip>
                    <DxComboBox Data="BranchList"
                                NullText="@Lang["NullTextSalesOfficeCode"]"
                                TextFieldName="Text"
                                AllowUserInput="true"
                                SelectedItem="LockData.SalesOffice"
                                SelectedItemChanged="OnSelectedBranchItemsChanged"
                                SelectedItemExpression="() => LockData.SalesOffice"
                                CssClass="flex-grow-1 width--450">
                    </DxComboBox>
                </div>
            </div>
        </div>
        <div class="text-right form-group">
            <DxButton RenderStyle="ButtonRenderStyle.Primary"
                      CssClass="width--100"
                      Enabled="IsEnableSubmitButton()"
                      @onclick="async () => await HandleRegister()"
                      Text="@Lang["Registration"]" />
        </div>
    </EditForm>

    <table class="table table-bordered table-sm text-center mt-4">
        <thead class="thead-primary">
            <tr>
                <th style="width: 150px" scope="col">@Lang["SalesOfficeCode"]</th>
                <th style="width: auto" scope="col">@Lang["SalesOfficeName"]</th>
                <th style="width: 150px" scope="col">@Lang["LockDate"]</th>
                <th style="width: 150px" scope="col">@Lang["LastUpdatedDate"]</th>
                <th style="width: 150px" scope="col">@Lang["LastUpdateTime"]</th>
                <th style="width: 250px" scope="col">@Lang["LastUpdatedPerson"]</th>
            </tr>
        </thead>
        <tbody>
            @if (IsLoadingDataSource)
            {
                <div class="loader">
                    <div class="loader-icon"></div>
                </div>
            }
            else
            {
                @foreach (var item in DataSource)
                {
                    <tr>
                        <td class="text-center">@item.SalesOfficeCode</td>
                        <td class="text-left">@item.SalesOfficeName</td>
                        <td class="text-center">@item.LockDate.ToString("yyyy/MM/dd")</td>
                        <td class="text-center">@item.LastUpdatedDate.ToString("yyyy/MM/dd")</td>
                        <td class="text-center">@item.LastUpdatedTime.ToString("HH：mm")</td>
                        <td class="text-center">@item.LastUpdatedPerson</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <Pagination TotalCount=@TotalItems
                ItemPerPage=@RecordsPerPage
                OnChangePage="async (page) => await OnPaginationChanged(page)"
                OnChangeItemPerPage="(value) => HandleItemPerPageChange(value)" />
}

@code {
    protected EditContext FormContext { get; set; }
    protected LockBookingData LockData { get; set; }
    protected List<DepartureOfficeData> BranchList { get; set; }
    protected List<LockBookingDetailData> DataSource { get; set; }
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    Dictionary<string, string> emptyItemMessage = new Dictionary<string, string>();
    protected bool IsLoading { get; set; } = true;
    protected bool IsLoadingDataSource { get; set; } = true;
    protected int TotalItems { get; set; }
    protected byte RecordsPerPage { get; set; } = 25;
    protected int CurrentPage { get; set; } = 1;

    private string baseUrl;

    bool BranchError = false;
    bool BranchEmpty = false;
    string MessageBranchError = "";
    string MessageBranchEmpty = "";
    string filterConditionFormName = "KPC0100";

    #region Localization string

    string Ok;
    string Yes;
    string No;
    string NoteMessage;

    private void LocalizationInit()
    {
        Ok = "Ok";
        Yes = "Yes";
        No = "No";
        NoteMessage = Lang["Note"];
        MessageBranchEmpty = Lang["BI_T001"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }

    #endregion

    #region Component Lifecycle

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        baseUrl = AppSettingsService.GetBaseUrl();
        DataSource = new List<LockBookingDetailData>();
        LockData = new LockBookingData();
        FormContext = new EditContext(LockData);
        BranchList = await TPM_EigyosDataService.GetAllBranchData(new ClaimModel().TenantID);
        if (BranchList is null || BranchList.Count == 0)
        {
            BranchEmpty = true;
            emptyItemMessage[nameof(MessageBranchEmpty)] = MessageBranchEmpty;
        }
        await base.OnInitializedAsync().ContinueWith(t => { IsLoading = false; });
        await RefreshDataSource();
    }

    /// <summary>
    /// Update DataSource to newest data from database
    /// </summary>
    /// <returns></returns>
    private async Task SetDataSource()
    {
        int skip = (CurrentPage - 1) * RecordsPerPage;
        int take = RecordsPerPage;

        var dataSourceDb = await LoadLockBookingDataAsync();
        if (dataSourceDb != null)
        {
            TotalItems = dataSourceDb.Count;
            DataSource = dataSourceDb.Skip(skip).Take(take).ToList();
        }
    }

    private async Task<List<LockBookingDetailData>> LoadLockBookingDataAsync()
    {
        try
        {
            string uri = string.Format("{0}/api/LockBooking?page={1}&size={2}", baseUrl, CurrentPage, RecordsPerPage);
            var response = await HttpClient.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                return JsonConvert.DeserializeObject<List<LockBookingDetailData>>(await response.Content.ReadAsStringAsync());
            }
            else
            {
                return null;
            }
        }
        catch (Exception)
        {
            return null;
        }
    }

    protected bool IsEnableSubmitButton()
    {
        if (IsLoadingDataSource)
        {
            return false;
        }

        return FormContext.IsModified() && FormContext.Validate();
    }

    /// <summary>
    /// Use StateHasChanged after this method to trigger OnAfterRenderAsync load DataSource again
    /// </summary>
    private async Task RefreshDataSource()
    {
        //IsLoadingDataSource = true;
        await SetDataSource().ContinueWith((t) =>
        {
            IsLoadingDataSource = false;
        //InvokeAsync(StateHasChanged);
    });
    }

    private void BackToInitialData()
    {
        var newData = new LockBookingData();
        LockData.SimpleCloneProperties(newData);
        NoteMessage = Lang["Note"];
    }

    #endregion

    #region value changed method

    /// <summary>
    ///
    /// </summary>
    /// <param name="newDate"></param>
    protected void OnStartDateChanged(DateTime newDate)
    {
        LockData.ProcessingDate = newDate;
        NoteMessage = string.Format(Lang["NoteLockDateChange"], newDate.Year, newDate.Month, newDate.Day);
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="selectedItems"></param>
    protected void OnSelectedBranchItemsChanged(DepartureOfficeData selectedItems)
    {
        LockData.SalesOffice = selectedItems;
        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    protected async Task HandleRegister()
    {
        // update lock table
        string uri = string.Format("{0}/api/LockBooking", baseUrl);
        await HttpClient.PutJsonAsync<LockBookingData>(uri, LockData);
        BackToInitialData();
        FormContext.MarkAsUnmodified();
        // refresh data list
        await RefreshDataSource();
        //await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region paging

    private async Task OnPaginationChanged(int page)
    {
        CurrentPage = page + 1;
        await RefreshDataSource();
    }

    protected void HandleItemPerPageChange(byte newItemPerPage)
    {
        RecordsPerPage = newItemPerPage;
        StateHasChanged();
    }

    private async void ResetForm()
    {        
        IsLoading = true;
        //await FilterServices.DeleteCustomFilter(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName, filterConditionFormName);
        await FilterServices.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName);
        await OnInitializedAsync();
        StateHasChanged();
    }

    #endregion
}
