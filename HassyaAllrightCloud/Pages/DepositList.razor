@inject IJSRuntime JSRuntime
@inject IStringLocalizer<DepositList> Lang
@inject IDepositListService DepositListService
@inject IBlazorContextMenuService blazorContextMenuService
@inject IErrorHandlerService errorModalService
@inject IGenerateFilterValueDictionary GenerateFilterValueDictionaryService
@inject IFilterCondition FilterConditionService
@inject AppSettingsService AppSettingsService
@inject IDepositCouponService depositCouponService
@using HassyaAllrightCloud.Domain.Dto
@using HassyaAllrightCloud.Domain.Dto.BillPrint
@using HassyaAllrightCloud.Application.Validation
@using DevExpress.XtraPrinting
@using System.IO;
@using System.Data;
@using Microsoft.AspNetCore.Hosting;
@using DevExpress.XtraReports.UI;
@using SharedLibraries.UI.Models;
@using HassyaAllrightCloud.Commons.Constants;
@using HassyaAllrightCloud.Domain.Dto.CommonComponents;

@if (isLoading)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}
@if (isOpenCharterInquiryPopUp)
{
    <HassyaAllrightCloud.Pages.Components.DepositCoupon.CharterInquiry @bind-isOpenCharterInquiryPopUp="isOpenCharterInquiryPopUp" outDataTable="outDataTable">
    </HassyaAllrightCloud.Pages.Components.DepositCoupon.CharterInquiry>
}
<div class="d-flex justify-content-between align-items-center mb-2">
    <div class="d-flex align-items-center">
        <h5 class="mb-0">@Lang["Title"]</h5>
    </div>
    <button class="btn btn-sm btn-danger btnclear" @onclick="ResetDepositListForm">
        <i class="fa fa-refresh" aria-hidden="true"></i>
        @Lang["EraseAll"]
    </button>
</div>
<EditForm Context="editContext" EditContext="searchForm">
    <div id="control-tab" class="title-section border busrepair-accordion-header">
        <i class="fa fa-angle-down" aria-hidden="true"></i> @Lang["FilterCondition"]
    </div>
    <div class="express-condition mb-2 tab-border-form" style="display: none">
        <DxTabs @bind-ActiveTabIndex="@ActiveTabIndex">
            <DxTab Text="@(Lang["FilterCondition1"])"></DxTab>
            <DxTab Text="@(Lang["FilterCondition2"])"></DxTab>
            <DxTab Text="@Lang["DisplaySetting"]"></DxTab>
            <DxTab Text="@Lang["OutputSetting"]"></DxTab>
        </DxTabs>
        <div class="card dxbs-border-top-0 dxbs-border-radius-top-0">
            <div class="card-body supermenu-hyper-form">

                <ul class="validation-errors">
                    @foreach (var message in Errors.Distinct())
                    {
                        <li class="validation-message">@Lang[message]</li>
                    }
                </ul>
                <DataAnnotationsValidator />
                <FluentValidator TValidator="DepositListValidator" />
                <div class="form-row form-focus" style="@(ActiveTabIndex != 0 ? "display: none;" : "")">
                    <div class="col-sm-6">
                        <div class="form-group d-sm-flex flex-nowrap">
                            <label class="col-form-label condition-label">@Lang["Company"]</label>
                            <div class="item-inline ml-2 has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.CompanyData)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@CompanyDatas" CssClass="filter-inline date-sm custom-combo-box"
                                            FilteringMode="@DataGridFilteringMode.Contains"
                                            AllowUserInput="false"
                                            TextFieldName="Text"
                                            SelectedItem="@DepositSearchModel.CompanyData"
                                            SelectedItemExpression="@(() => DepositSearchModel.CompanyData)"
                                            SelectedItemChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.CompanyData), newValue))">
                                </DxComboBox>
                            </div>
                        </div>
                        <div class="form-group d-sm-flex flex-nowrap">
                            <label class="col-form-label condition-label">@Lang["SaleBranch"]</label>
                            <div class="item-inline ml-2 has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.StartSaleBranchList)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@SaleBranchs" CssClass="filter-inline date-sm custom-combo-box"
                                            FilteringMode="@DataGridFilteringMode.Contains"
                                            AllowUserInput="false"
                                            NullText="@Lang["NullTextSaleOffice"]"
                                            TextFieldName="Text"
                                            SelectedItem="@DepositSearchModel.StartSaleBranchList"
                                            SelectedItemExpression="@(() => DepositSearchModel.StartSaleBranchList)"
                                            SelectedItemChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.StartSaleBranchList), newValue))">
                                </DxComboBox>
                            </div>
                            <label class="col-form-label from-to">～</label>
                            <div class="item-inline has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.EndSaleBranchList)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@SaleBranchs" CssClass="filter-inline date-sm custom-combo-box"
                                            FilteringMode="@DataGridFilteringMode.Contains"
                                            AllowUserInput="false"
                                            NullText="@Lang["NullTextSaleOffice"]"
                                            TextFieldName="Text"
                                            SelectedItem="@DepositSearchModel.EndSaleBranchList"
                                            SelectedItemExpression="@(() => DepositSearchModel.EndSaleBranchList)"
                                            SelectedItemChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.EndSaleBranchList), newValue))">
                                </DxComboBox>
                            </div>
                        </div>
                        <div class="form-group d-sm-flex flex-nowrap">
                            <label class="col-form-label condition-label">@Lang["SaleBranchType"]</label>
                            <div class="item-inline ml-2 has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.SaleOfficeType)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@SaleBranchTypes" CssClass="filter-inline date-sm custom-combo-box"
                                            FilteringMode="@DataGridFilteringMode.Contains"
                                            AllowUserInput="false"
                                            TextFieldName="Text"
                                            SelectedItem="@DepositSearchModel.SaleOfficeType"
                                            SelectedItemExpression="@(() => DepositSearchModel.SaleOfficeType)"
                                            SelectedItemChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.SaleOfficeType), newValue))">
                                </DxComboBox>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group d-sm-flex flex-nowrap">
                            <label class="col-form-label condition-label">@Lang["PaymentDate"]</label>
                            <div class="item-inline ml-2 has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.StartPaymentDate)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxDateEdit CssClass="filter-inline" Date="@DepositSearchModel.StartPaymentDate" DateExpression="@(() => DepositSearchModel.StartPaymentDate)" Format=@dateFormat DateChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.StartPaymentDate), newValue))" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxDateEdit>
                            </div>
                            <label class="col-form-label from-to">～</label>
                            <div class="item-inline has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.EndPaymentDate)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxDateEdit CssClass="filter-inline" Date="@DepositSearchModel.EndPaymentDate" DateExpression="@(() => DepositSearchModel.EndPaymentDate)" Format=@dateFormat DateChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.EndPaymentDate), newValue))" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxDateEdit>
                            </div>
                        </div>
                        <div class="">
                            <div class="form-group d-flex flex-nowrap">
                                <label style="margin-left:10px; margin-right:58px">@Lang["BillingAddress"]</label>
                                <HassyaAllrightCloud.Pages.Components.CommonComponents.CustomerComponent DefaultGyosya="Convert.ToInt32(DepositSearchModel.startCustomerComponentGyosyaData?.GyosyaCdSeq)"
                                                                                                         SelectedGyosya="DepositSearchModel.startCustomerComponentGyosyaData"
                                                                                                         GyosyaExpression="() => DepositSearchModel.startCustomerComponentGyosyaData"
                                                                                                         SelectedGyosyaChanged="(e) => ChangeValueForm(nameof(DepositSearchModel.startCustomerComponentGyosyaData), e)"
                                                                                                         DefaultTokisk="@(Convert.ToInt32(DepositSearchModel.startCustomerComponentTokiskData?.TokuiSeq))"
                                                                                                         SelectedTokisk="DepositSearchModel.startCustomerComponentTokiskData"
                                                                                                         TokiskExpression="() => DepositSearchModel.startCustomerComponentTokiskData"
                                                                                                         SelectedTokiskChanged="(e) => ChangeValueForm(nameof(DepositSearchModel.startCustomerComponentTokiskData), e)"
                                                                                                         DefaultTokiSt="@(Convert.ToInt32(DepositSearchModel.startCustomerComponentTokiStData?.SitenCdSeq))"
                                                                                                         SelectedTokiSt="DepositSearchModel.startCustomerComponentTokiStData"
                                                                                                         SelectedTokiStChanged="(e) => ChangeValueForm(nameof(DepositSearchModel.startCustomerComponentTokiStData), e)"
                                                                                                         TokiStExpression="() => DepositSearchModel.startCustomerComponentTokiStData"
                                                                                                         LangDic="LangDic"
                                                                                                         DefaultTokiskNullText="@Lang["DefaultNullTokisk"]"
                                                                                                         GyosyaCssClass="w-100"
                                                                                                         TokiskCssClass="w-100"
                                                                                                         isGyosyaAddNull="true"
                                                                                                         isTokiskAddNull="true"
                                                                                                         isTokiStAddNull="true"
                                                                                                         @ref="startCustomerComponent" />
                            </div>
                            <div class="form-group d-flex flex-nowrap">
                                <label style="margin-left:30px; margin-right:65px">～</label>
                                <HassyaAllrightCloud.Pages.Components.CommonComponents.CustomerComponent DefaultGyosya="Convert.ToInt32(DepositSearchModel.endCustomerComponentGyosyaData?.GyosyaCdSeq)"
                                                                                                         SelectedGyosya="DepositSearchModel.endCustomerComponentGyosyaData"
                                                                                                         GyosyaExpression="() => DepositSearchModel.endCustomerComponentGyosyaData"
                                                                                                         SelectedGyosyaChanged="(e) => ChangeValueForm(nameof(DepositSearchModel.endCustomerComponentGyosyaData), e)"
                                                                                                         DefaultTokisk="@(Convert.ToInt32(DepositSearchModel.endCustomerComponentTokiskData?.TokuiSeq))"
                                                                                                         SelectedTokisk="DepositSearchModel.endCustomerComponentTokiskData"
                                                                                                         TokiskExpression="() => DepositSearchModel.endCustomerComponentTokiskData"
                                                                                                         SelectedTokiskChanged="(e) => ChangeValueForm(nameof(DepositSearchModel.endCustomerComponentTokiskData), e)"
                                                                                                         DefaultTokiSt="@(Convert.ToInt32(DepositSearchModel.endCustomerComponentTokiStData?.SitenCdSeq))"
                                                                                                         SelectedTokiSt="DepositSearchModel.endCustomerComponentTokiStData"
                                                                                                         SelectedTokiStChanged="(e) => ChangeValueForm(nameof(DepositSearchModel.endCustomerComponentTokiStData), e)"
                                                                                                         TokiStExpression="() => DepositSearchModel.endCustomerComponentTokiStData"
                                                                                                         LangDic="LangDic"
                                                                                                         DefaultTokiskNullText="@Lang["DefaultNullTokisk"]"
                                                                                                         GyosyaCssClass="w-100"
                                                                                                         TokiskCssClass="w-100"
                                                                                                         TokiStCssClass="w-100"
                                                                                                         isGyosyaAddNull="true"
                                                                                                         isTokiskAddNull="true"
                                                                                                         isTokiStAddNull="true"
                                                                                                         @ref="endCustomerComponent" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-row form-focus-1" style="@(ActiveTabIndex != 1 ? "display: none;" : "")">
                    <div class="col-sm-6">
                        <div class="form-group d-sm-flex flex-nowrap">
                            <label class="col-form-label condition-label">@Lang["ReceiptNumber"]</label>
                            <div class="item-inline has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.StartReceiptNumber)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxTextBox CssClass="filter-inline code-number" Text="@DepositSearchModel.StartReceiptNumber" TextExpression="@(() => DepositSearchModel.StartReceiptNumber)" TextChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.StartReceiptNumber), newValue))" maxlength="10"></DxTextBox>
                            </div>
                            <label class="col-form-label from-to">～</label>
                            <div class="item-inline has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.EndReceiptNumber)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxTextBox CssClass="filter-inline code-number" Text="@DepositSearchModel.EndReceiptNumber" TextExpression="@(() => DepositSearchModel.EndReceiptNumber)" TextChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.EndReceiptNumber), newValue))" maxlength="10"></DxTextBox>
                            </div>
                        </div>
                        <div class="form-group d-sm-flex flex-nowrap">
                            <label class="col-form-label condition-label">@Lang["ReservationType"]</label>
                            <HassyaAllrightCloud.Pages.Components.CommonComponents.ReservationClassComponent SelectedReservationClass="@DepositSearchModel.StartReservationClassification"
                                                                                                             SelectedReservationClassChanged="@(async (e) => await ChangeValueForm(nameof(DepositSearchModel.StartReservationClassification), e))"
                                                                                                             ReservationClassExpression="@(() => DepositSearchModel.StartReservationClassification)"
                                                                                                             DefaultValue="Convert.ToInt32(DepositSearchModel.StartReservationClassification?.YoyaKbnSeq)"
                                                                                                             LangDic="@LangDic"
                                                                                                             ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                            <label class="col-form-label from-to">～</label>
                            <HassyaAllrightCloud.Pages.Components.CommonComponents.ReservationClassComponent SelectedReservationClass="@DepositSearchModel.EndReservationClassification"
                                                                                                             SelectedReservationClassChanged="@(async (e) => await ChangeValueForm(nameof(DepositSearchModel.EndReservationClassification), e))"
                                                                                                             ReservationClassExpression="@(() => DepositSearchModel.EndReservationClassification)"
                                                                                                             DefaultValue="Convert.ToInt32(DepositSearchModel.EndReservationClassification?.YoyaKbnSeq)"
                                                                                                             LangDic="@LangDic"
                                                                                                             ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                        </div>
                        <div class="form-group d-sm-flex flex-nowrap">
                            <label class="col-form-label condition-label">@Lang["TransferBanking"]</label>
                            <div class="item-inline has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.StartTransferBank)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@TransferBanks" CssClass="filter-inline date-sm custom-combo-box"
                                            FilteringMode="@DataGridFilteringMode.Contains"
                                            AllowUserInput="false"
                                            TextFieldName="Text"
                                            NullText="@Lang["NullTextTransfer"]"
                                            SelectedItem="@DepositSearchModel.StartTransferBank"
                                            SelectedItemExpression="@(() => DepositSearchModel.StartTransferBank)"
                                            SelectedItemChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.StartTransferBank), newValue))">
                                </DxComboBox>
                            </div>
                            <label class="col-form-label from-to">～</label>
                            <div class="item-inline has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => DepositSearchModel.EndTransferBank)"
                                         Lang="@LangDic" Text="" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@TransferBanks" CssClass="filter-inline date-sm custom-combo-box"
                                            FilteringMode="@DataGridFilteringMode.Contains"
                                            AllowUserInput="false"
                                            TextFieldName="Text"
                                            NullText="@Lang["NullTextTransfer"]"
                                            SelectedItem="@DepositSearchModel.EndTransferBank"
                                            SelectedItemExpression="@(() => DepositSearchModel.EndTransferBank)"
                                            SelectedItemChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.EndTransferBank), newValue))">
                                </DxComboBox>
                            </div>
                        </div>
                        
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group d-sm-flex">
                            <div>
                                <label class="col-form-label condition-label">@Lang["InciChecks"]</label>
                            </div>
                            <div class="mt-1">
                                 @foreach (var item in checkBoxBillingTypes)
                                 {
                                    <div id="checkBoxBilling" class="form-check form-check-inline">
                                        <div class="ml-1 dx-checkbox custom-control custom-checkbox valid label-font-weight-normal">
                                            <InputCheckbox class="custom-control-input" id="@item.Id"
                                                           @bind-Value="@item.IsChecked"
                                                           @onclick='e => FilterChanged(item)' />
                                            <label for="@item.Id" class="custom-control-label" style="user-select:none">@item.Name</label>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="form-group d-sm-flex">
                            <div>
                                <label class="col-form-label condition-label">@Lang["PaymentMethod"]</label>
                            </div>
                            <div class="mt-1">
                                @foreach (var item in checkBoxPaymentMethodTypes)
                                {
                                    <div id="checkBoxPayment" class="form-check form-check-inline">
                                        <div class="ml-1 dx-checkbox custom-control custom-checkbox valid label-font-weight-normal">
                                            <InputCheckbox class="custom-control-input" id="@item.Id"
                                                           @bind-Value="@item.IsChecked"
                                                           @onclick='e => FilterChanged(item)' />
                                            <label for="@item.Id" class="custom-control-label" style="user-select:none">@item.Name</label>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                        </div>
                    </div>
                </div>

                <div class="form-row" style="@(ActiveTabIndex != 2 ? "display: none;" : "")">
                    <div class="col-sm-6">
                        <div class="form-group d-sm-flex flex-nowrap">
                            <label class="col-form-label width--100">@Lang["WidthChange"]</label>
                            <nav class="nav nav-pills">
                                <a href="javascript:void(0)" class="nav-link @(ActiveV == (int)ViewMode.Large ? "active" : null)" @onclick="@(e => clickV(e, (int)ViewMode.Large))">@Lang["WidthLarge"]</a>
                                <a href="javascript:void(0)" class="nav-link @(ActiveV == (int)ViewMode.Medium ? "active" : null)" @onclick="@(e => clickV(e, (int)ViewMode.Medium))">@Lang["WidthMedium"]</a>
                                <a href="javascript:void(0)" class="nav-link @(ActiveV == (int)ViewMode.Small ? "active" : null)" @onclick="@(e => clickV(e, (int)ViewMode.Small))">@Lang["WidthSmall"]</a>
                            </nav>
                        </div>
                    </div>
                </div>
                <div class="form-row" style="@(ActiveTabIndex != 3 ? "display: none;" : "")">
                    <div class="report-check-list-tab col-11">
                        <div class="row">
                            <div class="col-1">
                                @Lang["OutputChoise"]
                            </div>
                            <div class="col-9">
                                <button type="button" class="@(string.Format("nav-btn-clrp mr-3 mw-7rem {0}", DepositSearchModel.OutputType == OutputReportType.Preview ? "active":string.Empty))"
                                        @onclick="(e) => ActiveButtonReport = OutputReportType.Preview">
                                    @Lang["Btn_preview"]
                                </button>
                                <button type="button" class="@(string.Format("nav-btn-clrp mr-3 mw-7rem {0}", DepositSearchModel.OutputType == OutputReportType.ExportPdf ? "active":string.Empty))"
                                        @onclick="(e) => ActiveButtonReport = OutputReportType.ExportPdf">
                                    @Lang["Btn_pdf"]
                                </button>
                                <button type="button" class="@(string.Format("nav-btn-clrp mw-7rem {0}", DepositSearchModel.OutputType == OutputReportType.CSV ? "active":string.Empty))"
                                        @onclick="(e) => ActiveButtonReport = OutputReportType.CSV">
                                    @Lang["Btn_csv"]
                                </button>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-1 pt-3">
                                @Lang["PageSizeTitle"]
                            </div>
                            <div class="col-5">
                                <div class="csv-group-btns-clrp">
                                    <div class="row">
                                        <div class="col-12 d-flex">
                                            <div class="mw-6rem">@Lang["PageSize"]</div>
                                            <DxComboBox ReadOnly="DepositSearchModel.OutputType == OutputReportType.CSV"
                                                        Data="BillTypePagePrintData"
                                                        TextFieldName="@nameof(DepositSearchModel.PageSizeReport.StringValue)"
                                                        FilteringMode="@DataGridFilteringMode.Contains" AllowUserInput="false"
                                                        SelectedItem="DepositSearchModel.PageSizeReport"
                                                        SelectedItemChanged="async v => await UpdateFormModel(nameof(DepositSearchModel.PageSizeReport), v)"
                                                        SelectedItemExpression="() => DepositSearchModel.PageSizeReport"
                                                        CssClass="ml-3"></DxComboBox>
                                            <label class="col-form-label condition-label">@Lang["FormOutput"]</label>
                                            <div class="item-inline ml-2">
                                                <DxComboBox ReadOnly="DepositSearchModel.OutputType == OutputReportType.CSV"
                                                            Data="@DepositOutputs" CssClass="filter-inline date-sm custom-combo-box"
                                                            FilteringMode="@DataGridFilteringMode.Contains"
                                                            AllowUserInput="false"
                                                            TextFieldName="Text"
                                                            SelectedItem="@DepositSearchModel.DepositOutputTemplate"
                                                            SelectedItemExpression="@(() => DepositSearchModel.DepositOutputTemplate)"
                                                            SelectedItemChanged="@(async (newValue) => await UpdateFormModel(nameof(DepositSearchModel.DepositOutputTemplate), newValue))">
                                                </DxComboBox>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3 csv-group-clrp">
                            <div class="ml-2 mr-5 pt-3">
                                @Lang["CSVGroupControlsTitle"]
                            </div>
                            <div class="col-11">
                                <div class="csv-group-btns-clrp ml-1">
                                    <div class="row">
                                        <div class="col-4 d-flex">
                                            <div class="mw-5rem">
                                                @Lang["ShowHeaderTitle"]
                                            </div>
                                            <DxComboBox ReadOnly="@(DepositSearchModel.OutputType != OutputReportType.CSV)"
                                                        Data="@ShowHeaderOptions.ShowHeaderOptionData"
                                                        TextFieldName="@nameof(DepositSearchModel.ActiveHeaderOption.StringValue)"
                                                        FilteringMode="@DataGridFilteringMode.Contains" AllowUserInput="false"
                                                        SelectedItem="DepositSearchModel.ActiveHeaderOption"
                                                        SelectedItemChanged="async v => await UpdateFormModel(nameof(DepositSearchModel.ActiveHeaderOption), v)"
                                                        SelectedItemExpression="() => DepositSearchModel.ActiveHeaderOption"
                                                        CssClass="cmb-first-clrp">
                                            </DxComboBox>
                                        </div>
                                        <div class="col-4 d-flex">
                                            <div class="mw-5rem">
                                                @Lang["EncloseTitle"]
                                            </div>
                                            <DxComboBox ReadOnly="DepositSearchModel.OutputType != OutputReportType.CSV"
                                                        Data="@GroupTypes.GroupTypeData"
                                                        TextFieldName="@nameof(DepositSearchModel.GroupType.StringValue)"
                                                        FilteringMode="@DataGridFilteringMode.Contains" AllowUserInput="false"
                                                        SelectedItem="DepositSearchModel.GroupType"
                                                        SelectedItemChanged="async v => await UpdateFormModel(nameof(DepositSearchModel.GroupType), v)"
                                                        SelectedItemExpression="() => DepositSearchModel.GroupType"
                                                        CssClass="ml-3">
                                            </DxComboBox>
                                        </div>
                                        <div class="col-4 d-flex">
                                            <div class="mw-9rem">
                                                @Lang["SeparatorTitle"]
                                            </div>
                                            <DxComboBox ReadOnly="DepositSearchModel.OutputType != OutputReportType.CSV"
                                                        Data="@DelimiterTypeData"
                                                        TextFieldName="@nameof(DepositSearchModel.DelimiterType.StringValue)"
                                                        FilteringMode="@DataGridFilteringMode.Contains" AllowUserInput="false"
                                                        SelectedItem="DepositSearchModel.DelimiterType"
                                                        SelectedItemChanged="async v => await UpdateFormModel(nameof(DepositSearchModel.DelimiterType), v)"
                                                        SelectedItemExpression="() => DepositSearchModel.DelimiterType"
                                                        CssClass="ml-3">
                                            </DxComboBox>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3 text-center mb-3">
                            <div class="col-12">
                                <DxButton Enabled="@btnReportActive" CssClass="btn btn-primary width-7rem"
                                          Text="@Lang["StartBtn"]" Click="(e) => ExportBtnClicked()" />
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</EditForm>
<div class="form-row">
    <div class="col-sm-6">
        <div class="form-group d-sm-flex flex-nowrap">
            <label class="col-form-label min-width-label condition-label">@Lang["SaleBranchPayment"]</label>
            <div class="mr-1">
                <DxButton Click="@((e) => SelectPreviousSaleOffice())" Enabled="@EnablePreSaleBranch" CssClass="btn btn-sm fa fa-chevron-circle-left mr-1 navigate-button"></DxButton>
            </div>
            <div class="item-inline">
                <DxComboBox Data="@SelectedSaleBranchPayments" CssClass="filter-inline date-sm custom-combo-box"
                            FilteringMode="@DataGridFilteringMode.Contains"
                            AllowUserInput="false"
                            TextFieldName="Text"
                            SelectedItem="@DepositSearchModel.SelectedSaleBranchPayment"
                            SelectedItemExpression="@(() => DepositSearchModel.SelectedSaleBranchPayment)"
                            SelectedItemChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.SelectedSaleBranchPayment), newValue))">
                </DxComboBox>
            </div>
            <div class="ml-1">
                <DxButton Click="@((e) => SelectNextSaleOffice())" Enabled="@EnableNextSaleBranch" CssClass="btn btn-sm fa fa-chevron-circle-right navigate-button"></DxButton>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="form-group d-sm-flex flex-nowrap">
            <label class="col-form-label min-width-label condition-label">@Lang["PaymentAddress"]</label>
            <div class="mr-1">
                <DxButton Click="@((e) => SelectPreviousBillingPaymentAddress())" Enabled="@EnablePreBillingPayment" CssClass="btn btn-sm fa fa-chevron-circle-left navigate-button"></DxButton>
            </div>
            <div class="item-inline">
                <DxComboBox Data="@SelectedBillingAddressPaymentList" CssClass="filter-inline date-sm custom-combo-box"
                            FilteringMode="@DataGridFilteringMode.Contains"
                            AllowUserInput="false"
                            TextFieldName="Text"
                            SelectedItem="@DepositSearchModel.SelectedBillingAddressPayment"
                            SelectedItemExpression="@(() => DepositSearchModel.SelectedBillingAddressPayment)"
                            SelectedItemChanged="@(async (newValue) => await ChangeValueForm(nameof(DepositSearchModel.SelectedBillingAddressPayment), newValue))">
                </DxComboBox>
            </div>
            <div class="ml-1">
                <DxButton Click="@((e) => SelectNextBillingPaymentAddress())" Enabled="@EnableNextBillingPayment" CssClass="btn btn-sm fa fa-chevron-circle-right navigate-button"></DxButton>
            </div>
        </div>
    </div>
</div>
<div class="coupon-payment-grid mt-2">
    <div class="coupon-payment-grid-body">
        @if (Header != null && Body != null)
        {
            <KoboSimpleGrid Header="Header" Body="Body" DataItems="DataItems" OnRowClick="async e => await RowClick(e)" CssClass="@(string.Format("kobo-grid-size-{0}", (int)gridSizeClass))"></KoboSimpleGrid>
        }
    </div>

    <div>
        <Pagination TotalCount="TotalRow" @ref="pagination" ItemPerPage="ItemPerPage" OnChangeItemPerPage="OnChangeItemPerPage" OnChangePage="async (pageNum) => await PageChanged(pageNum)"></Pagination>
    </div>

    <div class="coupon-payment-summary">
        <table class="table table-sm table-bordered w--100">
            <thead>
                <tr style="background-color: #1AB394; color: white">
                    <th class="text-center have-border-bottom"></th>
                    <th class="text-center have-border-bottom">@Lang["AmountGrid"]</th>
                    <th class="text-center have-border-bottom">@Lang["TransferFeeGrid"]</th>
                    <th class="text-center have-border-bottom">@Lang["CumulativePaymentGrid"]</th>
                    <th class="text-center have-border-bottom">@Lang["PreviousReceiveAmountGrid"]</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="text-center have-border" style="background-color: #1AB394; color: white">@Lang["cumulative"]</td>
                    <td class="text-right have-border have-background">@Summary.PageAmount.AddCommas()</td>
                    <td class="text-right have-border have-background">@Summary.PageTransferFee.AddCommas()</td>
                    <td class="text-right have-border have-background">@Summary.PageCumulativePayment.AddCommas()</td>
                    <td class="text-right have-border have-background">@Summary.PagePreviousReceiveAmount.AddCommas()</td>
                </tr>
                <tr>
                    <td class="text-center have-border" style="background-color: #1AB394; color:white">@Lang["total"]</td>
                    <td class="text-right have-border have-background">@Summary.TotalAmount.AddCommas()</td>
                    <td class="text-right have-border have-background">@Summary.TotalTransferFee.AddCommas()</td>
                    <td class="text-right have-border have-background">@Summary.TotalCumulativePayment.AddCommas()</td>
                    <td class="text-right have-border have-background">@Summary.TotalPreviousReceiveAmount.AddCommas()</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<ContextMenu Id="gridRowClickMenu" CssClass="contextmenu">
    <Item Id="row-click" OnClick="ItemClick"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @Lang["OpenLink"]</Item>
</ContextMenu>


@code {
    public Dictionary<string, string> LangDic = new Dictionary<string, string>();
    Dictionary<string, string> keyValueFilterPairs = new Dictionary<string, string>();
    protected int gridSizeClass { get; set; } = (int)ViewMode.Medium;
    protected HeaderTemplate Header { get; set; }
    protected BodyTemplate Body { get; set; }
    protected List<DepositDataGrid> DataItems { get; set; } = new List<DepositDataGrid>();
    protected Pagination pagination { get; set; }
    protected bool dataNotFound { get; set; }
    protected int totalPage { get; set; }
    public int TotalCount { get; set; }
    public int ActiveV { get; set; }
    public int PrintV { get; set; }
    bool isLoading { get; set; } = true;
    int activeTabIndex = 0;
    string dateFormat = "yyyy/MM/dd";
    protected bool btnReportActive = true;
    public bool EnablePreSaleBranch = false;
    public bool EnableNextSaleBranch = true;
    public bool EnablePreBillingPayment = false;
    public bool EnableNextBillingPayment = true;
    public List<string> Errors = new List<string>();
    public EditContext searchForm { get; set; }
    int ActiveTabIndex
    {
        get => activeTabIndex;
        set
        {
            activeTabIndex = value;
            AdjustHeightWhenTabChanged();
        }
    }
    public bool isOpenCharterInquiryPopUp { get; set; }
    public Components.CommonComponents.CustomerComponent startCustomerComponent { get; set; }
       = new Components.CommonComponents.CustomerComponent();
    public Components.CommonComponents.CustomerComponent endCustomerComponent { get; set; }
    = new Components.CommonComponents.CustomerComponent();
    public OutDataTable outDataTable { get; set; }
    public DepositListSummary Summary = new DepositListSummary();
    public List<int> billingTypes { get; set; } = new List<int>();
    public List<int> PaymentMethodTypes { get; set; } = new List<int>();
    public DepositListSearchModel DepositSearchModel = new DepositListSearchModel();
    public List<CompanyData> CompanyDatas = new List<CompanyData>();
    public List<LoadSaleBranchList> SaleBranchs = new List<LoadSaleBranchList>();
    public List<SelectedSaleBranchModel> SelectedSaleBranchPayments = new List<SelectedSaleBranchModel>();
    public List<SaleOfficeModel> SaleBranchTypes = new List<SaleOfficeModel>();
    public DateTime StartPaymentDate { get; set; }
    public DateTime EndPaymentDate { get; set; }
    public List<BillingAddressModel> BillingAddressList = new List<BillingAddressModel>();
    public List<SelectedPaymentAddressModel> SelectedBillingAddressPaymentList = new List<SelectedPaymentAddressModel>();
    public List<ReservationCategoryModel> ReservationTypes = new List<ReservationCategoryModel>();
    public List<CheckBoxFilter> checkBoxBillingTypes = new List<CheckBoxFilter>();
    public List<CheckBoxFilter> checkBoxPaymentMethodTypes = new List<CheckBoxFilter>();
    public List<string> BillingTypeNames = new List<string>();
    public List<string> PaymentMethodNames = new List<string>();
    public byte ItemPerPage = 25;
    public List<TransferBankModel> TransferBanks = new List<TransferBankModel>();
    public List<DepositOutputClass> DepositOutputs = new List<DepositOutputClass>();
    public CharterSettingModel CharterSetting = new CharterSettingModel();
    public List<ComboboxFixField> DelimiterTypeData = new List<ComboboxFixField>();
    public List<DepositDataGrid> DepositListData = new List<DepositDataGrid>();
    public string FormName = FormFilterName.DepositList;
    public List<ComboboxFixField> BillTypePagePrintData = new List<ComboboxFixField>();
    public List<ReservationClassComponentData> ListReservationClass { get; set; } = new List<ReservationClassComponentData>();
    protected List<CustomerComponentGyosyaData> ListGyosya { get; set; } = new List<CustomerComponentGyosyaData>();
    protected List<CustomerComponentTokiskData> ListTokisk { get; set; } = new List<CustomerComponentTokiskData>();
    protected List<CustomerComponentTokiStData> ListTokiSt { get; set; } = new List<CustomerComponentTokiStData>();
    public int TotalRow;
    public int LastXClicked { get; set; }
    public int LastYClicked { get; set; }
    public DepositDataGrid SelectedItem { get; set; }
    public string errorMessage { get; set; } = string.Empty;
    [Inject]
    public IWebHostEnvironment hostingEnvironment { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("inputNumber", ".number", true);
        JSRuntime.InvokeVoidAsync("setEventforCodeNumberField", 10);
        JSRuntime.InvokeVoidAsync("loadPageScript", "billCheckListPage", "tabindexFix", ".form-focus", true);
        JSRuntime.InvokeVoidAsync("loadPageScript", "billCheckListPage", "tabindexFix", ".form-focus-1", true);
        await base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            CharterSetting = DepositListService.GetCharterSetting(new ClaimModel().CompanyID).Result;
            InitBody();
            InitHeader();
            var dataLang = Lang.GetAllStrings();
            LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
            BillTypePagePrintData.Add(new ComboboxFixField()
            {
                IdValue = 0,
                StringValue = Lang["PageType_0"]
            });
            BillTypePagePrintData.Add(new ComboboxFixField()
            {
                IdValue = 1,
                StringValue = Lang["PageType_1"]
            });
            BillTypePagePrintData.Add(new ComboboxFixField()
            {
                IdValue = 2,
                StringValue = Lang["PageType_2"]
            });
            DepositSearchModel.PageSizeReport = BillTypePagePrintData[0];

            // Add data for output type
            ShowHeaderOptions.ShowHeaderOptionData[0].StringValue = Lang["OutType_0"];
            ShowHeaderOptions.ShowHeaderOptionData[1].StringValue = Lang["OutType_1"];
            DepositSearchModel.ActiveHeaderOption = ShowHeaderOptions.ShowHeaderOptionData[0];

            // Add data for group type print
            GroupTypes.GroupTypeData[0].StringValue = Lang["GroupType_0"];
            GroupTypes.GroupTypeData[1].StringValue = Lang["GroupType_1"];
            DepositSearchModel.GroupType = GroupTypes.GroupTypeData[0];
            DepositSearchModel.PageSize = 25;
            // Add data for delimiter type print
            DelimiterTypes.DelimiterTypeData[0].StringValue = Lang["DelimiterType_0"];
            DelimiterTypes.DelimiterTypeData[1].StringValue = Lang["DelimiterType_1"];
            DelimiterTypes.DelimiterTypeData[2].StringValue = Lang["DelimiterType_2"];
            DelimiterTypeData.Add(DelimiterTypes.DelimiterTypeData[0]);
            DelimiterTypeData.Add(DelimiterTypes.DelimiterTypeData[1]);
            DelimiterTypeData.Add(DelimiterTypes.DelimiterTypeData[2]);
            DepositSearchModel.DelimiterType = DelimiterTypes.DelimiterTypeData[2];

            GenerateDepositOutputTemplate();
            ActiveV = (int)ViewMode.Medium;
            PrintV = (int)PrintMode.Preview;
            GenerateAllCheckBoxName();
            GenerateCheckBoxBillingType(7, BillingTypeNames);
            GenerateCheckBoxPaymentMethodType(8, PaymentMethodNames);
            CompanyDatas = DepositListService.GetCompanyData(new ClaimModel().TenantID).Result;
            DepositSearchModel.CompanyData = CompanyDatas.Where(x => x.CompanyCdSeq == new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID).FirstOrDefault();
            SaleBranchs = DepositListService.GetSaleBranchData(new ClaimModel().TenantID).Result;
            SaleBranchs.Insert(0, null);
            SaleBranchTypes = DepositListService.GetSaleOfficeModel();
            DepositSearchModel.SaleOfficeType = SaleBranchTypes.FirstOrDefault();
            TransferBanks = DepositListService.GetTransferBanks().Result;
            TransferBanks.Insert(0, null);
            DepositSearchModel.DepositOutputTemplate = DepositOutputs[0];
            DepositSearchModel.DepositOutputTemplate = DepositOutputs[0];
            DepositSearchModel.PageSizeReport = BillTypePagePrintData[0];
            searchForm = new EditContext(DepositSearchModel);
            ListReservationClass = await DepositListService.GetListReservationClass();
            ListGyosya = await DepositListService.GetListGyosya();
            ListTokisk = await DepositListService.GetListTokisk();
            ListTokiSt = DepositListService.GetListTokiSt().Result;
            //await startCustomerComponent.RenderDefault();
            //await endCustomerComponent.RenderDefault();
            List<TkdInpCon> filterValues = FilterConditionService.GetFilterCondition(FormName, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Result;
            if (filterValues.Count > 0)
            {

                DepositSearchModel = GenerateFilterModel(filterValues);
            }
            DepositSearchModel.PageSize = 25;

            searchForm = new EditContext(DepositSearchModel);

            GenerateSelectedSaleBranch();
            GenerateSelectedBillingAddressPayment();
            GenerateData();
            if (SelectedBillingAddressPaymentList.Count == 1 || SelectedBillingAddressPaymentList.Count == 0)
            {
                EnableNextBillingPayment = false;
                EnablePreBillingPayment = false;
            }
            if (SelectedSaleBranchPayments.Count == 1 || SelectedSaleBranchPayments.Count == 0)
            {
                EnableNextSaleBranch = false;
                EnablePreSaleBranch = false;
            }
            //await startCustomerComponent.RenderDefault();
            //await endCustomerComponent.RenderDefault();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private DepositListSearchModel GenerateFilterModel(List<TkdInpCon> filterValues)
    {
        DepositListSearchModel result = new DepositListSearchModel();
        foreach (var item in filterValues)
        {
            switch (item.ItemNm)
            {
                case nameof(DepositListSearchModel.CompanyData):
                    result.CompanyData = string.IsNullOrWhiteSpace(item.JoInput) ? CompanyDatas.Where(x => x.CompanyCdSeq == new ClaimModel().CompanyID).FirstOrDefault() : CompanyDatas.Where(x => x != null && x.CompanyCdSeq == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.StartSaleBranchList):
                    result.StartSaleBranchList = string.IsNullOrWhiteSpace(item.JoInput) ? null : SaleBranchs.Where(x => x != null && x.EigyoCdSeq == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.EndSaleBranchList):
                    result.EndSaleBranchList = string.IsNullOrWhiteSpace(item.JoInput) ? null : SaleBranchs.Where(x => x != null && x.EigyoCdSeq == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.SaleOfficeType):
                    result.SaleOfficeType = string.IsNullOrWhiteSpace(item.JoInput) ? null : SaleBranchTypes.Where(x => x != null && x.SaleOfficeKbn == Int32.Parse(item.JoInput)).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.StartPaymentDate):
                    if (string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        result.StartPaymentDate = null;
                    }
                    else
                    {
                        result.StartPaymentDate = DateTime.ParseExact(item.JoInput, "yyyyMMdd", null);
                    }
                    break;
                case nameof(DepositListSearchModel.EndPaymentDate):
                    if (string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        result.EndPaymentDate = null;
                    }
                    else
                    {
                        result.EndPaymentDate = DateTime.ParseExact(item.JoInput, "yyyyMMdd", null);
                    }
                    break;

                case nameof(DepositListSearchModel.startCustomerComponentGyosyaData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var gyosya = ListGyosya.Where(x => x.GyosyaCdSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.startCustomerComponentGyosyaData = gyosya;
                        startCustomerComponent.DefaultGyosya = gyosya.GyosyaCdSeq;
                    }
                    break;
                case nameof(DepositListSearchModel.endCustomerComponentGyosyaData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var gyosya = ListGyosya.Where(x => x.GyosyaCdSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.endCustomerComponentGyosyaData = gyosya;
                        endCustomerComponent.DefaultGyosya = gyosya.GyosyaCdSeq;
                    }
                    break;

                case nameof(DepositListSearchModel.startCustomerComponentTokiskData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var tokisk = ListTokisk.Where(x => x.TokuiSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.startCustomerComponentTokiskData = tokisk;
                        startCustomerComponent.DefaultTokisk = tokisk.TokuiSeq;
                    }
                    break;
                case nameof(DepositListSearchModel.endCustomerComponentTokiskData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var tokisk = ListTokisk.Where(x => x.TokuiSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.endCustomerComponentTokiskData = tokisk;
                        endCustomerComponent.DefaultTokisk = tokisk.TokuiSeq;
                    }
                    break;

                case nameof(DepositListSearchModel.startCustomerComponentTokiStData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var tokist = ListTokiSt.Where(x => x.TokuiSeq.ToString() + x.SitenCdSeq.ToString() == item.JoInput).FirstOrDefault();
                        result.startCustomerComponentTokiStData = tokist;
                        startCustomerComponent.DefaultTokiSt = tokist.SitenCdSeq;
                    }
                    break;
                case nameof(DepositListSearchModel.endCustomerComponentTokiStData):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var tokist = ListTokiSt.Where(x => x.TokuiSeq.ToString() + x.SitenCdSeq.ToString() == item.JoInput).FirstOrDefault();
                        result.endCustomerComponentTokiStData = tokist;
                        endCustomerComponent.DefaultTokiSt = tokist.SitenCdSeq;
                    }
                    break;

                case nameof(DepositListSearchModel.StartReceiptNumber):
                    result.StartReceiptNumber = string.IsNullOrWhiteSpace(item.JoInput) ? null : item.JoInput;
                    break;
                case nameof(DepositListSearchModel.EndReceiptNumber):
                    result.EndReceiptNumber = string.IsNullOrWhiteSpace(item.JoInput) ? null : item.JoInput;
                    break;
                case nameof(DepositListSearchModel.StartReservationClassification):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var reservationClassification = ListReservationClass.Where(x => x.YoyaKbnSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.StartReservationClassification = reservationClassification;
                    }
                    break;
                case nameof(DepositListSearchModel.EndReservationClassification):
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var reservationClassification = ListReservationClass.Where(x => x.YoyaKbnSeq == int.Parse(item.JoInput)).FirstOrDefault();
                        result.EndReservationClassification = reservationClassification;
                    }
                    break;
                case nameof(DepositListSearchModel.BillingType):
                    result.BillingType = string.IsNullOrWhiteSpace(item.JoInput) ? null : item.JoInput;
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var types = item.JoInput.Split(',');
                        foreach (var word in types)
                        {
                            foreach (var type in checkBoxBillingTypes)
                            {
                                if (type.Id == word)
                                {
                                    type.IsChecked = true;
                                    if (!billingTypes.Contains(Int32.Parse(type.Id)))
                                    {
                                        billingTypes.Add(Int32.Parse(type.Id));
                                    }
                                }
                            }
                        }
                    }
                    break;
                case nameof(DepositListSearchModel.StartTransferBank):
                    result.StartTransferBank = string.IsNullOrWhiteSpace(item.JoInput) ? null : TransferBanks.Where(x => x != null && x.Code == item.JoInput).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.EndTransferBank):
                    result.EndTransferBank = string.IsNullOrWhiteSpace(item.JoInput) ? null : TransferBanks.Where(x => x != null && x.Code == item.JoInput).FirstOrDefault();
                    break;
                case nameof(DepositListSearchModel.PaymentMethod):
                    result.PaymentMethod = string.IsNullOrWhiteSpace(item.JoInput) ? null : item.JoInput;
                    if (!string.IsNullOrWhiteSpace(item.JoInput))
                    {
                        var types = item.JoInput.Split(',');
                        foreach (var word in types)
                        {
                            foreach (var type in checkBoxPaymentMethodTypes)
                            {
                                if (type.Id.Contains(word))
                                {
                                    type.IsChecked = true;
                                    if (type.IsChecked)
                                    {
                                        if (type.Id != "91,92")
                                        {
                                            if (!PaymentMethodTypes.Contains(Int32.Parse(type.Id)))
                                            {
                                                PaymentMethodTypes.Add(Int32.Parse(type.Id));
                                            }
                                        }
                                        else
                                        {
                                            if (!PaymentMethodTypes.Contains(91) && !PaymentMethodTypes.Contains(92))
                                            {
                                                PaymentMethodTypes.Add(91);
                                                PaymentMethodTypes.Add(92);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
                case nameof(DepositListSearchModel.PageSizeReport):
                    ComboboxFixField pageSizeReport = string.IsNullOrEmpty(item.JoInput) ? BillTypePagePrintData[0] : BillTypePagePrintData.Where(x => x.StringValue == item.JoInput).FirstOrDefault();
                    result.PageSizeReport = pageSizeReport;
                    break;
                case nameof(DepositListSearchModel.ActiveHeaderOption):
                    ComboboxFixField activeHeaderOption = string.IsNullOrEmpty(item.JoInput) ? ShowHeaderOptions.ShowHeaderOptionData[0] : ShowHeaderOptions.ShowHeaderOptionData.Where(x => x.StringValue == item.JoInput).FirstOrDefault();
                    result.ActiveHeaderOption = activeHeaderOption;
                    break;
                case nameof(DepositListSearchModel.GroupType):
                    ComboboxFixField groupType = string.IsNullOrEmpty(item.JoInput) ? GroupTypes.GroupTypeData[0] : GroupTypes.GroupTypeData.Where(x => x.StringValue == item.JoInput).FirstOrDefault();
                    result.GroupType = groupType;
                    break;
                case nameof(DepositListSearchModel.DelimiterType):
                    ComboboxFixField delimiterType = string.IsNullOrEmpty(item.JoInput) ? DelimiterTypes.DelimiterTypeData[2] : DelimiterTypes.DelimiterTypeData.Where(x => x.StringValue == item.JoInput).FirstOrDefault();
                    result.DelimiterType = delimiterType;
                    break;
                case nameof(DepositListSearchModel.OutputType):
                    OutputReportType outputType = string.IsNullOrEmpty(item.JoInput) ? (OutputReportType)1 : (OutputReportType)int.Parse(item.JoInput);
                    result.OutputType = outputType;
                    break;
                case nameof(DepositListSearchModel.DepositOutputTemplate):
                    var data = string.IsNullOrEmpty(item.JoInput) ? DepositOutputs[0] : DepositOutputs.Where(x => x.Id == int.Parse(item.JoInput)).FirstOrDefault();
                    result.DepositOutputTemplate = data;
                    break;
            }
        }
        return result;
    }

    private void InitBody()
    {
        try
        {
            Body = new BodyTemplate()
            {
                Rows = new List<RowBodyTemplate>()
{
                    new RowBodyTemplate()
                    {
                        Columns = new List<ColumnBodyTemplate>()
{
                            new ColumnBodyTemplate() { Control = new MultiLineControl<DepositDataGrid> { MutilineText = GetNo }, RowSpan= 2, AlignCol = AlignColEnum.Center  },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PaymentDate), CustomTextFormatDelegate = KoboGridHelper.FormatYYYYMMDDDelegate, RowSpan = 2, AlignCol = AlignColEnum.Center },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.UkeNo)},
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CustomerName), RowSpan = 2 },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.OperatingSerialNumber), RowSpan = 2, AlignCol = AlignColEnum.Center },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.GroupName)},
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.DeliveryDate),CustomTextFormatDelegate = KoboGridHelper.FormatYYYYMMDDDelegate, AlignCol = AlignColEnum.Center },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.BillingType), RowSpan = 2 },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.LoadingGoodName), RowSpan = 2 , AlignCol = AlignColEnum.Left},
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PaymenMethod), RowSpan = 2 },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Amount), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.TransferFee), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CumulativePayment), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CouponFaceValue), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CouponNo), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PreviousReceiveAmount), RowSpan = 2, AlignCol = AlignColEnum.Right, CustomTextFormatDelegate = KoboGridHelper.AddCommasForNumber },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Transferbank), RowSpan = 2, AlignCol = AlignColEnum.Left },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CardApprovalNumber), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.CardSlipNumber), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PaperDueDate), RowSpan = 2, AlignCol = AlignColEnum.Right,CustomTextFormatDelegate = KoboGridHelper.FormatYYYYMMDDDelegate },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.PaperNumber), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Other11), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Other12), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Other21), RowSpan = 2, AlignCol = AlignColEnum.Right },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.Other22), RowSpan = 2, AlignCol = AlignColEnum.Right }
                        }
                    },
                     new RowBodyTemplate()
                    {
                        Columns = new List<ColumnBodyTemplate>()
{
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.ReceptionOffice) },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.DestinationName) },
                            new ColumnBodyTemplate() { DisplayFieldName = nameof(DepositDataGrid.ArrivalDate),CustomTextFormatDelegate = KoboGridHelper.FormatYYYYMMDDDelegate, AlignCol = AlignColEnum.Center },
                        }
                    }
        }
            };
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void InitHeader()
    {
        try
        {
            Header = new HeaderTemplate()
            {
                StickyCount = 3,
                Rows = new List<RowHeaderTemplate>()
{
                    new RowHeaderTemplate()
                    {
                        Columns = new List<ColumnHeaderTemplate>()
{
                            new ColumnHeaderTemplate() { ColName = Lang["no_col"], RowSpan = 2,Width = 50 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaymentDateGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["UkeNoGrid"],Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CustomerNameGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["OperatingSerialNumberGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["GroupNameGrid"]+"/"+Lang["DestinationNameGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["DeliveryDateGrid"], RowSpan = 1,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["BillingTypeGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["LoadingGoodNameGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaymenMethodGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["AmountGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["TransferFeeGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CumulativePaymentGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CouponFaceValueGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CouponNoGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PreviousReceiveAmountGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["TransferbankGrid"], RowSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CardGrid"], RowSpan = 1, ColSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaperGrid"], RowSpan = 1, ColSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSEtcNm1, RowSpan = 1, ColSpan = 2,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSEtcNm2, RowSpan = 1, ColSpan = 2,Width = 150 }

                        }
                    },
                    new RowHeaderTemplate()
                    {
                        Columns = new List<ColumnHeaderTemplate>()
{
                            new ColumnHeaderTemplate() { ColName = Lang["ReceptionOfficeGrid"],Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["ArrivalDateGrid"], RowSpan = 1,Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CardApprovalNumberGrid"], Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["CardSlipNumberGrid"], Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaperDueDateGrid"], Width = 150 },
                            new ColumnHeaderTemplate() { ColName = Lang["PaperNumberGrid"], Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSyoNm11, Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSyoNm12, Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSyoNm21, Width = 150 },
                            new ColumnHeaderTemplate() { ColName = CharterSetting?.NyuSyoNm22, Width = 150 }
                        }
                    }
                }
            };
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    private IEnumerable<string> GetNo(DepositDataGrid item)
    {
        if (item.YouKbn == 2)
        {
            yield return item.No.ToString();
            yield return Lang["rent"];
        }
        else
        {
            yield return item.No.ToString();
            yield return string.Empty;
        }
    }

    protected async void ItemClick(ItemClickEventArgs e)
    {
        try
        {
            outDataTable = new OutDataTable()
            {
                FutTumRen = SelectedItem.FutTumRen,
                FutuUnkRen = SelectedItem.FutuUnkRen,
                SeiFutSyu = SelectedItem.SeiFutSyu,
                UkeNo = SelectedItem.UkeNoFullString
            };
            isOpenCharterInquiryPopUp = await depositCouponService.CheckOpenChaterInquiryPopUpAsync(outDataTable);
            errorMessage = isOpenCharterInquiryPopUp ? string.Empty : @Lang["BI_T008"];

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task RowClick(RowClickEventArgs<DepositDataGrid> args)
    {
        try
        {
            SelectedItem = args.SelectedItem;
            LastXClicked = Convert.ToInt32(args.Event.ClientX);
            LastYClicked = Convert.ToInt32(args.Event.ClientY);
            if (!args.Event.ShiftKey && !args.Event.CtrlKey && SelectedItem.YouKbn == 2)
            {
                await blazorContextMenuService.ShowMenu("gridRowClickMenu", LastXClicked, LastYClicked);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }
    }

    protected async Task PageChanged(int pageNum)
    {
        try
        {
            DepositSearchModel.PageNum = pageNum == -1 ? 0 : pageNum;
            GenerateData();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    protected OutputReportType ActiveButtonReport
    {
        get => DepositSearchModel.OutputType;
        set
        {
            DepositSearchModel.OutputType = value;
            StateHasChanged();
        }
    }
    private void clickV(MouseEventArgs e, int number)
    {
        try
        {
            gridSizeClass = number;
            ActiveV = number;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    protected void ExportBtnClicked()
    {
        try
        {
            if (searchForm.GetValidationMessages().Count() == 0)
            {
                if (DepositSearchModel.OutputType == OutputReportType.Preview)
                {
                    var searchString = EncryptHelper.EncryptToUrl(DepositSearchModel);
                    JSRuntime.InvokeVoidAsync("open", "depositlistreportpreview?searchString=" + searchString, "_blank");
                }
                else
                {
                    if (DepositSearchModel.OutputType == OutputReportType.CSV)
                    {
                        PrintCsv();
                    }
                    else
                    {
                        Print();
                    }
                }
                keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForDepositList(DepositSearchModel, checkBoxPaymentMethodTypes, checkBoxBillingTypes).Result;
                FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.DepositList, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SelectPreviousSaleOffice()
    {
        try
        {
            if (DepositSearchModel.SelectedSaleBranchPayment.Id > 1)
            {
                EnableNextSaleBranch = true;
                DepositSearchModel.SelectedSaleBranchPayment = SelectedSaleBranchPayments[DepositSearchModel.SelectedSaleBranchPayment.Id - 2];
                if (DepositSearchModel.SelectedSaleBranchPayment.Id == 1)
                {
                    EnablePreSaleBranch = false;
                }
                StateHasChanged();
                GenerateSelectedBillingAddressPayment();
                if (DepositSearchModel.SelectedBillingAddressPayment != null)
                {
                    DepositSearchModel.PageNum = pagination.currentPage = 0;
                }
                GenerateData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SelectNextSaleOffice()
    {
        try
        {
            if (DepositSearchModel.SelectedSaleBranchPayment.Id < SelectedSaleBranchPayments.Count && SelectedSaleBranchPayments.Count > 1)
            {
                EnablePreSaleBranch = true;
                DepositSearchModel.SelectedSaleBranchPayment = SelectedSaleBranchPayments[DepositSearchModel.SelectedSaleBranchPayment.Id];
                if (DepositSearchModel.SelectedSaleBranchPayment.Id == SelectedSaleBranchPayments.Count)
                {
                    EnableNextSaleBranch = false;
                }
                StateHasChanged();
                GenerateSelectedBillingAddressPayment();
                if (DepositSearchModel.SelectedBillingAddressPayment != null)
                {
                    DepositSearchModel.PageNum = pagination.currentPage = 0;
                }

                GenerateData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SelectPreviousBillingPaymentAddress()
    {
        try
        {
            if (DepositSearchModel.SelectedBillingAddressPayment.Id > 1)
            {
                DepositSearchModel.PageNum = pagination.currentPage = 0;
                EnableNextBillingPayment = true;
                DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList[DepositSearchModel.SelectedBillingAddressPayment.Id - 2];
                if (DepositSearchModel.SelectedBillingAddressPayment.Id == 1)
                {
                    EnablePreBillingPayment = false;
                }
                StateHasChanged();
                GenerateData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SelectNextBillingPaymentAddress()
    {
        try
        {
            if (DepositSearchModel.SelectedBillingAddressPayment.Id < SelectedBillingAddressPaymentList.Count && SelectedBillingAddressPaymentList.Count > 1)
            {
                DepositSearchModel.PageNum = pagination.currentPage = 0;
                EnablePreBillingPayment = true;
                DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList[DepositSearchModel.SelectedBillingAddressPayment.Id];
                if (DepositSearchModel.SelectedBillingAddressPayment.Id == SelectedBillingAddressPaymentList.Count)
                {
                    EnableNextBillingPayment = false;
                }
                StateHasChanged();
                GenerateData();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateSelectedSaleBranch()
    {
        try
        {
            DepositSearchModel.SelectedSaleBranchPayment = null;
            SelectedSaleBranchPayments = DepositListService.GetSelectedSaleBranches(DepositSearchModel, new ClaimModel().TenantID).Result;
            if (SelectedSaleBranchPayments.Count > 0)
            {
                DepositSearchModel.SelectedSaleBranchPayment = SelectedSaleBranchPayments.FirstOrDefault();
                if (SelectedSaleBranchPayments.Count == 1)
                {
                    EnableNextSaleBranch = false;
                    EnablePreSaleBranch = false;
                }
                else
                {
                    EnableNextSaleBranch = true;
                    EnablePreSaleBranch = false;
                }
            }
            else
            {
                Errors.Add("BI_T007");
                EnableNextBillingPayment = false;
                EnablePreBillingPayment = false;
                SelectedSaleBranchPayments = new List<SelectedSaleBranchModel>();
                DepositSearchModel.SelectedSaleBranchPayment = SelectedSaleBranchPayments.FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateSelectedBillingAddressPayment()
    {
        try
        {
            DepositSearchModel.SelectedBillingAddressPayment = null;
            if (DepositSearchModel.SelectedSaleBranchPayment != null)
            {
                SelectedBillingAddressPaymentList = DepositListService.GetSelectedPaymentAddresses(DepositSearchModel, new ClaimModel().TenantID).Result;
                if (SelectedBillingAddressPaymentList.Count > 0)
                {
                    DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList.FirstOrDefault();
                    if (SelectedBillingAddressPaymentList.Count > 0)
                    {
                        DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList.FirstOrDefault();
                        if (SelectedBillingAddressPaymentList.Count == 1)
                        {
                            EnableNextBillingPayment = false;
                            EnablePreBillingPayment = false;
                        }
                        else
                        {
                            EnableNextBillingPayment = true;
                            EnablePreBillingPayment = false;
                        }
                    }
                }
                else
                {
                    EnableNextBillingPayment = false;
                    EnablePreBillingPayment = false;
                }
            }
            else
            {
                Errors.Add("BI_T007");
                SelectedBillingAddressPaymentList = new List<SelectedPaymentAddressModel>();
                DepositSearchModel.SelectedBillingAddressPayment = SelectedBillingAddressPaymentList.FirstOrDefault();
                EnableNextBillingPayment = false;
                EnablePreBillingPayment = false;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    private async Task GenerateData()
    {
        try
        {
            await Task.Run(() =>
            {
                isLoading = true;
                InvokeAsync(StateHasChanged).Wait();
            });
            if (searchForm.GetValidationMessages().Count() == 0)
            {
                if (DepositSearchModel.SelectedSaleBranchPayment != null && DepositSearchModel.SelectedBillingAddressPayment != null)
                {
                    (DepositListData, Summary, TotalRow) = DepositListService.GetDepositList(DepositSearchModel, false, new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID).Result;
                    dataNotFound = DepositListData == null || DepositListData.Count == 0;
                    DataItems = DepositListData;
                    if (DepositListData == null || DepositListData.Count == 0)
                    {
                        Errors.Add("BI_T007");
                    }
                    else
                    {
                        Errors.RemoveAll(x => x.Equals("BI_T007"));
                        btnReportActive = true;
                        keyValueFilterPairs = GenerateFilterValueDictionaryService.GenerateForDepositList(DepositSearchModel, checkBoxPaymentMethodTypes, checkBoxBillingTypes).Result;
                        FilterConditionService.SaveFilterCondtion(keyValueFilterPairs, FormFilterName.DepositList, 0, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq).Wait();
                    }
                }
                else
                {
                    Errors.Add("BI_T007");
                    DepositListData = new List<DepositDataGrid>();
                    TotalRow = 0;
                    DataItems = DepositListData;
                    Summary.PageAmount = 0;
                    Summary.PageCumulativePayment = 0;
                    Summary.PagePreviousReceiveAmount = 0;
                    Summary.PageTransferFee = 0;
                    Summary.TotalAmount = 0;
                    Summary.TotalCumulativePayment = 0;
                    Summary.TotalPreviousReceiveAmount = 0;
                    Summary.TotalTransferFee = 0;
                    btnReportActive = false;
                }

            }
            await Task.Run(() =>
            {
                isLoading = false;
                InvokeAsync(StateHasChanged).Wait();
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    private void ResetDepositListForm()
    {
        try
        {
            ActiveV = (int)ViewMode.Medium;
            DepositSearchModel = new DepositListSearchModel();
            DepositSearchModel.CompanyData = CompanyDatas.Where(x => x.CompanyCdSeq == new ClaimModel().CompanyID).FirstOrDefault();
            DepositSearchModel.SaleOfficeType = SaleBranchTypes.FirstOrDefault();
            DepositSearchModel.PageSize = 25;
            DepositSearchModel.DepositOutputTemplate = DepositOutputs[0];
            DepositSearchModel.PageSizeReport = BillTypePagePrintData[0];
            checkBoxBillingTypes = new List<CheckBoxFilter>();
            checkBoxPaymentMethodTypes = new List<CheckBoxFilter>();
            searchForm = new EditContext(DepositSearchModel);
            pagination.currentPage = 0;
            GenerateCheckBoxBillingType(7, BillingTypeNames);
            GenerateCheckBoxPaymentMethodType(8, PaymentMethodNames);
            GenerateSelectedSaleBranch();
            GenerateSelectedBillingAddressPayment();
            GenerateData();
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async void AdjustHeightWhenTabChanged()
    {
        try
        {
            await Task.Run(() =>
            {
                InvokeAsync(StateHasChanged).Wait();
                JSRuntime.InvokeVoidAsync("AdjustHeight");
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async Task ChangeValueForm(string ValueName, dynamic value)
    {
        try
        {
            Errors.RemoveAll(x => x.Equals("BI_T007"));
            if (value is string && string.IsNullOrEmpty(value))
            {
                value = null;
            }

            if (ValueName == nameof(DepositSearchModel.StartReceiptNumber) || ValueName == nameof(DepositSearchModel.EndReceiptNumber))
            {
                value = value == null ? null : value.ToString().PadLeft(10, '0');
            }
            var propertyInfo = DepositSearchModel.GetType().GetProperty(ValueName);
            propertyInfo.SetValue(DepositSearchModel, value, null);
            if (ValueName == nameof(DepositSearchModel.SelectedSaleBranchPayment))
            {
                if (DepositSearchModel.SelectedSaleBranchPayment.Id == SelectedSaleBranchPayments.Count)
                {
                    EnableNextSaleBranch = false;
                    EnablePreSaleBranch = true;
                }
                else if (DepositSearchModel.SelectedSaleBranchPayment.Id == 1)
                {
                    EnablePreSaleBranch = false;
                    EnableNextSaleBranch = true;
                }
                else if (DepositSearchModel.SelectedSaleBranchPayment.Id < SelectedSaleBranchPayments.Count && DepositSearchModel.SelectedSaleBranchPayment.Id > 1)
                {
                    EnableNextSaleBranch = true;
                    EnablePreSaleBranch = true;
                }
                GenerateSelectedBillingAddressPayment();
                if (SelectedBillingAddressPaymentList.Count > 0)
                {
                    DepositSearchModel.PageNum = pagination.currentPage = 0;
                    GenerateData();
                    StateHasChanged();
                }
            }
            else if (ValueName == nameof(DepositSearchModel.SelectedBillingAddressPayment))
            {
                DepositSearchModel.PageNum = pagination.currentPage = 0;
                if (DepositSearchModel.SelectedBillingAddressPayment.Id == SelectedBillingAddressPaymentList.Count)
                {
                    EnableNextBillingPayment = false;
                    EnablePreBillingPayment = true;
                }
                else if (DepositSearchModel.SelectedBillingAddressPayment.Id == 1)
                {
                    EnablePreBillingPayment = false;
                    EnableNextBillingPayment = true;
                }
                else if (DepositSearchModel.SelectedBillingAddressPayment.Id < SelectedBillingAddressPaymentList.Count && DepositSearchModel.SelectedBillingAddressPayment.Id > 1)
                {
                    EnableNextBillingPayment = true;
                    EnablePreBillingPayment = true;
                }
                GenerateData();
                StateHasChanged();
            }
            else
            {
                if(ValueName != nameof(DepositSearchModel.startCustomerComponentGyosyaData) && ValueName != nameof(DepositSearchModel.startCustomerComponentTokiskData) && ValueName != nameof(DepositSearchModel.endCustomerComponentTokiskData) && ValueName != nameof(DepositSearchModel.endCustomerComponentTokiskData))
                {
                    ChangeState();
                }
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    protected void OnChangeItemPerPage(byte _itemPerPage)
    {
        try
        {
            ItemPerPage = _itemPerPage;
            DepositSearchModel.PageSize = ItemPerPage;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async Task ChangeState()
    {
        try
        {
            await Task.Run(() =>
            {
                isLoading = true;
                InvokeAsync(StateHasChanged).Wait();
            });
            if (searchForm.GetValidationMessages().Count() == 0)
            {
                GenerateSelectedSaleBranch();
                GenerateSelectedBillingAddressPayment();
                GenerateData();
            }
            else
            {
                DepositListData = new List<DepositDataGrid>();
                TotalRow = 0;
                DataItems = DepositListData;
                Summary.PageAmount = 0;
                Summary.PageCumulativePayment = 0;
                Summary.PagePreviousReceiveAmount = 0;
                Summary.PageTransferFee = 0;
                Summary.TotalAmount = 0;
                Summary.TotalCumulativePayment = 0;
                Summary.TotalPreviousReceiveAmount = 0;
                Summary.TotalTransferFee = 0;
                btnReportActive = false;
            }
            await Task.Run(() =>
            {
                isLoading = false;
                InvokeAsync(StateHasChanged).Wait();
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async Task FilterChanged(CheckBoxFilter checkBoxFilter)
    {
        try
        {
            checkBoxFilter.IsChecked = !checkBoxFilter.IsChecked;
            switch (checkBoxFilter.Number)
            {
                case 1:
                    DepositSearchModel.FareBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 2:
                    DepositSearchModel.FutaiBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 3:
                    DepositSearchModel.TollFeeBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 4:
                    DepositSearchModel.ArrangementFeeBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 5:
                    DepositSearchModel.GuideFeeBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 6:
                    DepositSearchModel.LoadedItemBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
                case 7:
                    DepositSearchModel.CancelFeeBilTyp = checkBoxFilter.IsChecked ? (byte)1 : (byte)2;
                    break;
            }
            if (checkBoxFilter.IsBillingType == true)
            {
                if (billingTypes.Any(x => x == checkBoxFilter.Number))
                {
                    billingTypes.Remove(checkBoxFilter.Number);
                }
                else
                {
                    billingTypes.Add(checkBoxFilter.Number);
                }
                DepositSearchModel.BillingType = string.Join(",", billingTypes);
            }
            if (checkBoxFilter.IsBillingType == false)
            {
                if (PaymentMethodTypes.Any(x => x == checkBoxFilter.Number))
                {
                    if (checkBoxFilter.Number == 8)
                    {
                        PaymentMethodTypes.Remove(91);
                        PaymentMethodTypes.Remove(92);
                        PaymentMethodTypes.Remove(checkBoxFilter.Number);
                    }
                    else { PaymentMethodTypes.Remove(checkBoxFilter.Number); }
                }
                else
                {
                    if (checkBoxFilter.Number == 8 && !PaymentMethodTypes.Contains(91) && !PaymentMethodTypes.Contains(92))
                    {
                        PaymentMethodTypes.Add(91);
                        PaymentMethodTypes.Add(92);
                        PaymentMethodTypes.Add(8);
                    }
                    else { PaymentMethodTypes.Add(checkBoxFilter.Number); }
                }
                DepositSearchModel.PaymentMethod = string.Join(",", PaymentMethodTypes);
            }

            ChangeState();
            InvokeAsync(StateHasChanged);

        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }

    protected async Task UpdateFormModel(string ValueName, dynamic value)
    {
        try
        {
            if (value is string && string.IsNullOrEmpty(value))
            {
                value = null;
            }
            var propertyInfo = DepositSearchModel.GetType().GetProperty(ValueName);
            propertyInfo.SetValue(DepositSearchModel, value, null);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateCheckBoxBillingType(int numberOfBillingType, List<string> BillingTypeNames)
    {
        try
        {
            for (int i = 1; i <= numberOfBillingType; i++)
            {
                checkBoxBillingTypes.Add(new CheckBoxFilter()
                {
                    Id = i.ToString(),
                    IsChecked = false,
                    Name = BillingTypeNames[i - 1],
                    Number = i,
                    IsBillingType = true
                });
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateCheckBoxPaymentMethodType(int numberOfPaymentMethodType, List<string> PaymentMethodTypeNames)
    {
        try
        {
            for (int i = 1; i <= numberOfPaymentMethodType; i++)
            {
                var id = $"0{i}";
                if (PaymentMethodTypeNames[i - 1].Equals(Lang["AnotherCheck"]))
                {
                    id = "91,92";
                }
                checkBoxPaymentMethodTypes.Add(new CheckBoxFilter()
                {
                    Id = id,
                    IsChecked = false,
                    Name = PaymentMethodTypeNames[i - 1],
                    Number = i
                });
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateAllCheckBoxName()
    {
        try
        {
            BillingTypeNames.Add(Lang["TicketPriceCheck"]);
            BillingTypeNames.Add(Lang["RandomCheck"]);
            BillingTypeNames.Add(Lang["TollsCheck"]);
            BillingTypeNames.Add(Lang["LoadingPriceCheck"]);
            BillingTypeNames.Add(Lang["GuidePriceCheck"]);
            BillingTypeNames.Add(Lang["LoadingStockPriceCheck"]);
            BillingTypeNames.Add(Lang["CancelPriceCheck"]);
            PaymentMethodNames.Add(Lang["CashCheck"]);
            PaymentMethodNames.Add(Lang["TransferCheck"]);
            PaymentMethodNames.Add(Lang["CouponCheck"]);
            PaymentMethodNames.Add(Lang["CardCheck"]);
            PaymentMethodNames.Add(Lang["ReceiptCheck"]);
            PaymentMethodNames.Add(Lang["CompensateCheck"]);
            PaymentMethodNames.Add(Lang["AdjustCheck"]);
            PaymentMethodNames.Add(Lang["AnotherCheck"]);
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void GenerateDepositOutputTemplate()
    {
        try
        {
            DepositOutputs.Add(new DepositOutputClass()
            {
                Id = 1,
                Name = Lang["DepositList"]
            });
            DepositOutputs.Add(new DepositOutputClass()
            {
                Id = 2,
                Name = Lang["DepositOfficeType"]
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async void Print()
    {
        try
        {
            DepositSearchModel.IsGetAll = true;
            var data = await DepositListService.GetDepositsListReportDatas(DepositSearchModel, new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            if (data.Count > 0)
            {
                XtraReport report = new XtraReport();

                if (DepositSearchModel.DepositOutputTemplate.Id == 1)
                {
                    report = new Reports.DepositListReportA4();
                    if (DepositSearchModel.PageSizeReport.IdValue == BillTypePagePrintList.BillTypePagePrintData[1].IdValue)
                    {
                        report = new Reports.DepositListReportA3();
                    }
                    else
                    {
                        if (DepositSearchModel.PageSizeReport.IdValue == BillTypePagePrintList.BillTypePagePrintData[2].IdValue)
                        {
                            report = new Reports.DepositListReportB4();
                        }
                    }
                }
                if (DepositSearchModel.DepositOutputTemplate.Id == 2)
                {
                    report = new Reports.DepositOfficeListReportA4();
                    if (DepositSearchModel.PageSizeReport.IdValue == BillTypePagePrintList.BillTypePagePrintData[1].IdValue)
                    {
                        report = new Reports.DepositOfficeListReportA3();
                    }
                    else
                    {
                        if (DepositSearchModel.PageSizeReport.IdValue == BillTypePagePrintList.BillTypePagePrintData[2].IdValue)
                        {
                            report = new Reports.DepositOfficeListReportB4();
                        }
                    }
                }
                report.DataSource = data;
                await new System.Threading.Tasks.TaskFactory().StartNew(() =>
                {
                    report.CreateDocument();
                    using (MemoryStream ms = new MemoryStream())
                    {
                        if (DepositSearchModel.OutputType == OutputReportType.Print)
                        {
                            PrintToolBase tool = new PrintToolBase(report.PrintingSystem);
                            tool.Print();
                            return;
                        }
                        report.ExportToPdf(ms);

                        byte[] exportedFileBytes = ms.ToArray();
                        string myExportString = Convert.ToBase64String(exportedFileBytes);
                        string name = DepositSearchModel.DepositOutputTemplate.Id == 1 ? "DepositList" : "DepositOfficeList";
                        JSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "pdf", name);
                    }
                });
            }
            DepositSearchModel.IsGetAll = false;
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private async void PrintCsv()
    {
        try
        {
            var listData = await DepositListService.GetDepositListCSVDatas(DepositSearchModel, new ClaimModel().TenantID, new HassyaAllrightCloud.Domain.Dto.ClaimModel().CompanyID);
            var dt = listData.ToDataTable<DepositListCSVDataModel>();
            while (dt.Columns.Count > 67)
            {
                dt.Columns.RemoveAt(67);
            }
            SetTableHeader(dt);
            string path = string.Format("{0}/csv/{1}.csv", hostingEnvironment.WebRootPath, Guid.NewGuid());

            bool isWithHeader = DepositSearchModel.ActiveHeaderOption.IdValue == 0 ? true : false;
            bool isEnclose = DepositSearchModel.GroupType.IdValue == 0 ? true : false;
            string space = DepositSearchModel.DelimiterType.IdValue == 0 ? "\t" : DepositSearchModel.DelimiterType.IdValue == 1 ? ";" : ",";

            var result = CsvHelper.ExportDatatableToCsv(dt, path, true, isWithHeader, isEnclose, space);
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                string myExportString = Convert.ToBase64String(result);
                JSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, "csv", "DepositList");
            });
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
    private void SetTableHeader(DataTable table)
    {
        try
        {
            List<string> listHeader = new List<string>() { "営業所コード", "営業所名", "営業所略名",
                "請求先業者コード", "請求先コード", "請求先支店コード", "請求先業者コード名", "請求先名",
                "請求先支店名", "請求先略名", "請求先支店略名", "入金年月日", "受付番号", "受付営業所コード",
                "受付営業所名", "受付営業所略名", "得意先業者コード", "得意先コード", "得意先支店コード", "得意先業者コード名", "得意先名",
                "得意先支店名", "得意先略名", "得意先支店略名", "運行日連番", "団体名", "行き先名", "配車年月日", "到着年月日",
                "請求付帯種別", "請求付帯種別名", "付帯積込品名", "入金手段", "入金手段名", "金額", "振込手数料", "入金累計",
                "クーポン額面金額", "クーポンNo.", "前受金",
                "銀行コード", "銀行支店コード", "銀行名", "銀行支店名", "銀行略名", "銀行支店略名", "カード承認番号", "カード伝票番号",
                "手形期日", "手形番号", "入金手段その他名１", "その他詳細項目１１",
                "その他詳細項目１２", "入金手段その他名２", "その他詳細項目２１", "その他詳細項目２２", "得意先コード使用開始年月日",
                "得意先コード使用終了年月日", "得意先支店コード使用開始年月日", "得意先支店コード使用終了年月日", "現金", "その他"
                , "調整金", "手形", "相殺", "振込額" };
            for (int i = 0; i < table.Columns.Count; i++)
            {
                table.Columns[i].ColumnName = listHeader[i];
            }
        }
        catch (Exception ex)
        {
            errorModalService.ShowErrorPopup("Error", ex.GetOriginalException()?.Message);
        }

    }
}
