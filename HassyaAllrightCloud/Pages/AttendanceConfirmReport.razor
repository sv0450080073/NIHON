@inject IFilterCondition FilterServices
@using DevExpress.Blazor.Reporting
@using DevExpress.XtraPrinting
@page "/attendanceconfirmreport"
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<AttendanceConfirmReport> Lang
@inject ITPM_CompnyDataListService TPM_CompnyDataService
@inject ITPM_EigyosDataListService TPM_EigyosDataService
@inject ITPM_YoyKbnDataListService TPM_YoyKbnDataService
@inject ITPM_CodeKbListService TPM_CodeKbnService
@inject ITenkokirokuReportService TenkokirokuReportService
@inject CustomNavigation NavManager
@inject AppSettingsService AppSettingsService
@using HassyaAllrightCloud.Domain.Dto.CommonComponents;
@using HassyaAllrightCloud.IService.CommonComponents;


<DxPopup CssClass="custom-popup" @bind-Visible="@PopupVisible" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @TitlePopupWarning
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => PopupVisible = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-exclamation-triangle text-warning mr-2" aria-hidden="true"></i>@Message
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => PopupVisible = false)" Text="OK" />
    </FooterTemplate>
</DxPopup>
<DxPopup CssClass="custom-popup modal-xl" @bind-Visible="@OpenPopPreview" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @TitlePopupViewer
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => OpenPopPreview = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <DxDocumentViewer ReportUrl="@($"{nameof(ITenkokirokuReportService)}?"+searchString)" Height="800px" Width="100%">
            <DxDocumentViewerTabPanelSettings Width="180" />
        </DxDocumentViewer>
    </Content>
</DxPopup>
<DxPopup CssClass="custom-popup" @bind-Visible="@PopupCheckData" Scrollable="true">
    <HeaderTemplate>
        <div class="custom-header bg-primary text-white w-100">
            @TitlePopupInfo
            <a class="close-button oi oi-x text-white" href="javascript:void(0);" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => PopupCheckData = false)"></a>
        </div>
    </HeaderTemplate>
    <Content>
        <div class="d-flex align-items-center">
            <i class="fa fa-2x fa-info-circle" aria-hidden="true"></i>  @MessageCheckDataExist
        </div>
    </Content>
    <FooterTemplate>
        <DxButton RenderStyle="ButtonRenderStyle.Primary" @onclick="@(() => PopupCheckData = false)" Text="OK" />
    </FooterTemplate>
</DxPopup>

<div class="d-flex justify-content-between align-items-center pb-2">
    <h5 class="mb-0">@PageTitleReport</h5>
    <button class="btn btn-sm btn-danger btnclear" @onclick="ResetForm">
        <i class="fa fa-refresh" aria-hidden="true"></i>
        @Lang["Clear"]
    </button>
</div>
@if (isExporting)
{
    <div class="loader">
        <div class="loader-icon"></div>
    </div>
}
<EditForm EditContext="@formContext" OnSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <FluentValidator TValidator="AttendanceConfirmReportValidator" />
    <div class="express-condition mb-3 border-dotted">
        <div class="card border-0">
            <div class="card-body py-3 pl-4">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h5>@Lang["OutputSettings"]</h5>
                </div>
                <div class="pl-5">
                    <div class="form-group d-flex flex-nowrap">
                        <label class="col-form-label-sm mr-4 width--90">@Lang["OutputInstruction"]</label>
                        <nav class="nav nav-pills">
                            <a href="javascript:void(0)" class="nav-link @(reportCondition.OutputSetting == OutputInstruction.Preview ? "active" : null)" @onclick="@(e => reportCondition.OutputSetting = OutputInstruction.Preview)">@Lang["PreviewButton"]</a>
                            <a href="javascript:void(0)" class="nav-link @(reportCondition.OutputSetting == OutputInstruction.Pdf ? "active" : null)" @onclick="@(e => reportCondition.OutputSetting = OutputInstruction.Pdf)">@Lang["PDF"]</a>
                        </nav>
                    </div>
                    <div class="form-group d-flex flex-nowrap">
                        <label class="col-form-label-sm mr-4 width--90">@SizeOfPaper</label>
                        <DxComboBox Data="@sizeofpaperlst"
                                    AllowUserInput="false"
                                    SelectedItem="@reportCondition.SizeOfPaper"
                                    SelectedItemChanged="@OnSizeOfPaperChanged"
                                    SelectedItemExpression="@(() => reportCondition.SizeOfPaper)"
                                    CssClass="width--90"></DxComboBox>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="express-condition mb-3 border-dotted">
        <div class="card border-0">
            <div class="card-body py-3 pl-4">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h5>@Lang["OutputConditions"]</h5>
                </div>
                <div class="pl-5">
                    <div class="form-group d-flex flex-nowrap">
                        <label class="col-form-label-sm mr-4 width--90">@OperationDate</label>
                        <DxDateEdit Date="@operationDate"
                                    Format="yyyy/MM/dd"
                                    DateChanged="@((newValue) => OnOperationDateChanged(newValue))"
                                    DateExpression="@(() => reportCondition.OperationDate)"
                                    CssClass="width--120"></DxDateEdit>
                    </div>
                    <div class="form-group d-flex flex-nowrap">
                        <label class="col-form-label-sm mr-4 width--90">@Company</label>
                        <div class="dropdown dropdown-listbox">
                            <div class=@("has-tooltip-error custom-listbox-invalid " + formContext.FieldCssClass(() => reportCondition.CompanyChartData))>
                                <Tooltip ValueExpressions="@(() => reportCondition.CompanyChartData )"
                                         Lang="@LangDic" Text="@(CompanyEmpty? emptyItemMessage[nameof(EmptyCompanyMessage)]:"")" Position="PositionTooltip.top"></Tooltip>
                                <div class="input-group input-group-sm dx-listbox width--290 multi-combobox dropdown-toggle" id="lstcompany" data-toggle="dropdown">
                                    <p class="form-control form-control-sm">@GetSelectedCompanyText()</p>
                                    <div class="form-control form-control-sm input-group-append dxbs-input-group-append dxbs-focus-hidden">
                                        <button class="btn btn-sm dx-btn  btn-secondary dxbs-edit-btn dropdown-toggle dxbs-dropdown-toggle" type="button">
                                            <span></span>
                                        </button>
                                    </div>
                                </div>
                                <div class="dropdown-menu dropdownlist" role="menu" aria-labelledby="lstcompany">
                                    <DxListBox Data="@companychartlst"
                                               TextFieldName="TextReport"
                                               ListRenderMode="ListRenderMode.Entire"
                                               SelectionMode="ListBoxSelectionMode.Multiple"
                                               SelectedItems="@SelectedCompanyItems"
                                               SelectedItemsChanged="@OnSelectedCompanyItemsChanged"
                                               SelectedItemsExpression="@(() => reportCondition.CompanyChartData)"
                                               ShowCheckboxes="true"
                                               CssClass="width--290">
                                    </DxListBox>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group d-flex flex-nowrap">
                        <label class="col-form-label-sm mr-4 width--90">@VehicleDispatchOffice</label>
                        <div class="has-tooltip-error">
                            <Tooltip ValueExpressions="@(() => reportCondition.VehicleDispatchOffice1 )"
                                     Lang="@LangDic" Text="@(BranchEmpty? emptyItemMessage[nameof(EmptyBranchMessage)]:"")" Position="PositionTooltip.top"></Tooltip>
                            <DxComboBox Data="@vehicledispatchofficelst"
                                        NullText="@Lang["VehicleDispatchOfficeNullText"]"
                                        TextFieldName="EigyoCodeName"
                                        AllowUserInput="false"
                                         FilteringMode="@DataGridFilteringMode.Contains"
                                        SelectedItem="@reportCondition.VehicleDispatchOffice1"
                                        SelectedItemChanged="@OnVehicleDispatchOffice1Changed"
                                        SelectedItemExpression="@(() => reportCondition.VehicleDispatchOffice1)"
                                        CssClass="width--290 custom-combo-box"></DxComboBox>
                        </div>
                        <span class="mx-3">～</span>
                            <div class="has-tooltip-error">
                                <Tooltip ValueExpressions="@(() => reportCondition.VehicleDispatchOffice2 )"
                                         Lang="@LangDic" Text="@(BranchEmpty?emptyItemMessage[nameof(EmptyBranchMessage)]:"")" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@vehicledispatchofficelst"
                                            NullText="@Lang["VehicleDispatchOfficeNullText"]"
                                            TextFieldName="EigyoCodeName"
                                            AllowUserInput="false"
                                            FilteringMode="@DataGridFilteringMode.Contains"
                                            SelectedItem="@reportCondition.VehicleDispatchOffice2"
                                            SelectedItemChanged="@OnVehicleDispatchOffice2Changed"
                                            SelectedItemExpression="@(() => reportCondition.VehicleDispatchOffice2)"
                                            CssClass="width--290 custom-combo-box"></DxComboBox>
                            </div>
                    </div>
                    <div class="form-group d-flex flex-nowrap">
                        <label class="col-form-label-sm mr-4 width--90">@ReservationCategory</label>
                        @*<div class="@("has-tooltip-error")">
                                <Tooltip ValueExpressions="@(() => reportCondition.BookingTypeFrom )"
                                         Lang="@LangDic" Text="@(BookingEmpty?emptyItemMessage[nameof(EmptyBookingTypeMessage)]:"")" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@reservationlst"
                                            NullText="@Lang["ReservationCategoryNullText"]"
                                            TextFieldName="YoyaCodeName"
                                            AllowUserInput="false"
                                            SelectedItem="@reportCondition.BookingTypeFrom"
                                            SelectedItemChanged="@((e) => OnBookingFromSelectedChanged(e))"
                                            SelectedItemExpression="@(() => reportCondition.BookingTypeFrom)"
                                            CssClass="width--290 custom-combo-box">
                                </DxComboBox>
                            </div>*@
                        <HassyaAllrightCloud.Pages.Components.CommonComponents.ReservationClassComponent SelectedReservationClass="@reportCondition.BookingTypeFrom"
                                                                                                         SelectedReservationClassChanged="e => OnBookingFromSelectedChanged(e)"
                                                                                                         ReservationClassExpression="@(() => reportCondition.BookingTypeFrom)"
                                                                                                         DefaultValue="Convert.ToInt32(reportCondition.BookingTypeFrom?.YoyaKbnSeq)"
                                                                                                         LangDic="@LangDic"
                                                                                                         isAddNullItem="True"
                                                                                                         CssClass="width--290 custom-combo-box"/>
                        <span class="mx-3">～</span>
                        @*<div class="@("has-tooltip-error")">
                                <Tooltip ValueExpressions="@(() => reportCondition.BookingTypeFrom )"
                                         Lang="@LangDic" Text="@(BookingEmpty?emptyItemMessage[nameof(EmptyBookingTypeMessage)]:"")" Position="PositionTooltip.top"></Tooltip>
                                <DxComboBox Data="@reservationlst"
                                            NullText="@Lang["ReservationCategoryNullText"]"
                                            TextFieldName="YoyaCodeName"
                                            AllowUserInput="false"
                                            SelectedItem="@reportCondition.BookingTypeTo"
                                            SelectedItemChanged="@((e) => OnBookingToSelectedChanged(e))"
                                            SelectedItemExpression="@(() => reportCondition.BookingTypeFrom)"
                                            CssClass="width--290 custom-combo-box">
                                </DxComboBox>
                            </div>*@
                        <HassyaAllrightCloud.Pages.Components.CommonComponents.ReservationClassComponent SelectedReservationClass="@reportCondition.BookingTypeTo"
                                                                                                         SelectedReservationClassChanged="e => OnBookingToSelectedChanged(e)"
                                                                                                         ReservationClassExpression="@(() => reportCondition.BookingTypeTo)"
                                                                                                         DefaultValue="Convert.ToInt32(reportCondition.BookingTypeTo?.YoyaKbnSeq)"
                                                                                                         LangDic="@LangDic"
                                                                                                         isAddNullItem="True"
                                                                                                         CssClass="width--290 custom-combo-box"/>
                        <label class="col-form-label-sm ml-4 mr-2">@Undelivered</label>
                        <DxComboBox Data="@undeliveredlst"
                                    AllowUserInput="false"
                                    SelectedItem="@reportCondition.Undelivered"
                                    SelectedItemChanged="@OnUndeliveredChanged"
                                    SelectedItemExpression="@(() => reportCondition.Undelivered)"
                                    CssClass="width--120"></DxComboBox>
                    </div>
                    @*<div class="d-flex">
                                    @* <div class="form-group d-flex flex-nowrap mr-5">
                            <label class="col-form-label-sm mr-2 width--75">@ReservationCategory</label>
                            <div class="dropdown dropdown-listbox">
                                <div class="input-group input-group-sm dx-listbox width--290 multi-combobox dropdown-toggle" id="lstreservation" data-toggle="dropdown">
                                    <p class="form-control form-control-sm text-overflow">@GetSelectedReservationText()</p>
                                    <div class="form-control form-control-sm input-group-append dxbs-input-group-append dxbs-focus-hidden">
                                        <button class="btn btn-sm dx-btn  btn-secondary dxbs-edit-btn dropdown-toggle dxbs-dropdown-toggle" type="button">
                                            <span></span>
                                        </button>
                                    </div>
                                </div>
                                <div class="dropdown-menu dropdownlist" role="menu" aria-labelledby="lstreservation">
                                    <div class=@("has-tooltip-error custom-listbox-invalid " + formContext.FieldCssClass(() => reportCondition.ReservationList))>
                                        <Tooltip ValueExpressions="@(() => reportCondition.ReservationList )"
                                                 Lang="@LangDic" Text="@(BookingEmpty? emptyItemMessage[nameof(EmptyBookingTypeMessage)]:"")" Position="PositionTooltip.top"></Tooltip>
                                        <DxListBox Data="@reservationlst"
                                                   TextFieldName="Text"
                                                   ListRenderMode="ListRenderMode.Entire"
                                                   SelectionMode="ListBoxSelectionMode.Multiple"
                                                   SelectedItems="SelectedReservations"
                                                   SelectedItemsChanged="@OnSelectedReservationsChanged"
                                                   SelectedItemsExpression="() => reportCondition.ReservationList"
                                                   ShowCheckboxes="true"
                                                   CssClass="width--290">
                                        </DxListBox>
                                    </div>
                                </div>
                            </div>
                        </div>
                                    <div class="form-group d-flex flex-nowrap">
                                        <label class="col-form-label-sm mr-4">@Undelivered</label>
                                        <DxComboBox Data="@undeliveredlst"
                                                    AllowUserInput="false"
                                                    SelectedItem="@reportCondition.Undelivered"
                                                    SelectedItemChanged="@OnUndeliveredChanged"
                                                    SelectedItemExpression="@(() => reportCondition.Undelivered)"
                                                    CssClass="width--120"></DxComboBox>
                                    </div>
                                </div>*@
                    <div class="form-group d-flex flex-nowrap">
                        <label class="col-form-label-sm mr-4 width--90">@OutputOrder</label>
                        <DxComboBox Data="@outputorderlst"
                                    TextFieldName="StringValue"
                                    AllowUserInput="false"
                                    SelectedItem="@reportCondition.OutputOrder"
                                    SelectedItemChanged="@OnOutputOrderChanged"
                                    SelectedItemExpression="@(() => reportCondition.OutputOrder)"
                                    CssClass="width--290"></DxComboBox>
                    </div>
                    <div class="d-flex flex-nowrap align-items-start">
                        <div class="form-group d-flex flex-nowrap">
                            <label class="col-form-label-sm mr-4 width--90">@KeyObjectives</label>
                            <div class="mr-3">
                                <div class="form-group d-flex align-items-center">
                                    <DxTextBox Text="@reportCondition.TxtKeyObjectives"
                                               TextChanged="@((newValue) => OnTxtKeyObjectivesChange(newValue))"
                                               TextExpression="@(() => @reportCondition.TxtKeyObjectives)"
                                               CssClass="width--290 mr-3 length25"
                                               BindValueMode="BindValueMode.OnInput"></DxTextBox>
                                    <a href="javascript:void(0)" class="btn btn-sm btn-primary @(disabledTxtKeyObjectives ? "disabled" : "")" @onclick="OnAddTxtKeyObjectives">@Insert</a>
                                </div>
                                <DxListBox Data="@keyObjectiveslst"
                                           TextFieldName="Text"
                                           ListRenderMode="ListRenderMode.Virtual"
                                           SelectionMode="ListBoxSelectionMode.Multiple"
                                           SelectedItems="@SelectedKeyObjectivesItems"
                                           SelectedItemsChanged="@OnSelectedKeyObjectivesChanged"
                                           SelectedItemsExpression="@(() => ValueExpress)"
                                           ShowCheckboxes="true"
                                           CssClass="width--290">
                                </DxListBox>
                            </div>
                        </div>
                        <div class="dx-listbox-scrollable form-control form-control-sm width--450">
                            <ul class="list-group dxbs-listbox">
                                @foreach (var item in selectedlstKeyObjectives)
                                {
                                    <li>
                                        <div class="list-group-item py-1 px-3 d-flex justify-content-between">
                                            <span>@item</span>
                                            <a href="javascript:void(0)" class="text-danger" @onclick="@(() => OnRemoveSelectedKeyObjectives(item))">
                                                <i class="fa fa-times" aria-hidden="true"></i>
                                            </a>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="d-flex flex-nowrap align-items-start">
                        <div class="form-group d-flex flex-nowrap">
                            <label class="col-form-label-sm mr-4 width--90">@Instructions</label>
                            <div class="mr-3">
                                <div class="form-group d-flex align-items-center">
                                    <DxTextBox Text="@reportCondition.TxtInstructions"
                                               TextChanged="@((newValue) => OnTxtInstructionsChange(newValue))"
                                               TextExpression="@(() => @reportCondition.TxtInstructions)"
                                               CssClass="width--290 mr-3 length25"
                                               BindValueMode="BindValueMode.OnInput"></DxTextBox>
                                    <a href="javascript:void(0)" class="btn btn-sm btn-primary @(disabledTxtInstructions ? "disabled" : "")" @onclick="OnAddTxtInstructions">@Insert</a>
                                </div>
                                <DxListBox Data="@instructionslst"
                                           TextFieldName="Text"
                                           ListRenderMode="ListRenderMode.Virtual"
                                           SelectionMode="ListBoxSelectionMode.Multiple"
                                           SelectedItems="@SelectedInstructionsItems"
                                           SelectedItemsChanged="@OnSelectedInstructionsChanged"
                                           SelectedItemsExpression="@(() => ValueExpressInstruct)"
                                           ShowCheckboxes="true"
                                           CssClass="width--290">
                                </DxListBox>
                            </div>
                        </div>
                        <div class="dx-listbox-scrollable form-control form-control-sm width--450">
                            <ul class="list-group dxbs-listbox">
                                @foreach (var item in selectedlstInstructions)
                                {
                                    <li>
                                        <div class="list-group-item py-1 px-3 d-flex justify-content-between">
                                            <span>@item</span>
                                            <a href="javascript:void(0)" class="text-danger" @onclick="@(() => OnRemoveSelectedInstructions(item))">
                                                <i class="fa fa-times" aria-hidden="true"></i>
                                            </a>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="border-dotted " style=" text-align: center;">
        <DxButton Text="@Lang["Output"]"
                  RenderStyle="@ButtonRenderStyle.Primary"
                  CssClass="width--100"
                  @onclick="() => BtnSubmitClick()"
                  disabled="@((formContext.GetValidationMessages().Distinct().Any() || checkNullItem )  )">
        </DxButton>
    </div>
</EditForm>

@code {
    [Parameter]
    public string Option { get; set; }
    [Parameter]
    public string Date { get; set; }
    [Inject] public IReportLayoutSettingService _reportLayoutSettingService { get; set; }
    [Inject] protected IReservationClassComponentService ReservationClassComponentService { get; set; }

    int activeTabIndex = 0;
    int ActiveTabIndex { get => activeTabIndex; set { activeTabIndex = value; StateHasChanged(); } }
    AttendanceConfirmReportData reportCondition = new AttendanceConfirmReportData();
    AttendanceConfirmReportDataUri AttendanceConfirmReportDataUri = new AttendanceConfirmReportDataUri();
    EditContext formContext;
    DateTime operationDate = DateTime.Today;
    List<CompanyChartData> companychartlst = new List<CompanyChartData>();
    List<BranchChartData> branchchartlst = new List<BranchChartData>();
    List<DepartureOfficeData> vehicledispatchofficelst = new List<DepartureOfficeData>();
    List<ReservationData> reservationlst = new List<ReservationData>();
    IEnumerable<ReservationData> SelectedReservations = new List<ReservationData>();
    List<string> undeliveredlst = new List<string>();
    List<OutputOrderData> outputorderlst = new List<OutputOrderData>();
    List<string> sizeofpaperlst = new List<string>();
    IEnumerable<TPM_CodeKbDataReport> keyObjectiveslst = new List<TPM_CodeKbDataReport>();
    IEnumerable<TPM_CodeKbDataReport> instructionslst = new List<TPM_CodeKbDataReport>();
    List<TPM_CodeKbDataReport> listTemp = new List<TPM_CodeKbDataReport>();
    IEnumerable<TPM_CodeKbDataReport> SelectedKeyObjectivesItems { get; set; } = new List<TPM_CodeKbDataReport>();
    List<string> SelectedKeyObjectivesItemstmp = new List<string>();
    IEnumerable<TPM_CodeKbDataReport> SelectedInstructionsItems { get; set; } = new List<TPM_CodeKbDataReport>();
    IEnumerable<TPM_CodeKbDataReport> ValueExpress { get; set; } = new List<TPM_CodeKbDataReport>();
    IEnumerable<TPM_CodeKbDataReport> ValueExpressInstruct { get; set; } = new List<TPM_CodeKbDataReport>();
    public List<ReservationClassComponentData> ListReservationClass { get; set; } = new List<ReservationClassComponentData>();
    List<string> SelectedInstructionsItemstmp { get; set; } = new List<string>();
    List<string> selectedlstKeyObjectives = new List<string>();
    List<string> selectedlstKeyObjectivestmp = new List<string>();
    List<string> selectedlstInstructions = new List<string>();
    List<string> selectedlstInstructionstmp = new List<string>();
    VpmSyain SyainNmItem = new VpmSyain();
    IEnumerable<CompanyChartData> SelectedCompanyItems { get; set; }
    List<CompanyChartData> tmpcompanychart = new List<CompanyChartData>();
    CompanyChartData allcompany = new CompanyChartData();
    DepartureOfficeData allbranch = new DepartureOfficeData();
    ReservationData allreservation = new ReservationData();
    Dictionary<string, string> emptyItemMessage = new Dictionary<string, string>();
    Dictionary<string, string> LangDic = new Dictionary<string, string>();
    bool PopupVisible { get; set; } = false;
    bool PopupCheckData { get; set; } = false;
    bool checkCompanyAll { get; set; } = true;
    string showSelectedCompany = "";
    bool disabledTxtKeyObjectives { get; set; } = true;
    bool disabledTxtInstructions { get; set; } = true;
    bool isSelectAllReservation = true;
    bool isFilterApply;
    string filterConditionFormName = "KU5000";
    bool CompanyEmpty = false;
    bool BranchEmpty = false;
    bool BookingEmpty = false;
    bool CompanyError = false;
    bool BranchError = false;
    string MessageCompanyError;
    string MessageBranchError;
    bool isExporting;
    #region string LocalizationInit
    string PageTitleReport;
    string FormTitle;
    string OperationDate;
    string Company;
    string VehicleDispatchOffice;
    string ReservationCategory;
    string Undelivered;
    string OutputOrder;
    string KeyObjectives;
    string Instructions;
    string Insert;
    string Preview;
    string Export;
    string SizeOfPaper;
    string Message;
    string TitlePopupViewer;
    string TitlePopupConfirm;
    string TitlePopupWarning;
    string TitlePopupInfo;
    string EmptyCompanyMessage = "";
    string EmptyBranchMessage = "";
    string EmptyBookingTypeMessage = "";
    string MessageCheckDataExist = "";
    bool CheckSelectedVehicleDispatchToAll = true;
    bool CheckSelectedReservationEndAll = true;
    bool OpenPopPreview = false;
    bool checkNullItem = false;
    protected bool IsLoading { get; set; } = true;
    string searchString = "";
    /// <summary>
    /// Initialize localization strings
    /// </summary>
    private void LocalizationInit()
    {
        PageTitleReport = Lang["PageTitle"];
        FormTitle = Lang["FormTitle"];
        OperationDate = Lang["OperationDate"];
        Company = Lang["Company"];
        VehicleDispatchOffice = Lang["VehicleDispatchOffice"];
        ReservationCategory = Lang["ReservationCategory"];
        Undelivered = Lang["Undelivered"];
        OutputOrder = Lang["OutputOrder"];
        KeyObjectives = Lang["KeyObjectives"];
        Instructions = Lang["Instructions"];
        Insert = Lang["InsertButton"];
        Preview = Lang["PreviewButton"];
        Export = Lang["ExportButton"];
        SizeOfPaper = Lang["SizeOfPaper"];
        Message = Lang["Message"];

        EmptyCompanyMessage = Lang["BI_T001"];
        EmptyBranchMessage = Lang["BI_T005"];
        EmptyBookingTypeMessage = Lang["BI_T007"];
        MessageCheckDataExist = Lang["BI_T006"];

        TitlePopupViewer = Lang["TitlePopupViewer"];
        TitlePopupConfirm = Lang["TitlePopupConfirm"];
        TitlePopupWarning = Lang["TitlePopupWarning"];
        TitlePopupInfo = Lang["TitlePopupInfo"];
        var dataLang = Lang.GetAllStrings();
        LangDic = dataLang.ToDictionary(l => l.Name, l => l.Value);
    }
    #endregion

    #region Component Lifecycle
    /// <summary>
    ///
    /// </summary>
    protected override void OnParametersSet()
    {
        JSRuntime.InvokeVoidAsync("loadPageScript", "attendanceConfirmReportPage");
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("addMaxLength", "length", 25);
    }
    protected override async Task OnInitializedAsync()
    {
        LocalizationInit();
        formContext = new EditContext(reportCondition);
        await LoadCompanyData();
        vehicledispatchofficelst = await TPM_EigyosDataService.GetAllBranchData(new ClaimModel().TenantID);
        if (vehicledispatchofficelst == null)
        {
            vehicledispatchofficelst = new List<DepartureOfficeData>();
        }
        else
        {
            vehicledispatchofficelst.Insert(0, allbranch);
        }
        reservationlst = await TPM_YoyKbnDataService.GetYoyKbnbySiyoKbn();
        ListReservationClass = await ReservationClassComponentService.GetListReservationClass();
        if (reservationlst == null)
        {
            reservationlst = new List<ReservationData>();
        }
        else
        {
            reservationlst.Insert(0, allreservation);
        }
        /*Load Undelivered Data*/
        undeliveredlst = new List<string>(){
            "出力",
            "未出力",
        };
        /*Load Output Data*/
        outputorderlst = new List<OutputOrderData>();
        outputorderlst = OutputOrderListData.OutputOrderlst;
        /*Load SizeOfPaper Data*/
        sizeofpaperlst = new List<string>(){
            "A3",
            "A4",
            "B4",
        };
        /*Load Key Objectives Data*/
        keyObjectiveslst = new List<TPM_CodeKbDataReport>();
        keyObjectiveslst = await TPM_CodeKbnService.GetdataTENKOBOMOKUHYO(new ClaimModel().TenantID);
        /*Load Instructions Data*/
        instructionslst = new List<TPM_CodeKbDataReport>();
        instructionslst = await TPM_CodeKbnService.GetdataTENKOBOSHIJI(new ClaimModel().TenantID);

        reportCondition.OutputSetting = OutputInstruction.Preview;

        SyainNmItem = await TPM_CompnyDataService.GetSyainNmBySyainCdSeq(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
        CheckDataNullFromService();
        await Task.Run(() =>
        {
            Load().Wait();
        });
        await ApplyFilter();
    }
    private async Task LoadCompanyData()
    {
        companychartlst = await TPM_CompnyDataService.GetCompanyListBox(new ClaimModel().TenantID);
        if (companychartlst == null)
        {
            companychartlst = new List<CompanyChartData>();
        }
        else
        {
            companychartlst.Insert(0, allcompany);
            SelectedCompanyItems = companychartlst;
        }
    }
    //check data
    void CheckDataNullFromService()
    {
        if (companychartlst == null || companychartlst.Count == 0)
        {
            emptyItemMessage[nameof(EmptyCompanyMessage)] = EmptyCompanyMessage;
        }
        if (vehicledispatchofficelst.Count == 0 || vehicledispatchofficelst == null)
        {
            emptyItemMessage[nameof(EmptyBranchMessage)] = EmptyBranchMessage;
        }
        if (reservationlst.Count == 0 || reservationlst == null)
        {
            emptyItemMessage[nameof(EmptyBookingTypeMessage)] = EmptyBookingTypeMessage;
        }
    }
    async Task Load()
    {
        if (emptyItemMessage.Count > 0) checkNullItem = true;
        reportCondition.OperationDate = DateTime.Today;
        if (companychartlst?.Count >= 1)
        {
            reportCondition.CompanyChartData = SelectedCompanyItems.ToList();
        }
        else
        {
            CompanyEmpty = true;
        }
        if (vehicledispatchofficelst.Count >= 1)
        {
            reportCondition.VehicleDispatchOffice1 = vehicledispatchofficelst.First();
            reportCondition.VehicleDispatchOffice2 = vehicledispatchofficelst.First();
        }
        else
        {
            BranchEmpty = true;
        }
        if (reservationlst.Count >= 1)
        {
            SelectedReservations = reservationlst;
            reportCondition.ReservationList = SelectedReservations.ToList();
        }
        else
        {
            BookingEmpty = true;
        }
        reportCondition.Undelivered = undeliveredlst.First();
        reportCondition.OutputOrder = outputorderlst.First();
        reportCondition.SizeOfPaper = sizeofpaperlst.First();
        reportCondition.TenantCdSeq = new ClaimModel().TenantID;
        reportCondition.SyainNm = SyainNmItem.SyainNm == null ? "" : SyainNmItem.SyainNm;
        if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(Date) && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()))
        {
            DateTime dateTimeConvert;
            try
            {
                dateTimeConvert = DateTime.ParseExact(Date, "yyyyMMdd", new CultureInfo("ja-JP"));
                reportCondition.OperationDate = dateTimeConvert;
                operationDate = dateTimeConvert;
                NavManager.NavigateTo("/attendanceconfirmreport", false);
                bool checkDataExist = false;
                checkDataExist = await checkDataExistInDb(reportCondition);
                if (checkDataExist)
                {
                    if (Option == OptionReport.Preview.ToString())
                    {
                        searchString = EncryptHelper.EncryptToUrl(reportCondition);
                        OpenPopPreview = true;
                    }
                    else
                    {
                        reportCondition.OutputSetting = OutputInstruction.Pdf;
                        await ExportReportAsPdf(1, "");
                    }
                }
                else
                {
                    PopupCheckData = true;
                }
            }
            catch
            {
                PopupCheckData = true;
            }
            await SaveCurrentFilter();
        }
        else
        {

        }
    }
    void OnOperationDateChanged(DateTime newDate)
    {
        operationDate = newDate;
        reportCondition.OperationDate = newDate;
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    void OnSelectedCompanyItemsChanged(IEnumerable<CompanyChartData> selectedCompanyItems)
    {
        SelectedCompanyItems = selectedCompanyItems;
        if (SelectedCompanyItems.Count() == 0)
        {
            showSelectedCompany = "選択項目：0";
        }
        else if (SelectedCompanyItems.Count() == 1)
        {
            foreach (var item in SelectedCompanyItems)
            {
                showSelectedCompany = item.Text;
            }
        }
        else if (SelectedCompanyItems.Count() > 1 && SelectedCompanyItems.Count() < companychartlst.Count())
        {
            showSelectedCompany = "選択項目：" + SelectedCompanyItems.Count().ToString();
        }
        else if (SelectedCompanyItems.Count() == companychartlst.Count())
        {
            showSelectedCompany = "すべて";
        }

        if (!isFilterApply)
        {
            if (checkCompanyAll == true && !SelectedCompanyItems.Contains(allcompany))
            {
                SelectedCompanyItems = SelectedCompanyItems.Take(0);
                checkCompanyAll = false;
            }
            if (checkCompanyAll == false && (SelectedCompanyItems.Contains(allcompany) || (!SelectedCompanyItems.Contains(allcompany)
                && SelectedCompanyItems.Count() == companychartlst.Count() - 1)))
            {
                SelectedCompanyItems = companychartlst;
                checkCompanyAll = true;
            }
            if (checkCompanyAll == true && SelectedCompanyItems.Contains(allcompany)
                && SelectedCompanyItems.Count() < companychartlst.Count())
            {
                SelectedCompanyItems = SelectedCompanyItems.Where(t => t.CompanyCdSeq != allcompany.CompanyCdSeq);
                checkCompanyAll = false;
            }
        }

        reportCondition.CompanyChartData = SelectedCompanyItems.ToList();
        vehicledispatchofficelst = TPM_EigyosDataService.GetBranchDataByIdCompany(reportCondition.CompanyChartData, new ClaimModel().TenantID);
        vehicledispatchofficelst.Insert(0, allbranch);

        if (!isFilterApply)
        {
            reportCondition.VehicleDispatchOffice1 = vehicledispatchofficelst.First();
            reportCondition.VehicleDispatchOffice2 = vehicledispatchofficelst.First();
        }

        isFilterApply = false;
        formContext.Validate();
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }
    void OnVehicleDispatchOffice1Changed(DepartureOfficeData departureOffice)
    {
        if (!isFilterApply && departureOffice.EigyoCdSeq == 0)
        {
            reportCondition.VehicleDispatchOffice1 = departureOffice ?? new DepartureOfficeData();
            //reportCondition.VehicleDispatchOffice2 = departureOffice ?? new DepartureOfficeData();
            CheckSelectedVehicleDispatchToAll = true;
        }
        else
        {
            CheckSelectedVehicleDispatchToAll = false;
            reportCondition.VehicleDispatchOffice1 = departureOffice ?? new DepartureOfficeData();
        }
        formContext.Validate();
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    void OnVehicleDispatchOffice2Changed(DepartureOfficeData departureOffice)
    {
        if (!isFilterApply && departureOffice.EigyoCdSeq == 0)
        {
            //reportCondition.VehicleDispatchOffice1 = departureOffice ?? new DepartureOfficeData();
            reportCondition.VehicleDispatchOffice2 = departureOffice ?? new DepartureOfficeData();
            CheckSelectedVehicleDispatchToAll = true;
        }
        else
        {
            reportCondition.VehicleDispatchOffice2 = departureOffice ?? new DepartureOfficeData();
        }
        formContext.Validate();
        if (!isFilterApply) InvokeAsync(StateHasChanged);
    }

    void OnUndeliveredChanged(string newValue)
    {
        reportCondition.Undelivered = newValue;
        InvokeAsync(StateHasChanged);
    }

    void OnOutputOrderChanged(OutputOrderData order)
    {
        reportCondition.OutputOrder = order;
        InvokeAsync(StateHasChanged);
    }

    void OnSizeOfPaperChanged(string newValue)
    {
        reportCondition.SizeOfPaper = newValue;
        InvokeAsync(StateHasChanged);
    }

    void OnTxtKeyObjectivesChange(string newValue)
    {
        if (string.IsNullOrEmpty(newValue))
        {
            disabledTxtKeyObjectives = true;
        }
        else if (!string.IsNullOrEmpty(newValue) && newValue.Length <= 25)
        {
            disabledTxtKeyObjectives = false;
        }
        reportCondition.TxtKeyObjectives = newValue;
        InvokeAsync(StateHasChanged);
    }

    void OnTxtInstructionsChange(string newValue)
    {
        if (string.IsNullOrEmpty(newValue))
        {
            disabledTxtInstructions = true;
        }
        else if (!string.IsNullOrEmpty(newValue) && newValue.Length <= 25)
        {
            disabledTxtInstructions = false;
        }
        reportCondition.TxtInstructions = newValue;
        InvokeAsync(StateHasChanged);
    }
    #endregion

    /// <summary>
    ///
    /// </summary>
    private void HandleValidSubmit()
    {
        bool isValid = formContext.Validate();
        if (isValid)
        {
            try
            {
                var client = new HttpClient();

            }
            catch
            {
            }
        }
        // To do
    }
    void OnBookingFromSelectedChanged(ReservationClassComponentData value)
    {
        reportCondition.BookingTypeFrom = value;
        if (!isFilterApply) StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    void OnBookingToSelectedChanged(ReservationClassComponentData value)
    {
        reportCondition.BookingTypeTo = value;
        if (!isFilterApply) StateHasChanged();
    }


    /// <summary>
    /// add item KeyObjectives (重点目標)
    /// </summary>
    private async Task OnAddTxtKeyObjectives()
    {
        if (selectedlstKeyObjectives.Count() >= 5)
        {
            PopupVisible = true;
        }
        else
        {
            if (!String.IsNullOrEmpty(reportCondition.TxtKeyObjectives) &&
                !selectedlstKeyObjectives.Contains(reportCondition.TxtKeyObjectives) && reportCondition.TxtKeyObjectives.Length <= 25)
            {
                selectedlstKeyObjectives.Add(reportCondition.TxtKeyObjectives);
                selectedlstKeyObjectivestmp.Add(reportCondition.TxtKeyObjectives);
                reportCondition.TxtKeyObjectives = "";
                disabledTxtKeyObjectives = true;
            }
        }
        reportCondition.KeyObjectivesList = selectedlstKeyObjectives;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// add item Instructions (指示事項)
    /// </summary>
    private async Task OnAddTxtInstructions()
    {
        if (selectedlstInstructions.Count() >= 5)
        {
            PopupVisible = true;
        }
        else
        {
            if (!String.IsNullOrEmpty(reportCondition.TxtInstructions) && !selectedlstInstructions.Contains(reportCondition.TxtInstructions) && reportCondition.TxtInstructions.Length <= 25)
            {
                selectedlstInstructions.Add(reportCondition.TxtInstructions);
                selectedlstInstructionstmp.Add(reportCondition.TxtInstructions);
                reportCondition.TxtInstructions = "";
                disabledTxtInstructions = true;
            }
        }
        reportCondition.InstructionsList = selectedlstInstructions;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// selected item KeyObjectives (重点目標)
    /// </summary>
    /// <param name="selectedItems"></param>
    private async void OnSelectedKeyObjectivesChanged(IEnumerable<TPM_CodeKbDataReport> selectedItems)

    {
        //SelectedCompanyItems = companychartlst.Where(c => comIdList.Contains(c.CompanyCdSeq));
        if (selectedlstKeyObjectives.Count >= 5 && selectedItems.Count() > SelectedKeyObjectivesItems.Count())
        {
            SelectedKeyObjectivesItems.ToList().Clear();
            keyObjectiveslst = await TPM_CodeKbnService.GetdataTENKOBOMOKUHYO(new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            var comIdList = SelectedKeyObjectivesItems.Select(c => c.CodeKb_CodeKbnSeq).ToList();
            SelectedKeyObjectivesItems = keyObjectiveslst.Where(c => comIdList.Contains(c.CodeKb_CodeKbnSeq));
            selectedItems = keyObjectiveslst.Where(c => comIdList.Contains(c.CodeKb_CodeKbnSeq));
            ValueExpress = keyObjectiveslst.Where(c => comIdList.Contains(c.CodeKb_CodeKbnSeq));
            PopupVisible = true;
            // SelectedKeyObjectivesItems = keyObjectiveslst.Where(x => SelectedKeyObjectivesItems.Select(x => x.CodeKb_CodeKbnSeq).ToArray().Contains(x.CodeKb_CodeKbnSeq));
            // selectedItems = selectedItems.Where(x => x.CodeKb_CodeKbnSeq != selectedItems.Last().CodeKb_CodeKbnSeq).ToList();
        }
        else
        {
            // start check Item same
            List<TPM_CodeKbDataReport> Tmp = new List<TPM_CodeKbDataReport>();
            List<TPM_CodeKbDataReport> TmpTheSame = new List<TPM_CodeKbDataReport>();
            Tmp = selectedItems.ToList();
            if (selectedItems.Count() > 1)
            {
                int countTmp = selectedItems.Count();
                for (int i = 0; i < countTmp; i++)
                {
                    for (int j = i + 1; j < countTmp; j++)
                    {
                        if (Tmp[i].CodeKb_CodeKbnNm == Tmp[j].CodeKb_CodeKbnNm)
                        {
                            TmpTheSame.Add(Tmp[j]);
                        }
                    }
                }
                if (TmpTheSame.Count >= 1)
                {
                    for (int k = 0; k < TmpTheSame.Count; k++)
                    {
                        selectedItems = selectedItems.Where(x => x.CodeKb_CodeKbnSeq != TmpTheSame[k].CodeKb_CodeKbnSeq).ToList();
                    }
                }
            }
            //end  check Item same
            if (selectedlstKeyObjectives.Count() >= 5 && selectedItems.Count() > 5)
            {
                PopupVisible = true;
                SelectedKeyObjectivesItems = SelectedKeyObjectivesItems.Where(x => x.CodeKb_CodeKbnSeq != selectedItems.Last().CodeKb_CodeKbnSeq).ToList();
                selectedItems = selectedItems.Where(x => x.CodeKb_CodeKbnSeq != selectedItems.Last().CodeKb_CodeKbnSeq).ToList();
            }
            else
            {
                SelectedKeyObjectivesItems = selectedItems;
                SelectedKeyObjectivesItemstmp = new List<string>();
                foreach (var item in SelectedKeyObjectivesItems)
                {
                    SelectedKeyObjectivesItemstmp.Add(item.CodeKb_CodeKbnNm);
                    if (!selectedlstKeyObjectives.Contains(item.CodeKb_CodeKbnNm))
                    {
                        selectedlstKeyObjectives.Add(item.CodeKb_CodeKbnNm);
                    }

                }
            }
            IEnumerable<string> tmp = SelectedKeyObjectivesItemstmp.Union(selectedlstKeyObjectivestmp);
            foreach (string item in selectedlstKeyObjectives)
            {
                if (!tmp.Contains(item))
                {
                    selectedlstKeyObjectives.Remove(item);
                    break;
                }
            }
        }
        reportCondition.KeyObjectivesList = selectedlstKeyObjectives;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// selected item Instructions (指示事項)
    /// </summary>
    /// <param name="selectedItems"></param>
    private async void OnSelectedInstructionsChanged(IEnumerable<TPM_CodeKbDataReport> selectedItems)
    {
        if (selectedlstInstructions.Count >= 5 && selectedItems.Count() > SelectedInstructionsItems.Count())
        {
            SelectedInstructionsItems.ToList().Clear();
            instructionslst = await TPM_CodeKbnService.GetdataTENKOBOSHIJI(new HassyaAllrightCloud.Domain.Dto.ClaimModel().TenantID);
            var comIdList = SelectedInstructionsItems.Select(c => c.CodeKb_CodeKbnSeq).ToList();
            SelectedInstructionsItems = instructionslst.Where(c => comIdList.Contains(c.CodeKb_CodeKbnSeq));
            selectedItems = instructionslst.Where(c => comIdList.Contains(c.CodeKb_CodeKbnSeq));
            ValueExpressInstruct = instructionslst.Where(c => comIdList.Contains(c.CodeKb_CodeKbnSeq));
            PopupVisible = true;
            /*PopupVisible = true;
            SelectedInstructionsItems = SelectedInstructionsItems.Where(x => x.CodeKb_CodeKbnSeq != selectedItems.Last().CodeKb_CodeKbnSeq).ToList();
            selectedItems = selectedItems.Where(x => x.CodeKb_CodeKbnSeq != selectedItems.Last().CodeKb_CodeKbnSeq).ToList();*/
        }
        else
        {
            List<TPM_CodeKbDataReport> Tmp = new List<TPM_CodeKbDataReport>();
            List<TPM_CodeKbDataReport> TmpTheSame = new List<TPM_CodeKbDataReport>();
            Tmp = selectedItems.ToList();
            if (selectedItems.Count() > 1)
            {
                int countTmp = selectedItems.Count();
                for (int i = 0; i < countTmp; i++)
                {
                    for (int j = i + 1; j < countTmp; j++)
                    {
                        if (Tmp[i].CodeKb_CodeKbnNm == Tmp[j].CodeKb_CodeKbnNm)
                        {
                            TmpTheSame.Add(Tmp[j]);
                        }
                    }
                }
                if (TmpTheSame.Count >= 1)
                {
                    for (int k = 0; k < TmpTheSame.Count; k++)
                    {
                        selectedItems = selectedItems.Where(x => x.CodeKb_CodeKbnSeq != TmpTheSame[k].CodeKb_CodeKbnSeq).ToList();
                    }
                }
            }

            if (selectedlstInstructions.Count() >= 5 && selectedItems.Count() > 5)
            {
                PopupVisible = true;

                SelectedInstructionsItems = SelectedInstructionsItems.Where(x => x.CodeKb_CodeKbnSeq != selectedItems.Last().CodeKb_CodeKbnSeq).ToList();
                selectedItems = selectedItems.Where(x => x.CodeKb_CodeKbnSeq != selectedItems.Last().CodeKb_CodeKbnSeq).ToList();
            }
            else
            {
                SelectedInstructionsItems = selectedItems;
                SelectedInstructionsItemstmp = new List<string>();
                foreach (var item in SelectedInstructionsItems)
                {
                    SelectedInstructionsItemstmp.Add(item.CodeKb_CodeKbnNm);

                    if (!selectedlstInstructions.Contains(item.CodeKb_CodeKbnNm))
                    {
                        selectedlstInstructions.Add(item.CodeKb_CodeKbnNm);

                    }
                }
            }
            IEnumerable<string> tmp = SelectedInstructionsItemstmp.Union(selectedlstInstructionstmp);
            foreach (string item in selectedlstInstructions)
            {
                if (!tmp.Contains(item))
                {
                    selectedlstInstructions.Remove(item);
                    break;
                }
            }
        }
        reportCondition.InstructionsList = selectedlstInstructions;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// remove item KeyObjectives (重点目標) both listbox and list report
    /// </summary>
    /// <param name="selectedItems"></param>
    private async Task OnRemoveSelectedKeyObjectives(string selectedItems)
    {
        if (selectedlstKeyObjectives.Contains(selectedItems))
        {
            // remove in list
            selectedlstKeyObjectives.Remove(selectedItems);
            selectedlstKeyObjectivestmp.Remove(selectedItems);
            // remove in listbox
            foreach (var item in SelectedKeyObjectivesItems)
            {
                if (item.CodeKb_CodeKbnNm == selectedItems)
                {
                    SelectedKeyObjectivesItems = SelectedKeyObjectivesItems.Where(t => t.CodeKb_CodeKbnNm != selectedItems);
                }
            }
        }
        reportCondition.KeyObjectivesList = selectedlstKeyObjectives;
        StateHasChanged();
    }

    /// <summary>
    /// Remove item Instructions (指示事項)
    /// </summary>
    /// <param name="selectedItems"></param>
    private async Task OnRemoveSelectedInstructions(string selectedItems)
    {
        if (selectedlstInstructions.Contains(selectedItems))
        {
            // remove in list
            selectedlstInstructions.Remove(selectedItems);
            selectedlstInstructionstmp.Remove(selectedItems);
            // remove in listbox
            foreach (var item in SelectedInstructionsItems)
            {
                if (item.CodeKb_CodeKbnNm == selectedItems)
                {
                    SelectedInstructionsItems = SelectedInstructionsItems.Where(t => t.CodeKb_CodeKbnNm != selectedItems);
                }
            }
        }
        reportCondition.InstructionsList = selectedlstInstructions;
        await InvokeAsync(StateHasChanged);
    }
    async void OpenPopupPreview()
    {
        await SaveCurrentFilter();
        bool checkDataExist = false;
        checkDataExist = await checkDataExistInDb(reportCondition);
        if (checkDataExist)
        {
            searchString = EncryptHelper.EncryptToUrl(reportCondition);
            OpenPopPreview = true;
        }
        else
        {
            PopupCheckData = true;
        }
        StateHasChanged();
    }

    async Task ExportReportAsPdf(int printMode, string uri)
    {
        var data = await TenkokirokuReportService.GetPDFData(reportCondition);
        if (data.Count > 0)
        {
            var report = await _reportLayoutSettingService.GetCurrentTemplate(ReportIdForSetting.Attendanceconfirmreport, BaseNamespace.Attendanceconfirmreport, new ClaimModel().TenantID, new ClaimModel().EigyoCdSeq,
    reportCondition.SizeOfPaper == "A3" ? (byte)PageSize.A3 : reportCondition.SizeOfPaper == "A4" ? (byte)PageSize.A4 : reportCondition.SizeOfPaper == "B4" ? (byte)PageSize.B4 : (byte)0);
            report.DataSource = data;
            await new System.Threading.Tasks.TaskFactory().StartNew(() =>
            {
                string fileType = "";
                report.CreateDocument();
                using (MemoryStream ms = new MemoryStream())
                {
                    /*if (type == 1)
                    {
                        PrintToolBase tool = new PrintToolBase(report.PrintingSystem);
                        tool.Print();
                        return;
                    }*/
                    report.ExportToPdf(ms);
                    byte[] exportedFileBytes = ms.ToArray();
                    string myExportString = Convert.ToBase64String(exportedFileBytes);
                    fileType = "pdf";
                    JSRuntime.InvokeVoidAsync("downloadFileClientSide", myExportString, fileType, "Tenkokiroku");
                }
            });
        }
    }

    /// <summary>
    /// remove disable button Insert TxtKeyObjectives when keypress textbox
    /// </summary>
    void enabledInsertTxtKeyObjectives()
    {
        disabledTxtKeyObjectives = false;
    }

    async void DownLoadReport()
    {
        await SaveCurrentFilter();
        bool checkDataExist = false;
        checkDataExist = await checkDataExistInDb(reportCondition);
        if (checkDataExist)
        {
            await ExportReportAsPdf(1, "");
        }
        else
        {
            PopupCheckData = true;
        }
        StateHasChanged();
    }
    async Task<bool> checkDataExistInDb(AttendanceConfirmReportData attendanceConfirmReportData)
    {
        //List<AttendanceConfirmReportData> attendanceConfirmDataList = new List<AttendanceConfirmReportData>();
        List<AttendanceConfirmReportPDF> attendanceConfirmDataList = new List<AttendanceConfirmReportPDF>();
        attendanceConfirmDataList = await TenkokirokuReportService.GetPDFData(attendanceConfirmReportData);
        if (attendanceConfirmDataList.Count == 0 || attendanceConfirmDataList == null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private async Task SaveCurrentFilter()
    {
        await FilterServices.SaveCustomFilterAndConditions(GetFieldValues(), filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq);
    }

    private async Task ApplyFilter()
    {
        var filterValues = (await FilterServices.GetFilterCondition(filterConditionFormName, new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq)).ToDictionary(inp => inp.ItemNm, inp => inp.JoInput).ConvertMultipleToSingleValues();
        if (filterValues.Count > 0)
        {
            isFilterApply = true;
            if (string.IsNullOrEmpty(Option) && string.IsNullOrEmpty(Date))
            {
                TenkokirokuReportService.ApplyFilter(ref reportCondition, companychartlst, vehicledispatchofficelst, ListReservationClass, outputorderlst, filterValues);
            }
            OnOperationDateChanged(reportCondition.OperationDate);
            var comIdList = reportCondition.CompanyChartData.Select(c => c.CompanyCdSeq).ToList();
            SelectedCompanyItems = companychartlst.Where(c => comIdList.Contains(c.CompanyCdSeq));
            reportCondition.CompanyChartData = SelectedCompanyItems.ToList();
            vehicledispatchofficelst = TPM_EigyosDataService.GetBranchDataByIdCompany(reportCondition.CompanyChartData, new ClaimModel().TenantID);
            vehicledispatchofficelst.Insert(0, allbranch);
            checkCompanyAll = reportCondition.CompanyChartData.Count == companychartlst.Count;
            OnBookingFromSelectedChanged(reportCondition.BookingTypeFrom);
            OnBookingToSelectedChanged(reportCondition.BookingTypeTo);
            OnVehicleDispatchOffice1Changed(vehicledispatchofficelst.SingleOrDefault(c => c.EigyoCdSeq == reportCondition.VehicleDispatchOffice1.EigyoCdSeq));
            OnVehicleDispatchOffice2Changed(vehicledispatchofficelst.SingleOrDefault(c => c.EigyoCdSeq == reportCondition.VehicleDispatchOffice2.EigyoCdSeq));
            selectedlstKeyObjectives = SetValueIsNotStringEmpty(reportCondition.KeyObjectivesList);
            selectedlstKeyObjectivestmp = SetListStringNew(reportCondition.KeyObjectivesList);
            selectedlstInstructions = SetValueIsNotStringEmpty(reportCondition.InstructionsList);
            selectedlstInstructionstmp = SetListStringNew(reportCondition.InstructionsList);
            //OnSelectedReservationsChanged(reservationlst.Where(c => reportCondition.ReservationList.Select(_ => _.YoyaKbnSeq).Contains(c.YoyaKbnSeq)));
            //isSelectAllReservation = reportCondition.ReservationList.Count == reservationlst.Count;
            OnBookingFromSelectedChanged(reportCondition.BookingTypeFrom);
            OnBookingToSelectedChanged(reportCondition.BookingTypeTo);
            if (!string.IsNullOrEmpty(Option) && !string.IsNullOrEmpty(Date) && (Option == OptionReport.Preview.ToString() || Option == OptionReport.Download.ToString()))
            {
                DateTime dateTimeConvert;
                try
                {
                    dateTimeConvert = DateTime.ParseExact(Date, "yyyyMMdd", new CultureInfo("ja-JP"));
                    reportCondition.OperationDate = dateTimeConvert;
                    operationDate = dateTimeConvert;
                }
                catch (Exception ex)
                {

                }
            }
            // StateHasChanged() will execute OnSelectedCompanyItemsChanged() => set IsFilterApply = false in that
            //isFilterApply = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    public List<string> SetListStringNew(List<string> listStringValue)
    {
        List<string> result = new List<string>();
        if (listStringValue.Any())
        {
            foreach (var item in listStringValue)
            {
                string temp = string.Empty;
                temp = item;
                result.Add(temp);
            }
        }
        return result;

    }
    public List<string> SetValueIsNotStringEmpty(List<string> listStringValue)
    {
        List<string> result = new List<string>();
        foreach (var item in listStringValue)
        {
            if (!string.IsNullOrEmpty(item) && !string.IsNullOrWhiteSpace(item))

            {
                result.Add(item);
            }
        }
        return result;
    }
    private Dictionary<string, string> GetFieldValues()
    {
        var result = new Dictionary<string, string>();
        result = TenkokirokuReportService.GetFieldValues(reportCondition);
        return result;
    }

    protected void OnSelectedReservationsChanged(IEnumerable<ReservationData> reservationDatas)
    {
        SelectedReservations = reservationDatas;
        Func<ReservationData, bool> reserKeySelectorAll = r => r.YoyaKbnSeq == 0;

        if (!isFilterApply)
        {
            if (isSelectAllReservation == true && !SelectedReservations.Any(reserKeySelectorAll))
            {
                SelectedReservations = SelectedReservations.Take(0);
                isSelectAllReservation = false;
            }
            if (isSelectAllReservation == false && (SelectedReservations.Any(reserKeySelectorAll) || (!SelectedReservations.Any(reserKeySelectorAll)
                && SelectedReservations.Count() == reservationlst.Count() - 1)))
            {
                SelectedReservations = reservationlst;
                isSelectAllReservation = true;
            }
            if (isSelectAllReservation == true && SelectedReservations.Any(reserKeySelectorAll)
                && SelectedReservations.Count() < reservationlst.Count())
            {
                SelectedReservations = SelectedReservations.Where(r => r.YoyaKbnSeq != 0);
                isSelectAllReservation = false;
            }
        }
        reportCondition.ReservationList = SelectedReservations.ToList();

        if (!isFilterApply) StateHasChanged();
    }

    protected string GetSelectedReservationText()
    {
        string result = string.Empty;
        if (SelectedReservations.Count() == 1)
        {
            result = SelectedReservations.First().Text;
        }
        else if (SelectedReservations.Count() == reservationlst.Count())
        {
            result = "すべて";
        }
        else
        {
            result = "選択項目：" + SelectedReservations.Count();
        }
        return result;
    }
    protected string GetSelectedCompanyText()
    {
        string result = string.Empty;
        if (SelectedCompanyItems.Count() == 1)
        {
            result = SelectedCompanyItems.First().Text;
        }
        else if (SelectedCompanyItems.Count() == companychartlst.Count())
        {
            result = "すべて";
        }
        else
        {
            result = "選択項目：" + SelectedCompanyItems.Count();
        }
        return result;
    }
    //Preview direct page. BTN Submit click
    async void BtnSubmitClick()
    {
        try
        {
            if (formContext.Validate())
            {
                isExporting = true;
                //LoadReservationList();
                await SaveCurrentFilter();
                bool checkDataExist = false;
                checkDataExist = await checkDataExistInDb(reportCondition);
                if (checkDataExist)
                {
                    if (reportCondition.OutputSetting == OutputInstruction.Preview)
                    {
                        AttendanceConfirmReportDataUri = SetValueUri(reportCondition);
                        string baseUrl = AppSettingsService.GetBaseUrl();
                        searchString = EncryptHelper.EncryptToUrl(AttendanceConfirmReportDataUri);
                        string url = baseUrl + "/attendanceconfirmreportPreview";
                        url = url + string.Format("/?SearchString={0}", searchString);
                        JSRuntime.InvokeVoidAsync("open", url, "_blank");
                        isExporting = false;
                    }
                    else if (reportCondition.OutputSetting == OutputInstruction.Pdf)
                    {
                        await ExportReportAsPdf(1, "").ContinueWith(t => isExporting = false); ;
                    }
                }
                else
                {
                    isExporting = false;
                    PopupCheckData = true;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

        }

    }
    private AttendanceConfirmReportDataUri SetValueUri(AttendanceConfirmReportData data)
    {
        var result = new AttendanceConfirmReportDataUri();
        result.OperationDate = data.OperationDate;
        result.CompanyChartDataID = string.Join('-', data.CompanyChartData.Select(_ => _.CompanyCdSeq));
        result.ReservationListID = string.Join('-', data.ReservationList.Select(_ => _.YoyaKbnSeq));
        result.VehicleDispatchOffice1 = data.VehicleDispatchOffice1;
        result.VehicleDispatchOffice2 = data.VehicleDispatchOffice2;
        result.Undelivered = data.Undelivered;
        result.OutputOrder = data.OutputOrder;
        result.SizeOfPaper = data.SizeOfPaper;
        result.TxtInstructions = data.TxtInstructions;
        result.TxtKeyObjectives = data.TxtKeyObjectives;
        result.KeyObjectivesList = data.KeyObjectivesList;
        result.InstructionsList = data.InstructionsList;
        result.TenantCdSeq = data.TenantCdSeq;
        result.SyainNm = data.SyainNm;
        result.DateTimeFooter = data.DateTimeFooter;
        result.BookingTypeFrom = data.BookingTypeFrom;
        result.BookingTypeTo = data.BookingTypeTo;
        return result;
    }

    async void ResetForm()
    {
        reportCondition.OutputSetting = OutputInstruction.Preview;
        operationDate = DateTime.Today;
        reportCondition.OperationDate = DateTime.Today;
        SelectedCompanyItems = companychartlst;
        reportCondition.CompanyChartData = SelectedCompanyItems.ToList();
        reportCondition.VehicleDispatchOffice1 = vehicledispatchofficelst.First();
        reportCondition.VehicleDispatchOffice2 = vehicledispatchofficelst.First();
        SelectedReservations = reservationlst;
        reportCondition.ReservationList = SelectedReservations.ToList();
        reportCondition.Undelivered = undeliveredlst.First();
        reportCondition.OutputOrder = outputorderlst.First();
        reportCondition.SizeOfPaper = sizeofpaperlst.First();
        reportCondition.TenantCdSeq = new ClaimModel().TenantID;
        reportCondition.SyainNm = SyainNmItem.SyainNm == null ? "" : SyainNmItem.SyainNm;
        reportCondition.BookingTypeFrom = null;
        reportCondition.BookingTypeTo = null;
        selectedlstKeyObjectives.Clear();
        selectedlstInstructions.Clear();
        SelectedKeyObjectivesItems = new List<TPM_CodeKbDataReport>();
        SelectedKeyObjectivesItemstmp = new List<string>();
        SelectedInstructionsItems = new List<TPM_CodeKbDataReport>();
        SelectedInstructionsItemstmp = new List<string>();
        selectedlstKeyObjectivestmp = new List<string>();
        selectedlstInstructionstmp = new List<string>();
        checkCompanyAll = true;
        // await FilterServices.DeleteCustomFilter(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq,1, filterConditionFormName, filterConditionFormName);
        await FilterServices.DeleteCustomFilerCondition(new HassyaAllrightCloud.Domain.Dto.ClaimModel().SyainCdSeq, 1, filterConditionFormName);
        formContext = new EditContext(reportCondition);
        StateHasChanged();
    }
    //void LoadReservationList()
    //{
    //    ReservationData bookingfrom = new ReservationData();
    //    if (reportCondition.BookingTypeFrom.YoyaKbnSeq > 0)
    //    {
    //        bookingfrom = reportCondition.BookingTypeFrom;
    //    }
    //    else
    //    {
    //        bookingfrom = reservationlst.FirstOrDefault();
    //    }
    //    ReservationData bookingto = new ReservationData();
    //    if (reportCondition.BookingTypeTo.YoyaKbnSeq > 0)
    //    {
    //        bookingto = reportCondition.BookingTypeTo;
    //    }
    //    else
    //    {
    //        bookingto = reservationlst.LastOrDefault();
    //    }
    //    reportCondition.ReservationList = YoyKbnHelper.GetListYoyKbnFromTo(bookingfrom, bookingto, reservationlst);
    //    checkNullItem = false;
    //    if (reportCondition.ReservationList.Count() == 0)
    //    {
    //        checkNullItem = true;
    //    }
    //}
}